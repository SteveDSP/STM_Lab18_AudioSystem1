
STM_Lab18_AudioSystem1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d54  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc0  08012f58  08012f58  00013f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014f18  08014f18  00130437  2**0
                  CONTENTS
  4 .ARM          00000008  08014f18  08014f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014f20  08014f20  00130437  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014f20  08014f20  00015f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014f28  08014f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08014f2c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006aac  20000100  0801502c  00016100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006bac  0801502c  00016bac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00130437  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 00119437  90000000  90000000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .debug_info   0003704d  00000000  00000000  00130465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007b73  00000000  00000000  001674b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b28  00000000  00000000  0016f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002150  00000000  00000000  00171b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003dd80  00000000  00000000  00173ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c1b5  00000000  00000000  001b1a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00144c81  00000000  00000000  001edbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00332856  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bfbc  00000000  00000000  0033289c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0033e858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000100 	.word	0x20000100
 800021c:	00000000 	.word	0x00000000
 8000220:	08012f3c 	.word	0x08012f3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000104 	.word	0x20000104
 800023c:	08012f3c 	.word	0x08012f3c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <UpdateObjects>:
uint16_t previousTimep = 0;


//Coeff update funtion

void UpdateObjects(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0


	 myTremoloL.setDepth(coeffOne); //Interestign effect if you mod Depth of only one side. :)
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <UpdateObjects+0x48>)
 80005d6:	edd3 7a00 	vldr	s15, [r3]
 80005da:	eeb0 0a67 	vmov.f32	s0, s15
 80005de:	480f      	ldr	r0, [pc, #60]	@ (800061c <UpdateObjects+0x4c>)
 80005e0:	f000 f987 	bl	80008f2 <_ZN9TREMBlock8setDepthEf>
	 myTremoloR.setDepth(coeffOne);
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <UpdateObjects+0x48>)
 80005e6:	edd3 7a00 	vldr	s15, [r3]
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	480c      	ldr	r0, [pc, #48]	@ (8000620 <UpdateObjects+0x50>)
 80005f0:	f000 f97f 	bl	80008f2 <_ZN9TREMBlock8setDepthEf>

	 myTremoloL.setRate(coeffTwo);
 80005f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <UpdateObjects+0x54>)
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eeb0 0a67 	vmov.f32	s0, s15
 80005fe:	4807      	ldr	r0, [pc, #28]	@ (800061c <UpdateObjects+0x4c>)
 8000600:	f000 f968 	bl	80008d4 <_ZN9TREMBlock7setRateEf>
	 myTremoloR.setRate(coeffTwo);
 8000604:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <UpdateObjects+0x54>)
 8000606:	edd3 7a00 	vldr	s15, [r3]
 800060a:	eeb0 0a67 	vmov.f32	s0, s15
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <UpdateObjects+0x50>)
 8000610:	f000 f960 	bl	80008d4 <_ZN9TREMBlock7setRateEf>



}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000004 	.word	0x20000004
 800061c:	2000011c 	.word	0x2000011c
 8000620:	20000138 	.word	0x20000138
 8000624:	20000008 	.word	0x20000008

08000628 <AudioProcess>:

//Main CPP based audio processing loop

void AudioProcess(int16_t *pbuffer1, int16_t *pbuffer2, uint16_t BlockSize){
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	4613      	mov	r3, r2
 8000634:	80fb      	strh	r3, [r7, #6]
	 */

    // Tremolo


	for (uint16_t i = 0; i < BlockSize; i+=4){ //hop over right bytes because we will process in twos
 8000636:	2300      	movs	r3, #0
 8000638:	83fb      	strh	r3, [r7, #30]
 800063a:	e052      	b.n	80006e2 <AudioProcess+0xba>


		float audio_in, audio_out; //working reg
    	audio_in  = INT16_TO_FLOAT * pbuffer2[i];
 800063c:	8bfb      	ldrh	r3, [r7, #30]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	4413      	add	r3, r2
 8000644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000648:	ee07 3a90 	vmov	s15, r3
 800064c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000650:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80006f4 <AudioProcess+0xcc>
 8000654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000658:	edc7 7a06 	vstr	s15, [r7, #24]
    	audio_out = myTremoloL.process(audio_in);
 800065c:	ed97 0a06 	vldr	s0, [r7, #24]
 8000660:	4825      	ldr	r0, [pc, #148]	@ (80006f8 <AudioProcess+0xd0>)
 8000662:	f000 f895 	bl	8000790 <_ZN9TREMBlock7processEf>
 8000666:	ed87 0a05 	vstr	s0, [r7, #20]

    	pbuffer1[i] = (int16_t)(audio_out*32768.0f); //convert back
 800066a:	edd7 7a05 	vldr	s15, [r7, #20]
 800066e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80006fc <AudioProcess+0xd4>
 8000672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000676:	8bfb      	ldrh	r3, [r7, #30]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	4413      	add	r3, r2
 800067e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000682:	ee17 2a90 	vmov	r2, s15
 8000686:	b212      	sxth	r2, r2
 8000688:	801a      	strh	r2, [r3, #0]

    	//This gives right

    	audio_in  = INT16_TO_FLOAT * pbuffer2[i+2];
 800068a:	8bfb      	ldrh	r3, [r7, #30]
 800068c:	3302      	adds	r3, #2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	68ba      	ldr	r2, [r7, #8]
 8000692:	4413      	add	r3, r2
 8000694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80006f4 <AudioProcess+0xcc>
 80006a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006a8:	edc7 7a06 	vstr	s15, [r7, #24]
    	audio_out = myTremoloR.process(audio_in);
 80006ac:	ed97 0a06 	vldr	s0, [r7, #24]
 80006b0:	4813      	ldr	r0, [pc, #76]	@ (8000700 <AudioProcess+0xd8>)
 80006b2:	f000 f86d 	bl	8000790 <_ZN9TREMBlock7processEf>
 80006b6:	ed87 0a05 	vstr	s0, [r7, #20]

    	pbuffer1[i+2] = (int16_t)(audio_out*32768.0f); //convert back
 80006ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80006be:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80006fc <AudioProcess+0xd4>
 80006c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c6:	8bfb      	ldrh	r3, [r7, #30]
 80006c8:	3302      	adds	r3, #2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d4:	ee17 2a90 	vmov	r2, s15
 80006d8:	b212      	sxth	r2, r2
 80006da:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < BlockSize; i+=4){ //hop over right bytes because we will process in twos
 80006dc:	8bfb      	ldrh	r3, [r7, #30]
 80006de:	3304      	adds	r3, #4
 80006e0:	83fb      	strh	r3, [r7, #30]
 80006e2:	8bfa      	ldrh	r2, [r7, #30]
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d3a8      	bcc.n	800063c <AudioProcess+0x14>
    }


}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	38000000 	.word	0x38000000
 80006f8:	2000011c 	.word	0x2000011c
 80006fc:	47000000 	.word	0x47000000
 8000700:	20000138 	.word	0x20000138

08000704 <_Z41__static_initialization_and_destruction_0ii>:
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d10a      	bne.n	800072a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800071a:	4293      	cmp	r3, r2
 800071c:	d105      	bne.n	800072a <_Z41__static_initialization_and_destruction_0ii+0x26>
TREMBlock myTremoloL; //
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000720:	f000 f814 	bl	800074c <_ZN9TREMBlockC1Ev>
TREMBlock myTremoloR; //
 8000724:	4804      	ldr	r0, [pc, #16]	@ (8000738 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000726:	f000 f811 	bl	800074c <_ZN9TREMBlockC1Ev>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000011c 	.word	0x2000011c
 8000738:	20000138 	.word	0x20000138

0800073c <_GLOBAL__sub_I_myTremoloL>:
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
 8000740:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff ffdd 	bl	8000704 <_Z41__static_initialization_and_destruction_0ii>
 800074a:	bd80      	pop	{r7, pc}

0800074c <_ZN9TREMBlockC1Ev>:

#include "BasicTremolo.hpp"

#include <cmath>

TREMBlock::TREMBlock()
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f04f 0200 	mov.w	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a08      	ldr	r2, [pc, #32]	@ (8000788 <_ZN9TREMBlockC1Ev+0x3c>)
 8000768:	611a      	str	r2, [r3, #16]
  {
    depth = 100.0; //50% depth
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <_ZN9TREMBlockC1Ev+0x40>)
 800076e:	601a      	str	r2, [r3, #0]
    rate = 1.0;   //1Hz
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000776:	605a      	str	r2, [r3, #4]

}
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	37aec33e 	.word	0x37aec33e
 800078c:	42c80000 	.word	0x42c80000

08000790 <_ZN9TREMBlock7processEf>:



//inside class definition
float TREMBlock::process(float val){
 8000790:	b580      	push	{r7, lr}
 8000792:	ed2d 8b02 	vpush	{d8}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	ed87 0a00 	vstr	s0, [r7]
    // y(n) = x(n) * ( (1-d) + d*mod) )
	LFOdepth = depth/200.0; //so if depth is 0..100, then will go from 0..0.5 depending on UI,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	ed93 7a00 	vldr	s14, [r3]
 80007a6:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80008d0 <_ZN9TREMBlock7processEf+0x140>
 80007aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	edc3 7a05 	vstr	s15, [r3, #20]

	//this could be removed, either way need to limit depth to 0..1
    levOffset = 1.0-LFOdepth;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80007ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80007be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	edc3 7a02 	vstr	s15, [r3, #8]

    if (levOffset>=1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80007ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80007d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007da:	db03      	blt.n	80007e4 <_ZN9TREMBlock7processEf+0x54>
      levOffset = 1.0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80007e2:	609a      	str	r2, [r3, #8]

    if (levOffset<=0) //just in case
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80007ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f2:	d803      	bhi.n	80007fc <_ZN9TREMBlock7processEf+0x6c>
	  levOffset=0.0;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f04f 0200 	mov.w	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]

    //rate needs to be in integers of 2*M_PI to ensure
    //one complete f cycle.

    if (rate<=1) rate=1; //just trap as we don't want mute
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8000802:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080e:	d803      	bhi.n	8000818 <_ZN9TREMBlock7processEf+0x88>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000816:	605a      	str	r2, [r3, #4]

    LFOval = LFOdepth*sin(2*M_PI*(int)rate*LFOstep)+levOffset;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	edd3 7a05 	vldr	s15, [r3, #20]
 800081e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	edd3 7a01 	vldr	s15, [r3, #4]
 8000828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800082c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000830:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80008c8 <_ZN9TREMBlock7processEf+0x138>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	edd3 7a03 	vldr	s15, [r3, #12]
 800083e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000842:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000846:	eeb0 0b47 	vmov.f64	d0, d7
 800084a:	f010 fcc9 	bl	80111e0 <sin>
 800084e:	eeb0 7b40 	vmov.f64	d7, d0
 8000852:	ee28 6b07 	vmul.f64	d6, d8, d7
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	edd3 7a02 	vldr	s15, [r3, #8]
 800085c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000860:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000864:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	edc3 7a06 	vstr	s15, [r3, #24]

    float processedSample = LFOval*val;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	edd3 7a06 	vldr	s15, [r3, #24]
 8000874:	ed97 7a00 	vldr	s14, [r7]
 8000878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800087c:	edc7 7a03 	vstr	s15, [r7, #12]

    LFOstep=(LFOstep+Tau);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	ed93 7a03 	vldr	s14, [r3, #12]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	edd3 7a04 	vldr	s15, [r3, #16]
 800088c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	edc3 7a03 	vstr	s15, [r3, #12]
    if(LFOstep>=1)LFOstep=0;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	edd3 7a03 	vldr	s15, [r3, #12]
 800089c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80008a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a8:	db03      	blt.n	80008b2 <_ZN9TREMBlock7processEf+0x122>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f04f 0200 	mov.w	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]

    return processedSample;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	ee07 3a90 	vmov	s15, r3

}
 80008b8:	eeb0 0a67 	vmov.f32	s0, s15
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	ecbd 8b02 	vpop	{d8}
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	54442d18 	.word	0x54442d18
 80008cc:	401921fb 	.word	0x401921fb
 80008d0:	43480000 	.word	0x43480000

080008d4 <_ZN9TREMBlock7setRateEf>:

void TREMBlock::setRate(float TargetRate){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	ed87 0a00 	vstr	s0, [r7]
	rate = TargetRate;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	605a      	str	r2, [r3, #4]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <_ZN9TREMBlock8setDepthEf>:


void TREMBlock::setDepth(float TargetDepth){
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	ed87 0a00 	vstr	s0, [r7]
	 depth = TargetDepth;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	601a      	str	r2, [r3, #0]
 }
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 8000916:	4a19      	ldr	r2, [pc, #100]	@ (800097c <MX_DFSDM1_Init+0x6c>)
 8000918:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 8000928:	2202      	movs	r2, #2
 800092a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 800092e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000932:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000934:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000940:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 8000954:	2201      	movs	r2, #1
 8000956:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_DFSDM1_Init+0x68>)
 8000966:	f006 fc55 	bl	8007214 <HAL_DFSDM_ChannelInit>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000970:	f001 fde8 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000154 	.word	0x20000154
 800097c:	40017400 	.word	0x40017400

08000980 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0ae      	sub	sp, #184	@ 0xb8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2290      	movs	r2, #144	@ 0x90
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f011 fb87 	bl	80120b4 <memset>
  if(DFSDM1_Init == 0)
 80009a6:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <HAL_DFSDM_ChannelMspInit+0x100>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d163      	bne.n	8000a76 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80009ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4618      	mov	r0, r3
 80009c0:	f00b fcd6 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80009ca:	f001 fdbb 	bl	8002544 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80009ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000a84 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a84 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b2a      	ldr	r3, [pc, #168]	@ (8000a84 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b27      	ldr	r3, [pc, #156]	@ (8000a84 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a26      	ldr	r2, [pc, #152]	@ (8000a84 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a20      	ldr	r2, [pc, #128]	@ (8000a84 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8000a16:	f640 0308 	movw	r3, #2056	@ 0x808
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000a30:	2303      	movs	r3, #3
 8000a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000a3e:	f008 fdd3 	bl	80095e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000a42:	2308      	movs	r3, #8
 8000a44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a64:	4619      	mov	r1, r3
 8000a66:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <HAL_DFSDM_ChannelMspInit+0x10c>)
 8000a68:	f008 fdbe 	bl	80095e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a6c:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a03      	ldr	r2, [pc, #12]	@ (8000a80 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000a74:	6013      	str	r3, [r2, #0]
  }
}
 8000a76:	bf00      	nop
 8000a78:	37b8      	adds	r7, #184	@ 0xb8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000018c 	.word	0x2000018c
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020c00 	.word	0x40020c00

08000a90 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000a96:	4a19      	ldr	r2, [pc, #100]	@ (8000afc <MX_DMA2D_Init+0x6c>)
 8000a98:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ad0:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000ad2:	f007 f881 	bl	8007bd8 <HAL_DMA2D_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000adc:	f001 fd32 	bl	8002544 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_DMA2D_Init+0x68>)
 8000ae4:	f007 faf6 	bl	80080d4 <HAL_DMA2D_ConfigLayer>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000aee:	f001 fd29 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000190 	.word	0x20000190
 8000afc:	4002b000 	.word	0x4002b000

08000b00 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <HAL_DMA2D_MspInit+0x44>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d113      	bne.n	8000b3a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_DMA2D_MspInit+0x48>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <HAL_DMA2D_MspInit+0x48>)
 8000b18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_DMA2D_MspInit+0x48>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2105      	movs	r1, #5
 8000b2e:	205a      	movs	r0, #90	@ 0x5a
 8000b30:	f006 fb38 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b34:	205a      	movs	r0, #90	@ 0x5a
 8000b36:	f006 fb51 	bl	80071dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	4002b000 	.word	0x4002b000
 8000b48:	40023800 	.word	0x40023800

08000b4c <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0aa      	sub	sp, #168	@ 0xa8
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b5e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000b62:	2224      	movs	r2, #36	@ 0x24
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f011 faa4 	bl	80120b4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b6c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000b7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b82:	2234      	movs	r2, #52	@ 0x34
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f011 fa94 	bl	80120b4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	222c      	movs	r2, #44	@ 0x2c
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f011 fa8e 	bl	80120b4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000b98:	4b64      	ldr	r3, [pc, #400]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000b9a:	4a65      	ldr	r2, [pc, #404]	@ (8000d30 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b9e:	4b63      	ldr	r3, [pc, #396]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000ba4:	4b61      	ldr	r3, [pc, #388]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000baa:	4b60      	ldr	r3, [pc, #384]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000bb0:	2314      	movs	r3, #20
 8000bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000bc2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4858      	ldr	r0, [pc, #352]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000bca:	f007 fc05 	bl	80083d8 <HAL_DSI_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000bd4:	f001 fcb6 	bl	8002544 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000c0a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4846      	ldr	r0, [pc, #280]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c12:	f008 fafd 	bl	8009210 <HAL_DSI_ConfigHostTimeouts>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000c1c:	f001 fc92 	bl	8002544 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000c20:	231c      	movs	r3, #28
 8000c22:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000c24:	2321      	movs	r3, #33	@ 0x21
 8000c26:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000c2c:	2319      	movs	r3, #25
 8000c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c38:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	483b      	ldr	r0, [pc, #236]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c40:	f008 fa7c 	bl	800913c <HAL_DSI_ConfigPhyTimer>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000c4a:	f001 fc7b 	bl	8002544 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000c4e:	2104      	movs	r1, #4
 8000c50:	4836      	ldr	r0, [pc, #216]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c52:	f008 fa4b 	bl	80090ec <HAL_DSI_ConfigFlowControl>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000c5c:	f001 fc72 	bl	8002544 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c60:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000c64:	4831      	ldr	r0, [pc, #196]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c66:	f008 fc91 	bl	800958c <HAL_DSI_SetLowPowerRXFilter>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000c70:	f001 fc68 	bl	8002544 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000c74:	2100      	movs	r1, #0
 8000c76:	482d      	ldr	r0, [pc, #180]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c78:	f007 fd3e 	bl	80086f8 <HAL_DSI_ConfigErrorMonitor>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000c82:	f001 fc5f 	bl	8002544 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	481a      	ldr	r0, [pc, #104]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000cc2:	f008 f9b5 	bl	8009030 <HAL_DSI_ConfigCommand>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8000ccc:	f001 fc3a 	bl	8002544 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 8000cd8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000cdc:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000cde:	2310      	movs	r3, #16
 8000ce0:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000cf6:	2340      	movs	r3, #64	@ 0x40
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4619      	mov	r1, r3
 8000d02:	480a      	ldr	r0, [pc, #40]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000d04:	f008 f8ba 	bl	8008e7c <HAL_DSI_ConfigAdaptedCommandMode>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8000d0e:	f001 fc19 	bl	8002544 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <MX_DSIHOST_DSI_Init+0x1e0>)
 8000d16:	f007 fe88 	bl	8008a2a <HAL_DSI_SetGenericVCID>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8000d20:	f001 fc10 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	37a8      	adds	r7, #168	@ 0xa8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200001e8 	.word	0x200001e8
 8000d30:	40016c00 	.word	0x40016c00

08000d34 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc0 <HAL_DSI_MspInit+0x8c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12f      	bne.n	8000db6 <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000d56:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <HAL_DSI_MspInit+0x90>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <HAL_DSI_MspInit+0x90>)
 8000d5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_DSI_MspInit+0x90>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_DSI_MspInit+0x90>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <HAL_DSI_MspInit+0x90>)
 8000d74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_DSI_MspInit+0x90>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8000d86:	2304      	movs	r3, #4
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000d96:	230d      	movs	r3, #13
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <HAL_DSI_MspInit+0x94>)
 8000da2:	f008 fc21 	bl	80095e8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2105      	movs	r1, #5
 8000daa:	2062      	movs	r0, #98	@ 0x62
 8000dac:	f006 f9fa 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000db0:	2062      	movs	r0, #98	@ 0x62
 8000db2:	f006 fa13 	bl	80071dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40016c00 	.word	0x40016c00
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40022400 	.word	0x40022400

08000dcc <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a09      	ldr	r2, [pc, #36]	@ (8000e00 <HAL_DSI_MspDeInit+0x34>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10c      	bne.n	8000df8 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <HAL_DSI_MspDeInit+0x38>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_DSI_MspDeInit+0x38>)
 8000de4:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000de8:	6453      	str	r3, [r2, #68]	@ 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 8000dea:	2104      	movs	r1, #4
 8000dec:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <HAL_DSI_MspDeInit+0x3c>)
 8000dee:	f008 fda7 	bl	8009940 <HAL_GPIO_DeInit>

    /* DSI interrupt Deinit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 8000df2:	2062      	movs	r0, #98	@ 0x62
 8000df4:	f006 fa00 	bl	80071f8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40016c00 	.word	0x40016c00
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40022400 	.word	0x40022400

08000e0c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea4 <MX_FMC_Init+0x98>)
 8000e28:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e3e:	2220      	movs	r2, #32
 8000e40:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e44:	2240      	movs	r2, #64	@ 0x40
 8000e46:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e4a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000e4e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000e56:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000e70:	2310      	movs	r3, #16
 8000e72:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000e74:	2310      	movs	r3, #16
 8000e76:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000e80:	2310      	movs	r3, #16
 8000e82:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_FMC_Init+0x94>)
 8000e8a:	f00c fd48 	bl	800d91e <HAL_SDRAM_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 8000e94:	f001 fb56 	bl	8002544 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000204 	.word	0x20000204
 8000ea4:	a0000140 	.word	0xa0000140

08000ea8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fac <HAL_FMC_MspInit+0x104>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d16f      	bne.n	8000fa4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000ec4:	4b39      	ldr	r3, [pc, #228]	@ (8000fac <HAL_FMC_MspInit+0x104>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000eca:	4b39      	ldr	r3, [pc, #228]	@ (8000fb0 <HAL_FMC_MspInit+0x108>)
 8000ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ece:	4a38      	ldr	r2, [pc, #224]	@ (8000fb0 <HAL_FMC_MspInit+0x108>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ed6:	4b36      	ldr	r3, [pc, #216]	@ (8000fb0 <HAL_FMC_MspInit+0x108>)
 8000ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000ee2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000ee6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	482d      	ldr	r0, [pc, #180]	@ (8000fb4 <HAL_FMC_MspInit+0x10c>)
 8000efe:	f008 fb73 	bl	80095e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8000f02:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000f06:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f14:	230c      	movs	r3, #12
 8000f16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4826      	ldr	r0, [pc, #152]	@ (8000fb8 <HAL_FMC_MspInit+0x110>)
 8000f1e:	f008 fb63 	bl	80095e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000f22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000f26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f34:	230c      	movs	r3, #12
 8000f36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481f      	ldr	r0, [pc, #124]	@ (8000fbc <HAL_FMC_MspInit+0x114>)
 8000f3e:	f008 fb53 	bl	80095e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000f42:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8000f46:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f54:	230c      	movs	r3, #12
 8000f56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4818      	ldr	r0, [pc, #96]	@ (8000fc0 <HAL_FMC_MspInit+0x118>)
 8000f5e:	f008 fb43 	bl	80095e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000f62:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000f66:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f74:	230c      	movs	r3, #12
 8000f76:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <HAL_FMC_MspInit+0x11c>)
 8000f7e:	f008 fb33 	bl	80095e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8000f82:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 8000f86:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f94:	230c      	movs	r3, #12
 8000f96:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <HAL_FMC_MspInit+0x120>)
 8000f9e:	f008 fb23 	bl	80095e8 <HAL_GPIO_Init>
 8000fa2:	e000      	b.n	8000fa6 <HAL_FMC_MspInit+0xfe>
    return;
 8000fa4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000238 	.word	0x20000238
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40022000 	.word	0x40022000
 8000fc4:	40021400 	.word	0x40021400
 8000fc8:	40021c00 	.word	0x40021c00

08000fcc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000fd4:	f7ff ff68 	bl	8000ea8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4a07      	ldr	r2, [pc, #28]	@ (800100c <vApplicationGetIdleTaskMemory+0x2c>)
 8000ff0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <vApplicationGetIdleTaskMemory+0x30>)
 8000ff6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2280      	movs	r2, #128	@ 0x80
 8000ffc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000024c 	.word	0x2000024c
 8001010:	200002ec 	.word	0x200002ec

08001014 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b09a      	sub	sp, #104	@ 0x68
 8001018:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of audioQueue */
  osMessageQDef(audioQueue, 16, uint8_t);
 800101a:	4b25      	ldr	r3, [pc, #148]	@ (80010b0 <MX_FREERTOS_Init+0x9c>)
 800101c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  audioQueueHandle = osMessageCreate(osMessageQ(audioQueue), NULL);
 8001026:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f00d fe66 	bl	800ecfe <osMessageCreate>
 8001032:	4603      	mov	r3, r0
 8001034:	4a1f      	ldr	r2, [pc, #124]	@ (80010b4 <MX_FREERTOS_Init+0xa0>)
 8001036:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of audioTask */
  osThreadDef(audioTask, StartAudioTask, osPriorityHigh, 0, 128);
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_FREERTOS_Init+0xa4>)
 800103a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  audioTaskHandle = osThreadCreate(osThread(audioTask), NULL);
 800104c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f00d fdf3 	bl	800ec3e <osThreadCreate>
 8001058:	4603      	mov	r3, r0
 800105a:	4a18      	ldr	r2, [pc, #96]	@ (80010bc <MX_FREERTOS_Init+0xa8>)
 800105c:	6013      	str	r3, [r2, #0]

  /* definition and creation of auxTask */
  osThreadDef(auxTask, auxTaskStart, osPriorityIdle, 0, 128);
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <MX_FREERTOS_Init+0xac>)
 8001060:	f107 0420 	add.w	r4, r7, #32
 8001064:	461d      	mov	r5, r3
 8001066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  auxTaskHandle = osThreadCreate(osThread(auxTask), NULL);
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00d fde0 	bl	800ec3e <osThreadCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <MX_FREERTOS_Init+0xb0>)
 8001082:	6013      	str	r3, [r2, #0]

  /* definition and creation of myFlashAliveTas */
  osThreadDef(myFlashAliveTas, StartFlashAliveTask, osPriorityIdle, 0, 128);
 8001084:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <MX_FREERTOS_Init+0xb4>)
 8001086:	1d3c      	adds	r4, r7, #4
 8001088:	461d      	mov	r5, r3
 800108a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001092:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myFlashAliveTasHandle = osThreadCreate(osThread(myFlashAliveTas), NULL);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f00d fdcf 	bl	800ec3e <osThreadCreate>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <MX_FREERTOS_Init+0xb8>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010a6:	bf00      	nop
 80010a8:	3768      	adds	r7, #104	@ 0x68
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bdb0      	pop	{r4, r5, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	08012f58 	.word	0x08012f58
 80010b4:	20000248 	.word	0x20000248
 80010b8:	08012f74 	.word	0x08012f74
 80010bc:	2000023c 	.word	0x2000023c
 80010c0:	08012f98 	.word	0x08012f98
 80010c4:	20000240 	.word	0x20000240
 80010c8:	08012fc4 	.word	0x08012fc4
 80010cc:	20000244 	.word	0x20000244

080010d0 <StartAudioTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAudioTask */
void StartAudioTask(void const * argument)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioTask */

  /* Infinite loop */
  for(;;)
  {
	BufferHandling();
 80010d8:	f000 f8fa 	bl	80012d0 <BufferHandling>
    osDelay(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f00d fdfa 	bl	800ecd6 <osDelay>
	BufferHandling();
 80010e2:	bf00      	nop
 80010e4:	e7f8      	b.n	80010d8 <StartAudioTask+0x8>
	...

080010e8 <auxTaskStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_auxTaskStart */
void auxTaskStart(void const * argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOJ, ARD_D4_Pin); //Signify the task is running
      //We can read things and based on wha we read, change Globals
	  ts_status = BSP_TS_GetState(&TS_State);
 80010f0:	482f      	ldr	r0, [pc, #188]	@ (80011b0 <auxTaskStart+0xc8>)
 80010f2:	f005 fe15 	bl	8006d20 <BSP_TS_GetState>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b2e      	ldr	r3, [pc, #184]	@ (80011b4 <auxTaskStart+0xcc>)
 80010fc:	601a      	str	r2, [r3, #0]
      if(TS_State.touchDetected){
 80010fe:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <auxTaskStart+0xc8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d04f      	beq.n	80011a6 <auxTaskStart+0xbe>

		  //Due to the capacitive nature, sometimes spurious touches
		  //are detected..so watch this with traps.

		  /* Get X and Y position of the first touch post calibrated */
		  uint16_t x1 = TS_State.touchX[0];
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <auxTaskStart+0xc8>)
 8001108:	885b      	ldrh	r3, [r3, #2]
 800110a:	81fb      	strh	r3, [r7, #14]
		  uint16_t y1 = TS_State.touchY[0];
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <auxTaskStart+0xc8>)
 800110e:	88db      	ldrh	r3, [r3, #6]
 8001110:	81bb      	strh	r3, [r7, #12]

		  //Need to check these values in case of spurious values
		  //limit with a mod instruction for example
		  x1 = x1 % 800;
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	4a28      	ldr	r2, [pc, #160]	@ (80011b8 <auxTaskStart+0xd0>)
 8001116:	fba2 1203 	umull	r1, r2, r2, r3
 800111a:	0a12      	lsrs	r2, r2, #8
 800111c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001120:	fb01 f202 	mul.w	r2, r1, r2
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	81fb      	strh	r3, [r7, #14]
		  y1 = y1 % 480;
 8001128:	89ba      	ldrh	r2, [r7, #12]
 800112a:	4b24      	ldr	r3, [pc, #144]	@ (80011bc <auxTaskStart+0xd4>)
 800112c:	fba3 1302 	umull	r1, r3, r3, r2
 8001130:	0a19      	lsrs	r1, r3, #8
 8001132:	460b      	mov	r3, r1
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	1a5b      	subs	r3, r3, r1
 8001138:	015b      	lsls	r3, r3, #5
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	81bb      	strh	r3, [r7, #12]

		  coeffOne = (float)(480-y1)*coeffOne_inc;
 800113e:	89bb      	ldrh	r3, [r7, #12]
 8001140:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114c:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <auxTaskStart+0xd8>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001156:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <auxTaskStart+0xdc>)
 8001158:	edc3 7a00 	vstr	s15, [r3]
		  coeffTwo = (float)(800-x1)*coeffTwo_inc;
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	f5c3 7348 	rsb	r3, r3, #800	@ 0x320
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <auxTaskStart+0xe0>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <auxTaskStart+0xe4>)
 8001176:	edc3 7a00 	vstr	s15, [r3]

		  //For the Tremolo, interesting effects, 1000 and 2 for below. :)
		  coeffOne = coeffOne * 200; // test mod depth 0..200
 800117a:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <auxTaskStart+0xdc>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80011d0 <auxTaskStart+0xe8>
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <auxTaskStart+0xdc>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
		  coeffTwo = coeffTwo * 20;  // test rate 0..20
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <auxTaskStart+0xe4>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119c:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <auxTaskStart+0xe4>)
 800119e:	edc3 7a00 	vstr	s15, [r3]



		  //Check we're still in the audio thread here ..use the LEDS as we're back in main..
		  UpdateObjects(); //This allows it to be called separately now..and also only call if a control has changed
 80011a2:	f7ff fa15 	bl	80005d0 <UpdateObjects>

      }

      //BSP_LCD_FillRect(100, 200, 10, 100);

      osDelay(10); //this will slow the scan time of the TS
 80011a6:	200a      	movs	r0, #10
 80011a8:	f00d fd95 	bl	800ecd6 <osDelay>
	  ts_status = BSP_TS_GetState(&TS_State);
 80011ac:	e7a0      	b.n	80010f0 <auxTaskStart+0x8>
 80011ae:	bf00      	nop
 80011b0:	200025a0 	.word	0x200025a0
 80011b4:	200025ac 	.word	0x200025ac
 80011b8:	51eb851f 	.word	0x51eb851f
 80011bc:	88888889 	.word	0x88888889
 80011c0:	2000000c 	.word	0x2000000c
 80011c4:	20000004 	.word	0x20000004
 80011c8:	20000010 	.word	0x20000010
 80011cc:	20000008 	.word	0x20000008
 80011d0:	43480000 	.word	0x43480000

080011d4 <StartFlashAliveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashAliveTask */
void StartFlashAliveTask(void const * argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashAliveTask */
  /* Infinite loop */


	HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2108      	movs	r1, #8
 80011e0:	4827      	ldr	r0, [pc, #156]	@ (8001280 <StartFlashAliveTask+0xac>)
 80011e2:	f008 fcd1 	bl	8009b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, ARD_D6_Pin, GPIO_PIN_SET );
 80011e6:	2201      	movs	r2, #1
 80011e8:	2180      	movs	r1, #128	@ 0x80
 80011ea:	4826      	ldr	r0, [pc, #152]	@ (8001284 <StartFlashAliveTask+0xb0>)
 80011ec:	f008 fccc 	bl	8009b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ARD_D5_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f6:	4824      	ldr	r0, [pc, #144]	@ (8001288 <StartFlashAliveTask+0xb4>)
 80011f8:	f008 fcc6 	bl	8009b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, ARD_D4_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2101      	movs	r1, #1
 8001200:	481f      	ldr	r0, [pc, #124]	@ (8001280 <StartFlashAliveTask+0xac>)
 8001202:	f008 fcc1 	bl	8009b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, ARD_D3_Pin,  GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2140      	movs	r1, #64	@ 0x40
 800120a:	481e      	ldr	r0, [pc, #120]	@ (8001284 <StartFlashAliveTask+0xb0>)
 800120c:	f008 fcbc 	bl	8009b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, ARD_D2_Pin, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2102      	movs	r1, #2
 8001214:	481a      	ldr	r0, [pc, #104]	@ (8001280 <StartFlashAliveTask+0xac>)
 8001216:	f008 fcb7 	bl	8009b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ARD_D1_Pin,  GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2140      	movs	r1, #64	@ 0x40
 800121e:	481a      	ldr	r0, [pc, #104]	@ (8001288 <StartFlashAliveTask+0xb4>)
 8001220:	f008 fcb2 	bl	8009b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ARD_D0_Pin,  GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	4817      	ldr	r0, [pc, #92]	@ (8001288 <StartFlashAliveTask+0xb4>)
 800122a:	f008 fcad 	bl	8009b88 <HAL_GPIO_WritePin>

	for(;;)
	{
		BSP_LED_Toggle(LED_GREEN);//Flash on main board
 800122e:	2001      	movs	r0, #1
 8001230:	f003 fc30 	bl	8004a94 <BSP_LED_Toggle>
		//BSP_LCD_FillRect(350, 200, 100, 100);

		//Basic Audio Monitor..

		//flash all the other leds..
		HAL_GPIO_TogglePin(GPIOJ, ARD_D7_Pin);
 8001234:	2108      	movs	r1, #8
 8001236:	4812      	ldr	r0, [pc, #72]	@ (8001280 <StartFlashAliveTask+0xac>)
 8001238:	f008 fcbf 	bl	8009bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOF, ARD_D6_Pin);
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	4811      	ldr	r0, [pc, #68]	@ (8001284 <StartFlashAliveTask+0xb0>)
 8001240:	f008 fcbb 	bl	8009bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, ARD_D5_Pin);
 8001244:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001248:	480f      	ldr	r0, [pc, #60]	@ (8001288 <StartFlashAliveTask+0xb4>)
 800124a:	f008 fcb6 	bl	8009bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOJ, ARD_D4_Pin);
 800124e:	2101      	movs	r1, #1
 8001250:	480b      	ldr	r0, [pc, #44]	@ (8001280 <StartFlashAliveTask+0xac>)
 8001252:	f008 fcb2 	bl	8009bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOF, ARD_D3_Pin);
 8001256:	2140      	movs	r1, #64	@ 0x40
 8001258:	480a      	ldr	r0, [pc, #40]	@ (8001284 <StartFlashAliveTask+0xb0>)
 800125a:	f008 fcae 	bl	8009bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOJ, ARD_D2_Pin);
 800125e:	2102      	movs	r1, #2
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <StartFlashAliveTask+0xac>)
 8001262:	f008 fcaa 	bl	8009bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, ARD_D1_Pin);
 8001266:	2140      	movs	r1, #64	@ 0x40
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <StartFlashAliveTask+0xb4>)
 800126a:	f008 fca6 	bl	8009bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, ARD_D0_Pin);
 800126e:	2180      	movs	r1, #128	@ 0x80
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <StartFlashAliveTask+0xb4>)
 8001272:	f008 fca2 	bl	8009bba <HAL_GPIO_TogglePin>

		osDelay(100);
 8001276:	2064      	movs	r0, #100	@ 0x64
 8001278:	f00d fd2d 	bl	800ecd6 <osDelay>
		BSP_LED_Toggle(LED_GREEN);//Flash on main board
 800127c:	bf00      	nop
 800127e:	e7d6      	b.n	800122e <StartFlashAliveTask+0x5a>
 8001280:	40022400 	.word	0x40022400
 8001284:	40021400 	.word	0x40021400
 8001288:	40020800 	.word	0x40020800

0800128c <CopyBuffer>:
   * Will get called at half and full buffer point so..can copy the contents into
   * L & R buffer then process so long as the copy is quick enough..
   *
   */
 void CopyBuffer(int16_t *pbuffer1, int16_t *pbuffer2, uint16_t BlockSize)
  {
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	80fb      	strh	r3, [r7, #6]
     //Lets clear the entire destination playback DMA buffer here..
 	 //We're just clearing  because if we operate only on the left or right
 	 //the  data from  the last block will still be there..
	 //If we're operating on both, this can be removed

 	 for (uint32_t i = 0; i < BlockSize; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e008      	b.n	80012b2 <CopyBuffer+0x26>
 	 {
 		 pbuffer1[i] = 0; //needs  to  be careful as these are still int16_t buffers when we do maths
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	2200      	movs	r2, #0
 80012aa:	801a      	strh	r2, [r3, #0]
 	 for (uint32_t i = 0; i < BlockSize; i++)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d3f2      	bcc.n	80012a0 <CopyBuffer+0x14>
 	 * circular buffer, block size, and the
 	 * current output pointer to Playback Buffer, the latter
 	 * being a flip flop between Playback[0] and Playback[size/2]
 	 */

 	 AudioProcess( pbuffer1, pbuffer2, BlockSize);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	461a      	mov	r2, r3
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff f9b1 	bl	8000628 <AudioProcess>





} //Copy Buffer function
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <BufferHandling>:



void BufferHandling(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

     /* 1st or 2nd half of the record buffer ready for being copied to the Playback buffer */

	osEvent retvalue  = osMessageGet( audioQueueHandle, 1000 );
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <BufferHandling+0x64>)
 80012d8:	6819      	ldr	r1, [r3, #0]
 80012da:	463b      	mov	r3, r7
 80012dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00d fd75 	bl	800edd0 <osMessageGet>
	uint16_t buffer_state = retvalue.value.v;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	81fb      	strh	r3, [r7, #14]

    switch(buffer_state){
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d00f      	beq.n	8001310 <BufferHandling+0x40>
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	dc17      	bgt.n	8001324 <BufferHandling+0x54>
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d018      	beq.n	800132a <BufferHandling+0x5a>
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d113      	bne.n	8001324 <BufferHandling+0x54>
    	case BUFFER_OFFSET_HALF:{
    		//HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin, GPIO_PIN_SET); //Indicate rate of half filling buffer
    		//Ready to copy first block of audio samples to output buffer
        	CopyBuffer(&PlaybackBuffer[0],
 80012fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001300:	490d      	ldr	r1, [pc, #52]	@ (8001338 <BufferHandling+0x68>)
 8001302:	480e      	ldr	r0, [pc, #56]	@ (800133c <BufferHandling+0x6c>)
 8001304:	f7ff ffc2 	bl	800128c <CopyBuffer>
        	&RecordBuffer[0],
        	RECORD_BUFFER_SIZE / 2);
        	audio_rec_buffer_state = BUFFER_OFFSET_NONE;  //Reset
 8001308:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <BufferHandling+0x70>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
        	//HAL_GPIO_TogglePin(GPIOC, ARD_D5_Pin);
        	//HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin, GPIO_PIN_RESET); //Indicate rate of half filling buffer
        	break;
 800130e:	e00d      	b.n	800132c <BufferHandling+0x5c>
        	}
    	case BUFFER_OFFSET_FULL:{
    		//Ready to copy next block of audio samples to output buffer
    		 CopyBuffer(&PlaybackBuffer[RECORD_BUFFER_SIZE / 2],
 8001310:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001314:	490b      	ldr	r1, [pc, #44]	@ (8001344 <BufferHandling+0x74>)
 8001316:	480c      	ldr	r0, [pc, #48]	@ (8001348 <BufferHandling+0x78>)
 8001318:	f7ff ffb8 	bl	800128c <CopyBuffer>
        	 &RecordBuffer[RECORD_BUFFER_SIZE / 2],
        	 RECORD_BUFFER_SIZE / 2);
        	 audio_rec_buffer_state = BUFFER_OFFSET_NONE; //Reset
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <BufferHandling+0x70>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
        	 //HAL_GPIO_TogglePin(GPIOC, ARD_D5_Pin);
        	 break;
 8001322:	e003      	b.n	800132c <BufferHandling+0x5c>
        	 //Allow subtask like  scan of TS proc
        	 break;
        	 }
        default : {
        	//printf("Error on audio_rec_buffer_state switch\r\n");
        	Error_Handler();
 8001324:	f001 f90e 	bl	8002544 <Error_Handler>
        	break;
 8001328:	e000      	b.n	800132c <BufferHandling+0x5c>
        	 break;
 800132a:	bf00      	nop
        	}
    	} //End of switch
} // end AUDIO_PROCESS function
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000248 	.word	0x20000248
 8001338:	20000598 	.word	0x20000598
 800133c:	20001598 	.word	0x20001598
 8001340:	20002598 	.word	0x20002598
 8001344:	20000d98 	.word	0x20000d98
 8001348:	20001d98 	.word	0x20001d98

0800134c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
//These are the important call back functions, declared as weak in the discovery_audio.h/.c
    //So we can override them as needed
    //As they're in main, we will need to make sure they then can see and can send to the FreeRTOS listener
    //thread
    void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
    {
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
        //audio_tx_buffer_state = 1;
        //Everything is driven by the receive but we need to have
        //this callback
    }
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <BSP_AUDIO_IN_TransferComplete_CallBack>:
      * @brief Manages the DMA Transfer complete interrupt.
      * @param None
      * @retval None
      */
    void BSP_AUDIO_IN_TransferComplete_CallBack(void)
    {
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
       audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <BSP_AUDIO_IN_TransferComplete_CallBack+0x20>)
 8001362:	2202      	movs	r2, #2
 8001364:	601a      	str	r2, [r3, #0]
       osMessagePut(audioQueueHandle, audio_rec_buffer_state, 1000); //Send 1
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <BSP_AUDIO_IN_TransferComplete_CallBack+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a04      	ldr	r2, [pc, #16]	@ (800137c <BSP_AUDIO_IN_TransferComplete_CallBack+0x20>)
 800136c:	6811      	ldr	r1, [r2, #0]
 800136e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001372:	4618      	mov	r0, r3
 8001374:	f00d fcec 	bl	800ed50 <osMessagePut>
    }
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20002598 	.word	0x20002598
 8001380:	20000248 	.word	0x20000248

08001384 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
      * @brief  Manages the DMA Half Transfer complete interrupt.
      * @param  None
      * @retval None
      */
    void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
    {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
        audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
        osMessagePut(audioQueueHandle, audio_rec_buffer_state, 1000); //Send 1
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20>)
 8001394:	6811      	ldr	r1, [r2, #0]
 8001396:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800139a:	4618      	mov	r0, r3
 800139c:	f00d fcd8 	bl	800ed50 <osMessagePut>
    }
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20002598 	.word	0x20002598
 80013a8:	20000248 	.word	0x20000248

080013ac <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b090      	sub	sp, #64	@ 0x40
 80013b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c2:	4bad      	ldr	r3, [pc, #692]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4aac      	ldr	r2, [pc, #688]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4baa      	ldr	r3, [pc, #680]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013da:	4ba7      	ldr	r3, [pc, #668]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4aa6      	ldr	r2, [pc, #664]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80013e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4ba4      	ldr	r3, [pc, #656]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4aa0      	ldr	r2, [pc, #640]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b9e      	ldr	r3, [pc, #632]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	4b9b      	ldr	r3, [pc, #620]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a9a      	ldr	r2, [pc, #616]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b98      	ldr	r3, [pc, #608]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b95      	ldr	r3, [pc, #596]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a94      	ldr	r2, [pc, #592]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b92      	ldr	r3, [pc, #584]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b8f      	ldr	r3, [pc, #572]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a8e      	ldr	r2, [pc, #568]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b8c      	ldr	r3, [pc, #560]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001452:	4b89      	ldr	r3, [pc, #548]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a88      	ldr	r2, [pc, #544]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001458:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b86      	ldr	r3, [pc, #536]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800146a:	4b83      	ldr	r3, [pc, #524]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a82      	ldr	r2, [pc, #520]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b80      	ldr	r3, [pc, #512]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001482:	4b7d      	ldr	r3, [pc, #500]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a7c      	ldr	r2, [pc, #496]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001488:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b7a      	ldr	r3, [pc, #488]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b77      	ldr	r3, [pc, #476]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a76      	ldr	r2, [pc, #472]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b74      	ldr	r3, [pc, #464]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	4b71      	ldr	r3, [pc, #452]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a70      	ldr	r2, [pc, #448]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b6e      	ldr	r3, [pc, #440]	@ (8001678 <MX_GPIO_Init+0x2cc>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ARD_D5_Pin|ARD_D0_Pin|ARD_D1_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80014d0:	486a      	ldr	r0, [pc, #424]	@ (800167c <MX_GPIO_Init+0x2d0>)
 80014d2:	f008 fb59 	bl	8009b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ARD_D6_Pin|ARD_D3_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	21c0      	movs	r1, #192	@ 0xc0
 80014da:	4869      	ldr	r0, [pc, #420]	@ (8001680 <MX_GPIO_Init+0x2d4>)
 80014dc:	f008 fb54 	bl	8009b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	210b      	movs	r1, #11
 80014e4:	4867      	ldr	r0, [pc, #412]	@ (8001684 <MX_GPIO_Init+0x2d8>)
 80014e6:	f008 fb4f 	bl	8009b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80014ea:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014fc:	230b      	movs	r3, #11
 80014fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001500:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001504:	4619      	mov	r1, r3
 8001506:	4860      	ldr	r0, [pc, #384]	@ (8001688 <MX_GPIO_Init+0x2dc>)
 8001508:	f008 f86e 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800150c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001512:	2312      	movs	r3, #18
 8001514:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800151e:	2304      	movs	r3, #4
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001526:	4619      	mov	r1, r3
 8001528:	4858      	ldr	r0, [pc, #352]	@ (800168c <MX_GPIO_Init+0x2e0>)
 800152a:	f008 f85d 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800152e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001540:	230a      	movs	r3, #10
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001548:	4619      	mov	r1, r3
 800154a:	4850      	ldr	r0, [pc, #320]	@ (800168c <MX_GPIO_Init+0x2e0>)
 800154c:	f008 f84c 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001550:	2318      	movs	r3, #24
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001560:	230a      	movs	r3, #10
 8001562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001568:	4619      	mov	r1, r3
 800156a:	4848      	ldr	r0, [pc, #288]	@ (800168c <MX_GPIO_Init+0x2e0>)
 800156c:	f008 f83c 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001570:	23c0      	movs	r3, #192	@ 0xc0
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001580:	230b      	movs	r3, #11
 8001582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001584:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001588:	4619      	mov	r1, r3
 800158a:	4841      	ldr	r0, [pc, #260]	@ (8001690 <MX_GPIO_Init+0x2e4>)
 800158c:	f008 f82c 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015a2:	2308      	movs	r3, #8
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	4833      	ldr	r0, [pc, #204]	@ (800167c <MX_GPIO_Init+0x2d0>)
 80015ae:	f008 f81b 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_Pin;
 80015b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b8:	2312      	movs	r3, #18
 80015ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 80015c4:	2304      	movs	r3, #4
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015cc:	4619      	mov	r1, r3
 80015ce:	4831      	ldr	r0, [pc, #196]	@ (8001694 <MX_GPIO_Init+0x2e8>)
 80015d0:	f008 f80a 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d8:	2312      	movs	r3, #18
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80015e4:	230b      	movs	r3, #11
 80015e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ec:	4619      	mov	r1, r3
 80015ee:	4827      	ldr	r0, [pc, #156]	@ (800168c <MX_GPIO_Init+0x2e0>)
 80015f0:	f007 fffa 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin
 80015f4:	f24f 0330 	movw	r3, #61488	@ 0xf030
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARD_D8_Pin|LD_USER2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001602:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001606:	4619      	mov	r1, r3
 8001608:	481e      	ldr	r0, [pc, #120]	@ (8001684 <MX_GPIO_Init+0x2d8>)
 800160a:	f007 ffed 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 800160e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001620:	2305      	movs	r3, #5
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001628:	4619      	mov	r1, r3
 800162a:	481a      	ldr	r0, [pc, #104]	@ (8001694 <MX_GPIO_Init+0x2e8>)
 800162c:	f007 ffdc 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8001630:	f44f 4351 	mov.w	r3, #53504	@ 0xd100
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800163e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001642:	4619      	mov	r1, r3
 8001644:	4814      	ldr	r0, [pc, #80]	@ (8001698 <MX_GPIO_Init+0x2ec>)
 8001646:	f007 ffcf 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 800164a:	23f8      	movs	r3, #248	@ 0xf8
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001656:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800165a:	4619      	mov	r1, r3
 800165c:	480f      	ldr	r0, [pc, #60]	@ (800169c <MX_GPIO_Init+0x2f0>)
 800165e:	f007 ffc3 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001674:	2307      	movs	r3, #7
 8001676:	e013      	b.n	80016a0 <MX_GPIO_Init+0x2f4>
 8001678:	40023800 	.word	0x40023800
 800167c:	40020800 	.word	0x40020800
 8001680:	40021400 	.word	0x40021400
 8001684:	40022400 	.word	0x40022400
 8001688:	40021800 	.word	0x40021800
 800168c:	40020400 	.word	0x40020400
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40020000 	.word	0x40020000
 8001698:	40022000 	.word	0x40022000
 800169c:	40022800 	.word	0x40022800
 80016a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016a6:	4619      	mov	r1, r3
 80016a8:	48b6      	ldr	r0, [pc, #728]	@ (8001984 <MX_GPIO_Init+0x5d8>)
 80016aa:	f007 ff9d 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 80016ae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80016c0:	230b      	movs	r3, #11
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c8:	4619      	mov	r1, r3
 80016ca:	48ae      	ldr	r0, [pc, #696]	@ (8001984 <MX_GPIO_Init+0x5d8>)
 80016cc:	f007 ff8c 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 80016d0:	2330      	movs	r3, #48	@ 0x30
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e0:	4619      	mov	r1, r3
 80016e2:	48a9      	ldr	r0, [pc, #676]	@ (8001988 <MX_GPIO_Init+0x5dc>)
 80016e4:	f007 ff80 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80016e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016fa:	2305      	movs	r3, #5
 80016fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	48a1      	ldr	r0, [pc, #644]	@ (800198c <MX_GPIO_Init+0x5e0>)
 8001706:	f007 ff6f 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 800170a:	2304      	movs	r3, #4
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800171a:	2308      	movs	r3, #8
 800171c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001722:	4619      	mov	r1, r3
 8001724:	4898      	ldr	r0, [pc, #608]	@ (8001988 <MX_GPIO_Init+0x5dc>)
 8001726:	f007 ff5f 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 800172a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800173c:	230a      	movs	r3, #10
 800173e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001744:	4619      	mov	r1, r3
 8001746:	4892      	ldr	r0, [pc, #584]	@ (8001990 <MX_GPIO_Init+0x5e4>)
 8001748:	f007 ff4e 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 800174c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800175e:	2300      	movs	r3, #0
 8001760:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001766:	4619      	mov	r1, r3
 8001768:	4888      	ldr	r0, [pc, #544]	@ (800198c <MX_GPIO_Init+0x5e0>)
 800176a:	f007 ff3d 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800176e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001774:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001778:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001782:	4619      	mov	r1, r3
 8001784:	4882      	ldr	r0, [pc, #520]	@ (8001990 <MX_GPIO_Init+0x5e4>)
 8001786:	f007 ff2f 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin|ARD_D0_Pin|ARD_D1_Pin;
 800178a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a0:	4619      	mov	r1, r3
 80017a2:	487c      	ldr	r0, [pc, #496]	@ (8001994 <MX_GPIO_Init+0x5e8>)
 80017a4:	f007 ff20 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80017a8:	2310      	movs	r3, #16
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017b8:	230a      	movs	r3, #10
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c0:	4619      	mov	r1, r3
 80017c2:	4875      	ldr	r0, [pc, #468]	@ (8001998 <MX_GPIO_Init+0x5ec>)
 80017c4:	f007 ff10 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 80017c8:	2348      	movs	r3, #72	@ 0x48
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017d8:	4619      	mov	r1, r3
 80017da:	486a      	ldr	r0, [pc, #424]	@ (8001984 <MX_GPIO_Init+0x5d8>)
 80017dc:	f007 ff04 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D3_Pin;
 80017e0:	23c0      	movs	r3, #192	@ 0xc0
 80017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f4:	4619      	mov	r1, r3
 80017f6:	4869      	ldr	r0, [pc, #420]	@ (800199c <MX_GPIO_Init+0x5f0>)
 80017f8:	f007 fef6 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80017fc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800180a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180e:	4619      	mov	r1, r3
 8001810:	4862      	ldr	r0, [pc, #392]	@ (800199c <MX_GPIO_Init+0x5f0>)
 8001812:	f007 fee9 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001816:	2301      	movs	r3, #1
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001826:	230a      	movs	r3, #10
 8001828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	4858      	ldr	r0, [pc, #352]	@ (8001994 <MX_GPIO_Init+0x5e8>)
 8001832:	f007 fed9 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001836:	2332      	movs	r3, #50	@ 0x32
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001846:	230b      	movs	r3, #11
 8001848:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800184e:	4619      	mov	r1, r3
 8001850:	4850      	ldr	r0, [pc, #320]	@ (8001994 <MX_GPIO_Init+0x5e8>)
 8001852:	f007 fec9 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001856:	2304      	movs	r3, #4
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185a:	2303      	movs	r3, #3
 800185c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001866:	4619      	mov	r1, r3
 8001868:	484a      	ldr	r0, [pc, #296]	@ (8001994 <MX_GPIO_Init+0x5e8>)
 800186a:	f007 febd 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 800186e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001880:	2304      	movs	r3, #4
 8001882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001888:	4619      	mov	r1, r3
 800188a:	483f      	ldr	r0, [pc, #252]	@ (8001988 <MX_GPIO_Init+0x5dc>)
 800188c:	f007 feac 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001890:	2386      	movs	r3, #134	@ 0x86
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018a0:	230b      	movs	r3, #11
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4838      	ldr	r0, [pc, #224]	@ (800198c <MX_GPIO_Init+0x5e0>)
 80018ac:	f007 fe9c 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 80018b0:	2301      	movs	r3, #1
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c2:	4619      	mov	r1, r3
 80018c4:	4831      	ldr	r0, [pc, #196]	@ (800198c <MX_GPIO_Init+0x5e0>)
 80018c6:	f007 fe8f 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 80018ca:	2350      	movs	r3, #80	@ 0x50
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ce:	2303      	movs	r3, #3
 80018d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018da:	4619      	mov	r1, r3
 80018dc:	482b      	ldr	r0, [pc, #172]	@ (800198c <MX_GPIO_Init+0x5e0>)
 80018de:	f007 fe83 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
 80018e2:	230b      	movs	r3, #11
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f6:	4619      	mov	r1, r3
 80018f8:	4829      	ldr	r0, [pc, #164]	@ (80019a0 <MX_GPIO_Init+0x5f4>)
 80018fa:	f007 fe75 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 80018fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001910:	230a      	movs	r3, #10
 8001912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	481b      	ldr	r0, [pc, #108]	@ (8001988 <MX_GPIO_Init+0x5dc>)
 800191c:	f007 fe64 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|ARD_D9_Pin;
 8001920:	23c0      	movs	r3, #192	@ 0xc0
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800192c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001930:	4619      	mov	r1, r3
 8001932:	4819      	ldr	r0, [pc, #100]	@ (8001998 <MX_GPIO_Init+0x5ec>)
 8001934:	f007 fe58 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001938:	2328      	movs	r3, #40	@ 0x28
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001948:	230a      	movs	r3, #10
 800194a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	480e      	ldr	r0, [pc, #56]	@ (800198c <MX_GPIO_Init+0x5e0>)
 8001954:	f007 fe48 	bl	80095e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001958:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800196a:	2305      	movs	r3, #5
 800196c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001972:	4619      	mov	r1, r3
 8001974:	480b      	ldr	r0, [pc, #44]	@ (80019a4 <MX_GPIO_Init+0x5f8>)
 8001976:	f007 fe37 	bl	80095e8 <HAL_GPIO_Init>

}
 800197a:	bf00      	nop
 800197c:	3740      	adds	r7, #64	@ 0x40
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021800 	.word	0x40021800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40020000 	.word	0x40020000
 8001990:	40022000 	.word	0x40022000
 8001994:	40020800 	.word	0x40020800
 8001998:	40021c00 	.word	0x40021c00
 800199c:	40021400 	.word	0x40021400
 80019a0:	40022400 	.word	0x40022400
 80019a4:	40020400 	.word	0x40020400

080019a8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b09a      	sub	sp, #104	@ 0x68
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80019ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019b2:	2234      	movs	r2, #52	@ 0x34
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f010 fb7c 	bl	80120b4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80019bc:	463b      	mov	r3, r7
 80019be:	2234      	movs	r2, #52	@ 0x34
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f010 fb76 	bl	80120b4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80019c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 80019ca:	4a4f      	ldr	r2, [pc, #316]	@ (8001b08 <MX_LTDC_Init+0x160>)
 80019cc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80019ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80019d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80019da:	4b4a      	ldr	r3, [pc, #296]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80019e0:	4b48      	ldr	r3, [pc, #288]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80019e6:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80019ec:	4b45      	ldr	r3, [pc, #276]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 80019f2:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 80019f8:	4b42      	ldr	r3, [pc, #264]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 801;
 80019fe:	4b41      	ldr	r3, [pc, #260]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001a00:	f240 3221 	movw	r2, #801	@ 0x321
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8001a06:	4b3f      	ldr	r3, [pc, #252]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001a08:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8001a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 802;
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001a10:	f240 3222 	movw	r2, #802	@ 0x322
 8001a14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8001a16:	4b3b      	ldr	r3, [pc, #236]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001a18:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8001a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a1e:	4b39      	ldr	r3, [pc, #228]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a26:	4b37      	ldr	r3, [pc, #220]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a2e:	4b35      	ldr	r3, [pc, #212]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a36:	4833      	ldr	r0, [pc, #204]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001a38:	f008 fe84 	bl	800a744 <HAL_LTDC_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001a42:	f000 fd7f 	bl	8002544 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a56:	2300      	movs	r3, #0
 8001a58:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a66:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a68:	2305      	movs	r3, #5
 8001a6a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4619      	mov	r1, r3
 8001a92:	481c      	ldr	r0, [pc, #112]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001a94:	f008 ffde 	bl	800aa54 <HAL_LTDC_ConfigLayer>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001a9e:	f000 fd51 	bl	8002544 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ac2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001ac4:	2305      	movs	r3, #5
 8001ac6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <MX_LTDC_Init+0x15c>)
 8001aee:	f008 ffb1 	bl	800aa54 <HAL_LTDC_ConfigLayer>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001af8:	f000 fd24 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	3768      	adds	r7, #104	@ 0x68
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200004ec 	.word	0x200004ec
 8001b08:	40016800 	.word	0x40016800

08001b0c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  if(ltdcHandle->Instance==LTDC)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	@ (8001b50 <HAL_LTDC_MspInit+0x44>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d113      	bne.n	8001b46 <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <HAL_LTDC_MspInit+0x48>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	4a0c      	ldr	r2, [pc, #48]	@ (8001b54 <HAL_LTDC_MspInit+0x48>)
 8001b24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_LTDC_MspInit+0x48>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2105      	movs	r1, #5
 8001b3a:	2058      	movs	r0, #88	@ 0x58
 8001b3c:	f005 fb32 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001b40:	2058      	movs	r0, #88	@ 0x58
 8001b42:	f005 fb4b 	bl	80071dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40016800 	.word	0x40016800
 8001b54:	40023800 	.word	0x40023800

08001b58 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b5c:	f3bf 8f4f 	dsb	sy
}
 8001b60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b62:	f3bf 8f6f 	isb	sy
}
 8001b66:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <SCB_EnableICache+0x48>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b70:	f3bf 8f4f 	dsb	sy
}
 8001b74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b76:	f3bf 8f6f 	isb	sy
}
 8001b7a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <SCB_EnableICache+0x48>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	4a07      	ldr	r2, [pc, #28]	@ (8001ba0 <SCB_EnableICache+0x48>)
 8001b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b88:	f3bf 8f4f 	dsb	sy
}
 8001b8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b8e:	f3bf 8f6f 	isb	sy
}
 8001b92:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001baa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <SCB_EnableDCache+0x84>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb2:	f3bf 8f4f 	dsb	sy
}
 8001bb6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <SCB_EnableDCache+0x84>)
 8001bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bbe:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0b5b      	lsrs	r3, r3, #13
 8001bc4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001bc8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001bdc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001be2:	4911      	ldr	r1, [pc, #68]	@ (8001c28 <SCB_EnableDCache+0x84>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1e5a      	subs	r2, r3, #1
 8001bee:	60ba      	str	r2, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ef      	bne.n	8001bd4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1e5a      	subs	r2, r3, #1
 8001bf8:	60fa      	str	r2, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1e5      	bne.n	8001bca <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bfe:	f3bf 8f4f 	dsb	sy
}
 8001c02:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <SCB_EnableDCache+0x84>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <SCB_EnableDCache+0x84>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c10:	f3bf 8f4f 	dsb	sy
}
 8001c14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c16:	f3bf 8f6f 	isb	sy
}
 8001c1a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <OnError_Handler>:
  * @brief  On Error Handler on condition TRUE.
  * @param  condition : Can be TRUE or FALSE
  * @retval None
  */
void OnError_Handler(uint32_t condition)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if(condition)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d004      	beq.n	8001c44 <OnError_Handler+0x18>
  {
    BSP_LED_On(LED1);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f002 ff10 	bl	8004a60 <BSP_LED_On>
    while(1) { ; } /* Blocking on error */
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <OnError_Handler+0x14>
  }
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001c52:	f7ff ff81 	bl	8001b58 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001c56:	f7ff ffa5 	bl	8001ba4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c5a:	f005 f975 	bl	8006f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5e:	f000 f8e7 	bl	8001e30 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c62:	f000 f955 	bl	8001f10 <PeriphCommonClock_Config>
  //PeripheralInit(); //THIS IS  AUTOGEN BUT UART IS NOT INCLUDED!!?

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c66:	f7ff fba1 	bl	80013ac <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001c6a:	f7fe fe51 	bl	8000910 <MX_DFSDM1_Init>
  MX_SAI1_Init();
 8001c6e:	f000 fd85 	bl	800277c <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8001c72:	f001 f809 	bl	8002c88 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8001c76:	f7ff fe97 	bl	80019a8 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001c7a:	f7fe ff09 	bl	8000a90 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8001c7e:	f7fe ff65 	bl	8000b4c <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8001c82:	f7ff f8c3 	bl	8000e0c <MX_FMC_Init>
  MX_QUADSPI_Init();
 8001c86:	f000 fc6b 	bl	8002560 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f002 feb8 	bl	8004a00 <BSP_LED_Init>
  BSP_LED_On(LED_GREEN);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f002 fee5 	bl	8004a60 <BSP_LED_On>
  //This could potentially? be used to flip the display buffer to create animations..possibly


  //ITM_SendChar ('x');

  printf("Connected to STM32F769I-Discovery USART 1\r\n");
 8001c96:	485a      	ldr	r0, [pc, #360]	@ (8001e00 <main+0x1b4>)
 8001c98:	f010 fa04 	bl	80120a4 <puts>
  printf("\r\n");
 8001c9c:	4859      	ldr	r0, [pc, #356]	@ (8001e04 <main+0x1b8>)
 8001c9e:	f010 fa01 	bl	80120a4 <puts>


  // Enable access to the qspi flash chip in memory mapped mode

  uint8_t bsp_status = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  bsp_status = BSP_QSPI_Init();
 8001ca6:	f004 f917 	bl	8005ed8 <BSP_QSPI_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(bsp_status != QSPI_OK);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ffb6 	bl	8001c2c <OnError_Handler>
  bsp_status = BSP_QSPI_EnableMemoryMappedMode();
 8001cc0:	f004 f97a 	bl	8005fb8 <BSP_QSPI_EnableMemoryMappedMode>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(bsp_status != QSPI_OK);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ffa9 	bl	8001c2c <OnError_Handler>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001cda:	205c      	movs	r0, #92	@ 0x5c
 8001cdc:	f005 fa8c 	bl	80071f8 <HAL_NVIC_DisableIRQ>

  // Enable the LCD
  uint8_t  lcd_status = LCD_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	71bb      	strb	r3, [r7, #6]
  lcd_status = BSP_LCD_Init();
 8001ce4:	f003 fa7a 	bl	80051dc <BSP_LCD_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71bb      	strb	r3, [r7, #6]
  OnError_Handler(lcd_status != LCD_OK);
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bf14      	ite	ne
 8001cf2:	2301      	movne	r3, #1
 8001cf4:	2300      	moveq	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff97 	bl	8001c2c <OnError_Handler>

  //All these functions send to use draw immediate which is no good for animation
  //Need to use the lower level commands to do this and switch buffer on LCD blanking reload

  //Set Brightness
  BSP_LCD_SetBrightness(100); //0 - 100 Max
 8001cfe:	2064      	movs	r0, #100	@ 0x64
 8001d00:	f003 fed4 	bl	8005aac <BSP_LCD_SetBrightness>

  // Get the LCD Width and Height
  LCD_X_Size = BSP_LCD_GetXSize();
 8001d04:	f003 fbee 	bl	80054e4 <BSP_LCD_GetXSize>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e08 <main+0x1bc>)
 8001d0c:	6013      	str	r3, [r2, #0]
  LCD_Y_Size = BSP_LCD_GetYSize();
 8001d0e:	f003 fbf5 	bl	80054fc <BSP_LCD_GetYSize>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a3d      	ldr	r2, [pc, #244]	@ (8001e0c <main+0x1c0>)
 8001d16:	6013      	str	r3, [r2, #0]


  // Configure the LCD layers with their framebuffers in SRAM
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001d18:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f003 fbf9 	bl	8005514 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS + (800*480*4));
 8001d22:	493b      	ldr	r1, [pc, #236]	@ (8001e10 <main+0x1c4>)
 8001d24:	2001      	movs	r0, #1
 8001d26:	f003 fbf5 	bl	8005514 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_TRANSPARENT); //This ensures both layers are visible when overlaid?
 8001d2a:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f003 fc60 	bl	80055f4 <BSP_LCD_SetColorKeying>

  // Draw the image on layer 0
  //This sets the 'internal active layer variable that is used by the drawign routines

  BSP_LCD_SelectLayer(0); //Selects 0 as active  layer index ..all draws will go to zero..
 8001d34:	2000      	movs	r0, #0
 8001d36:	f003 fc4d 	bl	80055d4 <BSP_LCD_SelectLayer>



  //This bitmap is defined in image_xxx.h and placed during programming in the EEPROM accessed using the QuadSPI
  // Need to ensure its flashed into the QSPI 64M external before running.
  BSP_LCD_DrawBitmap(0, 0, webb_first_f769idisco);
 8001d3a:	4a36      	ldr	r2, [pc, #216]	@ (8001e14 <main+0x1c8>)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f003 fe02 	bl	8005948 <BSP_LCD_DrawBitmap>
  //CheckForUserInput(); //wait...

  //We need to try to write to the background (not active layer) then switch to that layer..
 // Draw text on layer one and use transparency to make the background image visible

  BSP_LCD_SelectLayer(1); //Makes 1 the active layer
 8001d44:	2001      	movs	r0, #1
 8001d46:	f003 fc45 	bl	80055d4 <BSP_LCD_SelectLayer>

  //BSP_LCD_DrawBitmap(0, 0, webb_first_f769idisco);

  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT); //So we can see the Layer 0 underneath ..important otherwise layer is overlaid with keying.
 8001d4a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001d4e:	f003 fcc7 	bl	80056e0 <BSP_LCD_Clear>

  BSP_LCD_SetBackColor(LCD_COLOR_TRANSPARENT); //ditto
 8001d52:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001d56:	f003 fc79 	bl	800564c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d5e:	f003 fc5d 	bl	800561c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font24);
 8001d62:	482d      	ldr	r0, [pc, #180]	@ (8001e18 <main+0x1cc>)
 8001d64:	f003 fc8c 	bl	8005680 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0,LINE(2) , (uint8_t *)"Running Demo 1.1", CENTER_MODE);
 8001d68:	f003 fca4 	bl	80056b4 <BSP_LCD_GetFont>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	88db      	ldrh	r3, [r3, #6]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	b299      	uxth	r1, r3
 8001d74:	2301      	movs	r3, #1
 8001d76:	4a29      	ldr	r2, [pc, #164]	@ (8001e1c <main+0x1d0>)
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f003 fd1d 	bl	80057b8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0,LINE(3) , (uint8_t *)"Audio with Basic Tremolo Effect", CENTER_MODE);
 8001d7e:	f003 fc99 	bl	80056b4 <BSP_LCD_GetFont>
 8001d82:	4603      	mov	r3, r0
 8001d84:	88db      	ldrh	r3, [r3, #6]
 8001d86:	461a      	mov	r2, r3
 8001d88:	0052      	lsls	r2, r2, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	4a23      	ldr	r2, [pc, #140]	@ (8001e20 <main+0x1d4>)
 8001d92:	2000      	movs	r0, #0
 8001d94:	f003 fd10 	bl	80057b8 <BSP_LCD_DisplayStringAt>

  //BSP_LCD_SelectLayer(1); //Makes 1 the active layer for the box drawing..


  //Will need to move to threads...perhaps?
  ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001d98:	f003 fba4 	bl	80054e4 <BSP_LCD_GetXSize>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29c      	uxth	r4, r3
 8001da0:	f003 fbac 	bl	80054fc <BSP_LCD_GetYSize>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4619      	mov	r1, r3
 8001daa:	4620      	mov	r0, r4
 8001dac:	f004 ff5a 	bl	8006c64 <BSP_TS_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <main+0x1d8>)
 8001db6:	601a      	str	r2, [r3, #0]
  //Could do with calibration..


  if(ts_status == TS_OK)
 8001db8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <main+0x1d8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <main+0x17a>
  {
	  /* Display touch screen active debug */
      printf("Touch screen is go!\r\n");
 8001dc0:	4819      	ldr	r0, [pc, #100]	@ (8001e28 <main+0x1dc>)
 8001dc2:	f010 f96f 	bl	80120a4 <puts>
  }
  OnError_Handler(ts_status != TS_OK);
 8001dc6:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <main+0x1d8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff29 	bl	8001c2c <OnError_Handler>


  //Generate random number
  srandom(12345); //seed
 8001dda:	f243 0039 	movw	r0, #12345	@ 0x3039
 8001dde:	f00f ffcb 	bl	8011d78 <srandom>
  random_x = random();        // returns a random number
 8001de2:	f00f fff7 	bl	8011dd4 <random>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <main+0x1e0>)
 8001dec:	601a      	str	r2, [r3, #0]

  // Setup
  AUDIO_SETUP();
 8001dee:	f000 fb37 	bl	8002460 <AUDIO_SETUP>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001df2:	f7ff f90f 	bl	8001014 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001df6:	f00c ff1b 	bl	800ec30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dfa:	bf00      	nop
 8001dfc:	e7fd      	b.n	8001dfa <main+0x1ae>
 8001dfe:	bf00      	nop
 8001e00:	08012fe0 	.word	0x08012fe0
 8001e04:	0801300c 	.word	0x0801300c
 8001e08:	200025b0 	.word	0x200025b0
 8001e0c:	200025b4 	.word	0x200025b4
 8001e10:	c0177000 	.word	0xc0177000
 8001e14:	90000000 	.word	0x90000000
 8001e18:	20000084 	.word	0x20000084
 8001e1c:	08013010 	.word	0x08013010
 8001e20:	08013024 	.word	0x08013024
 8001e24:	200025ac 	.word	0x200025ac
 8001e28:	08013044 	.word	0x08013044
 8001e2c:	200025b8 	.word	0x200025b8

08001e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b094      	sub	sp, #80	@ 0x50
 8001e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	2234      	movs	r2, #52	@ 0x34
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f010 f938 	bl	80120b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <SystemClock_Config+0xd8>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	4a2b      	ldr	r2, [pc, #172]	@ (8001f08 <SystemClock_Config+0xd8>)
 8001e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e60:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <SystemClock_Config+0xd8>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e6c:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <SystemClock_Config+0xdc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a26      	ldr	r2, [pc, #152]	@ (8001f0c <SystemClock_Config+0xdc>)
 8001e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <SystemClock_Config+0xdc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e98:	2319      	movs	r3, #25
 8001e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e9c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f009 fd96 	bl	800b9e4 <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ebe:	f000 fb41 	bl	8002544 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ec2:	f009 f86d 	bl	800afa0 <HAL_PWREx_EnableOverDrive>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001ecc:	f000 fb3a 	bl	8002544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001edc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ee0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	2107      	movs	r1, #7
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00a f826 	bl	800bf40 <HAL_RCC_ClockConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001efa:	f000 fb23 	bl	8002544 <Error_Handler>
  }
}
 8001efe:	bf00      	nop
 8001f00:	3750      	adds	r7, #80	@ 0x50
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000

08001f10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0a4      	sub	sp, #144	@ 0x90
 8001f14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f16:	463b      	mov	r3, r7
 8001f18:	2290      	movs	r2, #144	@ 0x90
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f010 f8c9 	bl	80120b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI1;
 8001f22:	f04f 1308 	mov.w	r3, #524296	@ 0x80008
 8001f26:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001f28:	23c0      	movs	r3, #192	@ 0xc0
 8001f2a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8001f30:	2303      	movs	r3, #3
 8001f32:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f44:	463b      	mov	r3, r7
 8001f46:	4618      	mov	r0, r3
 8001f48:	f00a fa12 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 8001f52:	f000 faf7 	bl	8002544 <Error_Handler>
  }
}
 8001f56:	bf00      	nop
 8001f58:	3790      	adds	r7, #144	@ 0x90
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <__io_putchar>:
       * @brief  Retargets the C library printf function to the USART.
       * @param  None
       * @retval None
       */
     PUTCHAR_PROTOTYPE
     {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
       /* Place your implementation of fputc here */
       /* e.g. write a character to the USART2 and Loop until the end of transmission */
       HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001f68:	1d39      	adds	r1, r7, #4
 8001f6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4803      	ldr	r0, [pc, #12]	@ (8001f80 <__io_putchar+0x20>)
 8001f72:	f00c f893 	bl	800e09c <HAL_UART_Transmit>
       //ITM_SendChar (ch);

       return ch;
 8001f76:	687b      	ldr	r3, [r7, #4]
     }
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20002740 	.word	0x20002740

08001f84 <HAL_DSI_EndOfRefreshCallback>:
     /* ISR Handlers */

     // USE_HAL_DSI_REGISTER_CALLBACKS ??Where is this  defined..

     void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
     {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
       (void)hdsi;
       if(pend_buffer >= 0)
 8001f8c:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_DSI_EndOfRefreshCallback+0x2c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db07      	blt.n	8001fa4 <HAL_DSI_EndOfRefreshCallback+0x20>
         //LTDC_LAYER(&hltdc_discovery, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
         //__HAL_LTDC_RELOAD_CONFIG(&hltdc_discovery);
         /* Enable DSI Wrapper */
         //__HAL_DSI_WRAPPER_ENABLE(&hdsi_discovery);

         front_buffer = pend_buffer;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_DSI_EndOfRefreshCallback+0x2c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a06      	ldr	r2, [pc, #24]	@ (8001fb4 <HAL_DSI_EndOfRefreshCallback+0x30>)
 8001f9a:	6013      	str	r3, [r2, #0]
         pend_buffer = -1;
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <HAL_DSI_EndOfRefreshCallback+0x2c>)
 8001f9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fa2:	601a      	str	r2, [r3, #0]
       }
     }
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000594 	.word	0x20000594

08001fb8 <HAL_LTDC_ReloadEventCallback>:



     //override of callback
     void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc){
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    	 //bufferNumber++;
    	 //Plot here?
    	 //BSP_LCD_FillRect(350, 200, 100, 100);
     }
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <DMA2_Stream4_IRQHandler>:


     void DMA2_Stream4_IRQHandler(void)
     {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
      HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001fd0:	4b03      	ldr	r3, [pc, #12]	@ (8001fe0 <DMA2_Stream4_IRQHandler+0x14>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f005 fb95 	bl	8007704 <HAL_DMA_IRQHandler>
     }
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200028b0 	.word	0x200028b0

08001fe4 <DMA2_Stream1_IRQHandler>:

     void DMA2_Stream1_IRQHandler(void)
     {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
      HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <DMA2_Stream1_IRQHandler+0x14>)
 8001fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fec:	4618      	mov	r0, r3
 8001fee:	f005 fb89 	bl	8007704 <HAL_DMA_IRQHandler>
     }
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000282c 	.word	0x2000282c

08001ffc <BSP_AUDIO_IN_Error_CallBack>:
       * @brief  Audio IN Error callback function.
       * @param  None
       * @retval None
       */
     void BSP_AUDIO_IN_Error_CallBack(void)
     {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
         /* This function is called when an Interrupt due to transfer error on or peripheral
            error occurs. */
         /* Display message on the LCD screen */
         //BSP_LCD_SetBackColor(LCD_COLOR_RED);
         //BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
    	  printf("BSP_AUDIO_IN_Error_CallBack\r\n");
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <BSP_AUDIO_IN_Error_CallBack+0x1c>)
 8002002:	f010 f84f 	bl	80120a4 <puts>

         /* Stop the program with an infinite loop */


         while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8002006:	bf00      	nop
 8002008:	2000      	movs	r0, #0
 800200a:	f002 fd5d 	bl	8004ac8 <BSP_PB_GetState>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
         {
             return;
 8002012:	bf00      	nop
         }


         /* could also generate a system reset to recover from the error */
         /* .... */
     }
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	08013064 	.word	0x08013064

0800201c <SAIx_In_Init>:
  * @param  pBuffer: Pointer to the buffer
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
     void SAIx_In_Init(uint32_t AudioFreq)
     {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
         /* Initialize SAI1 block A in MASTER TX */
         /* Initialize the haudio_out_sai Instance parameter */
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002024:	4b62      	ldr	r3, [pc, #392]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002026:	4a63      	ldr	r2, [pc, #396]	@ (80021b4 <SAIx_In_Init+0x198>)
 8002028:	601a      	str	r2, [r3, #0]

         /* Disable SAI peripheral to allow access to SAI internal registers */
         __HAL_SAI_DISABLE(&haudio_out_sai);
 800202a:	4b61      	ldr	r3, [pc, #388]	@ (80021b0 <SAIx_In_Init+0x194>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b5f      	ldr	r3, [pc, #380]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002038:	601a      	str	r2, [r3, #0]

         /* Configure SAI_Block_x */
         haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800203a:	4b5d      	ldr	r3, [pc, #372]	@ (80021b0 <SAIx_In_Init+0x194>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24
         haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002040:	4a5b      	ldr	r2, [pc, #364]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	61d3      	str	r3, [r2, #28]
         haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 8002046:	4b5a      	ldr	r3, [pc, #360]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
         haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800204c:	4b58      	ldr	r3, [pc, #352]	@ (80021b0 <SAIx_In_Init+0x194>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
         haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8002052:	4b57      	ldr	r3, [pc, #348]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
         haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 8002058:	4b55      	ldr	r3, [pc, #340]	@ (80021b0 <SAIx_In_Init+0x194>)
 800205a:	2280      	movs	r2, #128	@ 0x80
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34
         haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800205e:	4b54      	ldr	r3, [pc, #336]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002060:	2200      	movs	r2, #0
 8002062:	639a      	str	r2, [r3, #56]	@ 0x38
         haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002064:	4b52      	ldr	r3, [pc, #328]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002066:	2200      	movs	r2, #0
 8002068:	63da      	str	r2, [r3, #60]	@ 0x3c
         haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 800206a:	4b51      	ldr	r3, [pc, #324]	@ (80021b0 <SAIx_In_Init+0x194>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
         haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8002070:	4b4f      	ldr	r3, [pc, #316]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002072:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002076:	611a      	str	r2, [r3, #16]
         haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8002078:	4b4d      	ldr	r3, [pc, #308]	@ (80021b0 <SAIx_In_Init+0x194>)
 800207a:	2201      	movs	r2, #1
 800207c:	619a      	str	r2, [r3, #24]
         haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800207e:	4b4c      	ldr	r3, [pc, #304]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
         haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8002084:	4b4a      	ldr	r3, [pc, #296]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
         haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800208a:	4b49      	ldr	r3, [pc, #292]	@ (80021b0 <SAIx_In_Init+0x194>)
 800208c:	2200      	movs	r2, #0
 800208e:	62da      	str	r2, [r3, #44]	@ 0x2c
         haudio_out_sai.Init.Mckdiv         = 0;
 8002090:	4b47      	ldr	r3, [pc, #284]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]

         /* Configure SAI_Block_x Frame */
         haudio_out_sai.FrameInit.FrameLength       = 64;
 8002096:	4b46      	ldr	r3, [pc, #280]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002098:	2240      	movs	r2, #64	@ 0x40
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40
         haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800209c:	4b44      	ldr	r3, [pc, #272]	@ (80021b0 <SAIx_In_Init+0x194>)
 800209e:	2220      	movs	r2, #32
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
         haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80020a2:	4b43      	ldr	r3, [pc, #268]	@ (80021b0 <SAIx_In_Init+0x194>)
 80020a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020a8:	649a      	str	r2, [r3, #72]	@ 0x48
         haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80020aa:	4b41      	ldr	r3, [pc, #260]	@ (80021b0 <SAIx_In_Init+0x194>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	64da      	str	r2, [r3, #76]	@ 0x4c
         haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80020b0:	4b3f      	ldr	r3, [pc, #252]	@ (80021b0 <SAIx_In_Init+0x194>)
 80020b2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020b6:	651a      	str	r2, [r3, #80]	@ 0x50

         /* Configure SAI Block_x Slot */
         haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80020b8:	4b3d      	ldr	r3, [pc, #244]	@ (80021b0 <SAIx_In_Init+0x194>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
         haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80020be:	4b3c      	ldr	r3, [pc, #240]	@ (80021b0 <SAIx_In_Init+0x194>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	659a      	str	r2, [r3, #88]	@ 0x58
         haudio_out_sai.SlotInit.SlotNumber     = 4;
 80020c4:	4b3a      	ldr	r3, [pc, #232]	@ (80021b0 <SAIx_In_Init+0x194>)
 80020c6:	2204      	movs	r2, #4
 80020c8:	65da      	str	r2, [r3, #92]	@ 0x5c
         haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 80020ca:	4b39      	ldr	r3, [pc, #228]	@ (80021b0 <SAIx_In_Init+0x194>)
 80020cc:	220f      	movs	r2, #15
 80020ce:	661a      	str	r2, [r3, #96]	@ 0x60

         HAL_SAI_Init(&haudio_out_sai);
 80020d0:	4837      	ldr	r0, [pc, #220]	@ (80021b0 <SAIx_In_Init+0x194>)
 80020d2:	f00b f807 	bl	800d0e4 <HAL_SAI_Init>



         /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80020d6:	4b38      	ldr	r3, [pc, #224]	@ (80021b8 <SAIx_In_Init+0x19c>)
 80020d8:	4a38      	ldr	r2, [pc, #224]	@ (80021bc <SAIx_In_Init+0x1a0>)
 80020da:	601a      	str	r2, [r3, #0]

         /* Disable SAI peripheral to allow access to SAI internal registers */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 80020dc:	4b36      	ldr	r3, [pc, #216]	@ (80021b8 <SAIx_In_Init+0x19c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b35      	ldr	r3, [pc, #212]	@ (80021b8 <SAIx_In_Init+0x19c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020ea:	601a      	str	r2, [r3, #0]

         /* Configure SAI_Block_x */
         haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80020ec:	4b32      	ldr	r3, [pc, #200]	@ (80021b8 <SAIx_In_Init+0x19c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24
         haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80020f2:	4a31      	ldr	r2, [pc, #196]	@ (80021b8 <SAIx_In_Init+0x19c>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	61d3      	str	r3, [r2, #28]
         haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 80020f8:	4b2f      	ldr	r3, [pc, #188]	@ (80021b8 <SAIx_In_Init+0x19c>)
 80020fa:	2203      	movs	r2, #3
 80020fc:	605a      	str	r2, [r3, #4]
         haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80020fe:	4b2e      	ldr	r3, [pc, #184]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
         haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8002104:	4b2c      	ldr	r3, [pc, #176]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002106:	2200      	movs	r2, #0
 8002108:	631a      	str	r2, [r3, #48]	@ 0x30
         haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 800210a:	4b2b      	ldr	r3, [pc, #172]	@ (80021b8 <SAIx_In_Init+0x19c>)
 800210c:	2280      	movs	r2, #128	@ 0x80
 800210e:	635a      	str	r2, [r3, #52]	@ 0x34
         haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8002110:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002112:	2200      	movs	r2, #0
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
         haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002116:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002118:	2200      	movs	r2, #0
 800211a:	63da      	str	r2, [r3, #60]	@ 0x3c
         haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 800211c:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <SAIx_In_Init+0x19c>)
 800211e:	2201      	movs	r2, #1
 8002120:	609a      	str	r2, [r3, #8]
         haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8002122:	4b25      	ldr	r3, [pc, #148]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
         haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8002128:	4b23      	ldr	r3, [pc, #140]	@ (80021b8 <SAIx_In_Init+0x19c>)
 800212a:	2201      	movs	r2, #1
 800212c:	619a      	str	r2, [r3, #24]
         haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800212e:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
         haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8002134:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002136:	2200      	movs	r2, #0
 8002138:	629a      	str	r2, [r3, #40]	@ 0x28
         haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 800213a:	4b1f      	ldr	r3, [pc, #124]	@ (80021b8 <SAIx_In_Init+0x19c>)
 800213c:	2210      	movs	r2, #16
 800213e:	62da      	str	r2, [r3, #44]	@ 0x2c
         haudio_in_sai.Init.Mckdiv         = 0;
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002142:	2200      	movs	r2, #0
 8002144:	621a      	str	r2, [r3, #32]

         /* Configure SAI_Block_x Frame */
         haudio_in_sai.FrameInit.FrameLength       = 64;
 8002146:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002148:	2240      	movs	r2, #64	@ 0x40
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40
         haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800214c:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <SAIx_In_Init+0x19c>)
 800214e:	2220      	movs	r2, #32
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44
         haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8002152:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002154:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002158:	649a      	str	r2, [r3, #72]	@ 0x48
         haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800215a:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <SAIx_In_Init+0x19c>)
 800215c:	2200      	movs	r2, #0
 800215e:	64da      	str	r2, [r3, #76]	@ 0x4c
         haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002160:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002162:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002166:	651a      	str	r2, [r3, #80]	@ 0x50

         /* Configure SAI Block_x Slot */
         haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <SAIx_In_Init+0x19c>)
 800216a:	2200      	movs	r2, #0
 800216c:	655a      	str	r2, [r3, #84]	@ 0x54
         haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002170:	2200      	movs	r2, #0
 8002172:	659a      	str	r2, [r3, #88]	@ 0x58
         haudio_in_sai.SlotInit.SlotNumber     = 4;
 8002174:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002176:	2204      	movs	r2, #4
 8002178:	65da      	str	r2, [r3, #92]	@ 0x5c
         haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <SAIx_In_Init+0x19c>)
 800217c:	220f      	movs	r2, #15
 800217e:	661a      	str	r2, [r3, #96]	@ 0x60

         HAL_SAI_Init(&haudio_in_sai);
 8002180:	480d      	ldr	r0, [pc, #52]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002182:	f00a ffaf 	bl	800d0e4 <HAL_SAI_Init>

         /* Enable SAI peripheral */
         __HAL_SAI_ENABLE(&haudio_in_sai);
 8002186:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <SAIx_In_Init+0x19c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <SAIx_In_Init+0x19c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002194:	601a      	str	r2, [r3, #0]

         /* Enable SAI peripheral to generate MCLK */
         __HAL_SAI_ENABLE(&haudio_out_sai);
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <SAIx_In_Init+0x194>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <SAIx_In_Init+0x194>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021a4:	601a      	str	r2, [r3, #0]
     }
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000282c 	.word	0x2000282c
 80021b4:	40015804 	.word	0x40015804
 80021b8:	200028b0 	.word	0x200028b0
 80021bc:	40015824 	.word	0x40015824

080021c0 <SAIx_In_DeInit>:
     /**
       * @brief  Deinitializes the output Audio Codec audio interface (SAI).
       * @retval None
       */
     void SAIx_In_DeInit(void)
     {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <SAIx_In_DeInit+0x30>)
 80021c6:	4a0b      	ldr	r2, [pc, #44]	@ (80021f4 <SAIx_In_DeInit+0x34>)
 80021c8:	601a      	str	r2, [r3, #0]
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <SAIx_In_DeInit+0x38>)
 80021cc:	4a0b      	ldr	r2, [pc, #44]	@ (80021fc <SAIx_In_DeInit+0x3c>)
 80021ce:	601a      	str	r2, [r3, #0]
         /* Disable SAI peripheral */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 80021d0:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <SAIx_In_DeInit+0x30>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <SAIx_In_DeInit+0x30>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021de:	601a      	str	r2, [r3, #0]

         HAL_SAI_DeInit(&haudio_in_sai);
 80021e0:	4803      	ldr	r0, [pc, #12]	@ (80021f0 <SAIx_In_DeInit+0x30>)
 80021e2:	f00b f8fd 	bl	800d3e0 <HAL_SAI_DeInit>
         HAL_SAI_DeInit(&haudio_out_sai);
 80021e6:	4804      	ldr	r0, [pc, #16]	@ (80021f8 <SAIx_In_DeInit+0x38>)
 80021e8:	f00b f8fa 	bl	800d3e0 <HAL_SAI_DeInit>
     }
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200028b0 	.word	0x200028b0
 80021f4:	40015824 	.word	0x40015824
 80021f8:	2000282c 	.word	0x2000282c
 80021fc:	40015804 	.word	0x40015804

08002200 <SAI_AUDIO_IN_MspInit>:
       * @brief  Initializes SAI Audio IN MSP.
       * @param  hsai: SAI handle
       * @retval None
       */
     void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
     {
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	@ 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
         static DMA_HandleTypeDef hdma_sai_rx;
         GPIO_InitTypeDef  gpio_init_structure;

         /* Enable SAI clock */
         AUDIO_IN_SAIx_CLK_ENABLE();
 800220a:	4b50      	ldr	r3, [pc, #320]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	4a4f      	ldr	r2, [pc, #316]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002210:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002214:	6453      	str	r3, [r2, #68]	@ 0x44
 8002216:	4b4d      	ldr	r3, [pc, #308]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	69bb      	ldr	r3, [r7, #24]

         /* Enable SD GPIO clock */
         AUDIO_IN_SAIx_SD_ENABLE();
 8002222:	4b4a      	ldr	r3, [pc, #296]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a49      	ldr	r2, [pc, #292]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002228:	f043 0310 	orr.w	r3, r3, #16
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b47      	ldr	r3, [pc, #284]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
         /* CODEC_SAI pin configuration: SD pin */
         gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800223a:	2308      	movs	r3, #8
 800223c:	61fb      	str	r3, [r7, #28]
         gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	623b      	str	r3, [r7, #32]
         gpio_init_structure.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002246:	2302      	movs	r3, #2
 8002248:	62bb      	str	r3, [r7, #40]	@ 0x28
         gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800224a:	2306      	movs	r3, #6
 800224c:	62fb      	str	r3, [r7, #44]	@ 0x2c
         HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800224e:	f107 031c 	add.w	r3, r7, #28
 8002252:	4619      	mov	r1, r3
 8002254:	483e      	ldr	r0, [pc, #248]	@ (8002350 <SAI_AUDIO_IN_MspInit+0x150>)
 8002256:	f007 f9c7 	bl	80095e8 <HAL_GPIO_Init>

         /* Enable Audio INT GPIO clock */
         AUDIO_IN_INT_GPIO_ENABLE();
 800225a:	4b3c      	ldr	r3, [pc, #240]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a3b      	ldr	r2, [pc, #236]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002260:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b39      	ldr	r3, [pc, #228]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
         /* Audio INT pin configuration: input */
         gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002276:	61fb      	str	r3, [r7, #28]
         gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
         gpio_init_structure.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002280:	2302      	movs	r3, #2
 8002282:	62bb      	str	r3, [r7, #40]	@ 0x28
         HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	4832      	ldr	r0, [pc, #200]	@ (8002354 <SAI_AUDIO_IN_MspInit+0x154>)
 800228c:	f007 f9ac 	bl	80095e8 <HAL_GPIO_Init>

         /* Enable the DMA clock */
         AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002290:	4b2e      	ldr	r3, [pc, #184]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	4a2d      	ldr	r2, [pc, #180]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002296:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800229a:	6313      	str	r3, [r2, #48]	@ 0x30
 800229c:	4b2b      	ldr	r3, [pc, #172]	@ (800234c <SAI_AUDIO_IN_MspInit+0x14c>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]

         if (hsai->Instance == AUDIO_IN_SAIx)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002358 <SAI_AUDIO_IN_MspInit+0x158>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d138      	bne.n	8002324 <SAI_AUDIO_IN_MspInit+0x124>
         {
             /* Configure the hdma_sai_rx handle parameters */
             hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80022b2:	4b2a      	ldr	r3, [pc, #168]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022b8:	605a      	str	r2, [r3, #4]
             hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80022ba:	4b28      	ldr	r3, [pc, #160]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
             hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80022c0:	4b26      	ldr	r3, [pc, #152]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
             hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80022c6:	4b25      	ldr	r3, [pc, #148]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022cc:	611a      	str	r2, [r3, #16]
             hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80022ce:	4b23      	ldr	r3, [pc, #140]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022d4:	615a      	str	r2, [r3, #20]
             hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80022d6:	4b21      	ldr	r3, [pc, #132]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022dc:	619a      	str	r2, [r3, #24]
             hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80022de:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022e4:	61da      	str	r2, [r3, #28]
             hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022ec:	621a      	str	r2, [r3, #32]
             hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80022ee:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	625a      	str	r2, [r3, #36]	@ 0x24
             hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80022f4:	4b19      	ldr	r3, [pc, #100]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022f6:	2203      	movs	r2, #3
 80022f8:	629a      	str	r2, [r3, #40]	@ 0x28
             hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80022fa:	4b18      	ldr	r3, [pc, #96]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	62da      	str	r2, [r3, #44]	@ 0x2c
             hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002300:	4b16      	ldr	r3, [pc, #88]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30

             hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002308:	4a15      	ldr	r2, [pc, #84]	@ (8002360 <SAI_AUDIO_IN_MspInit+0x160>)
 800230a:	601a      	str	r2, [r3, #0]

             /* Associate the DMA handle */
             __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a13      	ldr	r2, [pc, #76]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002310:	671a      	str	r2, [r3, #112]	@ 0x70
 8002312:	4a12      	ldr	r2, [pc, #72]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6393      	str	r3, [r2, #56]	@ 0x38

             /* Deinitialize the Stream for new transfer */
             HAL_DMA_DeInit(&hdma_sai_rx);
 8002318:	4810      	ldr	r0, [pc, #64]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 800231a:	f005 f935 	bl	8007588 <HAL_DMA_DeInit>

             /* Configure the DMA Stream */
             HAL_DMA_Init(&hdma_sai_rx);
 800231e:	480f      	ldr	r0, [pc, #60]	@ (800235c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002320:	f005 f884 	bl	800742c <HAL_DMA_Init>
         }

         /* SAI DMA IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	210f      	movs	r1, #15
 8002328:	203c      	movs	r0, #60	@ 0x3c
 800232a:	f004 ff3b 	bl	80071a4 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800232e:	203c      	movs	r0, #60	@ 0x3c
 8002330:	f004 ff54 	bl	80071dc <HAL_NVIC_EnableIRQ>

         /* Audio INT IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	210f      	movs	r1, #15
 8002338:	2028      	movs	r0, #40	@ 0x28
 800233a:	f004 ff33 	bl	80071a4 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800233e:	2028      	movs	r0, #40	@ 0x28
 8002340:	f004 ff4c 	bl	80071dc <HAL_NVIC_EnableIRQ>
     }
 8002344:	bf00      	nop
 8002346:	3730      	adds	r7, #48	@ 0x30
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	40021000 	.word	0x40021000
 8002354:	40022400 	.word	0x40022400
 8002358:	40015824 	.word	0x40015824
 800235c:	200025bc 	.word	0x200025bc
 8002360:	40026470 	.word	0x40026470

08002364 <BSP_AUDIO_IN_OUT_Init>:



     uint8_t BSP_AUDIO_IN_OUT_Init(uint32_t AudioFreq)
     {
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
         uint8_t ret = AUDIO_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]

         /* Disable SAI */
         SAIx_In_DeInit();
 8002370:	f7ff ff26 	bl	80021c0 <SAIx_In_DeInit>

         /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
         BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	481f      	ldr	r0, [pc, #124]	@ (80023f8 <BSP_AUDIO_IN_OUT_Init+0x94>)
 800237a:	f002 fed7 	bl	800512c <BSP_AUDIO_OUT_ClockConfig>
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800237e:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <BSP_AUDIO_IN_OUT_Init+0x98>)
 8002380:	4a1f      	ldr	r2, [pc, #124]	@ (8002400 <BSP_AUDIO_IN_OUT_Init+0x9c>)
 8002382:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002384:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <BSP_AUDIO_IN_OUT_Init+0x94>)
 8002386:	4a1f      	ldr	r2, [pc, #124]	@ (8002404 <BSP_AUDIO_IN_OUT_Init+0xa0>)
 8002388:	601a      	str	r2, [r3, #0]
         if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800238a:	481b      	ldr	r0, [pc, #108]	@ (80023f8 <BSP_AUDIO_IN_OUT_Init+0x94>)
 800238c:	f00b f99c 	bl	800d6c8 <HAL_SAI_GetState>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <BSP_AUDIO_IN_OUT_Init+0x42>
         {
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8002396:	2100      	movs	r1, #0
 8002398:	4818      	ldr	r0, [pc, #96]	@ (80023fc <BSP_AUDIO_IN_OUT_Init+0x98>)
 800239a:	f002 fe25 	bl	8004fe8 <BSP_AUDIO_OUT_MspInit>
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 800239e:	2100      	movs	r1, #0
 80023a0:	4815      	ldr	r0, [pc, #84]	@ (80023f8 <BSP_AUDIO_IN_OUT_Init+0x94>)
 80023a2:	f7ff ff2d 	bl	8002200 <SAI_AUDIO_IN_MspInit>
         }


         SAIx_In_Init(AudioFreq);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff fe38 	bl	800201c <SAIx_In_Init>


         if ((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 80023ac:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2034      	movs	r0, #52	@ 0x34
 80023b2:	4798      	blx	r3
 80023b4:	4603      	mov	r3, r0
 80023b6:	f648 1294 	movw	r2, #35220	@ 0x8994
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d109      	bne.n	80023d2 <BSP_AUDIO_IN_OUT_Init+0x6e>
         {
             /* Reset the Codec Registers */
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80023be:	4b12      	ldr	r3, [pc, #72]	@ (8002408 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	2034      	movs	r0, #52	@ 0x34
 80023c4:	4798      	blx	r3
             /* Initialize the audio driver structure */
             audio_drv = &wm8994_drv;
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <BSP_AUDIO_IN_OUT_Init+0xa8>)
 80023c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002408 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 80023ca:	601a      	str	r2, [r3, #0]
             ret = AUDIO_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e001      	b.n	80023d6 <BSP_AUDIO_IN_OUT_Init+0x72>
         } else {
             ret = AUDIO_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
         }

         if (ret == AUDIO_OK)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d108      	bne.n	80023ee <BSP_AUDIO_IN_OUT_Init+0x8a>
         {
             /* Initialize the codec internal registers */
        	 //INPUT_DEVICE_ANALOG_MIC is the LINE IN input
        	 //100 is MAX volume on the CODEC
        	 audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 65, AudioFreq);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <BSP_AUDIO_IN_OUT_Init+0xa8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681c      	ldr	r4, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2241      	movs	r2, #65	@ 0x41
 80023e6:	f240 3102 	movw	r1, #770	@ 0x302
 80023ea:	2034      	movs	r0, #52	@ 0x34
 80023ec:	47a0      	blx	r4
             //audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
         }

         /* Return AUDIO_OK when all operations are correctly done */
         return ret;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
     }
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	200028b0 	.word	0x200028b0
 80023fc:	2000282c 	.word	0x2000282c
 8002400:	40015804 	.word	0x40015804
 8002404:	40015824 	.word	0x40015824
 8002408:	20000040 	.word	0x20000040
 800240c:	2000259c 	.word	0x2000259c

08002410 <_BSP_AUDIO_OUT_Play>:


      uint8_t _BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
     {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
         /* Call the audio Codec Play function */
    	 //This using the correct  size SF
         if (audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 800241a:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <_BSP_AUDIO_OUT_Play+0x48>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b292      	uxth	r2, r2
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	2034      	movs	r0, #52	@ 0x34
 8002428:	4798      	blx	r3
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <_BSP_AUDIO_OUT_Play+0x24>
         {
             return AUDIO_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e00c      	b.n	800244e <_BSP_AUDIO_OUT_Play+0x3e>

        	 //Buffer gets cast to a BYTE pointer, so this only transmits half the buffer
        	 //contents, i.e double buffer.


        	 if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4807      	ldr	r0, [pc, #28]	@ (800245c <_BSP_AUDIO_OUT_Play+0x4c>)
 800243e:	f00b f805 	bl	800d44c <HAL_SAI_Transmit_DMA>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <_BSP_AUDIO_OUT_Play+0x3c>
                 return AUDIO_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <_BSP_AUDIO_OUT_Play+0x3e>
             return AUDIO_OK;
 800244c:	2300      	movs	r3, #0
         }
     }
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000259c 	.word	0x2000259c
 800245c:	2000282c 	.word	0x2000282c

08002460 <AUDIO_SETUP>:

      void AUDIO_SETUP(void)
           {
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
    	       //This will all kick off the SAI and configure the CODEC.
    	       //Call back interrupts, handled in main.c will then communicate with the
    	       //audio listene task

               //Change Sampling rate here...
               if (BSP_AUDIO_IN_OUT_Init(BSP_AUDIO_FREQUENCY_48K) == AUDIO_OK)
 8002466:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800246a:	f7ff ff7b 	bl	8002364 <BSP_AUDIO_IN_OUT_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <AUDIO_SETUP+0x1c>
               {
              	 printf("Audio I/O initialization OK\r\n");
 8002474:	481e      	ldr	r0, [pc, #120]	@ (80024f0 <AUDIO_SETUP+0x90>)
 8002476:	f00f fe15 	bl	80120a4 <puts>
 800247a:	e004      	b.n	8002486 <AUDIO_SETUP+0x26>
               } else {
              	 printf("Audio I/O initialization failed.\r\n");
 800247c:	481d      	ldr	r0, [pc, #116]	@ (80024f4 <AUDIO_SETUP+0x94>)
 800247e:	f00f fe11 	bl	80120a4 <puts>
              	 Error_Handler();
 8002482:	f000 f85f 	bl	8002544 <Error_Handler>
               // Start Receiving audio into Record Buffer..
               // Audio Buffer is  defined as int16,
               // so this transfer will only begin to receive into half the buffer. Double buff
               //Not  the record buffer size is cast to uint8, so effectively this halfs the
               //bytes that re transferred per block
               HAL_StatusTypeDef res = HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)RecordBuffer, RECORD_BUFFER_SIZE);
 8002486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800248a:	491b      	ldr	r1, [pc, #108]	@ (80024f8 <AUDIO_SETUP+0x98>)
 800248c:	481b      	ldr	r0, [pc, #108]	@ (80024fc <AUDIO_SETUP+0x9c>)
 800248e:	f00b f88d 	bl	800d5ac <HAL_SAI_Receive_DMA>
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
               if (HAL_OK == res)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <AUDIO_SETUP+0x44>
               {
              	 printf("SAI receive begin OK\r\n");
 800249c:	4818      	ldr	r0, [pc, #96]	@ (8002500 <AUDIO_SETUP+0xa0>)
 800249e:	f00f fe01 	bl	80120a4 <puts>
 80024a2:	e006      	b.n	80024b2 <AUDIO_SETUP+0x52>
               } else {
                   printf("SAI receive error: %d\r\n", res);
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4816      	ldr	r0, [pc, #88]	@ (8002504 <AUDIO_SETUP+0xa4>)
 80024aa:	f00f fd93 	bl	8011fd4 <iprintf>
                   Error_Handler();
 80024ae:	f000 f849 	bl	8002544 <Error_Handler>
               }

               printf("Begin Playback buffer\r\n");
 80024b2:	4815      	ldr	r0, [pc, #84]	@ (8002508 <AUDIO_SETUP+0xa8>)
 80024b4:	f00f fdf6 	bl	80120a4 <puts>

               /* Play the recorded buffer */
               if (_BSP_AUDIO_OUT_Play((uint16_t *) &PlaybackBuffer[0], RECORD_BUFFER_SIZE) == AUDIO_OK)
 80024b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024bc:	4813      	ldr	r0, [pc, #76]	@ (800250c <AUDIO_SETUP+0xac>)
 80024be:	f7ff ffa7 	bl	8002410 <_BSP_AUDIO_OUT_Play>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d103      	bne.n	80024d0 <AUDIO_SETUP+0x70>
               {
              	 printf("Audio output OK\r\n");
 80024c8:	4811      	ldr	r0, [pc, #68]	@ (8002510 <AUDIO_SETUP+0xb0>)
 80024ca:	f00f fdeb 	bl	80120a4 <puts>
 80024ce:	e004      	b.n	80024da <AUDIO_SETUP+0x7a>
               } else {
              	 printf("Audio output error\r\n");
 80024d0:	4810      	ldr	r0, [pc, #64]	@ (8002514 <AUDIO_SETUP+0xb4>)
 80024d2:	f00f fde7 	bl	80120a4 <puts>
              	 Error_Handler();
 80024d6:	f000 f835 	bl	8002544 <Error_Handler>
           	 }
               printf("\r\n");
 80024da:	480f      	ldr	r0, [pc, #60]	@ (8002518 <AUDIO_SETUP+0xb8>)
 80024dc:	f00f fde2 	bl	80120a4 <puts>

               audio_rec_buffer_state = BUFFER_OFFSET_NONE; //trap for kickoff
 80024e0:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <AUDIO_SETUP+0xbc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]


      } // end AUDIO_SETUP function
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	08013084 	.word	0x08013084
 80024f4:	080130a4 	.word	0x080130a4
 80024f8:	20000598 	.word	0x20000598
 80024fc:	200028b0 	.word	0x200028b0
 8002500:	080130c8 	.word	0x080130c8
 8002504:	080130e0 	.word	0x080130e0
 8002508:	080130f8 	.word	0x080130f8
 800250c:	20001598 	.word	0x20001598
 8002510:	08013110 	.word	0x08013110
 8002514:	08013124 	.word	0x08013124
 8002518:	0801300c 	.word	0x0801300c
 800251c:	20002598 	.word	0x20002598

08002520 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002532:	f004 fd17 	bl	8006f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40001000 	.word	0x40001000

08002544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  BSP_LED_Toggle(LED_RED);
 800254c:	2000      	movs	r0, #0
 800254e:	f002 faa1 	bl	8004a94 <BSP_LED_Toggle>
	  HAL_Delay(1000);
 8002552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002556:	f004 fd25 	bl	8006fa4 <HAL_Delay>
	  BSP_LED_Toggle(LED_RED);
 800255a:	bf00      	nop
 800255c:	e7f6      	b.n	800254c <Error_Handler+0x8>
	...

08002560 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002566:	4a13      	ldr	r2, [pc, #76]	@ (80025b4 <MX_QUADSPI_Init+0x54>)
 8002568:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800256a:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 800256c:	2201      	movs	r2, #1
 800256e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 8002570:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002572:	2210      	movs	r2, #16
 8002574:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002578:	2200      	movs	r2, #0
 800257a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 800257e:	2201      	movs	r2, #1
 8002580:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002590:	2200      	movs	r2, #0
 8002592:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 800259c:	f008 fd50 	bl	800b040 <HAL_QSPI_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80025a6:	f7ff ffcd 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000261c 	.word	0x2000261c
 80025b4:	a0001000 	.word	0xa0001000

080025b8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	@ 0x30
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002700 <HAL_QSPI_MspInit+0x148>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	f040 808e 	bne.w	80026f8 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80025dc:	4b49      	ldr	r3, [pc, #292]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	4a48      	ldr	r2, [pc, #288]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	6393      	str	r3, [r2, #56]	@ 0x38
 80025e8:	4b46      	ldr	r3, [pc, #280]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 80025ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025f4:	4b43      	ldr	r3, [pc, #268]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	4a42      	ldr	r2, [pc, #264]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 80025fa:	f043 0310 	orr.w	r3, r3, #16
 80025fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002600:	4b40      	ldr	r3, [pc, #256]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260c:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	4a3c      	ldr	r2, [pc, #240]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	6313      	str	r3, [r2, #48]	@ 0x30
 8002618:	4b3a      	ldr	r3, [pc, #232]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002624:	4b37      	ldr	r3, [pc, #220]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	4a36      	ldr	r2, [pc, #216]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002630:	4b34      	ldr	r3, [pc, #208]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263c:	4b31      	ldr	r3, [pc, #196]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	4a30      	ldr	r2, [pc, #192]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 8002642:	f043 0308 	orr.w	r3, r3, #8
 8002646:	6313      	str	r3, [r2, #48]	@ 0x30
 8002648:	4b2e      	ldr	r3, [pc, #184]	@ (8002704 <HAL_QSPI_MspInit+0x14c>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002654:	2304      	movs	r3, #4
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002664:	2309      	movs	r3, #9
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002668:	f107 031c 	add.w	r3, r7, #28
 800266c:	4619      	mov	r1, r3
 800266e:	4826      	ldr	r0, [pc, #152]	@ (8002708 <HAL_QSPI_MspInit+0x150>)
 8002670:	f006 ffba 	bl	80095e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002674:	2340      	movs	r3, #64	@ 0x40
 8002676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002684:	230a      	movs	r3, #10
 8002686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4619      	mov	r1, r3
 800268e:	481f      	ldr	r0, [pc, #124]	@ (800270c <HAL_QSPI_MspInit+0x154>)
 8002690:	f006 ffaa 	bl	80095e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8002694:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80026a6:	2309      	movs	r3, #9
 80026a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	4817      	ldr	r0, [pc, #92]	@ (8002710 <HAL_QSPI_MspInit+0x158>)
 80026b2:	f006 ff99 	bl	80095e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026b6:	2304      	movs	r3, #4
 80026b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80026c6:	2309      	movs	r3, #9
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	4619      	mov	r1, r3
 80026d0:	480e      	ldr	r0, [pc, #56]	@ (800270c <HAL_QSPI_MspInit+0x154>)
 80026d2:	f006 ff89 	bl	80095e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 80026d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80026e8:	2309      	movs	r3, #9
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	4619      	mov	r1, r3
 80026f2:	4808      	ldr	r0, [pc, #32]	@ (8002714 <HAL_QSPI_MspInit+0x15c>)
 80026f4:	f006 ff78 	bl	80095e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80026f8:	bf00      	nop
 80026fa:	3730      	adds	r7, #48	@ 0x30
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	a0001000 	.word	0xa0001000
 8002704:	40023800 	.word	0x40023800
 8002708:	40021000 	.word	0x40021000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00

08002718 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0f      	ldr	r2, [pc, #60]	@ (8002764 <HAL_QSPI_MspDeInit+0x4c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d117      	bne.n	800275a <HAL_QSPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800272a:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <HAL_QSPI_MspDeInit+0x50>)
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	4a0e      	ldr	r2, [pc, #56]	@ (8002768 <HAL_QSPI_MspDeInit+0x50>)
 8002730:	f023 0302 	bic.w	r3, r3, #2
 8002734:	6393      	str	r3, [r2, #56]	@ 0x38
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 8002736:	2104      	movs	r1, #4
 8002738:	480c      	ldr	r0, [pc, #48]	@ (800276c <HAL_QSPI_MspDeInit+0x54>)
 800273a:	f007 f901 	bl	8009940 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 800273e:	2144      	movs	r1, #68	@ 0x44
 8002740:	480b      	ldr	r0, [pc, #44]	@ (8002770 <HAL_QSPI_MspDeInit+0x58>)
 8002742:	f007 f8fd 	bl	8009940 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, QSPI_D1_Pin|QSPI_D0_Pin);
 8002746:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800274a:	480a      	ldr	r0, [pc, #40]	@ (8002774 <HAL_QSPI_MspDeInit+0x5c>)
 800274c:	f007 f8f8 	bl	8009940 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_D3_GPIO_Port, QSPI_D3_Pin);
 8002750:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002754:	4808      	ldr	r0, [pc, #32]	@ (8002778 <HAL_QSPI_MspDeInit+0x60>)
 8002756:	f007 f8f3 	bl	8009940 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	a0001000 	.word	0xa0001000
 8002768:	40023800 	.word	0x40023800
 800276c:	40021000 	.word	0x40021000
 8002770:	40020400 	.word	0x40020400
 8002774:	40020800 	.word	0x40020800
 8002778:	40020c00 	.word	0x40020c00

0800277c <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002780:	4b28      	ldr	r3, [pc, #160]	@ (8002824 <MX_SAI1_Init+0xa8>)
 8002782:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <MX_SAI1_Init+0xac>)
 8002784:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002786:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <MX_SAI1_Init+0xa8>)
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800278c:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <MX_SAI1_Init+0xa8>)
 800278e:	2200      	movs	r2, #0
 8002790:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8002792:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <MX_SAI1_Init+0xa8>)
 8002794:	2240      	movs	r2, #64	@ 0x40
 8002796:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002798:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <MX_SAI1_Init+0xa8>)
 800279a:	2200      	movs	r2, #0
 800279c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800279e:	4b21      	ldr	r3, [pc, #132]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80027a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80027aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80027b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027be:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <MX_SAI1_Init+0xb0>)
 80027c0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80027c2:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80027c8:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80027d4:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80027da:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027dc:	2208      	movs	r2, #8
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80027e0:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80027e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80027ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <MX_SAI1_Init+0xa8>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <MX_SAI1_Init+0xa8>)
 8002800:	2200      	movs	r2, #0
 8002802:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002804:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <MX_SAI1_Init+0xa8>)
 8002806:	2201      	movs	r2, #1
 8002808:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <MX_SAI1_Init+0xa8>)
 800280c:	2200      	movs	r2, #0
 800280e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002810:	4804      	ldr	r0, [pc, #16]	@ (8002824 <MX_SAI1_Init+0xa8>)
 8002812:	f00a fc67 	bl	800d0e4 <HAL_SAI_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800281c:	f7ff fe92 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20002668 	.word	0x20002668
 8002828:	40015804 	.word	0x40015804
 800282c:	0002ee00 	.word	0x0002ee00

08002830 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1d      	ldr	r2, [pc, #116]	@ (80028b4 <HAL_SAI_MspInit+0x84>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d134      	bne.n	80028ac <HAL_SAI_MspInit+0x7c>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002842:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <HAL_SAI_MspInit+0x88>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800284a:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <HAL_SAI_MspInit+0x8c>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	4a1b      	ldr	r2, [pc, #108]	@ (80028bc <HAL_SAI_MspInit+0x8c>)
 8002850:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002854:	6453      	str	r3, [r2, #68]	@ 0x44
 8002856:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_SAI_MspInit+0x8c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <HAL_SAI_MspInit+0x88>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	4a13      	ldr	r2, [pc, #76]	@ (80028b8 <HAL_SAI_MspInit+0x88>)
 800286a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 800286c:	2378      	movs	r3, #120	@ 0x78
 800286e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800287c:	2306      	movs	r3, #6
 800287e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	4619      	mov	r1, r3
 8002886:	480e      	ldr	r0, [pc, #56]	@ (80028c0 <HAL_SAI_MspInit+0x90>)
 8002888:	f006 feae 	bl	80095e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800289c:	2306      	movs	r3, #6
 800289e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	4807      	ldr	r0, [pc, #28]	@ (80028c4 <HAL_SAI_MspInit+0x94>)
 80028a8:	f006 fe9e 	bl	80095e8 <HAL_GPIO_Init>

    }
}
 80028ac:	bf00      	nop
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40015804 	.word	0x40015804
 80028b8:	200026ec 	.word	0x200026ec
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40021800 	.word	0x40021800

080028c8 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002910 <HAL_SAI_MspDeInit+0x48>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d116      	bne.n	8002908 <HAL_SAI_MspDeInit+0x40>
    {
    SAI1_client --;
 80028da:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <HAL_SAI_MspDeInit+0x4c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3b01      	subs	r3, #1
 80028e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002914 <HAL_SAI_MspDeInit+0x4c>)
 80028e2:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_SAI_MspDeInit+0x4c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_SAI_MspDeInit+0x50>)
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <HAL_SAI_MspDeInit+0x50>)
 80028f2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80028f6:	6453      	str	r3, [r2, #68]	@ 0x44
    PE3     ------> SAI1_SD_B
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    HAL_GPIO_DeInit(GPIOE, SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin);
 80028f8:	2178      	movs	r1, #120	@ 0x78
 80028fa:	4808      	ldr	r0, [pc, #32]	@ (800291c <HAL_SAI_MspDeInit+0x54>)
 80028fc:	f007 f820 	bl	8009940 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SAI1_MCLKA_GPIO_Port, SAI1_MCLKA_Pin);
 8002900:	2180      	movs	r1, #128	@ 0x80
 8002902:	4807      	ldr	r0, [pc, #28]	@ (8002920 <HAL_SAI_MspDeInit+0x58>)
 8002904:	f007 f81c 	bl	8009940 <HAL_GPIO_DeInit>

    }
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40015804 	.word	0x40015804
 8002914:	200026ec 	.word	0x200026ec
 8002918:	40023800 	.word	0x40023800
 800291c:	40021000 	.word	0x40021000
 8002920:	40021800 	.word	0x40021800

08002924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <HAL_MspInit+0x5c>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	4a14      	ldr	r2, [pc, #80]	@ (8002980 <HAL_MspInit+0x5c>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	@ 0x40
 8002936:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <HAL_MspInit+0x5c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <HAL_MspInit+0x5c>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	4a0e      	ldr	r2, [pc, #56]	@ (8002980 <HAL_MspInit+0x5c>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800294c:	6453      	str	r3, [r2, #68]	@ 0x44
 800294e:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_MspInit+0x5c>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	210f      	movs	r1, #15
 800295e:	f06f 0001 	mvn.w	r0, #1
 8002962:	f004 fc1f 	bl	80071a4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2105      	movs	r1, #5
 800296a:	2005      	movs	r0, #5
 800296c:	f004 fc1a 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002970:	2005      	movs	r0, #5
 8002972:	f004 fc33 	bl	80071dc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08e      	sub	sp, #56	@ 0x38
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002994:	4b33      	ldr	r3, [pc, #204]	@ (8002a64 <HAL_InitTick+0xe0>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	4a32      	ldr	r2, [pc, #200]	@ (8002a64 <HAL_InitTick+0xe0>)
 800299a:	f043 0310 	orr.w	r3, r3, #16
 800299e:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a0:	4b30      	ldr	r3, [pc, #192]	@ (8002a64 <HAL_InitTick+0xe0>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029ac:	f107 0210 	add.w	r2, r7, #16
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f009 fca8 	bl	800c30c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029c6:	f009 fc79 	bl	800c2bc <HAL_RCC_GetPCLK1Freq>
 80029ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80029cc:	e004      	b.n	80029d8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029ce:	f009 fc75 	bl	800c2bc <HAL_RCC_GetPCLK1Freq>
 80029d2:	4603      	mov	r3, r0
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029da:	4a23      	ldr	r2, [pc, #140]	@ (8002a68 <HAL_InitTick+0xe4>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	0c9b      	lsrs	r3, r3, #18
 80029e2:	3b01      	subs	r3, #1
 80029e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <HAL_InitTick+0xe8>)
 80029e8:	4a21      	ldr	r2, [pc, #132]	@ (8002a70 <HAL_InitTick+0xec>)
 80029ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029ec:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <HAL_InitTick+0xe8>)
 80029ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029f4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a6c <HAL_InitTick+0xe8>)
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029fa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <HAL_InitTick+0xe8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <HAL_InitTick+0xe8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a06:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <HAL_InitTick+0xe8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a0c:	4817      	ldr	r0, [pc, #92]	@ (8002a6c <HAL_InitTick+0xe8>)
 8002a0e:	f00b f817 	bl	800da40 <HAL_TIM_Base_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002a18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d11b      	bne.n	8002a58 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a20:	4812      	ldr	r0, [pc, #72]	@ (8002a6c <HAL_InitTick+0xe8>)
 8002a22:	f00b f86f 	bl	800db04 <HAL_TIM_Base_Start_IT>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002a2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d111      	bne.n	8002a58 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a34:	2036      	movs	r0, #54	@ 0x36
 8002a36:	f004 fbd1 	bl	80071dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d808      	bhi.n	8002a52 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002a40:	2200      	movs	r2, #0
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	2036      	movs	r0, #54	@ 0x36
 8002a46:	f004 fbad 	bl	80071a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <HAL_InitTick+0xf0>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e002      	b.n	8002a58 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3738      	adds	r7, #56	@ 0x38
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	431bde83 	.word	0x431bde83
 8002a6c:	200026f0 	.word	0x200026f0
 8002a70:	40001000 	.word	0x40001000
 8002a74:	20000098 	.word	0x20000098

08002a78 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a8c:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <TIM6_DAC_IRQHandler+0x10>)
 8002a8e:	f00b f8b1 	bl	800dbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200026f0 	.word	0x200026f0

08002a9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002aa0:	4802      	ldr	r0, [pc, #8]	@ (8002aac <LTDC_IRQHandler+0x10>)
 8002aa2:	f007 ff1f 	bl	800a8e4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200004ec 	.word	0x200004ec

08002ab0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002ab4:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <DMA2D_IRQHandler+0x10>)
 8002ab6:	f005 f9fd 	bl	8007eb4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000190 	.word	0x20000190

08002ac4 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002ac8:	4802      	ldr	r0, [pc, #8]	@ (8002ad4 <DSI_IRQHandler+0x10>)
 8002aca:	f005 fed1 	bl	8008870 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200001e8 	.word	0x200001e8

08002ad8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return 1;
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_kill>:

int _kill(int pid, int sig)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002af2:	f00f fb3d 	bl	8012170 <__errno>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2216      	movs	r2, #22
 8002afa:	601a      	str	r2, [r3, #0]
  return -1;
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_exit>:

void _exit (int status)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ffe7 	bl	8002ae8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b1a:	bf00      	nop
 8002b1c:	e7fd      	b.n	8002b1a <_exit+0x12>

08002b1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e00a      	b.n	8002b46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b30:	f3af 8000 	nop.w
 8002b34:	4601      	mov	r1, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	60ba      	str	r2, [r7, #8]
 8002b3c:	b2ca      	uxtb	r2, r1
 8002b3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	dbf0      	blt.n	8002b30 <_read+0x12>
  }

  return len;
 8002b4e:	687b      	ldr	r3, [r7, #4]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e009      	b.n	8002b7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	60ba      	str	r2, [r7, #8]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f9f4 	bl	8001f60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	dbf1      	blt.n	8002b6a <_write+0x12>
  }
  return len;
 8002b86:	687b      	ldr	r3, [r7, #4]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_close>:

int _close(int file)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bb8:	605a      	str	r2, [r3, #4]
  return 0;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_isatty>:

int _isatty(int file)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c00:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <_sbrk+0x5c>)
 8002c02:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <_sbrk+0x60>)
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c0c:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <_sbrk+0x64>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c14:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <_sbrk+0x64>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <_sbrk+0x68>)
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1a:	4b10      	ldr	r3, [pc, #64]	@ (8002c5c <_sbrk+0x64>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d207      	bcs.n	8002c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c28:	f00f faa2 	bl	8012170 <__errno>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	220c      	movs	r2, #12
 8002c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c36:	e009      	b.n	8002c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c38:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <_sbrk+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c3e:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	4a05      	ldr	r2, [pc, #20]	@ (8002c5c <_sbrk+0x64>)
 8002c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20080000 	.word	0x20080000
 8002c58:	00000400 	.word	0x00000400
 8002c5c:	2000273c 	.word	0x2000273c
 8002c60:	20006bb0 	.word	0x20006bb0

08002c64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <SystemInit+0x20>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6e:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <SystemInit+0x20>)
 8002c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002c8e:	4a15      	ldr	r2, [pc, #84]	@ (8002ce4 <MX_USART1_UART_Init+0x5c>)
 8002c90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c92:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002cae:	220c      	movs	r2, #12
 8002cb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cca:	4805      	ldr	r0, [pc, #20]	@ (8002ce0 <MX_USART1_UART_Init+0x58>)
 8002ccc:	f00b f998 	bl	800e000 <HAL_UART_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cd6:	f7ff fc35 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20002740 	.word	0x20002740
 8002ce4:	40011000 	.word	0x40011000

08002ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b0ae      	sub	sp, #184	@ 0xb8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2290      	movs	r2, #144	@ 0x90
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f00f f9d3 	bl	80120b4 <memset>
  if(uartHandle->Instance==USART1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2c      	ldr	r2, [pc, #176]	@ (8002dc4 <HAL_UART_MspInit+0xdc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d151      	bne.n	8002dbc <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d18:	2340      	movs	r3, #64	@ 0x40
 8002d1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4618      	mov	r0, r3
 8002d26:	f009 fb23 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d30:	f7ff fc08 	bl	8002544 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d34:	4b24      	ldr	r3, [pc, #144]	@ (8002dc8 <HAL_UART_MspInit+0xe0>)
 8002d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d38:	4a23      	ldr	r2, [pc, #140]	@ (8002dc8 <HAL_UART_MspInit+0xe0>)
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d40:	4b21      	ldr	r3, [pc, #132]	@ (8002dc8 <HAL_UART_MspInit+0xe0>)
 8002d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <HAL_UART_MspInit+0xe0>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc8 <HAL_UART_MspInit+0xe0>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d58:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <HAL_UART_MspInit+0xe0>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d7e:	2307      	movs	r3, #7
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002d84:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4810      	ldr	r0, [pc, #64]	@ (8002dcc <HAL_UART_MspInit+0xe4>)
 8002d8c:	f006 fc2c 	bl	80095e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002daa:	2307      	movs	r3, #7
 8002dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002db0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4805      	ldr	r0, [pc, #20]	@ (8002dcc <HAL_UART_MspInit+0xe4>)
 8002db8:	f006 fc16 	bl	80095e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	37b8      	adds	r7, #184	@ 0xb8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020000 	.word	0x40020000

08002dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd4:	480d      	ldr	r0, [pc, #52]	@ (8002e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dd6:	490e      	ldr	r1, [pc, #56]	@ (8002e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8002e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ddc:	e002      	b.n	8002de4 <LoopCopyDataInit>

08002dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de2:	3304      	adds	r3, #4

08002de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de8:	d3f9      	bcc.n	8002dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dea:	4a0b      	ldr	r2, [pc, #44]	@ (8002e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dec:	4c0b      	ldr	r4, [pc, #44]	@ (8002e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df0:	e001      	b.n	8002df6 <LoopFillZerobss>

08002df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df4:	3204      	adds	r2, #4

08002df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df8:	d3fb      	bcc.n	8002df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dfa:	f7ff ff33 	bl	8002c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dfe:	f00f f9bd 	bl	801217c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e02:	f7fe ff23 	bl	8001c4c <main>
  bx  lr    
 8002e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e10:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002e14:	08014f2c 	.word	0x08014f2c
  ldr r2, =_sbss
 8002e18:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002e1c:	20006bac 	.word	0x20006bac

08002e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e20:	e7fe      	b.n	8002e20 <ADC_IRQHandler>
	...

08002e24 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f90b 	bl	800304c <ft6x06_GetInstance>
 8002e36:	4603      	mov	r3, r0
 8002e38:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2bff      	cmp	r3, #255	@ 0xff
 8002e3e:	d10e      	bne.n	8002e5e <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f000 f903 	bl	800304c <ft6x06_GetInstance>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8002e4a:	7bbb      	ldrb	r3, [r7, #14]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d806      	bhi.n	8002e5e <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	b2d1      	uxtb	r1, r2
 8002e56:	4a04      	ldr	r2, [pc, #16]	@ (8002e68 <ft6x06_Init+0x44>)
 8002e58:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8002e5a:	f002 f823 	bl	8004ea4 <TS_IO_Init>
    }
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200027c8 	.word	0x200027c8

08002e6c <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8002e8c:	f002 f80a 	bl	8004ea4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	21a8      	movs	r1, #168	@ 0xa8
 8002e96:	4618      	mov	r0, r3
 8002e98:	f002 f828 	bl	8004eec <TS_IO_Read>
 8002e9c:	4603      	mov	r3, r0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f8bb 	bl	800302e <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f88c 	bl	8002fd8 <ft6x06_TS_DisableIT>
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 f805 	bl	8004eec <TS_IO_Read>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <ft6x06_TS_DetectTouch+0x50>)
 8002f04:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8002f06:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <ft6x06_TS_DetectTouch+0x50>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	b2db      	uxtb	r3, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	200027cc 	.word	0x200027cc

08002f1c <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fac <ft6x06_TS_GetXY+0x90>)
 8002f30:	789a      	ldrb	r2, [r3, #2]
 8002f32:	4b1e      	ldr	r3, [pc, #120]	@ (8002fac <ft6x06_TS_GetXY+0x90>)
 8002f34:	785b      	ldrb	r3, [r3, #1]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d234      	bcs.n	8002fa4 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fac <ft6x06_TS_GetXY+0x90>)
 8002f3c:	789b      	ldrb	r3, [r3, #2]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <ft6x06_TS_GetXY+0x2c>
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d003      	beq.n	8002f4e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8002f46:	e005      	b.n	8002f54 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8002f48:	2303      	movs	r3, #3
 8002f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f4c:	e002      	b.n	8002f54 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8002f4e:	2309      	movs	r3, #9
 8002f50:	75fb      	strb	r3, [r7, #23]
      break;
 8002f52:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8002f54:	89fb      	ldrh	r3, [r7, #14]
 8002f56:	b2d8      	uxtb	r0, r3
 8002f58:	f107 0210 	add.w	r2, r7, #16
 8002f5c:	7df9      	ldrb	r1, [r7, #23]
 8002f5e:	2304      	movs	r3, #4
 8002f60:	f001 ffe2 	bl	8004f28 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8002f64:	7c3b      	ldrb	r3, [r7, #16]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f6e:	b21a      	sxth	r2, r3
 8002f70:	7c7b      	ldrb	r3, [r7, #17]
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b21b      	sxth	r3, r3
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8002f7e:	7cbb      	ldrb	r3, [r7, #18]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	b21b      	sxth	r3, r3
 8002f84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	b21b      	sxth	r3, r3
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8002f98:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <ft6x06_TS_GetXY+0x90>)
 8002f9a:	789b      	ldrb	r3, [r3, #2]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	4b02      	ldr	r3, [pc, #8]	@ (8002fac <ft6x06_TS_GetXY+0x90>)
 8002fa2:	709a      	strb	r2, [r3, #2]
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	200027cc 	.word	0x200027cc

08002fb0 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	21a4      	movs	r1, #164	@ 0xa4
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 ff74 	bl	8004eb8 <TS_IO_Write>
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	21a4      	movs	r1, #164	@ 0xa4
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 ff60 	bl	8004eb8 <TS_IO_Write>
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	4603      	mov	r3, r0
 8003036:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800303c:	68fb      	ldr	r3, [r7, #12]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e00b      	b.n	8003078 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <ft6x06_GetInstance+0x40>)
 8003064:	5cd3      	ldrb	r3, [r2, r3]
 8003066:	461a      	mov	r2, r3
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	e006      	b.n	8003080 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	3301      	adds	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d9f0      	bls.n	8003060 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800307e:	23ff      	movs	r3, #255	@ 0xff
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	200027c8 	.word	0x200027c8

08003090 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b0b2      	sub	sp, #200	@ 0xc8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 800309a:	2078      	movs	r0, #120	@ 0x78
 800309c:	f001 ff62 	bl	8004f64 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80030a0:	4ac8      	ldr	r2, [pc, #800]	@ (80033c4 <NT35510_Init+0x334>)
 80030a2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80030a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030aa:	6018      	str	r0, [r3, #0]
 80030ac:	3304      	adds	r3, #4
 80030ae:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 80030b0:	4bc5      	ldr	r3, [pc, #788]	@ (80033c8 <NT35510_Init+0x338>)
 80030b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 80030b6:	4bc5      	ldr	r3, [pc, #788]	@ (80033cc <NT35510_Init+0x33c>)
 80030b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 80030bc:	4bc4      	ldr	r3, [pc, #784]	@ (80033d0 <NT35510_Init+0x340>)
 80030be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 80030c2:	4bc4      	ldr	r3, [pc, #784]	@ (80033d4 <NT35510_Init+0x344>)
 80030c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 80030c8:	4bc3      	ldr	r3, [pc, #780]	@ (80033d8 <NT35510_Init+0x348>)
 80030ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 80030ce:	4bc3      	ldr	r3, [pc, #780]	@ (80033dc <NT35510_Init+0x34c>)
 80030d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 80030d4:	f240 13bf 	movw	r3, #447	@ 0x1bf
 80030d8:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 80030dc:	4bc0      	ldr	r3, [pc, #768]	@ (80033e0 <NT35510_Init+0x350>)
 80030de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 80030e2:	4bc0      	ldr	r3, [pc, #768]	@ (80033e4 <NT35510_Init+0x354>)
 80030e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 80030e8:	4bbf      	ldr	r3, [pc, #764]	@ (80033e8 <NT35510_Init+0x358>)
 80030ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 80030ee:	4bbf      	ldr	r3, [pc, #764]	@ (80033ec <NT35510_Init+0x35c>)
 80030f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 80030f4:	4bbe      	ldr	r3, [pc, #760]	@ (80033f0 <NT35510_Init+0x360>)
 80030f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 80030fa:	4bbe      	ldr	r3, [pc, #760]	@ (80033f4 <NT35510_Init+0x364>)
 80030fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8003100:	4abd      	ldr	r2, [pc, #756]	@ (80033f8 <NT35510_Init+0x368>)
 8003102:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	4611      	mov	r1, r2
 800310a:	8019      	strh	r1, [r3, #0]
 800310c:	3302      	adds	r3, #2
 800310e:	0c12      	lsrs	r2, r2, #16
 8003110:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8003112:	4aba      	ldr	r2, [pc, #744]	@ (80033fc <NT35510_Init+0x36c>)
 8003114:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800311c:	6018      	str	r0, [r3, #0]
 800311e:	3304      	adds	r3, #4
 8003120:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8003122:	4ab7      	ldr	r2, [pc, #732]	@ (8003400 <NT35510_Init+0x370>)
 8003124:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	4611      	mov	r1, r2
 800312c:	8019      	strh	r1, [r3, #0]
 800312e:	3302      	adds	r3, #2
 8003130:	0c12      	lsrs	r2, r2, #16
 8003132:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8003134:	f240 33b6 	movw	r3, #950	@ 0x3b6
 8003138:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 800313c:	f245 13b5 	movw	r3, #20917	@ 0x51b5
 8003140:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8003144:	4aaf      	ldr	r2, [pc, #700]	@ (8003404 <NT35510_Init+0x374>)
 8003146:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	4611      	mov	r1, r2
 800314e:	8019      	strh	r1, [r3, #0]
 8003150:	3302      	adds	r3, #2
 8003152:	0c12      	lsrs	r2, r2, #16
 8003154:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8003156:	4aac      	ldr	r2, [pc, #688]	@ (8003408 <NT35510_Init+0x378>)
 8003158:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800315c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003160:	6018      	str	r0, [r3, #0]
 8003162:	3304      	adds	r3, #4
 8003164:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8003166:	f04f 433c 	mov.w	r3, #3154116608	@ 0xbc000000
 800316a:	667b      	str	r3, [r7, #100]	@ 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 800316c:	4ba7      	ldr	r3, [pc, #668]	@ (800340c <NT35510_Init+0x37c>)
 800316e:	663b      	str	r3, [r7, #96]	@ 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8003170:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 8003174:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8003178:	2336      	movs	r3, #54	@ 0x36
 800317a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 800317e:	4aa4      	ldr	r2, [pc, #656]	@ (8003410 <NT35510_Init+0x380>)
 8003180:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003188:	6018      	str	r0, [r3, #0]
 800318a:	3304      	adds	r3, #4
 800318c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 800318e:	4aa1      	ldr	r2, [pc, #644]	@ (8003414 <NT35510_Init+0x384>)
 8003190:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003198:	6018      	str	r0, [r3, #0]
 800319a:	3304      	adds	r3, #4
 800319c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 800319e:	f246 0336 	movw	r3, #24630	@ 0x6036
 80031a2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80031a6:	4a9c      	ldr	r2, [pc, #624]	@ (8003418 <NT35510_Init+0x388>)
 80031a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031b0:	6018      	str	r0, [r3, #0]
 80031b2:	3304      	adds	r3, #4
 80031b4:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80031b6:	4a99      	ldr	r2, [pc, #612]	@ (800341c <NT35510_Init+0x38c>)
 80031b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031c0:	6018      	str	r0, [r3, #0]
 80031c2:	3304      	adds	r3, #4
 80031c4:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80031c6:	2335      	movs	r3, #53	@ 0x35
 80031c8:	863b      	strh	r3, [r7, #48]	@ 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80031ca:	2311      	movs	r3, #17
 80031cc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80031ce:	2329      	movs	r3, #41	@ 0x29
 80031d0:	853b      	strh	r3, [r7, #40]	@ 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80031d2:	f647 7351 	movw	r3, #32593	@ 0x7f51
 80031d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 80031d8:	f642 4353 	movw	r3, #11347	@ 0x2c53
 80031dc:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 80031de:	f240 2355 	movw	r3, #597	@ 0x255
 80031e2:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 80031e4:	f64f 735e 	movw	r3, #65374	@ 0xff5e
 80031e8:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 80031ea:	232c      	movs	r3, #44	@ 0x2c
 80031ec:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 80031ee:	f245 533a 	movw	r3, #21818	@ 0x553a
 80031f2:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 80031f4:	f247 733a 	movw	r3, #30522	@ 0x773a
 80031f8:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 80031fa:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80031fe:	4619      	mov	r1, r3
 8003200:	2005      	movs	r0, #5
 8003202:	f002 fc73 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8003206:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800320a:	4619      	mov	r1, r3
 800320c:	2003      	movs	r0, #3
 800320e:	f002 fc6d 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8003212:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003216:	4619      	mov	r1, r3
 8003218:	2003      	movs	r0, #3
 800321a:	f002 fc67 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 800321e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003222:	4619      	mov	r1, r3
 8003224:	2003      	movs	r0, #3
 8003226:	f002 fc61 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800322a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800322e:	4619      	mov	r1, r3
 8003230:	2003      	movs	r0, #3
 8003232:	f002 fc5b 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8003236:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800323a:	4619      	mov	r1, r3
 800323c:	2003      	movs	r0, #3
 800323e:	f002 fc55 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8003242:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8003246:	4619      	mov	r1, r3
 8003248:	2003      	movs	r0, #3
 800324a:	f002 fc4f 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 800324e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003252:	4619      	mov	r1, r3
 8003254:	2001      	movs	r0, #1
 8003256:	f002 fc49 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800325a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800325e:	4619      	mov	r1, r3
 8003260:	2003      	movs	r0, #3
 8003262:	f002 fc43 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8003266:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800326a:	4619      	mov	r1, r3
 800326c:	2003      	movs	r0, #3
 800326e:	f002 fc3d 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8003272:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003276:	4619      	mov	r1, r3
 8003278:	2003      	movs	r0, #3
 800327a:	f002 fc37 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 800327e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003282:	4619      	mov	r1, r3
 8003284:	2003      	movs	r0, #3
 8003286:	f002 fc31 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800328a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800328e:	4619      	mov	r1, r3
 8003290:	2003      	movs	r0, #3
 8003292:	f002 fc2b 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8003296:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800329a:	4619      	mov	r1, r3
 800329c:	2003      	movs	r0, #3
 800329e:	f002 fc25 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 80032a2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80032a6:	4619      	mov	r1, r3
 80032a8:	2002      	movs	r0, #2
 80032aa:	f002 fc1f 	bl	8005aec <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 80032ae:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80032b2:	4619      	mov	r1, r3
 80032b4:	2005      	movs	r0, #5
 80032b6:	f002 fc19 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 80032ba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80032be:	4619      	mov	r1, r3
 80032c0:	2002      	movs	r0, #2
 80032c2:	f002 fc13 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80032c6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80032ca:	4619      	mov	r1, r3
 80032cc:	2001      	movs	r0, #1
 80032ce:	f002 fc0d 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80032d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80032d6:	4619      	mov	r1, r3
 80032d8:	2001      	movs	r0, #1
 80032da:	f002 fc07 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80032de:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80032e2:	4619      	mov	r1, r3
 80032e4:	2002      	movs	r0, #2
 80032e6:	f002 fc01 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80032ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80032ee:	4619      	mov	r1, r3
 80032f0:	2004      	movs	r0, #4
 80032f2:	f002 fbfb 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80032f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032fa:	4619      	mov	r1, r3
 80032fc:	2003      	movs	r0, #3
 80032fe:	f002 fbf5 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8003302:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003306:	4619      	mov	r1, r3
 8003308:	2003      	movs	r0, #3
 800330a:	f002 fbef 	bl	8005aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 800330e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003312:	4619      	mov	r1, r3
 8003314:	2001      	movs	r0, #1
 8003316:	f002 fbe9 	bl	8005aec <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 800331a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800331e:	4619      	mov	r1, r3
 8003320:	2000      	movs	r0, #0
 8003322:	f002 fbe3 	bl	8005aec <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8003326:	f107 030c 	add.w	r3, r7, #12
 800332a:	4619      	mov	r1, r3
 800332c:	2000      	movs	r0, #0
 800332e:	f002 fbdd 	bl	8005aec <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8003332:	20c8      	movs	r0, #200	@ 0xc8
 8003334:	f001 fe16 	bl	8004f64 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d112      	bne.n	8003364 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 800333e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003342:	4619      	mov	r1, r3
 8003344:	2001      	movs	r0, #1
 8003346:	f002 fbd1 	bl	8005aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 800334a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800334e:	4619      	mov	r1, r3
 8003350:	2004      	movs	r0, #4
 8003352:	f002 fbcb 	bl	8005aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8003356:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800335a:	4619      	mov	r1, r3
 800335c:	2004      	movs	r0, #4
 800335e:	f002 fbc5 	bl	8005aec <DSI_IO_WriteCmd>
 8003362:	e011      	b.n	8003388 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8003364:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003368:	4619      	mov	r1, r3
 800336a:	2001      	movs	r0, #1
 800336c:	f002 fbbe 	bl	8005aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8003370:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003374:	4619      	mov	r1, r3
 8003376:	2004      	movs	r0, #4
 8003378:	f002 fbb8 	bl	8005aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 800337c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003380:	4619      	mov	r1, r3
 8003382:	2004      	movs	r0, #4
 8003384:	f002 fbb2 	bl	8005aec <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8003388:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800338c:	4619      	mov	r1, r3
 800338e:	2000      	movs	r0, #0
 8003390:	f002 fbac 	bl	8005aec <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8003394:	2078      	movs	r0, #120	@ 0x78
 8003396:	f001 fde5 	bl	8004f64 <NT35510_IO_Delay>

  switch(ColorCoding)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <NT35510_Init+0x324>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d13c      	bne.n	8003420 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 80033a6:	f107 0310 	add.w	r3, r7, #16
 80033aa:	4619      	mov	r1, r3
 80033ac:	2001      	movs	r0, #1
 80033ae:	f002 fb9d 	bl	8005aec <DSI_IO_WriteCmd>
      break;
 80033b2:	e03c      	b.n	800342e <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80033b4:	f107 030c 	add.w	r3, r7, #12
 80033b8:	4619      	mov	r1, r3
 80033ba:	2001      	movs	r0, #1
 80033bc:	f002 fb96 	bl	8005aec <DSI_IO_WriteCmd>
      break;
 80033c0:	e035      	b.n	800342e <NT35510_Init+0x39e>
 80033c2:	bf00      	nop
 80033c4:	08013138 	.word	0x08013138
 80033c8:	b0030303 	.word	0xb0030303
 80033cc:	b6464646 	.word	0xb6464646
 80033d0:	b1030303 	.word	0xb1030303
 80033d4:	b7363636 	.word	0xb7363636
 80033d8:	b2020000 	.word	0xb2020000
 80033dc:	b8262626 	.word	0xb8262626
 80033e0:	b3090909 	.word	0xb3090909
 80033e4:	b9363636 	.word	0xb9363636
 80033e8:	b5080808 	.word	0xb5080808
 80033ec:	ba262626 	.word	0xba262626
 80033f0:	bc008000 	.word	0xbc008000
 80033f4:	bd008000 	.word	0xbd008000
 80033f8:	08013140 	.word	0x08013140
 80033fc:	08013144 	.word	0x08013144
 8003400:	0801314c 	.word	0x0801314c
 8003404:	08013150 	.word	0x08013150
 8003408:	08013154 	.word	0x08013154
 800340c:	cc000003 	.word	0xcc000003
 8003410:	0801315c 	.word	0x0801315c
 8003414:	08013164 	.word	0x08013164
 8003418:	0801316c 	.word	0x0801316c
 800341c:	08013174 	.word	0x08013174
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	4619      	mov	r1, r3
 8003426:	2001      	movs	r0, #1
 8003428:	f002 fb60 	bl	8005aec <DSI_IO_WriteCmd>
      break;
 800342c:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800342e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003432:	4619      	mov	r1, r3
 8003434:	2001      	movs	r0, #1
 8003436:	f002 fb59 	bl	8005aec <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 800343a:	f107 0320 	add.w	r3, r7, #32
 800343e:	4619      	mov	r1, r3
 8003440:	2001      	movs	r0, #1
 8003442:	f002 fb53 	bl	8005aec <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8003446:	f107 031c 	add.w	r3, r7, #28
 800344a:	4619      	mov	r1, r3
 800344c:	2001      	movs	r0, #1
 800344e:	f002 fb4d 	bl	8005aec <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8003452:	f107 0318 	add.w	r3, r7, #24
 8003456:	4619      	mov	r1, r3
 8003458:	2001      	movs	r0, #1
 800345a:	f002 fb47 	bl	8005aec <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 800345e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003462:	4619      	mov	r1, r3
 8003464:	2000      	movs	r0, #0
 8003466:	f002 fb41 	bl	8005aec <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	4619      	mov	r1, r3
 8003470:	2000      	movs	r0, #0
 8003472:	f002 fb3b 	bl	8005aec <DSI_IO_WriteCmd>

  return 0;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	37c8      	adds	r7, #200	@ 0xc8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	4603      	mov	r3, r0
 800348a:	81fb      	strh	r3, [r7, #14]
 800348c:	460b      	mov	r3, r1
 800348e:	81bb      	strh	r3, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8003498:	89bb      	ldrh	r3, [r7, #12]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800349e:	89bb      	ldrh	r3, [r7, #12]
 80034a0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034a4:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80034aa:	f001 fc87 	bl	8004dbc <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80034ae:	89fb      	ldrh	r3, [r7, #14]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2203      	movs	r2, #3
 80034b4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 fa89 	bl	80049d0 <CODEC_IO_Write>
 80034be:	4603      	mov	r3, r0
 80034c0:	461a      	mov	r2, r3
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	4413      	add	r3, r2
 80034c6:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2200      	movs	r2, #0
 80034ce:	f640 0117 	movw	r1, #2071	@ 0x817
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fa7c 	bl	80049d0 <CODEC_IO_Write>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	4413      	add	r3, r2
 80034e0:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80034e2:	89fb      	ldrh	r3, [r7, #14]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2200      	movs	r2, #0
 80034e8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 fa6f 	bl	80049d0 <CODEC_IO_Write>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	226c      	movs	r2, #108	@ 0x6c
 8003502:	2139      	movs	r1, #57	@ 0x39
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fa63 	bl	80049d0 <CODEC_IO_Write>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8003514:	8afb      	ldrh	r3, [r7, #22]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800351a:	89fb      	ldrh	r3, [r7, #14]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2213      	movs	r2, #19
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fa54 	bl	80049d0 <CODEC_IO_Write>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e00b      	b.n	800354c <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8003534:	89fb      	ldrh	r3, [r7, #14]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2203      	movs	r2, #3
 800353a:	2101      	movs	r1, #1
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fa47 	bl	80049d0 <CODEC_IO_Write>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 800354c:	2032      	movs	r0, #50	@ 0x32
 800354e:	f001 fc9d 	bl	8004e8c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8003552:	8b3b      	ldrh	r3, [r7, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 815f 	beq.w	8003818 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800355a:	4bae      	ldr	r3, [pc, #696]	@ (8003814 <wm8994_Init+0x394>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8003560:	8b3b      	ldrh	r3, [r7, #24]
 8003562:	2b03      	cmp	r3, #3
 8003564:	f000 808c 	beq.w	8003680 <wm8994_Init+0x200>
 8003568:	2b03      	cmp	r3, #3
 800356a:	f300 8111 	bgt.w	8003790 <wm8994_Init+0x310>
 800356e:	2b01      	cmp	r3, #1
 8003570:	d002      	beq.n	8003578 <wm8994_Init+0xf8>
 8003572:	2b02      	cmp	r3, #2
 8003574:	d042      	beq.n	80035fc <wm8994_Init+0x17c>
 8003576:	e10b      	b.n	8003790 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003578:	89fb      	ldrh	r3, [r7, #14]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003580:	2105      	movs	r1, #5
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fa24 	bl	80049d0 <CODEC_IO_Write>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003592:	89fb      	ldrh	r3, [r7, #14]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2200      	movs	r2, #0
 8003598:	f240 6101 	movw	r1, #1537	@ 0x601
 800359c:	4618      	mov	r0, r3
 800359e:	f001 fa17 	bl	80049d0 <CODEC_IO_Write>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80035ac:	89fb      	ldrh	r3, [r7, #14]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2200      	movs	r2, #0
 80035b2:	f240 6102 	movw	r1, #1538	@ 0x602
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 fa0a 	bl	80049d0 <CODEC_IO_Write>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80035c6:	89fb      	ldrh	r3, [r7, #14]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2202      	movs	r2, #2
 80035cc:	f240 6104 	movw	r1, #1540	@ 0x604
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 f9fd 	bl	80049d0 <CODEC_IO_Write>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80035e0:	89fb      	ldrh	r3, [r7, #14]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2202      	movs	r2, #2
 80035e6:	f240 6105 	movw	r1, #1541	@ 0x605
 80035ea:	4618      	mov	r0, r3
 80035ec:	f001 f9f0 	bl	80049d0 <CODEC_IO_Write>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	61fb      	str	r3, [r7, #28]
      break;
 80035fa:	e110      	b.n	800381e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80035fc:	89fb      	ldrh	r3, [r7, #14]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f240 3203 	movw	r2, #771	@ 0x303
 8003604:	2105      	movs	r1, #5
 8003606:	4618      	mov	r0, r3
 8003608:	f001 f9e2 	bl	80049d0 <CODEC_IO_Write>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003616:	89fb      	ldrh	r3, [r7, #14]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2201      	movs	r2, #1
 800361c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003620:	4618      	mov	r0, r3
 8003622:	f001 f9d5 	bl	80049d0 <CODEC_IO_Write>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003630:	89fb      	ldrh	r3, [r7, #14]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2201      	movs	r2, #1
 8003636:	f240 6102 	movw	r1, #1538	@ 0x602
 800363a:	4618      	mov	r0, r3
 800363c:	f001 f9c8 	bl	80049d0 <CODEC_IO_Write>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800364a:	89fb      	ldrh	r3, [r7, #14]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2200      	movs	r2, #0
 8003650:	f240 6104 	movw	r1, #1540	@ 0x604
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f9bb 	bl	80049d0 <CODEC_IO_Write>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003664:	89fb      	ldrh	r3, [r7, #14]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2200      	movs	r2, #0
 800366a:	f240 6105 	movw	r1, #1541	@ 0x605
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f9ae 	bl	80049d0 <CODEC_IO_Write>
 8003674:	4603      	mov	r3, r0
 8003676:	461a      	mov	r2, r3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	61fb      	str	r3, [r7, #28]
      break;
 800367e:	e0ce      	b.n	800381e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003680:	8afb      	ldrh	r3, [r7, #22]
 8003682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003686:	d141      	bne.n	800370c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003688:	89fb      	ldrh	r3, [r7, #14]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003690:	2105      	movs	r1, #5
 8003692:	4618      	mov	r0, r3
 8003694:	f001 f99c 	bl	80049d0 <CODEC_IO_Write>
 8003698:	4603      	mov	r3, r0
 800369a:	461a      	mov	r2, r3
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80036a2:	89fb      	ldrh	r3, [r7, #14]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2203      	movs	r2, #3
 80036a8:	f240 6101 	movw	r1, #1537	@ 0x601
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 f98f 	bl	80049d0 <CODEC_IO_Write>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80036bc:	89fb      	ldrh	r3, [r7, #14]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2203      	movs	r2, #3
 80036c2:	f240 6102 	movw	r1, #1538	@ 0x602
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 f982 	bl	80049d0 <CODEC_IO_Write>
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80036d6:	89fb      	ldrh	r3, [r7, #14]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2203      	movs	r2, #3
 80036dc:	f240 6104 	movw	r1, #1540	@ 0x604
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 f975 	bl	80049d0 <CODEC_IO_Write>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80036f0:	89fb      	ldrh	r3, [r7, #14]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2203      	movs	r2, #3
 80036f6:	f240 6105 	movw	r1, #1541	@ 0x605
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 f968 	bl	80049d0 <CODEC_IO_Write>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800370a:	e088      	b.n	800381e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800370c:	89fb      	ldrh	r3, [r7, #14]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003714:	2105      	movs	r1, #5
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f95a 	bl	80049d0 <CODEC_IO_Write>
 800371c:	4603      	mov	r3, r0
 800371e:	461a      	mov	r2, r3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2201      	movs	r2, #1
 800372c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003730:	4618      	mov	r0, r3
 8003732:	f001 f94d 	bl	80049d0 <CODEC_IO_Write>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003740:	89fb      	ldrh	r3, [r7, #14]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2201      	movs	r2, #1
 8003746:	f240 6102 	movw	r1, #1538	@ 0x602
 800374a:	4618      	mov	r0, r3
 800374c:	f001 f940 	bl	80049d0 <CODEC_IO_Write>
 8003750:	4603      	mov	r3, r0
 8003752:	461a      	mov	r2, r3
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800375a:	89fb      	ldrh	r3, [r7, #14]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2202      	movs	r2, #2
 8003760:	f240 6104 	movw	r1, #1540	@ 0x604
 8003764:	4618      	mov	r0, r3
 8003766:	f001 f933 	bl	80049d0 <CODEC_IO_Write>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8003774:	89fb      	ldrh	r3, [r7, #14]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2202      	movs	r2, #2
 800377a:	f240 6105 	movw	r1, #1541	@ 0x605
 800377e:	4618      	mov	r0, r3
 8003780:	f001 f926 	bl	80049d0 <CODEC_IO_Write>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	61fb      	str	r3, [r7, #28]
      break;
 800378e:	e046      	b.n	800381e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003790:	89fb      	ldrh	r3, [r7, #14]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f240 3203 	movw	r2, #771	@ 0x303
 8003798:	2105      	movs	r1, #5
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f918 	bl	80049d0 <CODEC_IO_Write>
 80037a0:	4603      	mov	r3, r0
 80037a2:	461a      	mov	r2, r3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80037aa:	89fb      	ldrh	r3, [r7, #14]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2201      	movs	r2, #1
 80037b0:	f240 6101 	movw	r1, #1537	@ 0x601
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 f90b 	bl	80049d0 <CODEC_IO_Write>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80037c4:	89fb      	ldrh	r3, [r7, #14]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2201      	movs	r2, #1
 80037ca:	f240 6102 	movw	r1, #1538	@ 0x602
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 f8fe 	bl	80049d0 <CODEC_IO_Write>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461a      	mov	r2, r3
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80037de:	89fb      	ldrh	r3, [r7, #14]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2200      	movs	r2, #0
 80037e4:	f240 6104 	movw	r1, #1540	@ 0x604
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 f8f1 	bl	80049d0 <CODEC_IO_Write>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80037f8:	89fb      	ldrh	r3, [r7, #14]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	f240 6105 	movw	r1, #1541	@ 0x605
 8003802:	4618      	mov	r0, r3
 8003804:	f001 f8e4 	bl	80049d0 <CODEC_IO_Write>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	61fb      	str	r3, [r7, #28]
      break;
 8003812:	e004      	b.n	800381e <wm8994_Init+0x39e>
 8003814:	200027d0 	.word	0x200027d0
    }
  }
  else
  {
    outputEnabled = 0;
 8003818:	4b99      	ldr	r3, [pc, #612]	@ (8003a80 <wm8994_Init+0x600>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800381e:	8afb      	ldrh	r3, [r7, #22]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 81ab 	beq.w	8003b7c <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8003826:	4b97      	ldr	r3, [pc, #604]	@ (8003a84 <wm8994_Init+0x604>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800382c:	8afb      	ldrh	r3, [r7, #22]
 800382e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003832:	f000 8129 	beq.w	8003a88 <wm8994_Init+0x608>
 8003836:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800383a:	f300 819b 	bgt.w	8003b74 <wm8994_Init+0x6f4>
 800383e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003842:	d05a      	beq.n	80038fa <wm8994_Init+0x47a>
 8003844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003848:	f300 8194 	bgt.w	8003b74 <wm8994_Init+0x6f4>
 800384c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003850:	f000 80c6 	beq.w	80039e0 <wm8994_Init+0x560>
 8003854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003858:	f040 818c 	bne.w	8003b74 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 800385c:	89fb      	ldrh	r3, [r7, #14]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8003864:	2104      	movs	r1, #4
 8003866:	4618      	mov	r0, r3
 8003868:	f001 f8b2 	bl	80049d0 <CODEC_IO_Write>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003876:	89fb      	ldrh	r3, [r7, #14]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	22db      	movs	r2, #219	@ 0xdb
 800387c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8003880:	4618      	mov	r0, r3
 8003882:	f001 f8a5 	bl	80049d0 <CODEC_IO_Write>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8003890:	89fb      	ldrh	r3, [r7, #14]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8003898:	2102      	movs	r1, #2
 800389a:	4618      	mov	r0, r3
 800389c:	f001 f898 	bl	80049d0 <CODEC_IO_Write>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80038aa:	89fb      	ldrh	r3, [r7, #14]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2202      	movs	r2, #2
 80038b0:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 f88b 	bl	80049d0 <CODEC_IO_Write>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80038c4:	89fb      	ldrh	r3, [r7, #14]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2202      	movs	r2, #2
 80038ca:	f240 6109 	movw	r1, #1545	@ 0x609
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 f87e 	bl	80049d0 <CODEC_IO_Write>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80038de:	89fb      	ldrh	r3, [r7, #14]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	220e      	movs	r2, #14
 80038e4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 f871 	bl	80049d0 <CODEC_IO_Write>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	61fb      	str	r3, [r7, #28]
      break;
 80038f8:	e143      	b.n	8003b82 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80038fa:	89fb      	ldrh	r3, [r7, #14]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2211      	movs	r2, #17
 8003900:	2128      	movs	r1, #40	@ 0x28
 8003902:	4618      	mov	r0, r3
 8003904:	f001 f864 	bl	80049d0 <CODEC_IO_Write>
 8003908:	4603      	mov	r3, r0
 800390a:	461a      	mov	r2, r3
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8003912:	89fb      	ldrh	r3, [r7, #14]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2220      	movs	r2, #32
 8003918:	2129      	movs	r1, #41	@ 0x29
 800391a:	4618      	mov	r0, r3
 800391c:	f001 f858 	bl	80049d0 <CODEC_IO_Write>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 800392a:	89fb      	ldrh	r3, [r7, #14]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2220      	movs	r2, #32
 8003930:	212a      	movs	r1, #42	@ 0x2a
 8003932:	4618      	mov	r0, r3
 8003934:	f001 f84c 	bl	80049d0 <CODEC_IO_Write>
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8003942:	89fb      	ldrh	r3, [r7, #14]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f240 3203 	movw	r2, #771	@ 0x303
 800394a:	2104      	movs	r1, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f83f 	bl	80049d0 <CODEC_IO_Write>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800395c:	89fb      	ldrh	r3, [r7, #14]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	22db      	movs	r2, #219	@ 0xdb
 8003962:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f832 	bl	80049d0 <CODEC_IO_Write>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f246 3250 	movw	r2, #25424	@ 0x6350
 800397e:	2102      	movs	r1, #2
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f825 	bl	80049d0 <CODEC_IO_Write>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003990:	89fb      	ldrh	r3, [r7, #14]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2202      	movs	r2, #2
 8003996:	f240 6106 	movw	r1, #1542	@ 0x606
 800399a:	4618      	mov	r0, r3
 800399c:	f001 f818 	bl	80049d0 <CODEC_IO_Write>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80039aa:	89fb      	ldrh	r3, [r7, #14]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2202      	movs	r2, #2
 80039b0:	f240 6107 	movw	r1, #1543	@ 0x607
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 f80b 	bl	80049d0 <CODEC_IO_Write>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80039c4:	89fb      	ldrh	r3, [r7, #14]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	220d      	movs	r2, #13
 80039ca:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fffe 	bl	80049d0 <CODEC_IO_Write>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461a      	mov	r2, r3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	61fb      	str	r3, [r7, #28]
      break;
 80039de:	e0d0      	b.n	8003b82 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80039e0:	89fb      	ldrh	r3, [r7, #14]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80039e8:	2104      	movs	r1, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fff0 	bl	80049d0 <CODEC_IO_Write>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80039fa:	89fb      	ldrh	r3, [r7, #14]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	22db      	movs	r2, #219	@ 0xdb
 8003a00:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 ffe3 	bl	80049d0 <CODEC_IO_Write>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003a14:	89fb      	ldrh	r3, [r7, #14]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f246 3250 	movw	r2, #25424	@ 0x6350
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 ffd6 	bl	80049d0 <CODEC_IO_Write>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003a2e:	89fb      	ldrh	r3, [r7, #14]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2202      	movs	r2, #2
 8003a34:	f240 6106 	movw	r1, #1542	@ 0x606
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 ffc9 	bl	80049d0 <CODEC_IO_Write>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	461a      	mov	r2, r3
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003a48:	89fb      	ldrh	r3, [r7, #14]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f240 6107 	movw	r1, #1543	@ 0x607
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 ffbc 	bl	80049d0 <CODEC_IO_Write>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003a62:	89fb      	ldrh	r3, [r7, #14]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	220d      	movs	r2, #13
 8003a68:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 ffaf 	bl	80049d0 <CODEC_IO_Write>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	61fb      	str	r3, [r7, #28]
      break; 
 8003a7c:	e081      	b.n	8003b82 <wm8994_Init+0x702>
 8003a7e:	bf00      	nop
 8003a80:	200027d0 	.word	0x200027d0
 8003a84:	200027d4 	.word	0x200027d4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8003a88:	89fb      	ldrh	r3, [r7, #14]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8003a90:	2104      	movs	r1, #4
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 ff9c 	bl	80049d0 <CODEC_IO_Write>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003aa2:	89fb      	ldrh	r3, [r7, #14]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	22db      	movs	r2, #219	@ 0xdb
 8003aa8:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 ff8f 	bl	80049d0 <CODEC_IO_Write>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003abc:	89fb      	ldrh	r3, [r7, #14]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	22db      	movs	r2, #219	@ 0xdb
 8003ac2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 ff82 	bl	80049d0 <CODEC_IO_Write>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8003ad6:	89fb      	ldrh	r3, [r7, #14]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 ff75 	bl	80049d0 <CODEC_IO_Write>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003af0:	89fb      	ldrh	r3, [r7, #14]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2202      	movs	r2, #2
 8003af6:	f240 6106 	movw	r1, #1542	@ 0x606
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 ff68 	bl	80049d0 <CODEC_IO_Write>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003b0a:	89fb      	ldrh	r3, [r7, #14]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f240 6107 	movw	r1, #1543	@ 0x607
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 ff5b 	bl	80049d0 <CODEC_IO_Write>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8003b24:	89fb      	ldrh	r3, [r7, #14]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 ff4e 	bl	80049d0 <CODEC_IO_Write>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003b3e:	89fb      	ldrh	r3, [r7, #14]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2202      	movs	r2, #2
 8003b44:	f240 6109 	movw	r1, #1545	@ 0x609
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 ff41 	bl	80049d0 <CODEC_IO_Write>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	461a      	mov	r2, r3
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003b58:	89fb      	ldrh	r3, [r7, #14]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	220d      	movs	r2, #13
 8003b5e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 ff34 	bl	80049d0 <CODEC_IO_Write>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	61fb      	str	r3, [r7, #28]
      break;    
 8003b72:	e006      	b.n	8003b82 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
      break;
 8003b7a:	e002      	b.n	8003b82 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8003b7c:	4bb1      	ldr	r3, [pc, #708]	@ (8003e44 <wm8994_Init+0x9c4>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4ab0      	ldr	r2, [pc, #704]	@ (8003e48 <wm8994_Init+0x9c8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d079      	beq.n	8003c7e <wm8994_Init+0x7fe>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4aae      	ldr	r2, [pc, #696]	@ (8003e48 <wm8994_Init+0x9c8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	f200 80ad 	bhi.w	8003cee <wm8994_Init+0x86e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d061      	beq.n	8003c62 <wm8994_Init+0x7e2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	f200 80a2 	bhi.w	8003cee <wm8994_Init+0x86e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	f000 808e 	beq.w	8003cd2 <wm8994_Init+0x852>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	f200 8096 	bhi.w	8003cee <wm8994_Init+0x86e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003bc8:	d03d      	beq.n	8003c46 <wm8994_Init+0x7c6>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003bd0:	f200 808d 	bhi.w	8003cee <wm8994_Init+0x86e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d06b      	beq.n	8003cb6 <wm8994_Init+0x836>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003be4:	4293      	cmp	r3, r2
 8003be6:	f200 8082 	bhi.w	8003cee <wm8994_Init+0x86e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003bf0:	d01b      	beq.n	8003c2a <wm8994_Init+0x7aa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003bf8:	d879      	bhi.n	8003cee <wm8994_Init+0x86e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003c00:	d005      	beq.n	8003c0e <wm8994_Init+0x78e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d046      	beq.n	8003c9a <wm8994_Init+0x81a>
 8003c0c:	e06f      	b.n	8003cee <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003c0e:	89fb      	ldrh	r3, [r7, #14]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2203      	movs	r2, #3
 8003c14:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fed9 	bl	80049d0 <CODEC_IO_Write>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	4413      	add	r3, r2
 8003c26:	61fb      	str	r3, [r7, #28]
    break;
 8003c28:	e06f      	b.n	8003d0a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003c2a:	89fb      	ldrh	r3, [r7, #14]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2233      	movs	r2, #51	@ 0x33
 8003c30:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fecb 	bl	80049d0 <CODEC_IO_Write>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	61fb      	str	r3, [r7, #28]
    break;
 8003c44:	e061      	b.n	8003d0a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2263      	movs	r2, #99	@ 0x63
 8003c4c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 febd 	bl	80049d0 <CODEC_IO_Write>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	61fb      	str	r3, [r7, #28]
    break;
 8003c60:	e053      	b.n	8003d0a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003c62:	89fb      	ldrh	r3, [r7, #14]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2283      	movs	r2, #131	@ 0x83
 8003c68:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 feaf 	bl	80049d0 <CODEC_IO_Write>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	61fb      	str	r3, [r7, #28]
    break;
 8003c7c:	e045      	b.n	8003d0a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003c7e:	89fb      	ldrh	r3, [r7, #14]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	22a3      	movs	r2, #163	@ 0xa3
 8003c84:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fea1 	bl	80049d0 <CODEC_IO_Write>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	461a      	mov	r2, r3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	61fb      	str	r3, [r7, #28]
    break;
 8003c98:	e037      	b.n	8003d0a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003c9a:	89fb      	ldrh	r3, [r7, #14]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2213      	movs	r2, #19
 8003ca0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fe93 	bl	80049d0 <CODEC_IO_Write>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	61fb      	str	r3, [r7, #28]
    break;
 8003cb4:	e029      	b.n	8003d0a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003cb6:	89fb      	ldrh	r3, [r7, #14]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2243      	movs	r2, #67	@ 0x43
 8003cbc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fe85 	bl	80049d0 <CODEC_IO_Write>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	461a      	mov	r2, r3
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	4413      	add	r3, r2
 8003cce:	61fb      	str	r3, [r7, #28]
    break;
 8003cd0:	e01b      	b.n	8003d0a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003cd2:	89fb      	ldrh	r3, [r7, #14]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2273      	movs	r2, #115	@ 0x73
 8003cd8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fe77 	bl	80049d0 <CODEC_IO_Write>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]
    break; 
 8003cec:	e00d      	b.n	8003d0a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003cee:	89fb      	ldrh	r3, [r7, #14]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2283      	movs	r2, #131	@ 0x83
 8003cf4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fe69 	bl	80049d0 <CODEC_IO_Write>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	461a      	mov	r2, r3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	61fb      	str	r3, [r7, #28]
    break; 
 8003d08:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003d0a:	8afb      	ldrh	r3, [r7, #22]
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d10:	d10e      	bne.n	8003d30 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8003d12:	89fb      	ldrh	r3, [r7, #14]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f244 0218 	movw	r2, #16408	@ 0x4018
 8003d1a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fe56 	bl	80049d0 <CODEC_IO_Write>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	e00d      	b.n	8003d4c <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f244 0210 	movw	r2, #16400	@ 0x4010
 8003d38:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fe47 	bl	80049d0 <CODEC_IO_Write>
 8003d42:	4603      	mov	r3, r0
 8003d44:	461a      	mov	r2, r3
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8003d4c:	89fb      	ldrh	r3, [r7, #14]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2200      	movs	r2, #0
 8003d52:	f240 3102 	movw	r1, #770	@ 0x302
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fe3a 	bl	80049d0 <CODEC_IO_Write>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8003d66:	89fb      	ldrh	r3, [r7, #14]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	220a      	movs	r2, #10
 8003d6c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fe2d 	bl	80049d0 <CODEC_IO_Write>
 8003d76:	4603      	mov	r3, r0
 8003d78:	461a      	mov	r2, r3
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8003d80:	89fb      	ldrh	r3, [r7, #14]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2201      	movs	r2, #1
 8003d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fe20 	bl	80049d0 <CODEC_IO_Write>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8003d9a:	8b3b      	ldrh	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8123 	beq.w	8003fe8 <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8003da2:	89fb      	ldrh	r3, [r7, #14]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003daa:	2103      	movs	r1, #3
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fe0f 	bl	80049d0 <CODEC_IO_Write>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8003dbc:	89fb      	ldrh	r3, [r7, #14]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2122      	movs	r1, #34	@ 0x22
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fe03 	bl	80049d0 <CODEC_IO_Write>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8003dd4:	89fb      	ldrh	r3, [r7, #14]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2123      	movs	r1, #35	@ 0x23
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fdf7 	bl	80049d0 <CODEC_IO_Write>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8003dec:	89fb      	ldrh	r3, [r7, #14]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003df4:	2136      	movs	r1, #54	@ 0x36
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fdea 	bl	80049d0 <CODEC_IO_Write>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	461a      	mov	r2, r3
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4413      	add	r3, r2
 8003e04:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8003e06:	89fb      	ldrh	r3, [r7, #14]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f243 0203 	movw	r2, #12291	@ 0x3003
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fddd 	bl	80049d0 <CODEC_IO_Write>
 8003e16:	4603      	mov	r3, r0
 8003e18:	461a      	mov	r2, r3
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003e20:	8afb      	ldrh	r3, [r7, #22]
 8003e22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e26:	d111      	bne.n	8003e4c <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8003e28:	89fb      	ldrh	r3, [r7, #14]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f240 2205 	movw	r2, #517	@ 0x205
 8003e30:	2151      	movs	r1, #81	@ 0x51
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fdcc 	bl	80049d0 <CODEC_IO_Write>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	e00f      	b.n	8003e64 <wm8994_Init+0x9e4>
 8003e44:	200027d4 	.word	0x200027d4
 8003e48:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8003e4c:	89fb      	ldrh	r3, [r7, #14]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2205      	movs	r2, #5
 8003e52:	2151      	movs	r1, #81	@ 0x51
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fdbb 	bl	80049d0 <CODEC_IO_Write>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	4413      	add	r3, r2
 8003e62:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8003e64:	8b7b      	ldrh	r3, [r7, #26]
 8003e66:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8003e6a:	f043 0303 	orr.w	r3, r3, #3
 8003e6e:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003e70:	89fb      	ldrh	r3, [r7, #14]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	8b7a      	ldrh	r2, [r7, #26]
 8003e76:	2101      	movs	r1, #1
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fda9 	bl	80049d0 <CODEC_IO_Write>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	461a      	mov	r2, r3
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2222      	movs	r2, #34	@ 0x22
 8003e8e:	2160      	movs	r1, #96	@ 0x60
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fd9d 	bl	80049d0 <CODEC_IO_Write>
 8003e96:	4603      	mov	r3, r0
 8003e98:	461a      	mov	r2, r3
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8003ea0:	89fb      	ldrh	r3, [r7, #14]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8003ea8:	214c      	movs	r1, #76	@ 0x4c
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fd90 	bl	80049d0 <CODEC_IO_Write>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8003eba:	200f      	movs	r0, #15
 8003ebc:	f000 ffe6 	bl	8004e8c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8003ec0:	89fb      	ldrh	r3, [r7, #14]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	212d      	movs	r1, #45	@ 0x2d
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fd81 	bl	80049d0 <CODEC_IO_Write>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8003ed8:	89fb      	ldrh	r3, [r7, #14]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2201      	movs	r2, #1
 8003ede:	212e      	movs	r1, #46	@ 0x2e
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fd75 	bl	80049d0 <CODEC_IO_Write>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8003ef8:	2103      	movs	r1, #3
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fd68 	bl	80049d0 <CODEC_IO_Write>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8003f0a:	89fb      	ldrh	r3, [r7, #14]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2233      	movs	r2, #51	@ 0x33
 8003f10:	2154      	movs	r1, #84	@ 0x54
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fd5c 	bl	80049d0 <CODEC_IO_Write>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8003f22:	20fa      	movs	r0, #250	@ 0xfa
 8003f24:	f000 ffb2 	bl	8004e8c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8003f28:	89fb      	ldrh	r3, [r7, #14]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	22ee      	movs	r2, #238	@ 0xee
 8003f2e:	2160      	movs	r1, #96	@ 0x60
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fd4d 	bl	80049d0 <CODEC_IO_Write>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003f40:	89fb      	ldrh	r3, [r7, #14]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	22c0      	movs	r2, #192	@ 0xc0
 8003f46:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fd40 	bl	80049d0 <CODEC_IO_Write>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8003f5a:	89fb      	ldrh	r3, [r7, #14]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	22c0      	movs	r2, #192	@ 0xc0
 8003f60:	f240 6111 	movw	r1, #1553	@ 0x611
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fd33 	bl	80049d0 <CODEC_IO_Write>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8003f74:	89fb      	ldrh	r3, [r7, #14]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fd26 	bl	80049d0 <CODEC_IO_Write>
 8003f84:	4603      	mov	r3, r0
 8003f86:	461a      	mov	r2, r3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003f8e:	89fb      	ldrh	r3, [r7, #14]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	22c0      	movs	r2, #192	@ 0xc0
 8003f94:	f240 6112 	movw	r1, #1554	@ 0x612
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fd19 	bl	80049d0 <CODEC_IO_Write>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003fa8:	89fb      	ldrh	r3, [r7, #14]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	22c0      	movs	r2, #192	@ 0xc0
 8003fae:	f240 6113 	movw	r1, #1555	@ 0x613
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fd0c 	bl	80049d0 <CODEC_IO_Write>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	461a      	mov	r2, r3
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8003fc2:	89fb      	ldrh	r3, [r7, #14]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f240 4122 	movw	r1, #1058	@ 0x422
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fcff 	bl	80049d0 <CODEC_IO_Write>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003fdc:	7afa      	ldrb	r2, [r7, #11]
 8003fde:	89fb      	ldrh	r3, [r7, #14]
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f984 	bl	80042f0 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8003fe8:	8afb      	ldrh	r3, [r7, #22]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80a6 	beq.w	800413c <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003ff0:	8afb      	ldrh	r3, [r7, #22]
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff6:	d003      	beq.n	8004000 <wm8994_Init+0xb80>
 8003ff8:	8afb      	ldrh	r3, [r7, #22]
 8003ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ffe:	d12b      	bne.n	8004058 <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004000:	8b7b      	ldrh	r3, [r7, #26]
 8004002:	f043 0313 	orr.w	r3, r3, #19
 8004006:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	8b7a      	ldrh	r2, [r7, #26]
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fcdd 	bl	80049d0 <CODEC_IO_Write>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004020:	89fb      	ldrh	r3, [r7, #14]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2202      	movs	r2, #2
 8004026:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fcd0 	bl	80049d0 <CODEC_IO_Write>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800403a:	89fb      	ldrh	r3, [r7, #14]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004042:	f240 4111 	movw	r1, #1041	@ 0x411
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fcc2 	bl	80049d0 <CODEC_IO_Write>
 800404c:	4603      	mov	r3, r0
 800404e:	461a      	mov	r2, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	e06b      	b.n	8004130 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004058:	8afb      	ldrh	r3, [r7, #22]
 800405a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405e:	d139      	bne.n	80040d4 <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004060:	8b7b      	ldrh	r3, [r7, #26]
 8004062:	f043 0313 	orr.w	r3, r3, #19
 8004066:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004068:	89fb      	ldrh	r3, [r7, #14]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	8b7a      	ldrh	r2, [r7, #26]
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fcad 	bl	80049d0 <CODEC_IO_Write>
 8004076:	4603      	mov	r3, r0
 8004078:	461a      	mov	r2, r3
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2202      	movs	r2, #2
 8004086:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fca0 	bl	80049d0 <CODEC_IO_Write>
 8004090:	4603      	mov	r3, r0
 8004092:	461a      	mov	r2, r3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800409a:	89fb      	ldrh	r3, [r7, #14]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80040a2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fc92 	bl	80049d0 <CODEC_IO_Write>
 80040ac:	4603      	mov	r3, r0
 80040ae:	461a      	mov	r2, r3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80040b6:	89fb      	ldrh	r3, [r7, #14]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80040be:	f240 4111 	movw	r1, #1041	@ 0x411
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fc84 	bl	80049d0 <CODEC_IO_Write>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	e02d      	b.n	8004130 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80040d4:	8afb      	ldrh	r3, [r7, #22]
 80040d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040da:	d003      	beq.n	80040e4 <wm8994_Init+0xc64>
 80040dc:	8afb      	ldrh	r3, [r7, #22]
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e2:	d125      	bne.n	8004130 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80040e4:	89fb      	ldrh	r3, [r7, #14]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	220b      	movs	r2, #11
 80040ea:	2118      	movs	r1, #24
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fc6f 	bl	80049d0 <CODEC_IO_Write>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461a      	mov	r2, r3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80040fc:	89fb      	ldrh	r3, [r7, #14]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	220b      	movs	r2, #11
 8004102:	211a      	movs	r1, #26
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fc63 	bl	80049d0 <CODEC_IO_Write>
 800410a:	4603      	mov	r3, r0
 800410c:	461a      	mov	r2, r3
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004114:	89fb      	ldrh	r3, [r7, #14]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800411c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fc55 	bl	80049d0 <CODEC_IO_Write>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004130:	7afa      	ldrb	r2, [r7, #11]
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f8da 	bl	80042f0 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 800413c:	69fb      	ldr	r3, [r7, #28]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop

08004148 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800414c:	f000 fe40 	bl	8004dd0 <AUDIO_IO_DeInit>
}
 8004150:	bf00      	nop
 8004152:	bd80      	pop	{r7, pc}

08004154 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800415e:	f000 fe2d 	bl	8004dbc <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fe63 	bl	8004e34 <AUDIO_IO_Read>
 800416e:	4603      	mov	r3, r0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	6039      	str	r1, [r7, #0]
 8004182:	80fb      	strh	r3, [r7, #6]
 8004184:	4613      	mov	r3, r2
 8004186:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	2100      	movs	r1, #0
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f9d1 	bl	8004538 <wm8994_SetMute>
 8004196:	4602      	mov	r2, r0
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4413      	add	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f9bc 	bl	8004538 <wm8994_SetMute>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2201      	movs	r2, #1
 80041ce:	2102      	movs	r1, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fbfd 	bl	80049d0 <CODEC_IO_Write>
 80041d6:	4603      	mov	r3, r0
 80041d8:	461a      	mov	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4413      	add	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80041e0:	68fb      	ldr	r3, [r7, #12]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	4603      	mov	r3, r0
 80041f2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f99b 	bl	8004538 <wm8994_SetMute>
 8004202:	4602      	mov	r2, r0
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004224:	4b31      	ldr	r3, [pc, #196]	@ (80042ec <wm8994_Stop+0xd8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d05a      	beq.n	80042e2 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	2101      	movs	r1, #1
 8004230:	4618      	mov	r0, r3
 8004232:	f000 f981 	bl	8004538 <wm8994_SetMute>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d04e      	beq.n	80042e2 <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800424c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fbbd 	bl	80049d0 <CODEC_IO_Write>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004268:	f240 4122 	movw	r1, #1058	@ 0x422
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fbaf 	bl	80049d0 <CODEC_IO_Write>
 8004272:	4603      	mov	r3, r0
 8004274:	461a      	mov	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2200      	movs	r2, #0
 8004282:	212d      	movs	r1, #45	@ 0x2d
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fba3 	bl	80049d0 <CODEC_IO_Write>
 800428a:	4603      	mov	r3, r0
 800428c:	461a      	mov	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4413      	add	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2200      	movs	r2, #0
 800429a:	212e      	movs	r1, #46	@ 0x2e
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fb97 	bl	80049d0 <CODEC_IO_Write>
 80042a2:	4603      	mov	r3, r0
 80042a4:	461a      	mov	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2200      	movs	r2, #0
 80042b2:	2105      	movs	r1, #5
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fb8b 	bl	80049d0 <CODEC_IO_Write>
 80042ba:	4603      	mov	r3, r0
 80042bc:	461a      	mov	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fb7f 	bl	80049d0 <CODEC_IO_Write>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461a      	mov	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80042dc:	4b03      	ldr	r3, [pc, #12]	@ (80042ec <wm8994_Stop+0xd8>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80042e2:	68fb      	ldr	r3, [r7, #12]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	200027d0 	.word	0x200027d0

080042f0 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	460a      	mov	r2, r1
 80042fa:	80fb      	strh	r3, [r7, #6]
 80042fc:	4613      	mov	r3, r2
 80042fe:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004304:	797b      	ldrb	r3, [r7, #5]
 8004306:	2b64      	cmp	r3, #100	@ 0x64
 8004308:	d80b      	bhi.n	8004322 <wm8994_SetVolume+0x32>
 800430a:	797a      	ldrb	r2, [r7, #5]
 800430c:	4613      	mov	r3, r2
 800430e:	019b      	lsls	r3, r3, #6
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	4a86      	ldr	r2, [pc, #536]	@ (800452c <wm8994_SetVolume+0x23c>)
 8004314:	fb82 1203 	smull	r1, r2, r2, r3
 8004318:	1152      	asrs	r2, r2, #5
 800431a:	17db      	asrs	r3, r3, #31
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	e000      	b.n	8004324 <wm8994_SetVolume+0x34>
 8004322:	2364      	movs	r3, #100	@ 0x64
 8004324:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004326:	4b82      	ldr	r3, [pc, #520]	@ (8004530 <wm8994_SetVolume+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 809b 	beq.w	8004466 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004330:	7afb      	ldrb	r3, [r7, #11]
 8004332:	2b3e      	cmp	r3, #62	@ 0x3e
 8004334:	d93d      	bls.n	80043b2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	2100      	movs	r1, #0
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f8fc 	bl	8004538 <wm8994_SetMute>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f240 127f 	movw	r2, #383	@ 0x17f
 8004350:	211c      	movs	r1, #28
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fb3c 	bl	80049d0 <CODEC_IO_Write>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f240 127f 	movw	r2, #383	@ 0x17f
 800436a:	211d      	movs	r1, #29
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fb2f 	bl	80049d0 <CODEC_IO_Write>
 8004372:	4603      	mov	r3, r0
 8004374:	461a      	mov	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4413      	add	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f240 127f 	movw	r2, #383	@ 0x17f
 8004384:	2126      	movs	r1, #38	@ 0x26
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fb22 	bl	80049d0 <CODEC_IO_Write>
 800438c:	4603      	mov	r3, r0
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f240 127f 	movw	r2, #383	@ 0x17f
 800439e:	2127      	movs	r1, #39	@ 0x27
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fb15 	bl	80049d0 <CODEC_IO_Write>
 80043a6:	4603      	mov	r3, r0
 80043a8:	461a      	mov	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e059      	b.n	8004466 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80043b2:	797b      	ldrb	r3, [r7, #5]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	2101      	movs	r1, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f8bb 	bl	8004538 <wm8994_SetMute>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e04c      	b.n	8004466 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f8b1 	bl	8004538 <wm8994_SetMute>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	b2d8      	uxtb	r0, r3
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	b21b      	sxth	r3, r3
 80043e6:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80043ea:	b21b      	sxth	r3, r3
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	211c      	movs	r1, #28
 80043f2:	f000 faed 	bl	80049d0 <CODEC_IO_Write>
 80043f6:	4603      	mov	r3, r0
 80043f8:	461a      	mov	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	b2d8      	uxtb	r0, r3
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	b21b      	sxth	r3, r3
 8004408:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800440c:	b21b      	sxth	r3, r3
 800440e:	b29b      	uxth	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	211d      	movs	r1, #29
 8004414:	f000 fadc 	bl	80049d0 <CODEC_IO_Write>
 8004418:	4603      	mov	r3, r0
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	b2d8      	uxtb	r0, r3
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	b21b      	sxth	r3, r3
 800442a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800442e:	b21b      	sxth	r3, r3
 8004430:	b29b      	uxth	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	2126      	movs	r1, #38	@ 0x26
 8004436:	f000 facb 	bl	80049d0 <CODEC_IO_Write>
 800443a:	4603      	mov	r3, r0
 800443c:	461a      	mov	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	b2d8      	uxtb	r0, r3
 8004448:	7afb      	ldrb	r3, [r7, #11]
 800444a:	b21b      	sxth	r3, r3
 800444c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8004450:	b21b      	sxth	r3, r3
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	2127      	movs	r1, #39	@ 0x27
 8004458:	f000 faba 	bl	80049d0 <CODEC_IO_Write>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8004466:	4b33      	ldr	r3, [pc, #204]	@ (8004534 <wm8994_SetVolume+0x244>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d059      	beq.n	8004522 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800446e:	797b      	ldrb	r3, [r7, #5]
 8004470:	2b63      	cmp	r3, #99	@ 0x63
 8004472:	d80c      	bhi.n	800448e <wm8994_SetVolume+0x19e>
 8004474:	797a      	ldrb	r2, [r7, #5]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	4a2b      	ldr	r2, [pc, #172]	@ (800452c <wm8994_SetVolume+0x23c>)
 8004480:	fb82 1203 	smull	r1, r2, r2, r3
 8004484:	1152      	asrs	r2, r2, #5
 8004486:	17db      	asrs	r3, r3, #31
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e000      	b.n	8004490 <wm8994_SetVolume+0x1a0>
 800448e:	23ef      	movs	r3, #239	@ 0xef
 8004490:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	b2d8      	uxtb	r0, r3
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	b21b      	sxth	r3, r3
 800449a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449e:	b21b      	sxth	r3, r3
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044a8:	f000 fa92 	bl	80049d0 <CODEC_IO_Write>
 80044ac:	4603      	mov	r3, r0
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	b2d8      	uxtb	r0, r3
 80044ba:	7afb      	ldrb	r3, [r7, #11]
 80044bc:	b21b      	sxth	r3, r3
 80044be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c2:	b21b      	sxth	r3, r3
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	f240 4101 	movw	r1, #1025	@ 0x401
 80044cc:	f000 fa80 	bl	80049d0 <CODEC_IO_Write>
 80044d0:	4603      	mov	r3, r0
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	b2d8      	uxtb	r0, r3
 80044de:	7afb      	ldrb	r3, [r7, #11]
 80044e0:	b21b      	sxth	r3, r3
 80044e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e6:	b21b      	sxth	r3, r3
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	f240 4104 	movw	r1, #1028	@ 0x404
 80044f0:	f000 fa6e 	bl	80049d0 <CODEC_IO_Write>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	b2d8      	uxtb	r0, r3
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	b21b      	sxth	r3, r3
 8004506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800450a:	b21b      	sxth	r3, r3
 800450c:	b29b      	uxth	r3, r3
 800450e:	461a      	mov	r2, r3
 8004510:	f240 4105 	movw	r1, #1029	@ 0x405
 8004514:	f000 fa5c 	bl	80049d0 <CODEC_IO_Write>
 8004518:	4603      	mov	r3, r0
 800451a:	461a      	mov	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	51eb851f 	.word	0x51eb851f
 8004530:	200027d0 	.word	0x200027d0
 8004534:	200027d4 	.word	0x200027d4

08004538 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8004548:	4b21      	ldr	r3, [pc, #132]	@ (80045d0 <wm8994_SetMute+0x98>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d039      	beq.n	80045c4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d11c      	bne.n	8004590 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800455e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fa34 	bl	80049d0 <CODEC_IO_Write>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800457a:	f240 4122 	movw	r1, #1058	@ 0x422
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fa26 	bl	80049d0 <CODEC_IO_Write>
 8004584:	4603      	mov	r3, r0
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e019      	b.n	80045c4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2200      	movs	r2, #0
 8004596:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fa18 	bl	80049d0 <CODEC_IO_Write>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2200      	movs	r2, #0
 80045b0:	f240 4122 	movw	r1, #1058	@ 0x422
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fa0b 	bl	80049d0 <CODEC_IO_Write>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80045c4:	68fb      	ldr	r3, [r7, #12]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	200027d0 	.word	0x200027d0

080045d4 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	460a      	mov	r2, r1
 80045de:	80fb      	strh	r3, [r7, #6]
 80045e0:	4613      	mov	r3, r2
 80045e2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80045e8:	797b      	ldrb	r3, [r7, #5]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	f000 808c 	beq.w	8004708 <wm8994_SetOutputMode+0x134>
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	f300 80cb 	bgt.w	800478c <wm8994_SetOutputMode+0x1b8>
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d002      	beq.n	8004600 <wm8994_SetOutputMode+0x2c>
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d042      	beq.n	8004684 <wm8994_SetOutputMode+0xb0>
 80045fe:	e0c5      	b.n	800478c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8004608:	2105      	movs	r1, #5
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f9e0 	bl	80049d0 <CODEC_IO_Write>
 8004610:	4603      	mov	r3, r0
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2200      	movs	r2, #0
 8004620:	f240 6101 	movw	r1, #1537	@ 0x601
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f9d3 	bl	80049d0 <CODEC_IO_Write>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2200      	movs	r2, #0
 800463a:	f240 6102 	movw	r1, #1538	@ 0x602
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f9c6 	bl	80049d0 <CODEC_IO_Write>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2202      	movs	r2, #2
 8004654:	f240 6104 	movw	r1, #1540	@ 0x604
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f9b9 	bl	80049d0 <CODEC_IO_Write>
 800465e:	4603      	mov	r3, r0
 8004660:	461a      	mov	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2202      	movs	r2, #2
 800466e:	f240 6105 	movw	r1, #1541	@ 0x605
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f9ac 	bl	80049d0 <CODEC_IO_Write>
 8004678:	4603      	mov	r3, r0
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
    break;
 8004682:	e0c5      	b.n	8004810 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f240 3203 	movw	r2, #771	@ 0x303
 800468c:	2105      	movs	r1, #5
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f99e 	bl	80049d0 <CODEC_IO_Write>
 8004694:	4603      	mov	r3, r0
 8004696:	461a      	mov	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2201      	movs	r2, #1
 80046a4:	f240 6101 	movw	r1, #1537	@ 0x601
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f991 	bl	80049d0 <CODEC_IO_Write>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2201      	movs	r2, #1
 80046be:	f240 6102 	movw	r1, #1538	@ 0x602
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f984 	bl	80049d0 <CODEC_IO_Write>
 80046c8:	4603      	mov	r3, r0
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2200      	movs	r2, #0
 80046d8:	f240 6104 	movw	r1, #1540	@ 0x604
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f977 	bl	80049d0 <CODEC_IO_Write>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2200      	movs	r2, #0
 80046f2:	f240 6105 	movw	r1, #1541	@ 0x605
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f96a 	bl	80049d0 <CODEC_IO_Write>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
    break;
 8004706:	e083      	b.n	8004810 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8004710:	2105      	movs	r1, #5
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f95c 	bl	80049d0 <CODEC_IO_Write>
 8004718:	4603      	mov	r3, r0
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2201      	movs	r2, #1
 8004728:	f240 6101 	movw	r1, #1537	@ 0x601
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f94f 	bl	80049d0 <CODEC_IO_Write>
 8004732:	4603      	mov	r3, r0
 8004734:	461a      	mov	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2201      	movs	r2, #1
 8004742:	f240 6102 	movw	r1, #1538	@ 0x602
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f942 	bl	80049d0 <CODEC_IO_Write>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2202      	movs	r2, #2
 800475c:	f240 6104 	movw	r1, #1540	@ 0x604
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f935 	bl	80049d0 <CODEC_IO_Write>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2202      	movs	r2, #2
 8004776:	f240 6105 	movw	r1, #1541	@ 0x605
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f928 	bl	80049d0 <CODEC_IO_Write>
 8004780:	4603      	mov	r3, r0
 8004782:	461a      	mov	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
    break;
 800478a:	e041      	b.n	8004810 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f240 3203 	movw	r2, #771	@ 0x303
 8004794:	2105      	movs	r1, #5
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f91a 	bl	80049d0 <CODEC_IO_Write>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2201      	movs	r2, #1
 80047ac:	f240 6101 	movw	r1, #1537	@ 0x601
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 f90d 	bl	80049d0 <CODEC_IO_Write>
 80047b6:	4603      	mov	r3, r0
 80047b8:	461a      	mov	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2201      	movs	r2, #1
 80047c6:	f240 6102 	movw	r1, #1538	@ 0x602
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f900 	bl	80049d0 <CODEC_IO_Write>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2200      	movs	r2, #0
 80047e0:	f240 6104 	movw	r1, #1540	@ 0x604
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f8f3 	bl	80049d0 <CODEC_IO_Write>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2200      	movs	r2, #0
 80047fa:	f240 6105 	movw	r1, #1541	@ 0x605
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f8e6 	bl	80049d0 <CODEC_IO_Write>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
    break;    
 800480e:	bf00      	nop
  }  
  return counter;
 8004810:	68fb      	ldr	r3, [r7, #12]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	6039      	str	r1, [r7, #0]
 8004826:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4a57      	ldr	r2, [pc, #348]	@ (800498c <wm8994_SetFrequency+0x170>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d05f      	beq.n	80048f4 <wm8994_SetFrequency+0xd8>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4a55      	ldr	r2, [pc, #340]	@ (800498c <wm8994_SetFrequency+0x170>)
 8004838:	4293      	cmp	r3, r2
 800483a:	f200 8093 	bhi.w	8004964 <wm8994_SetFrequency+0x148>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8004844:	4293      	cmp	r3, r2
 8004846:	d047      	beq.n	80048d8 <wm8994_SetFrequency+0xbc>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800484e:	4293      	cmp	r3, r2
 8004850:	f200 8088 	bhi.w	8004964 <wm8994_SetFrequency+0x148>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800485a:	4293      	cmp	r3, r2
 800485c:	d074      	beq.n	8004948 <wm8994_SetFrequency+0x12c>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004864:	4293      	cmp	r3, r2
 8004866:	d87d      	bhi.n	8004964 <wm8994_SetFrequency+0x148>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800486e:	4293      	cmp	r3, r2
 8004870:	d05c      	beq.n	800492c <wm8994_SetFrequency+0x110>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f245 6222 	movw	r2, #22050	@ 0x5622
 8004878:	4293      	cmp	r3, r2
 800487a:	d873      	bhi.n	8004964 <wm8994_SetFrequency+0x148>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8004882:	d01b      	beq.n	80048bc <wm8994_SetFrequency+0xa0>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800488a:	d86b      	bhi.n	8004964 <wm8994_SetFrequency+0x148>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8004892:	d005      	beq.n	80048a0 <wm8994_SetFrequency+0x84>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800489a:	4293      	cmp	r3, r2
 800489c:	d038      	beq.n	8004910 <wm8994_SetFrequency+0xf4>
 800489e:	e061      	b.n	8004964 <wm8994_SetFrequency+0x148>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2203      	movs	r2, #3
 80048a6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f890 	bl	80049d0 <CODEC_IO_Write>
 80048b0:	4603      	mov	r3, r0
 80048b2:	461a      	mov	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
    break;
 80048ba:	e061      	b.n	8004980 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2233      	movs	r2, #51	@ 0x33
 80048c2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f882 	bl	80049d0 <CODEC_IO_Write>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
    break;
 80048d6:	e053      	b.n	8004980 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2283      	movs	r2, #131	@ 0x83
 80048de:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f874 	bl	80049d0 <CODEC_IO_Write>
 80048e8:	4603      	mov	r3, r0
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
    break;
 80048f2:	e045      	b.n	8004980 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	22a3      	movs	r2, #163	@ 0xa3
 80048fa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f866 	bl	80049d0 <CODEC_IO_Write>
 8004904:	4603      	mov	r3, r0
 8004906:	461a      	mov	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    break;
 800490e:	e037      	b.n	8004980 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2213      	movs	r2, #19
 8004916:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f858 	bl	80049d0 <CODEC_IO_Write>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
    break;
 800492a:	e029      	b.n	8004980 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2243      	movs	r2, #67	@ 0x43
 8004932:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f84a 	bl	80049d0 <CODEC_IO_Write>
 800493c:	4603      	mov	r3, r0
 800493e:	461a      	mov	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
    break;
 8004946:	e01b      	b.n	8004980 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2273      	movs	r2, #115	@ 0x73
 800494e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f83c 	bl	80049d0 <CODEC_IO_Write>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
    break; 
 8004962:	e00d      	b.n	8004980 <wm8994_SetFrequency+0x164>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2283      	movs	r2, #131	@ 0x83
 800496a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f82e 	bl	80049d0 <CODEC_IO_Write>
 8004974:	4603      	mov	r3, r0
 8004976:	461a      	mov	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
    break; 
 800497e:	bf00      	nop
  }
  return counter;
 8004980:	68fb      	ldr	r3, [r7, #12]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	00017700 	.word	0x00017700

08004990 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2200      	movs	r2, #0
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f812 	bl	80049d0 <CODEC_IO_Write>
 80049ac:	4603      	mov	r3, r0
 80049ae:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80049b0:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <wm8994_Reset+0x38>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80049b6:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <wm8994_Reset+0x3c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

  return counter;
 80049bc:	68fb      	ldr	r3, [r7, #12]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200027d0 	.word	0x200027d0
 80049cc:	200027d4 	.word	0x200027d4

080049d0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
 80049da:	460b      	mov	r3, r1
 80049dc:	80bb      	strh	r3, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	88b9      	ldrh	r1, [r7, #4]
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 f9f7 	bl	8004de0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	b2db      	uxtb	r3, r3
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8004a0a:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <BSP_LED_Init+0x54>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	4a11      	ldr	r2, [pc, #68]	@ (8004a54 <BSP_LED_Init+0x54>)
 8004a10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a16:	4b0f      	ldr	r3, [pc, #60]	@ (8004a54 <BSP_LED_Init+0x54>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	4a0c      	ldr	r2, [pc, #48]	@ (8004a58 <BSP_LED_Init+0x58>)
 8004a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8004a30:	2301      	movs	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004a34:	2303      	movs	r3, #3
 8004a36:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	4a08      	ldr	r2, [pc, #32]	@ (8004a5c <BSP_LED_Init+0x5c>)
 8004a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a40:	f107 020c 	add.w	r2, r7, #12
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f004 fdce 	bl	80095e8 <HAL_GPIO_Init>

}
 8004a4c:	bf00      	nop
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40023800 	.word	0x40023800
 8004a58:	20000070 	.word	0x20000070
 8004a5c:	20000078 	.word	0x20000078

08004a60 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4a07      	ldr	r2, [pc, #28]	@ (8004a8c <BSP_LED_On+0x2c>)
 8004a6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	4a06      	ldr	r2, [pc, #24]	@ (8004a90 <BSP_LED_On+0x30>)
 8004a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f005 f882 	bl	8009b88 <HAL_GPIO_WritePin>
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000078 	.word	0x20000078
 8004a90:	20000070 	.word	0x20000070

08004a94 <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	4a07      	ldr	r2, [pc, #28]	@ (8004ac0 <BSP_LED_Toggle+0x2c>)
 8004aa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	4906      	ldr	r1, [pc, #24]	@ (8004ac4 <BSP_LED_Toggle+0x30>)
 8004aaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f005 f881 	bl	8009bba <HAL_GPIO_TogglePin>
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000078 	.word	0x20000078
 8004ac4:	20000070 	.word	0x20000070

08004ac8 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	4a06      	ldr	r2, [pc, #24]	@ (8004af0 <BSP_PB_GetState+0x28>)
 8004ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ada:	2201      	movs	r2, #1
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f005 f83a 	bl	8009b58 <HAL_GPIO_ReadPin>
 8004ae4:	4603      	mov	r3, r0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000080 	.word	0x20000080

08004af4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08c      	sub	sp, #48	@ 0x30
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a58      	ldr	r2, [pc, #352]	@ (8004c60 <I2Cx_MspInit+0x16c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d15b      	bne.n	8004bbc <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8004b04:	4b57      	ldr	r3, [pc, #348]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b08:	4a56      	ldr	r2, [pc, #344]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b0a:	f043 0308 	orr.w	r3, r3, #8
 8004b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b10:	4b54      	ldr	r3, [pc, #336]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8004b1c:	4b51      	ldr	r3, [pc, #324]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b20:	4a50      	ldr	r2, [pc, #320]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b22:	f043 0302 	orr.w	r3, r3, #2
 8004b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b28:	4b4e      	ldr	r3, [pc, #312]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b38:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004b3a:	2312      	movs	r3, #18
 8004b3c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004b42:	2302      	movs	r3, #2
 8004b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8004b46:	2304      	movs	r3, #4
 8004b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8004b4a:	f107 031c 	add.w	r3, r7, #28
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4845      	ldr	r0, [pc, #276]	@ (8004c68 <I2Cx_MspInit+0x174>)
 8004b52:	f004 fd49 	bl	80095e8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004b56:	2380      	movs	r3, #128	@ 0x80
 8004b58:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8004b5a:	230b      	movs	r3, #11
 8004b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8004b5e:	f107 031c 	add.w	r3, r7, #28
 8004b62:	4619      	mov	r1, r3
 8004b64:	4841      	ldr	r0, [pc, #260]	@ (8004c6c <I2Cx_MspInit+0x178>)
 8004b66:	f004 fd3f 	bl	80095e8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	4a3d      	ldr	r2, [pc, #244]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b76:	4b3b      	ldr	r3, [pc, #236]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004b82:	4b38      	ldr	r3, [pc, #224]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	4a37      	ldr	r2, [pc, #220]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b8c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8004b8e:	4b35      	ldr	r3, [pc, #212]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	4a34      	ldr	r2, [pc, #208]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004b94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b98:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	210f      	movs	r1, #15
 8004b9e:	205f      	movs	r0, #95	@ 0x5f
 8004ba0:	f002 fb00 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004ba4:	205f      	movs	r0, #95	@ 0x5f
 8004ba6:	f002 fb19 	bl	80071dc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004baa:	2200      	movs	r2, #0
 8004bac:	210f      	movs	r1, #15
 8004bae:	2060      	movs	r0, #96	@ 0x60
 8004bb0:	f002 faf8 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8004bb4:	2060      	movs	r0, #96	@ 0x60
 8004bb6:	f002 fb11 	bl	80071dc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004bba:	e04d      	b.n	8004c58 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004bbc:	4b29      	ldr	r3, [pc, #164]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc0:	4a28      	ldr	r2, [pc, #160]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004bc2:	f043 0302 	orr.w	r3, r3, #2
 8004bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bc8:	4b26      	ldr	r3, [pc, #152]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bd8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004bda:	2312      	movs	r3, #18
 8004bdc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004be2:	2302      	movs	r3, #2
 8004be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004be6:	2304      	movs	r3, #4
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004bea:	f107 031c 	add.w	r3, r7, #28
 8004bee:	4619      	mov	r1, r3
 8004bf0:	481e      	ldr	r0, [pc, #120]	@ (8004c6c <I2Cx_MspInit+0x178>)
 8004bf2:	f004 fcf9 	bl	80095e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004bf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004bfc:	f107 031c 	add.w	r3, r7, #28
 8004c00:	4619      	mov	r1, r3
 8004c02:	481a      	ldr	r0, [pc, #104]	@ (8004c6c <I2Cx_MspInit+0x178>)
 8004c04:	f004 fcf0 	bl	80095e8 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004c08:	4b16      	ldr	r3, [pc, #88]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	4a15      	ldr	r2, [pc, #84]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004c0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c14:	4b13      	ldr	r3, [pc, #76]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004c20:	4b10      	ldr	r3, [pc, #64]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4a0f      	ldr	r2, [pc, #60]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004c26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c2a:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	4a0c      	ldr	r2, [pc, #48]	@ (8004c64 <I2Cx_MspInit+0x170>)
 8004c32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c36:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004c38:	2200      	movs	r2, #0
 8004c3a:	210f      	movs	r1, #15
 8004c3c:	201f      	movs	r0, #31
 8004c3e:	f002 fab1 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004c42:	201f      	movs	r0, #31
 8004c44:	f002 faca 	bl	80071dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	210f      	movs	r1, #15
 8004c4c:	2020      	movs	r0, #32
 8004c4e:	f002 faa9 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004c52:	2020      	movs	r0, #32
 8004c54:	f002 fac2 	bl	80071dc <HAL_NVIC_EnableIRQ>
}
 8004c58:	bf00      	nop
 8004c5a:	3730      	adds	r7, #48	@ 0x30
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	200027d8 	.word	0x200027d8
 8004c64:	40023800 	.word	0x40023800
 8004c68:	40020c00 	.word	0x40020c00
 8004c6c:	40020400 	.word	0x40020400

08004c70 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f005 fabb 	bl	800a1f4 <HAL_I2C_GetState>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d125      	bne.n	8004cd0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a14      	ldr	r2, [pc, #80]	@ (8004cd8 <I2Cx_Init+0x68>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d103      	bne.n	8004c94 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a13      	ldr	r2, [pc, #76]	@ (8004cdc <I2Cx_Init+0x6c>)
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e002      	b.n	8004c9a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a12      	ldr	r2, [pc, #72]	@ (8004ce0 <I2Cx_Init+0x70>)
 8004c98:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a11      	ldr	r2, [pc, #68]	@ (8004ce4 <I2Cx_Init+0x74>)
 8004c9e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff15 	bl	8004af4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f004 ff90 	bl	8009bf0 <HAL_I2C_Init>
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	200027d8 	.word	0x200027d8
 8004cdc:	40006000 	.word	0x40006000
 8004ce0:	40005400 	.word	0x40005400
 8004ce4:	40912732 	.word	0x40912732

08004ce8 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af04      	add	r7, sp, #16
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	72fb      	strb	r3, [r7, #11]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	813b      	strh	r3, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	b299      	uxth	r1, r3
 8004d0a:	88f8      	ldrh	r0, [r7, #6]
 8004d0c:	893a      	ldrh	r2, [r7, #8]
 8004d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f005 f94e 	bl	8009fc0 <HAL_I2C_Mem_Read>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8004d2e:	7afb      	ldrb	r3, [r7, #11]
 8004d30:	4619      	mov	r1, r3
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f832 	bl	8004d9c <I2Cx_Error>
  }
  return status;
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b08a      	sub	sp, #40	@ 0x28
 8004d46:	af04      	add	r7, sp, #16
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	4608      	mov	r0, r1
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4603      	mov	r3, r0
 8004d52:	72fb      	strb	r3, [r7, #11]
 8004d54:	460b      	mov	r3, r1
 8004d56:	813b      	strh	r3, [r7, #8]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004d60:	7afb      	ldrb	r3, [r7, #11]
 8004d62:	b299      	uxth	r1, r3
 8004d64:	88f8      	ldrh	r0, [r7, #6]
 8004d66:	893a      	ldrh	r2, [r7, #8]
 8004d68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d6c:	9302      	str	r3, [sp, #8]
 8004d6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	4603      	mov	r3, r0
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f005 f80d 	bl	8009d98 <HAL_I2C_Mem_Write>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004d88:	7afb      	ldrb	r3, [r7, #11]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f805 	bl	8004d9c <I2Cx_Error>
  }
  return status;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f004 ffb1 	bl	8009d10 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff ff5e 	bl	8004c70 <I2Cx_Init>
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004dc0:	4802      	ldr	r0, [pc, #8]	@ (8004dcc <AUDIO_IO_Init+0x10>)
 8004dc2:	f7ff ff55 	bl	8004c70 <I2Cx_Init>
}
 8004dc6:	bf00      	nop
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	200027d8 	.word	0x200027d8

08004dd0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0

}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	4603      	mov	r3, r0
 8004de8:	71fb      	strb	r3, [r7, #7]
 8004dea:	460b      	mov	r3, r1
 8004dec:	80bb      	strh	r3, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004df6:	89fb      	ldrh	r3, [r7, #14]
 8004df8:	0a1b      	lsrs	r3, r3, #8
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	b21a      	sxth	r2, r3
 8004e06:	887b      	ldrh	r3, [r7, #2]
 8004e08:	b21b      	sxth	r3, r3
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	b21b      	sxth	r3, r3
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004e12:	88ba      	ldrh	r2, [r7, #4]
 8004e14:	79f9      	ldrb	r1, [r7, #7]
 8004e16:	2302      	movs	r3, #2
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	1cbb      	adds	r3, r7, #2
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2302      	movs	r3, #2
 8004e20:	4803      	ldr	r0, [pc, #12]	@ (8004e30 <AUDIO_IO_Write+0x50>)
 8004e22:	f7ff ff8e 	bl	8004d42 <I2Cx_WriteMultiple>
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200027d8 	.word	0x200027d8

08004e34 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	460a      	mov	r2, r1
 8004e3e:	71fb      	strb	r3, [r7, #7]
 8004e40:	4613      	mov	r3, r2
 8004e42:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	81bb      	strh	r3, [r7, #12]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004e4c:	88ba      	ldrh	r2, [r7, #4]
 8004e4e:	79f9      	ldrb	r1, [r7, #7]
 8004e50:	2302      	movs	r3, #2
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	f107 030c 	add.w	r3, r7, #12
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	480a      	ldr	r0, [pc, #40]	@ (8004e88 <AUDIO_IO_Read+0x54>)
 8004e5e:	f7ff ff43 	bl	8004ce8 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004e62:	89bb      	ldrh	r3, [r7, #12]
 8004e64:	0a1b      	lsrs	r3, r3, #8
 8004e66:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004e68:	89bb      	ldrh	r3, [r7, #12]
 8004e6a:	b21b      	sxth	r3, r3
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	b21a      	sxth	r2, r3
 8004e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	b21b      	sxth	r3, r3
 8004e78:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8004e7a:	89fb      	ldrh	r3, [r7, #14]
 8004e7c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8004e7e:	89bb      	ldrh	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200027d8 	.word	0x200027d8

08004e8c <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f002 f885 	bl	8006fa4 <HAL_Delay>
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004ea8:	4802      	ldr	r0, [pc, #8]	@ (8004eb4 <TS_IO_Init+0x10>)
 8004eaa:	f7ff fee1 	bl	8004c70 <I2Cx_Init>
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	200027d8 	.word	0x200027d8

08004eb8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	71fb      	strb	r3, [r7, #7]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	71bb      	strb	r3, [r7, #6]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004eca:	79bb      	ldrb	r3, [r7, #6]
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	79f9      	ldrb	r1, [r7, #7]
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	1d7b      	adds	r3, r7, #5
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4803      	ldr	r0, [pc, #12]	@ (8004ee8 <TS_IO_Write+0x30>)
 8004edc:	f7ff ff31 	bl	8004d42 <I2Cx_WriteMultiple>
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	200027d8 	.word	0x200027d8

08004eec <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	460a      	mov	r2, r1
 8004ef6:	71fb      	strb	r3, [r7, #7]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004f00:	79bb      	ldrb	r3, [r7, #6]
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	79f9      	ldrb	r1, [r7, #7]
 8004f06:	2301      	movs	r3, #1
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	f107 030f 	add.w	r3, r7, #15
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2301      	movs	r3, #1
 8004f12:	4804      	ldr	r0, [pc, #16]	@ (8004f24 <TS_IO_Read+0x38>)
 8004f14:	f7ff fee8 	bl	8004ce8 <I2Cx_ReadMultiple>

  return read_value;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200027d8 	.word	0x200027d8

08004f28 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	603a      	str	r2, [r7, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
 8004f36:	460b      	mov	r3, r1
 8004f38:	71bb      	strb	r3, [r7, #6]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004f3e:	79bb      	ldrb	r3, [r7, #6]
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	79f9      	ldrb	r1, [r7, #7]
 8004f44:	88bb      	ldrh	r3, [r7, #4]
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4804      	ldr	r0, [pc, #16]	@ (8004f60 <TS_IO_ReadMultiple+0x38>)
 8004f50:	f7ff feca 	bl	8004ce8 <I2Cx_ReadMultiple>
 8004f54:	4603      	mov	r3, r0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	200027d8 	.word	0x200027d8

08004f64 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f002 f819 	bl	8006fa4 <HAL_Delay>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8004f82:	f000 f823 	bl	8004fcc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8004f96:	f7fc f9d9 	bl	800134c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a05      	ldr	r2, [pc, #20]	@ (8004fc8 <HAL_SAI_ErrorCallback+0x24>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d102      	bne.n	8004fbc <HAL_SAI_ErrorCallback+0x18>
  {
  BSP_AUDIO_OUT_Error_CallBack();
 8004fb6:	f000 f810 	bl	8004fda <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack();
  }
}
 8004fba:	e001      	b.n	8004fc0 <HAL_SAI_ErrorCallback+0x1c>
    BSP_AUDIO_IN_Error_CallBack();
 8004fbc:	f7fd f81e 	bl	8001ffc <BSP_AUDIO_IN_Error_CallBack>
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40015804 	.word	0x40015804

08004fcc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	af00      	add	r7, sp, #0
}
 8004fde:	bf00      	nop
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	@ 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8004ff2:	4b48      	ldr	r3, [pc, #288]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	4a47      	ldr	r2, [pc, #284]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004ff8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ffe:	4b45      	ldr	r3, [pc, #276]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	69bb      	ldr	r3, [r7, #24]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800500a:	4b42      	ldr	r3, [pc, #264]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	4a41      	ldr	r2, [pc, #260]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005014:	6313      	str	r3, [r2, #48]	@ 0x30
 8005016:	4b3f      	ldr	r3, [pc, #252]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8005022:	4b3c      	ldr	r3, [pc, #240]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	4a3b      	ldr	r2, [pc, #236]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005028:	f043 0310 	orr.w	r3, r3, #16
 800502c:	6313      	str	r3, [r2, #48]	@ 0x30
 800502e:	4b39      	ldr	r3, [pc, #228]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 800503a:	2370      	movs	r3, #112	@ 0x70
 800503c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800503e:	2302      	movs	r3, #2
 8005040:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005046:	2303      	movs	r3, #3
 8005048:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 800504a:	2306      	movs	r3, #6
 800504c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800504e:	f107 031c 	add.w	r3, r7, #28
 8005052:	4619      	mov	r1, r3
 8005054:	4830      	ldr	r0, [pc, #192]	@ (8005118 <BSP_AUDIO_OUT_MspInit+0x130>)
 8005056:	f004 fac7 	bl	80095e8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800505e:	f107 031c 	add.w	r3, r7, #28
 8005062:	4619      	mov	r1, r3
 8005064:	482d      	ldr	r0, [pc, #180]	@ (800511c <BSP_AUDIO_OUT_MspInit+0x134>)
 8005066:	f004 fabf 	bl	80095e8 <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800506a:	4b2a      	ldr	r3, [pc, #168]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506e:	4a29      	ldr	r2, [pc, #164]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005070:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005074:	6313      	str	r3, [r2, #48]	@ 0x30
 8005076:	4b27      	ldr	r3, [pc, #156]	@ (8005114 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
  
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a26      	ldr	r2, [pc, #152]	@ (8005120 <BSP_AUDIO_OUT_MspInit+0x138>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d137      	bne.n	80050fc <BSP_AUDIO_OUT_MspInit+0x114>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800508c:	4b25      	ldr	r3, [pc, #148]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005092:	4b24      	ldr	r3, [pc, #144]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005094:	2240      	movs	r2, #64	@ 0x40
 8005096:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005098:	4b22      	ldr	r3, [pc, #136]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800509a:	2200      	movs	r2, #0
 800509c:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800509e:	4b21      	ldr	r3, [pc, #132]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050a4:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80050a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050ac:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80050ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80050b4:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80050b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050bc:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80050be:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80050c4:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80050c6:	4b17      	ldr	r3, [pc, #92]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050c8:	2204      	movs	r2, #4
 80050ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80050cc:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050ce:	2203      	movs	r2, #3
 80050d0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80050d2:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80050d8:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80050de:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050e0:	4a11      	ldr	r2, [pc, #68]	@ (8005128 <BSP_AUDIO_OUT_MspInit+0x140>)
 80050e2:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050e8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80050ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80050f0:	480c      	ldr	r0, [pc, #48]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050f2:	f002 fa49 	bl	8007588 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 80050f6:	480b      	ldr	r0, [pc, #44]	@ (8005124 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80050f8:	f002 f998 	bl	800742c <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80050fc:	2200      	movs	r2, #0
 80050fe:	210e      	movs	r1, #14
 8005100:	2039      	movs	r0, #57	@ 0x39
 8005102:	f002 f84f 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8005106:	2039      	movs	r0, #57	@ 0x39
 8005108:	f002 f868 	bl	80071dc <HAL_NVIC_EnableIRQ>
}
 800510c:	bf00      	nop
 800510e:	3730      	adds	r7, #48	@ 0x30
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40023800 	.word	0x40023800
 8005118:	40021000 	.word	0x40021000
 800511c:	40021800 	.word	0x40021800
 8005120:	40015804 	.word	0x40015804
 8005124:	20002934 	.word	0x20002934
 8005128:	40026428 	.word	0x40026428

0800512c <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 800512c:	b580      	push	{r7, lr}
 800512e:	b0a8      	sub	sp, #160	@ 0xa0
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005138:	f107 0310 	add.w	r3, r7, #16
 800513c:	4618      	mov	r0, r3
 800513e:	f007 fd3f 	bl	800cbc0 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800515c:	4293      	cmp	r3, r2
 800515e:	d112      	bne.n	8005186 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8005160:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005164:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8005166:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800516a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800516c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8005170:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8005172:	2302      	movs	r3, #2
 8005174:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8005176:	2313      	movs	r3, #19
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800517a:	f107 0310 	add.w	r3, r7, #16
 800517e:	4618      	mov	r0, r3
 8005180:	f007 f8f6 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>
 8005184:	e012      	b.n	80051ac <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* SAI clock config 
    PLLSAI_VCO: VCO_344M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz 
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */  
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8005186:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800518a:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800518c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005190:	64fb      	str	r3, [r7, #76]	@ 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8005192:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8005196:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8005198:	2307      	movs	r3, #7
 800519a:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 800519c:	2301      	movs	r3, #1
 800519e:	637b      	str	r3, [r7, #52]	@ 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80051a0:	f107 0310 	add.w	r3, r7, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f007 f8e3 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	37a0      	adds	r7, #160	@ 0xa0
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80051bc:	f7fc f8e2 	bl	8001384 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80051d0:	f7fc f8c4 	bl	800135c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80051e0:	2001      	movs	r0, #1
 80051e2:	f000 f803 	bl	80051ec <BSP_LCD_InitEx>
 80051e6:	4603      	mov	r3, r0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}

080051ec <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b090      	sub	sp, #64	@ 0x40
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80051f6:	f646 3325 	movw	r3, #27429	@ 0x6b25
 80051fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t read_id = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	877b      	strh	r3, [r7, #58]	@ 0x3a

  uint32_t laneByteClk_kHz = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8005204:	f000 f936 	bl	8005474 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8005208:	f000 fc9a 	bl	8005b40 <LCD_IO_GetID>
 800520c:	4603      	mov	r3, r0
 800520e:	877b      	strh	r3, [r7, #58]	@ 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8005210:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005212:	2b11      	cmp	r3, #17
 8005214:	d001      	beq.n	800521a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8005216:	2301      	movs	r3, #1
 8005218:	e113      	b.n	8005442 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800521a:	f000 fc99 	bl	8005b50 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800521e:	4b8b      	ldr	r3, [pc, #556]	@ (800544c <BSP_LCD_InitEx+0x260>)
 8005220:	4a8b      	ldr	r2, [pc, #556]	@ (8005450 <BSP_LCD_InitEx+0x264>)
 8005222:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8005224:	4889      	ldr	r0, [pc, #548]	@ (800544c <BSP_LCD_InitEx+0x260>)
 8005226:	f003 f9f3 	bl	8008610 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800522a:	2364      	movs	r3, #100	@ 0x64
 800522c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800522e:	2305      	movs	r3, #5
 8005230:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8005236:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800523a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800523c:	4b83      	ldr	r3, [pc, #524]	@ (800544c <BSP_LCD_InitEx+0x260>)
 800523e:	2201      	movs	r2, #1
 8005240:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8005242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005244:	089b      	lsrs	r3, r3, #2
 8005246:	4a83      	ldr	r2, [pc, #524]	@ (8005454 <BSP_LCD_InitEx+0x268>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	0a9b      	lsrs	r3, r3, #10
 800524e:	4a7f      	ldr	r2, [pc, #508]	@ (800544c <BSP_LCD_InitEx+0x260>)
 8005250:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8005252:	f107 0308 	add.w	r3, r7, #8
 8005256:	4619      	mov	r1, r3
 8005258:	487c      	ldr	r0, [pc, #496]	@ (800544c <BSP_LCD_InitEx+0x260>)
 800525a:	f003 f8bd 	bl	80083d8 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d108      	bne.n	8005276 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8005264:	4b7c      	ldr	r3, [pc, #496]	@ (8005458 <BSP_LCD_InitEx+0x26c>)
 8005266:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800526a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800526c:	4b7b      	ldr	r3, [pc, #492]	@ (800545c <BSP_LCD_InitEx+0x270>)
 800526e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e007      	b.n	8005286 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8005276:	4b78      	ldr	r3, [pc, #480]	@ (8005458 <BSP_LCD_InitEx+0x26c>)
 8005278:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800527c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800527e:	4b77      	ldr	r3, [pc, #476]	@ (800545c <BSP_LCD_InitEx+0x270>)
 8005280:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005284:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8005286:	4b74      	ldr	r3, [pc, #464]	@ (8005458 <BSP_LCD_InitEx+0x26c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	633b      	str	r3, [r7, #48]	@ 0x30
  VACT = lcd_y_size;
 800528c:	4b73      	ldr	r3, [pc, #460]	@ (800545c <BSP_LCD_InitEx+0x270>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* The following values are same for portrait and landscape orientations */
#if defined (USE_STM32F769I_DISCO_REVB03)
  VSA  = NT35510_480X800_VSYNC;
 8005292:	2378      	movs	r3, #120	@ 0x78
 8005294:	62bb      	str	r3, [r7, #40]	@ 0x28
  VBP  = NT35510_480X800_VBP;
 8005296:	2396      	movs	r3, #150	@ 0x96
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
  VFP  = NT35510_480X800_VFP;
 800529a:	2396      	movs	r3, #150	@ 0x96
 800529c:	623b      	str	r3, [r7, #32]
  HSA  = NT35510_480X800_HSYNC;
 800529e:	2302      	movs	r3, #2
 80052a0:	61fb      	str	r3, [r7, #28]
  HBP  = NT35510_480X800_HBP;
 80052a2:	2322      	movs	r3, #34	@ 0x22
 80052a4:	61bb      	str	r3, [r7, #24]
  HFP  = NT35510_480X800_HFP;  
 80052a6:	2322      	movs	r3, #34	@ 0x22
 80052a8:	617b      	str	r3, [r7, #20]
  HSA  = OTM8009A_480X800_HSYNC;
  HBP  = OTM8009A_480X800_HBP;
  HFP  = OTM8009A_480X800_HFP;
#endif /* USE_STM32F769I_DISCO_REVB03 */

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80052aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80052b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052b2:	2205      	movs	r2, #5
 80052b4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80052b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80052bc:	4b68      	ldr	r3, [pc, #416]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052be:	2200      	movs	r2, #0
 80052c0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80052c2:	4b67      	ldr	r3, [pc, #412]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80052c8:	4b65      	ldr	r3, [pc, #404]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052ca:	2202      	movs	r2, #2
 80052cc:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80052ce:	4b64      	ldr	r3, [pc, #400]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052d0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80052d4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80052d6:	4b62      	ldr	r3, [pc, #392]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052d8:	2200      	movs	r2, #0
 80052da:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80052dc:	4a60      	ldr	r2, [pc, #384]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052e6:	fb03 f202 	mul.w	r2, r3, r2
 80052ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	4a5b      	ldr	r2, [pc, #364]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 80052f2:	6293      	str	r3, [r2, #40]	@ 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052f8:	fb03 f202 	mul.w	r2, r3, r2
 80052fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	4a57      	ldr	r2, [pc, #348]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005304:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8005306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	441a      	add	r2, r3
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	441a      	add	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005316:	fb03 f202 	mul.w	r2, r3, r2
 800531a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	4a4f      	ldr	r2, [pc, #316]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005322:	6313      	str	r3, [r2, #48]	@ 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8005324:	4a4e      	ldr	r2, [pc, #312]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005328:	6353      	str	r3, [r2, #52]	@ 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800532a:	4a4d      	ldr	r2, [pc, #308]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	6393      	str	r3, [r2, #56]	@ 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8005330:	4a4b      	ldr	r2, [pc, #300]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8005336:	4a4a      	ldr	r2, [pc, #296]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533a:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800533c:	4b48      	ldr	r3, [pc, #288]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 800533e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005342:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8005344:	4b46      	ldr	r3, [pc, #280]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005346:	2210      	movs	r2, #16
 8005348:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800534a:	4b45      	ldr	r3, [pc, #276]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 800534c:	2200      	movs	r2, #0
 800534e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8005350:	4b43      	ldr	r3, [pc, #268]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005352:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005356:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8005358:	4b41      	ldr	r3, [pc, #260]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 800535a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800535e:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8005360:	4b3f      	ldr	r3, [pc, #252]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005362:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005366:	659a      	str	r2, [r3, #88]	@ 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8005368:	4b3d      	ldr	r3, [pc, #244]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 800536a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800536e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8005370:	4b3b      	ldr	r3, [pc, #236]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005376:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8005378:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 800537a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800537e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8005380:	4937      	ldr	r1, [pc, #220]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 8005382:	4832      	ldr	r0, [pc, #200]	@ (800544c <BSP_LCD_InitEx+0x260>)
 8005384:	f003 fb7a 	bl	8008a7c <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	3b01      	subs	r3, #1
 800538c:	4a35      	ldr	r2, [pc, #212]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 800538e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	4413      	add	r3, r2
 8005396:	3b01      	subs	r3, #1
 8005398:	4a32      	ldr	r2, [pc, #200]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 800539a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800539c:	4b2e      	ldr	r3, [pc, #184]	@ (8005458 <BSP_LCD_InitEx+0x26c>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	441a      	add	r2, r3
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	4413      	add	r3, r2
 80053a8:	3b01      	subs	r3, #1
 80053aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 80053ac:	6253      	str	r3, [r2, #36]	@ 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80053ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005458 <BSP_LCD_InitEx+0x26c>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	441a      	add	r2, r3
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	441a      	add	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4413      	add	r3, r2
 80053be:	3b01      	subs	r3, #1
 80053c0:	4a28      	ldr	r2, [pc, #160]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 80053c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80053c4:	4b24      	ldr	r3, [pc, #144]	@ (8005458 <BSP_LCD_InitEx+0x26c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a26      	ldr	r2, [pc, #152]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 80053ca:	6613      	str	r3, [r2, #96]	@ 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80053cc:	4b23      	ldr	r3, [pc, #140]	@ (800545c <BSP_LCD_InitEx+0x270>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a24      	ldr	r2, [pc, #144]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 80053d2:	6653      	str	r3, [r2, #100]	@ 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80053d4:	4b24      	ldr	r3, [pc, #144]	@ (8005468 <BSP_LCD_InitEx+0x27c>)
 80053d6:	2208      	movs	r2, #8
 80053d8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80053da:	4b23      	ldr	r3, [pc, #140]	@ (8005468 <BSP_LCD_InitEx+0x27c>)
 80053dc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80053e0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80053e2:	4b21      	ldr	r3, [pc, #132]	@ (8005468 <BSP_LCD_InitEx+0x27c>)
 80053e4:	2207      	movs	r2, #7
 80053e6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80053e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005468 <BSP_LCD_InitEx+0x27c>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80053ee:	481e      	ldr	r0, [pc, #120]	@ (8005468 <BSP_LCD_InitEx+0x27c>)
 80053f0:	f006 ffbe 	bl	800c370 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80053f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80053fc:	4b19      	ldr	r3, [pc, #100]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8005404:	4b17      	ldr	r3, [pc, #92]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800540c:	4b15      	ldr	r3, [pc, #84]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 800540e:	2200      	movs	r2, #0
 8005410:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8005412:	4b14      	ldr	r3, [pc, #80]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 8005414:	4a15      	ldr	r2, [pc, #84]	@ (800546c <BSP_LCD_InitEx+0x280>)
 8005416:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8005418:	4911      	ldr	r1, [pc, #68]	@ (8005460 <BSP_LCD_InitEx+0x274>)
 800541a:	4812      	ldr	r0, [pc, #72]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 800541c:	f005 fd70 	bl	800af00 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8005420:	4810      	ldr	r0, [pc, #64]	@ (8005464 <BSP_LCD_InitEx+0x278>)
 8005422:	f005 f98f 	bl	800a744 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8005426:	4809      	ldr	r0, [pc, #36]	@ (800544c <BSP_LCD_InitEx+0x260>)
 8005428:	f003 ffba 	bl	80093a0 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800542c:	f001 fa62 	bl	80068f4 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005430:	480f      	ldr	r0, [pc, #60]	@ (8005470 <BSP_LCD_InitEx+0x284>)
 8005432:	f000 f925 	bl	8005680 <BSP_LCD_SetFont>
/***********************NT35510 Initialization********************************/  
  
  /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
   * depending on configuration set in 'hdsivideo_handle'.
   */
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	4619      	mov	r1, r3
 800543a:	2000      	movs	r0, #0
 800543c:	f7fd fe28 	bl	8003090 <NT35510_Init>

/***********************End OTM8009A Initialization****************************/ 
#endif /* USE_STM32F769I_DISCO_REVB03 */


  return LCD_OK; 
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3740      	adds	r7, #64	@ 0x40
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20002b00 	.word	0x20002b00
 8005450:	40016c00 	.word	0x40016c00
 8005454:	43215e57 	.word	0x43215e57
 8005458:	2000008c 	.word	0x2000008c
 800545c:	20000090 	.word	0x20000090
 8005460:	20002994 	.word	0x20002994
 8005464:	20002a58 	.word	0x20002a58
 8005468:	20002b38 	.word	0x20002b38
 800546c:	40016800 	.word	0x40016800
 8005470:	20000084 	.word	0x20000084

08005474 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800547a:	4b18      	ldr	r3, [pc, #96]	@ (80054dc <BSP_LCD_Reset+0x68>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	4a17      	ldr	r2, [pc, #92]	@ (80054dc <BSP_LCD_Reset+0x68>)
 8005480:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005484:	6313      	str	r3, [r2, #48]	@ 0x30
 8005486:	4b15      	ldr	r3, [pc, #84]	@ (80054dc <BSP_LCD_Reset+0x68>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8005492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005496:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005498:	2301      	movs	r3, #1
 800549a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800549c:	2301      	movs	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80054a0:	2303      	movs	r3, #3
 80054a2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	480d      	ldr	r0, [pc, #52]	@ (80054e0 <BSP_LCD_Reset+0x6c>)
 80054aa:	f004 f89d 	bl	80095e8 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80054ae:	2200      	movs	r2, #0
 80054b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054b4:	480a      	ldr	r0, [pc, #40]	@ (80054e0 <BSP_LCD_Reset+0x6c>)
 80054b6:	f004 fb67 	bl	8009b88 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80054ba:	2014      	movs	r0, #20
 80054bc:	f001 fd72 	bl	8006fa4 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80054c0:	2201      	movs	r2, #1
 80054c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054c6:	4806      	ldr	r0, [pc, #24]	@ (80054e0 <BSP_LCD_Reset+0x6c>)
 80054c8:	f004 fb5e 	bl	8009b88 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80054cc:	200a      	movs	r0, #10
 80054ce:	f001 fd69 	bl	8006fa4 <HAL_Delay>
}
 80054d2:	bf00      	nop
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800
 80054e0:	40022400 	.word	0x40022400

080054e4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80054e8:	4b03      	ldr	r3, [pc, #12]	@ (80054f8 <BSP_LCD_GetXSize+0x14>)
 80054ea:	681b      	ldr	r3, [r3, #0]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	2000008c 	.word	0x2000008c

080054fc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8005500:	4b03      	ldr	r3, [pc, #12]	@ (8005510 <BSP_LCD_GetYSize+0x14>)
 8005502:	681b      	ldr	r3, [r3, #0]
}
 8005504:	4618      	mov	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000090 	.word	0x20000090

08005514 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b090      	sub	sp, #64	@ 0x40
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	6039      	str	r1, [r7, #0]
 800551e:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8005524:	f7ff ffde 	bl	80054e4 <BSP_LCD_GetXSize>
 8005528:	4603      	mov	r3, r0
 800552a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005530:	f7ff ffe4 	bl	80054fc <BSP_LCD_GetYSize>
 8005534:	4603      	mov	r3, r0
 8005536:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8005540:	23ff      	movs	r3, #255	@ 0xff
 8005542:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800555a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800555e:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005560:	2307      	movs	r3, #7
 8005562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8005564:	f7ff ffbe 	bl	80054e4 <BSP_LCD_GetXSize>
 8005568:	4603      	mov	r3, r0
 800556a:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800556c:	f7ff ffc6 	bl	80054fc <BSP_LCD_GetYSize>
 8005570:	4603      	mov	r3, r0
 8005572:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8005574:	88fa      	ldrh	r2, [r7, #6]
 8005576:	f107 030c 	add.w	r3, r7, #12
 800557a:	4619      	mov	r1, r3
 800557c:	4812      	ldr	r0, [pc, #72]	@ (80055c8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800557e:	f005 fa69 	bl	800aa54 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	4911      	ldr	r1, [pc, #68]	@ (80055cc <BSP_LCD_LayerDefaultInit+0xb8>)
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	3304      	adds	r3, #4
 8005592:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005596:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	490c      	ldr	r1, [pc, #48]	@ (80055cc <BSP_LCD_LayerDefaultInit+0xb8>)
 800559c:	4613      	mov	r3, r2
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3308      	adds	r3, #8
 80055a8:	4a09      	ldr	r2, [pc, #36]	@ (80055d0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80055aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	4907      	ldr	r1, [pc, #28]	@ (80055cc <BSP_LCD_LayerDefaultInit+0xb8>)
 80055b0:	4613      	mov	r3, r2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80055be:	601a      	str	r2, [r3, #0]
}
 80055c0:	bf00      	nop
 80055c2:	3740      	adds	r7, #64	@ 0x40
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20002a58 	.word	0x20002a58
 80055cc:	20002b20 	.word	0x20002b20
 80055d0:	20000084 	.word	0x20000084

080055d4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80055dc:	4a04      	ldr	r2, [pc, #16]	@ (80055f0 <BSP_LCD_SelectLayer+0x1c>)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6013      	str	r3, [r2, #0]
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20002b1c 	.word	0x20002b1c

080055f4 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color keying.
  * @param  LayerIndex: Layer foreground or background
  * @param  RGBValue: Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&(hltdc_discovery), RGBValue, LayerIndex);
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	4805      	ldr	r0, [pc, #20]	@ (8005618 <BSP_LCD_SetColorKeying+0x24>)
 8005604:	f005 fa64 	bl	800aad0 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&(hltdc_discovery), LayerIndex);
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4803      	ldr	r0, [pc, #12]	@ (8005618 <BSP_LCD_SetColorKeying+0x24>)
 800560c:	f005 faa4 	bl	800ab58 <HAL_LTDC_EnableColorKeying>
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20002a58 	.word	0x20002a58

0800561c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005624:	4b07      	ldr	r3, [pc, #28]	@ (8005644 <BSP_LCD_SetTextColor+0x28>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4907      	ldr	r1, [pc, #28]	@ (8005648 <BSP_LCD_SetTextColor+0x2c>)
 800562a:	4613      	mov	r3, r2
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	601a      	str	r2, [r3, #0]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	20002b1c 	.word	0x20002b1c
 8005648:	20002b20 	.word	0x20002b20

0800564c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005654:	4b08      	ldr	r3, [pc, #32]	@ (8005678 <BSP_LCD_SetBackColor+0x2c>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4908      	ldr	r1, [pc, #32]	@ (800567c <BSP_LCD_SetBackColor+0x30>)
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	3304      	adds	r3, #4
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	601a      	str	r2, [r3, #0]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20002b1c 	.word	0x20002b1c
 800567c:	20002b20 	.word	0x20002b20

08005680 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8005688:	4b08      	ldr	r3, [pc, #32]	@ (80056ac <BSP_LCD_SetFont+0x2c>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4908      	ldr	r1, [pc, #32]	@ (80056b0 <BSP_LCD_SetFont+0x30>)
 800568e:	4613      	mov	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	3308      	adds	r3, #8
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20002b1c 	.word	0x20002b1c
 80056b0:	20002b20 	.word	0x20002b20

080056b4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80056b8:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <BSP_LCD_GetFont+0x24>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	4907      	ldr	r1, [pc, #28]	@ (80056dc <BSP_LCD_GetFont+0x28>)
 80056be:	4613      	mov	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	3308      	adds	r3, #8
 80056ca:	681b      	ldr	r3, [r3, #0]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20002b1c 	.word	0x20002b1c
 80056dc:	20002b20 	.word	0x20002b20

080056e0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80056e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80056e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005728 <BSP_LCD_Clear+0x48>)
 80056ea:	681c      	ldr	r4, [r3, #0]
 80056ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <BSP_LCD_Clear+0x48>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0e      	ldr	r2, [pc, #56]	@ (800572c <BSP_LCD_Clear+0x4c>)
 80056f2:	2134      	movs	r1, #52	@ 0x34
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	4413      	add	r3, r2
 80056fa:	335c      	adds	r3, #92	@ 0x5c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461e      	mov	r6, r3
 8005700:	f7ff fef0 	bl	80054e4 <BSP_LCD_GetXSize>
 8005704:	4605      	mov	r5, r0
 8005706:	f7ff fef9 	bl	80054fc <BSP_LCD_GetYSize>
 800570a:	4602      	mov	r2, r0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	2300      	movs	r3, #0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	462a      	mov	r2, r5
 8005718:	4631      	mov	r1, r6
 800571a:	4620      	mov	r0, r4
 800571c:	f000 fb60 	bl	8005de0 <LL_FillBuffer>
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005728:	20002b1c 	.word	0x20002b1c
 800572c:	20002a58 	.word	0x20002a58

08005730 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005730:	b590      	push	{r4, r7, lr}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	80fb      	strh	r3, [r7, #6]
 800573a:	460b      	mov	r3, r1
 800573c:	80bb      	strh	r3, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005742:	4b1b      	ldr	r3, [pc, #108]	@ (80057b0 <BSP_LCD_DisplayChar+0x80>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	491b      	ldr	r1, [pc, #108]	@ (80057b4 <BSP_LCD_DisplayChar+0x84>)
 8005748:	4613      	mov	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	3308      	adds	r3, #8
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6819      	ldr	r1, [r3, #0]
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800575e:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <BSP_LCD_DisplayChar+0x80>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4c14      	ldr	r4, [pc, #80]	@ (80057b4 <BSP_LCD_DisplayChar+0x84>)
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4423      	add	r3, r4
 800576e:	3308      	adds	r3, #8
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005774:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005778:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <BSP_LCD_DisplayChar+0x80>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4c0d      	ldr	r4, [pc, #52]	@ (80057b4 <BSP_LCD_DisplayChar+0x84>)
 800577e:	4613      	mov	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4423      	add	r3, r4
 8005788:	3308      	adds	r3, #8
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	889b      	ldrh	r3, [r3, #4]
 800578e:	3307      	adds	r3, #7
 8005790:	2b00      	cmp	r3, #0
 8005792:	da00      	bge.n	8005796 <BSP_LCD_DisplayChar+0x66>
 8005794:	3307      	adds	r3, #7
 8005796:	10db      	asrs	r3, r3, #3
 8005798:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800579c:	18ca      	adds	r2, r1, r3
 800579e:	88b9      	ldrh	r1, [r7, #4]
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fa64 	bl	8005c70 <DrawChar>
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd90      	pop	{r4, r7, pc}
 80057b0:	20002b1c 	.word	0x20002b1c
 80057b4:	20002b20 	.word	0x20002b20

080057b8 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80057b8:	b5b0      	push	{r4, r5, r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60ba      	str	r2, [r7, #8]
 80057c0:	461a      	mov	r2, r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	81fb      	strh	r3, [r7, #14]
 80057c6:	460b      	mov	r3, r1
 80057c8:	81bb      	strh	r3, [r7, #12]
 80057ca:	4613      	mov	r3, r2
 80057cc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80057ce:	2301      	movs	r3, #1
 80057d0:	83fb      	strh	r3, [r7, #30]
 80057d2:	2300      	movs	r3, #0
 80057d4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	2300      	movs	r3, #0
 80057dc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80057e2:	e002      	b.n	80057ea <BSP_LCD_DisplayStringAt+0x32>
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	3301      	adds	r3, #1
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	617a      	str	r2, [r7, #20]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f6      	bne.n	80057e4 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80057f6:	f7ff fe75 	bl	80054e4 <BSP_LCD_GetXSize>
 80057fa:	4601      	mov	r1, r0
 80057fc:	4b50      	ldr	r3, [pc, #320]	@ (8005940 <BSP_LCD_DisplayStringAt+0x188>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4850      	ldr	r0, [pc, #320]	@ (8005944 <BSP_LCD_DisplayStringAt+0x18c>)
 8005802:	4613      	mov	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4403      	add	r3, r0
 800580c:	3308      	adds	r3, #8
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	889b      	ldrh	r3, [r3, #4]
 8005812:	fbb1 f3f3 	udiv	r3, r1, r3
 8005816:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	2b03      	cmp	r3, #3
 800581c:	d01c      	beq.n	8005858 <BSP_LCD_DisplayStringAt+0xa0>
 800581e:	2b03      	cmp	r3, #3
 8005820:	dc33      	bgt.n	800588a <BSP_LCD_DisplayStringAt+0xd2>
 8005822:	2b01      	cmp	r3, #1
 8005824:	d002      	beq.n	800582c <BSP_LCD_DisplayStringAt+0x74>
 8005826:	2b02      	cmp	r3, #2
 8005828:	d019      	beq.n	800585e <BSP_LCD_DisplayStringAt+0xa6>
 800582a:	e02e      	b.n	800588a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	1ad1      	subs	r1, r2, r3
 8005832:	4b43      	ldr	r3, [pc, #268]	@ (8005940 <BSP_LCD_DisplayStringAt+0x188>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4843      	ldr	r0, [pc, #268]	@ (8005944 <BSP_LCD_DisplayStringAt+0x18c>)
 8005838:	4613      	mov	r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4403      	add	r3, r0
 8005842:	3308      	adds	r3, #8
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	889b      	ldrh	r3, [r3, #4]
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	4413      	add	r3, r2
 8005854:	83fb      	strh	r3, [r7, #30]
      break;
 8005856:	e01b      	b.n	8005890 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8005858:	89fb      	ldrh	r3, [r7, #14]
 800585a:	83fb      	strh	r3, [r7, #30]
      break;
 800585c:	e018      	b.n	8005890 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	b299      	uxth	r1, r3
 8005866:	4b36      	ldr	r3, [pc, #216]	@ (8005940 <BSP_LCD_DisplayStringAt+0x188>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4836      	ldr	r0, [pc, #216]	@ (8005944 <BSP_LCD_DisplayStringAt+0x18c>)
 800586c:	4613      	mov	r3, r2
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4403      	add	r3, r0
 8005876:	3308      	adds	r3, #8
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	889b      	ldrh	r3, [r3, #4]
 800587c:	fb11 f303 	smulbb	r3, r1, r3
 8005880:	b29a      	uxth	r2, r3
 8005882:	89fb      	ldrh	r3, [r7, #14]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	83fb      	strh	r3, [r7, #30]
      break;
 8005888:	e002      	b.n	8005890 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 800588a:	89fb      	ldrh	r3, [r7, #14]
 800588c:	83fb      	strh	r3, [r7, #30]
      break;
 800588e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8005890:	8bfb      	ldrh	r3, [r7, #30]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <BSP_LCD_DisplayStringAt+0xe6>
 8005896:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800589a:	2b00      	cmp	r3, #0
 800589c:	da1d      	bge.n	80058da <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 800589e:	2301      	movs	r3, #1
 80058a0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80058a2:	e01a      	b.n	80058da <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	781a      	ldrb	r2, [r3, #0]
 80058a8:	89b9      	ldrh	r1, [r7, #12]
 80058aa:	8bfb      	ldrh	r3, [r7, #30]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff ff3f 	bl	8005730 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80058b2:	4b23      	ldr	r3, [pc, #140]	@ (8005940 <BSP_LCD_DisplayStringAt+0x188>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4923      	ldr	r1, [pc, #140]	@ (8005944 <BSP_LCD_DisplayStringAt+0x18c>)
 80058b8:	4613      	mov	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	3308      	adds	r3, #8
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	889a      	ldrh	r2, [r3, #4]
 80058c8:	8bfb      	ldrh	r3, [r7, #30]
 80058ca:	4413      	add	r3, r2
 80058cc:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60bb      	str	r3, [r7, #8]
    i++;
 80058d4:	8bbb      	ldrh	r3, [r7, #28]
 80058d6:	3301      	adds	r3, #1
 80058d8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2dc      	uxtb	r4, r3
 80058e8:	f7ff fdfc 	bl	80054e4 <BSP_LCD_GetXSize>
 80058ec:	8bb9      	ldrh	r1, [r7, #28]
 80058ee:	4b14      	ldr	r3, [pc, #80]	@ (8005940 <BSP_LCD_DisplayStringAt+0x188>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4d14      	ldr	r5, [pc, #80]	@ (8005944 <BSP_LCD_DisplayStringAt+0x18c>)
 80058f4:	4613      	mov	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	442b      	add	r3, r5
 80058fe:	3308      	adds	r3, #8
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	889b      	ldrh	r3, [r3, #4]
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	1ac3      	subs	r3, r0, r3
 800590a:	b299      	uxth	r1, r3
 800590c:	4b0c      	ldr	r3, [pc, #48]	@ (8005940 <BSP_LCD_DisplayStringAt+0x188>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	480c      	ldr	r0, [pc, #48]	@ (8005944 <BSP_LCD_DisplayStringAt+0x18c>)
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4403      	add	r3, r0
 800591c:	3308      	adds	r3, #8
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	889b      	ldrh	r3, [r3, #4]
 8005922:	4299      	cmp	r1, r3
 8005924:	bf2c      	ite	cs
 8005926:	2301      	movcs	r3, #1
 8005928:	2300      	movcc	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	4023      	ands	r3, r4
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1b7      	bne.n	80058a4 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bdb0      	pop	{r4, r5, r7, pc}
 800593e:	bf00      	nop
 8005940:	20002b1c 	.word	0x20002b1c
 8005944:	20002b20 	.word	0x20002b20

08005948 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8005948:	b590      	push	{r4, r7, lr}
 800594a:	b08b      	sub	sp, #44	@ 0x2c
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	330a      	adds	r3, #10
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	330b      	adds	r3, #11
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	441a      	add	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	330c      	adds	r3, #12
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	041b      	lsls	r3, r3, #16
 8005982:	441a      	add	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	330d      	adds	r3, #13
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	061b      	lsls	r3, r3, #24
 800598c:	4413      	add	r3, r2
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3312      	adds	r3, #18
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3313      	adds	r3, #19
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	441a      	add	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3314      	adds	r3, #20
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	441a      	add	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3315      	adds	r3, #21
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	061b      	lsls	r3, r3, #24
 80059b4:	4413      	add	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3316      	adds	r3, #22
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3317      	adds	r3, #23
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	441a      	add	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3318      	adds	r3, #24
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	441a      	add	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3319      	adds	r3, #25
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	4413      	add	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	331c      	adds	r3, #28
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	331d      	adds	r3, #29
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	4413      	add	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80059f4:	4b2b      	ldr	r3, [pc, #172]	@ (8005aa4 <BSP_LCD_DrawBitmap+0x15c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa8 <BSP_LCD_DrawBitmap+0x160>)
 80059fa:	2134      	movs	r1, #52	@ 0x34
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	4413      	add	r3, r2
 8005a02:	335c      	adds	r3, #92	@ 0x5c
 8005a04:	681c      	ldr	r4, [r3, #0]
 8005a06:	f7ff fd6d 	bl	80054e4 <BSP_LCD_GetXSize>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	fb03 f202 	mul.w	r2, r3, r2
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4423      	add	r3, r4
 8005a1a:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3b20      	subs	r3, #32
 8005a20:	2b07      	cmp	r3, #7
 8005a22:	d802      	bhi.n	8005a2a <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	e008      	b.n	8005a3c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3b10      	subs	r3, #16
 8005a2e:	2b07      	cmp	r3, #7
 8005a30:	d802      	bhi.n	8005a38 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 8005a32:	2302      	movs	r3, #2
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	e001      	b.n	8005a3c <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	08d2      	lsrs	r2, r2, #3
 8005a4a:	fb03 f202 	mul.w	r2, r3, r2
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	4413      	add	r3, r2
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	4413      	add	r3, r2
 8005a56:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a5c:	e018      	b.n	8005a90 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 8005a5e:	6a39      	ldr	r1, [r7, #32]
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f9f3 	bl	8005e50 <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 8005a6a:	f7ff fd3b 	bl	80054e4 <BSP_LCD_GetXSize>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	6a3a      	ldr	r2, [r7, #32]
 8005a74:	4413      	add	r3, r2
 8005a76:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	08db      	lsrs	r3, r3, #3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	425b      	negs	r3, r3
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d3e2      	bcc.n	8005a5e <BSP_LCD_DrawBitmap+0x116>
  }
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	372c      	adds	r7, #44	@ 0x2c
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd90      	pop	{r4, r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20002b1c 	.word	0x20002b1c
 8005aa8:	20002a58 	.word	0x20002a58

08005aac <BSP_LCD_SetBrightness>:
/**
  * @brief  Set the brightness value 
  * @param  BrightnessValue: [00: Min (black), 100 Max]
  */
void BSP_LCD_SetBrightness(uint8_t BrightnessValue)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
  {
    /* Send Display on DCS command to display */
    HAL_DSI_ShortWrite(&hdsi_discovery, 
                       LCD_OTM8009A_ID, 
                       DSI_DCS_SHORT_PKT_WRITE_P1, 
                       OTM8009A_CMD_WRDISBV, (uint16_t)(BrightnessValue * 255)/100);
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	0212      	lsls	r2, r2, #8
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	b29b      	uxth	r3, r3
    HAL_DSI_ShortWrite(&hdsi_discovery, 
 8005ac2:	4a08      	ldr	r2, [pc, #32]	@ (8005ae4 <BSP_LCD_SetBrightness+0x38>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	2351      	movs	r3, #81	@ 0x51
 8005ad0:	2215      	movs	r2, #21
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4804      	ldr	r0, [pc, #16]	@ (8005ae8 <BSP_LCD_SetBrightness+0x3c>)
 8005ad6:	f003 fc9f 	bl	8009418 <HAL_DSI_ShortWrite>
  }  
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	51eb851f 	.word	0x51eb851f
 8005ae8:	20002b00 	.word	0x20002b00

08005aec <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d80d      	bhi.n	8005b18 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	2215      	movs	r2, #21
 8005b0e:	2100      	movs	r1, #0
 8005b10:	480a      	ldr	r0, [pc, #40]	@ (8005b3c <DSI_IO_WriteCmd+0x50>)
 8005b12:	f003 fc81 	bl	8009418 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8005b16:	e00d      	b.n	8005b34 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	9200      	str	r2, [sp, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2239      	movs	r2, #57	@ 0x39
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4803      	ldr	r0, [pc, #12]	@ (8005b3c <DSI_IO_WriteCmd+0x50>)
 8005b30:	f003 fc94 	bl	800945c <HAL_DSI_LongWrite>
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20002b00 	.word	0x20002b00

08005b40 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8005b44:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005b56:	4b32      	ldr	r3, [pc, #200]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5a:	4a31      	ldr	r2, [pc, #196]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b62:	4b2f      	ldr	r3, [pc, #188]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8005b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b72:	4a2b      	ldr	r2, [pc, #172]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b78:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8005b7a:	4b29      	ldr	r3, [pc, #164]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7e:	4a28      	ldr	r2, [pc, #160]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b84:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005b86:	4b26      	ldr	r3, [pc, #152]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	4a25      	ldr	r2, [pc, #148]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b92:	4b23      	ldr	r3, [pc, #140]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b9a:	60bb      	str	r3, [r7, #8]
 8005b9c:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8005b9e:	4b20      	ldr	r3, [pc, #128]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005ba4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ba8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8005baa:	4b1d      	ldr	r3, [pc, #116]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	4a1c      	ldr	r2, [pc, #112]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005bb0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005bb4:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8005bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bba:	4a19      	ldr	r2, [pc, #100]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005bbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bc2:	4b17      	ldr	r3, [pc, #92]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8005bce:	4b14      	ldr	r3, [pc, #80]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd2:	4a13      	ldr	r2, [pc, #76]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005bd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bd8:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8005bda:	4b11      	ldr	r3, [pc, #68]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	4a10      	ldr	r2, [pc, #64]	@ (8005c20 <BSP_LCD_MspInit+0xd0>)
 8005be0:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005be4:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8005be6:	2200      	movs	r2, #0
 8005be8:	2103      	movs	r1, #3
 8005bea:	2058      	movs	r0, #88	@ 0x58
 8005bec:	f001 fada 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005bf0:	2058      	movs	r0, #88	@ 0x58
 8005bf2:	f001 faf3 	bl	80071dc <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2103      	movs	r1, #3
 8005bfa:	205a      	movs	r0, #90	@ 0x5a
 8005bfc:	f001 fad2 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005c00:	205a      	movs	r0, #90	@ 0x5a
 8005c02:	f001 faeb 	bl	80071dc <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8005c06:	2200      	movs	r2, #0
 8005c08:	2103      	movs	r1, #3
 8005c0a:	2062      	movs	r0, #98	@ 0x62
 8005c0c:	f001 faca 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8005c10:	2062      	movs	r0, #98	@ 0x62
 8005c12:	f001 fae3 	bl	80071dc <HAL_NVIC_EnableIRQ>
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	40023800 	.word	0x40023800

08005c24 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005c24:	b5b0      	push	{r4, r5, r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	603a      	str	r2, [r7, #0]
 8005c2e:	80fb      	strh	r3, [r7, #6]
 8005c30:	460b      	mov	r3, r1
 8005c32:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005c34:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <BSP_LCD_DrawPixel+0x44>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0c      	ldr	r2, [pc, #48]	@ (8005c6c <BSP_LCD_DrawPixel+0x48>)
 8005c3a:	2134      	movs	r1, #52	@ 0x34
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	335c      	adds	r3, #92	@ 0x5c
 8005c44:	681c      	ldr	r4, [r3, #0]
 8005c46:	88bd      	ldrh	r5, [r7, #4]
 8005c48:	f7ff fc4c 	bl	80054e4 <BSP_LCD_GetXSize>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	fb03 f205 	mul.w	r2, r3, r5
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4423      	add	r3, r4
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	6013      	str	r3, [r2, #0]
}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bdb0      	pop	{r4, r5, r7, pc}
 8005c68:	20002b1c 	.word	0x20002b1c
 8005c6c:	20002a58 	.word	0x20002a58

08005c70 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	603a      	str	r2, [r7, #0]
 8005c7a:	80fb      	strh	r3, [r7, #6]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8005c88:	4b53      	ldr	r3, [pc, #332]	@ (8005dd8 <DrawChar+0x168>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	4953      	ldr	r1, [pc, #332]	@ (8005ddc <DrawChar+0x16c>)
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	3308      	adds	r3, #8
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	88db      	ldrh	r3, [r3, #6]
 8005c9e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8005dd8 <DrawChar+0x168>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	494d      	ldr	r1, [pc, #308]	@ (8005ddc <DrawChar+0x16c>)
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	889b      	ldrh	r3, [r3, #4]
 8005cb6:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8005cb8:	8a3b      	ldrh	r3, [r7, #16]
 8005cba:	3307      	adds	r3, #7
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	da00      	bge.n	8005cc2 <DrawChar+0x52>
 8005cc0:	3307      	adds	r3, #7
 8005cc2:	10db      	asrs	r3, r3, #3
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	8a3b      	ldrh	r3, [r7, #16]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	e076      	b.n	8005dc6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005cd8:	8a3b      	ldrh	r3, [r7, #16]
 8005cda:	3307      	adds	r3, #7
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da00      	bge.n	8005ce2 <DrawChar+0x72>
 8005ce0:	3307      	adds	r3, #7
 8005ce2:	10db      	asrs	r3, r3, #3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	fb02 f303 	mul.w	r3, r2, r3
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	4413      	add	r3, r2
 8005cf0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8005cf2:	8a3b      	ldrh	r3, [r7, #16]
 8005cf4:	3307      	adds	r3, #7
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da00      	bge.n	8005cfc <DrawChar+0x8c>
 8005cfa:	3307      	adds	r3, #7
 8005cfc:	10db      	asrs	r3, r3, #3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d002      	beq.n	8005d08 <DrawChar+0x98>
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d004      	beq.n	8005d10 <DrawChar+0xa0>
 8005d06:	e00c      	b.n	8005d22 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	617b      	str	r3, [r7, #20]
      break;
 8005d0e:	e016      	b.n	8005d3e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	3201      	adds	r2, #1
 8005d1a:	7812      	ldrb	r2, [r2, #0]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
      break;
 8005d20:	e00d      	b.n	8005d3e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	041a      	lsls	r2, r3, #16
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	4313      	orrs	r3, r2
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	3202      	adds	r2, #2
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
      break;
 8005d3c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	e036      	b.n	8005db2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8005d44:	8a3a      	ldrh	r2, [r7, #16]
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	1ad2      	subs	r2, r2, r3
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	2201      	movs	r2, #1
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d012      	beq.n	8005d86 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	88fb      	ldrh	r3, [r7, #6]
 8005d66:	4413      	add	r3, r2
 8005d68:	b298      	uxth	r0, r3
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd8 <DrawChar+0x168>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	491b      	ldr	r1, [pc, #108]	@ (8005ddc <DrawChar+0x16c>)
 8005d70:	4613      	mov	r3, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	88bb      	ldrh	r3, [r7, #4]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f7ff ff50 	bl	8005c24 <BSP_LCD_DrawPixel>
 8005d84:	e012      	b.n	8005dac <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	b298      	uxth	r0, r3
 8005d90:	4b11      	ldr	r3, [pc, #68]	@ (8005dd8 <DrawChar+0x168>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4911      	ldr	r1, [pc, #68]	@ (8005ddc <DrawChar+0x16c>)
 8005d96:	4613      	mov	r3, r2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	3304      	adds	r3, #4
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	88bb      	ldrh	r3, [r7, #4]
 8005da6:	4619      	mov	r1, r3
 8005da8:	f7ff ff3c 	bl	8005c24 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	3301      	adds	r3, #1
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	8a3b      	ldrh	r3, [r7, #16]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d3c4      	bcc.n	8005d44 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8005dba:	88bb      	ldrh	r3, [r7, #4]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	8a7b      	ldrh	r3, [r7, #18]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d384      	bcc.n	8005cd8 <DrawChar+0x68>
  }
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	3720      	adds	r7, #32
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20002b1c 	.word	0x20002b1c
 8005ddc:	20002b20 	.word	0x20002b20

08005de0 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8005dee:	4b16      	ldr	r3, [pc, #88]	@ (8005e48 <LL_FillBuffer+0x68>)
 8005df0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005df4:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8005df6:	4b14      	ldr	r3, [pc, #80]	@ (8005e48 <LL_FillBuffer+0x68>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8005dfc:	4a12      	ldr	r2, [pc, #72]	@ (8005e48 <LL_FillBuffer+0x68>)
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8005e02:	4b11      	ldr	r3, [pc, #68]	@ (8005e48 <LL_FillBuffer+0x68>)
 8005e04:	4a11      	ldr	r2, [pc, #68]	@ (8005e4c <LL_FillBuffer+0x6c>)
 8005e06:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8005e08:	480f      	ldr	r0, [pc, #60]	@ (8005e48 <LL_FillBuffer+0x68>)
 8005e0a:	f001 fee5 	bl	8007bd8 <HAL_DMA2D_Init>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d115      	bne.n	8005e40 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	480c      	ldr	r0, [pc, #48]	@ (8005e48 <LL_FillBuffer+0x68>)
 8005e18:	f002 f95c 	bl	80080d4 <HAL_DMA2D_ConfigLayer>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10e      	bne.n	8005e40 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69f9      	ldr	r1, [r7, #28]
 8005e2c:	4806      	ldr	r0, [pc, #24]	@ (8005e48 <LL_FillBuffer+0x68>)
 8005e2e:	f001 ff2d 	bl	8007c8c <HAL_DMA2D_Start>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8005e38:	210a      	movs	r1, #10
 8005e3a:	4803      	ldr	r0, [pc, #12]	@ (8005e48 <LL_FillBuffer+0x68>)
 8005e3c:	f001 ff51 	bl	8007ce2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20002a00 	.word	0x20002a00
 8005e4c:	4002b000 	.word	0x4002b000

08005e50 <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 8005e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005e60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005e64:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8005e66:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 8005e6c:	4b18      	ldr	r3, [pc, #96]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005e72:	4b17      	ldr	r3, [pc, #92]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 8005e78:	4b15      	ldr	r3, [pc, #84]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005e7a:	22ff      	movs	r2, #255	@ 0xff
 8005e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 8005e7e:	4a14      	ldr	r2, [pc, #80]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 8005e84:	4b12      	ldr	r3, [pc, #72]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma2d_discovery.Instance = DMA2D;
 8005e8a:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005e8c:	4a11      	ldr	r2, [pc, #68]	@ (8005ed4 <LL_ConvertLineToARGB8888+0x84>)
 8005e8e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8005e90:	480f      	ldr	r0, [pc, #60]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005e92:	f001 fea1 	bl	8007bd8 <HAL_DMA2D_Init>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d115      	bne.n	8005ec8 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	480c      	ldr	r0, [pc, #48]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005ea0:	f002 f918 	bl	80080d4 <HAL_DMA2D_ConfigLayer>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10e      	bne.n	8005ec8 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	2301      	movs	r3, #1
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4806      	ldr	r0, [pc, #24]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005eb6:	f001 fee9 	bl	8007c8c <HAL_DMA2D_Start>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d103      	bne.n	8005ec8 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8005ec0:	210a      	movs	r1, #10
 8005ec2:	4803      	ldr	r0, [pc, #12]	@ (8005ed0 <LL_ConvertLineToARGB8888+0x80>)
 8005ec4:	f001 ff0d 	bl	8007ce2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20002a00 	.word	0x20002a00
 8005ed4:	4002b000 	.word	0x4002b000

08005ed8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8005ede:	4b34      	ldr	r3, [pc, #208]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005ee0:	4a34      	ldr	r2, [pc, #208]	@ (8005fb4 <BSP_QSPI_Init+0xdc>)
 8005ee2:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8005ee4:	4832      	ldr	r0, [pc, #200]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005ee6:	f005 f927 	bl	800b138 <HAL_QSPI_DeInit>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e059      	b.n	8005fa8 <BSP_QSPI_Init+0xd0>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	482e      	ldr	r0, [pc, #184]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005ef8:	f000 f890 	bl	800601c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8005efc:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 8005f02:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f04:	2210      	movs	r2, #16
 8005f06:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 8005f08:	4b29      	ldr	r3, [pc, #164]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f0a:	2210      	movs	r2, #16
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005f12:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	fa93 f3a3 	rbit	r3, r3
 8005f1a:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f1c:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 8005f1e:	fab3 f383 	clz	r3, r3
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	461a      	mov	r2, r3
 8005f28:	4b21      	ldr	r3, [pc, #132]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f2a:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 8005f2c:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f2e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005f32:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005f34:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8005f40:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8005f46:	481a      	ldr	r0, [pc, #104]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f48:	f005 f87a 	bl	800b040 <HAL_QSPI_Init>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e028      	b.n	8005fa8 <BSP_QSPI_Init+0xd0>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8005f56:	4816      	ldr	r0, [pc, #88]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f58:	f000 f922 	bl	80061a0 <QSPI_ResetMemory>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8005f62:	2304      	movs	r3, #4
 8005f64:	e020      	b.n	8005fa8 <BSP_QSPI_Init+0xd0>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 8005f66:	4812      	ldr	r0, [pc, #72]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f68:	f000 fb39 	bl	80065de <QSPI_EnterMemory_QPI>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8005f72:	2304      	movs	r3, #4
 8005f74:	e018      	b.n	8005fa8 <BSP_QSPI_Init+0xd0>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 8005f76:	480e      	ldr	r0, [pc, #56]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f78:	f000 fa3a 	bl	80063f0 <QSPI_EnterFourBytesAddress>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <BSP_QSPI_Init+0xae>
  {
    return QSPI_NOT_SUPPORTED;
 8005f82:	2304      	movs	r3, #4
 8005f84:	e010      	b.n	8005fa8 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8005f86:	480a      	ldr	r0, [pc, #40]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f88:	f000 fa6d 	bl	8006466 <QSPI_DummyCyclesCfg>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <BSP_QSPI_Init+0xbe>
  {
    return QSPI_NOT_SUPPORTED;
 8005f92:	2304      	movs	r3, #4
 8005f94:	e008      	b.n	8005fa8 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 8005f96:	4806      	ldr	r0, [pc, #24]	@ (8005fb0 <BSP_QSPI_Init+0xd8>)
 8005f98:	f000 fb6e 	bl	8006678 <QSPI_OutDrvStrengthCfg>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <BSP_QSPI_Init+0xce>
  {
    return QSPI_NOT_SUPPORTED;
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	e000      	b.n	8005fa8 <BSP_QSPI_Init+0xd0>
  }
  
  return QSPI_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20002bc8 	.word	0x20002bc8
 8005fb4:	a0001000 	.word	0xa0001000

08005fb8 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b090      	sub	sp, #64	@ 0x40
 8005fbc:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005fbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005fc2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8005fc4:	23ec      	movs	r3, #236	@ 0xec
 8005fc6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005fc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005fce:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005fd2:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005fd8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8005fde:	230a      	movs	r3, #10
 8005fe0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005fea:	2300      	movs	r3, #0
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005ff6:	463a      	mov	r2, r7
 8005ff8:	f107 0308 	add.w	r3, r7, #8
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4806      	ldr	r0, [pc, #24]	@ (8006018 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8006000:	f005 fac2 	bl	800b588 <HAL_QSPI_MemoryMapped>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3740      	adds	r7, #64	@ 0x40
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20002bc8 	.word	0x20002bc8

0800601c <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08e      	sub	sp, #56	@ 0x38
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8006026:	4b59      	ldr	r3, [pc, #356]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602a:	4a58      	ldr	r2, [pc, #352]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	6393      	str	r3, [r2, #56]	@ 0x38
 8006032:	4b56      	ldr	r3, [pc, #344]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	623b      	str	r3, [r7, #32]
 800603c:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800603e:	4b53      	ldr	r3, [pc, #332]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	4a52      	ldr	r2, [pc, #328]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006044:	f043 0302 	orr.w	r3, r3, #2
 8006048:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 800604a:	4b50      	ldr	r3, [pc, #320]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	4a4f      	ldr	r2, [pc, #316]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006050:	f023 0302 	bic.w	r3, r3, #2
 8006054:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8006056:	4b4d      	ldr	r3, [pc, #308]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605a:	4a4c      	ldr	r2, [pc, #304]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 800605c:	f043 0302 	orr.w	r3, r3, #2
 8006060:	6313      	str	r3, [r2, #48]	@ 0x30
 8006062:	4b4a      	ldr	r3, [pc, #296]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800606e:	4b47      	ldr	r3, [pc, #284]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006072:	4a46      	ldr	r2, [pc, #280]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006074:	f043 0302 	orr.w	r3, r3, #2
 8006078:	6313      	str	r3, [r2, #48]	@ 0x30
 800607a:	4b44      	ldr	r3, [pc, #272]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	61bb      	str	r3, [r7, #24]
 8006084:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8006086:	4b41      	ldr	r3, [pc, #260]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608a:	4a40      	ldr	r2, [pc, #256]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 800608c:	f043 0304 	orr.w	r3, r3, #4
 8006090:	6313      	str	r3, [r2, #48]	@ 0x30
 8006092:	4b3e      	ldr	r3, [pc, #248]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 800609e:	4b3b      	ldr	r3, [pc, #236]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	4a3a      	ldr	r2, [pc, #232]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 80060a4:	f043 0304 	orr.w	r3, r3, #4
 80060a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80060aa:	4b38      	ldr	r3, [pc, #224]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 80060b6:	4b35      	ldr	r3, [pc, #212]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ba:	4a34      	ldr	r2, [pc, #208]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 80060bc:	f043 0310 	orr.w	r3, r3, #16
 80060c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80060c2:	4b32      	ldr	r3, [pc, #200]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 80060ce:	4b2f      	ldr	r3, [pc, #188]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d2:	4a2e      	ldr	r2, [pc, #184]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 80060d4:	f043 0308 	orr.w	r3, r3, #8
 80060d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80060da:	4b2c      	ldr	r3, [pc, #176]	@ (800618c <BSP_QSPI_MspInit+0x170>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 80060e6:	2340      	movs	r3, #64	@ 0x40
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 80060ea:	230a      	movs	r3, #10
 80060ec:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80060ee:	2302      	movs	r3, #2
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80060f2:	2301      	movs	r3, #1
 80060f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80060f6:	2302      	movs	r3, #2
 80060f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80060fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060fe:	4619      	mov	r1, r3
 8006100:	4823      	ldr	r0, [pc, #140]	@ (8006190 <BSP_QSPI_MspInit+0x174>)
 8006102:	f003 fa71 	bl	80095e8 <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8006106:	2304      	movs	r3, #4
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 800610a:	2309      	movs	r3, #9
 800610c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800610e:	2300      	movs	r3, #0
 8006110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006116:	4619      	mov	r1, r3
 8006118:	481d      	ldr	r0, [pc, #116]	@ (8006190 <BSP_QSPI_MspInit+0x174>)
 800611a:	f003 fa65 	bl	80095e8 <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800611e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006122:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8006124:	2309      	movs	r3, #9
 8006126:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8006128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800612c:	4619      	mov	r1, r3
 800612e:	4819      	ldr	r0, [pc, #100]	@ (8006194 <BSP_QSPI_MspInit+0x178>)
 8006130:	f003 fa5a 	bl	80095e8 <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8006134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 800613a:	2309      	movs	r3, #9
 800613c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800613e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006142:	4619      	mov	r1, r3
 8006144:	4813      	ldr	r0, [pc, #76]	@ (8006194 <BSP_QSPI_MspInit+0x178>)
 8006146:	f003 fa4f 	bl	80095e8 <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 800614a:	2304      	movs	r3, #4
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 800614e:	2309      	movs	r3, #9
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8006152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006156:	4619      	mov	r1, r3
 8006158:	480f      	ldr	r0, [pc, #60]	@ (8006198 <BSP_QSPI_MspInit+0x17c>)
 800615a:	f003 fa45 	bl	80095e8 <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800615e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006162:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 8006164:	2309      	movs	r3, #9
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8006168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800616c:	4619      	mov	r1, r3
 800616e:	480b      	ldr	r0, [pc, #44]	@ (800619c <BSP_QSPI_MspInit+0x180>)
 8006170:	f003 fa3a 	bl	80095e8 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8006174:	2200      	movs	r2, #0
 8006176:	210f      	movs	r1, #15
 8006178:	205c      	movs	r0, #92	@ 0x5c
 800617a:	f001 f813 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800617e:	205c      	movs	r0, #92	@ 0x5c
 8006180:	f001 f82c 	bl	80071dc <HAL_NVIC_EnableIRQ>
}
 8006184:	bf00      	nop
 8006186:	3738      	adds	r7, #56	@ 0x38
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40023800 	.word	0x40023800
 8006190:	40020400 	.word	0x40020400
 8006194:	40020800 	.word	0x40020800
 8006198:	40021000 	.word	0x40021000
 800619c:	40020c00 	.word	0x40020c00

080061a0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b098      	sub	sp, #96	@ 0x60
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80061a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80061ac:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 80061ae:	2366      	movs	r3, #102	@ 0x66
 80061b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 80061ba:	2300      	movs	r3, #0
 80061bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80061c2:	2300      	movs	r3, #0
 80061c4:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80061c6:	2300      	movs	r3, #0
 80061c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80061ca:	2300      	movs	r3, #0
 80061cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80061ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80061d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f004 ffd1 	bl	800b180 <HAL_QSPI_Command>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e0ff      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80061e8:	2399      	movs	r3, #153	@ 0x99
 80061ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80061ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80061f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f004 ffc2 	bl	800b180 <HAL_QSPI_Command>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e0f0      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006206:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800620a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 800620c:	2366      	movs	r3, #102	@ 0x66
 800620e:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006210:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f004 ffb0 	bl	800b180 <HAL_QSPI_Command>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e0de      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 800622a:	2399      	movs	r3, #153	@ 0x99
 800622c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800622e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f004 ffa1 	bl	800b180 <HAL_QSPI_Command>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0cf      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 8006248:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800624c:	f000 feaa 	bl	8006fa4 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8006254:	2301      	movs	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006258:	2300      	movs	r3, #0
 800625a:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 800625c:	2301      	movs	r3, #1
 800625e:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8006260:	2310      	movs	r3, #16
 8006262:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006264:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800626a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800626e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8006270:	2305      	movs	r3, #5
 8006272:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8006274:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006278:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800627a:	f107 0210 	add.w	r2, r7, #16
 800627e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006282:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f005 f907 	bl	800b49a <HAL_QSPI_AutoPolling>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e0a8      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800629a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800629c:	2305      	movs	r3, #5
 800629e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80062a4:	2300      	movs	r3, #0
 80062a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80062a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.NbData            = 1;
 80062b2:	2301      	movs	r3, #1
 80062b4:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80062ba:	2300      	movs	r3, #0
 80062bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80062be:	2300      	movs	r3, #0
 80062c0:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80062c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f004 ff57 	bl	800b180 <HAL_QSPI_Command>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e085      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062dc:	f107 030f 	add.w	r3, r7, #15
 80062e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f005 f83a 	bl	800b360 <HAL_QSPI_Receive>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e078      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80062f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062fa:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80062fc:	2306      	movs	r3, #6
 80062fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006300:	2300      	movs	r3, #0
 8006302:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006304:	2300      	movs	r3, #0
 8006306:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8006308:	2300      	movs	r3, #0
 800630a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006310:	2300      	movs	r3, #0
 8006312:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006314:	2300      	movs	r3, #0
 8006316:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006318:	2300      	movs	r3, #0
 800631a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800631c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f004 ff2a 	bl	800b180 <HAL_QSPI_Command>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e058      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8006336:	2302      	movs	r3, #2
 8006338:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 800633a:	2302      	movs	r3, #2
 800633c:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800633e:	2300      	movs	r3, #0
 8006340:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8006342:	2301      	movs	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8006346:	2310      	movs	r3, #16
 8006348:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800634a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8006350:	2305      	movs	r3, #5
 8006352:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8006354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006358:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800635a:	f107 0210 	add.w	r2, r7, #16
 800635e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006362:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f005 f897 	bl	800b49a <HAL_QSPI_AutoPolling>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e038      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006376:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800637a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800637c:	2301      	movs	r3, #1
 800637e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006380:	2300      	movs	r3, #0
 8006382:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006384:	2300      	movs	r3, #0
 8006386:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8006388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800638c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.NbData            = 1;
 8006392:	2301      	movs	r3, #1
 8006394:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006396:	2300      	movs	r3, #0
 8006398:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800639a:	2300      	movs	r3, #0
 800639c:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800639e:	2300      	movs	r3, #0
 80063a0:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80063b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f004 fee2 	bl	800b180 <HAL_QSPI_Command>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e010      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063c6:	f107 030f 	add.w	r3, r7, #15
 80063ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f004 ff33 	bl	800b23c <HAL_QSPI_Transmit>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e003      	b.n	80063e8 <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 80063e0:	2028      	movs	r0, #40	@ 0x28
 80063e2:	f000 fddf 	bl	8006fa4 <HAL_Delay>

  return QSPI_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3760      	adds	r7, #96	@ 0x60
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b090      	sub	sp, #64	@ 0x40
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80063f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80063fc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 80063fe:	23b7      	movs	r3, #183	@ 0xb7
 8006400:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006402:	2300      	movs	r3, #0
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006406:	2300      	movs	r3, #0
 8006408:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800640a:	2300      	movs	r3, #0
 800640c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006412:	2300      	movs	r3, #0
 8006414:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006416:	2300      	movs	r3, #0
 8006418:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800641a:	2300      	movs	r3, #0
 800641c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f9e6 	bl	80067f0 <QSPI_WriteEnable>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e017      	b.n	800645e <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800642e:	f107 0308 	add.w	r3, r7, #8
 8006432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f004 fea1 	bl	800b180 <HAL_QSPI_Command>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e00a      	b.n	800645e <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8006448:	f241 3188 	movw	r1, #5000	@ 0x1388
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa18 	bl	8006882 <QSPI_AutoPollingMemReady>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e000      	b.n	800645e <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3740      	adds	r7, #64	@ 0x40
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b094      	sub	sp, #80	@ 0x50
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800646e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006472:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8006474:	2305      	movs	r3, #5
 8006476:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006478:	2300      	movs	r3, #0
 800647a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800647c:	2300      	movs	r3, #0
 800647e:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006480:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006484:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 800648a:	2301      	movs	r3, #1
 800648c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800648e:	2300      	movs	r3, #0
 8006490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006492:	2300      	movs	r3, #0
 8006494:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006496:	2300      	movs	r3, #0
 8006498:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800649a:	f107 0310 	add.w	r3, r7, #16
 800649e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f004 fe6b 	bl	800b180 <HAL_QSPI_Command>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e090      	b.n	80065d6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80064b4:	f107 030c 	add.w	r3, r7, #12
 80064b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f004 ff4e 	bl	800b360 <HAL_QSPI_Receive>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e083      	b.n	80065d6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80064ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80064d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 80064d4:	2315      	movs	r3, #21
 80064d6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80064d8:	2300      	movs	r3, #0
 80064da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80064dc:	2300      	movs	r3, #0
 80064de:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80064e0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80064e4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 80064ea:	2301      	movs	r3, #1
 80064ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80064f2:	2300      	movs	r3, #0
 80064f4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80064f6:	2300      	movs	r3, #0
 80064f8:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80064fa:	f107 0310 	add.w	r3, r7, #16
 80064fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f004 fe3b 	bl	800b180 <HAL_QSPI_Command>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e060      	b.n	80065d6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006514:	f107 030c 	add.w	r3, r7, #12
 8006518:	3301      	adds	r3, #1
 800651a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f004 ff1d 	bl	800b360 <HAL_QSPI_Receive>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e052      	b.n	80065d6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f95d 	bl	80067f0 <QSPI_WriteEnable>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e04a      	b.n	80065d6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006540:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006544:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8006546:	2301      	movs	r3, #1
 8006548:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800654a:	2300      	movs	r3, #0
 800654c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800654e:	2300      	movs	r3, #0
 8006550:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006552:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006556:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 2;
 800655c:	2302      	movs	r3, #2
 800655e:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006560:	2300      	movs	r3, #0
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006564:	2300      	movs	r3, #0
 8006566:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006568:	2300      	movs	r3, #0
 800656a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 800656c:	7b7b      	ldrb	r3, [r7, #13]
 800656e:	b25b      	sxtb	r3, r3
 8006570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006574:	b25a      	sxtb	r2, r3
 8006576:	23c0      	movs	r3, #192	@ 0xc0
 8006578:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800657c:	fa93 f3a3 	rbit	r3, r3
 8006580:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006584:	fab3 f383 	clz	r3, r3
 8006588:	b2db      	uxtb	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	2303      	movs	r3, #3
 800658e:	408b      	lsls	r3, r1
 8006590:	b25b      	sxtb	r3, r3
 8006592:	4313      	orrs	r3, r2
 8006594:	b25b      	sxtb	r3, r3
 8006596:	b2db      	uxtb	r3, r3
 8006598:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800659a:	f107 0310 	add.w	r3, r7, #16
 800659e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f004 fdeb 	bl	800b180 <HAL_QSPI_Command>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e010      	b.n	80065d6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80065b4:	f107 030c 	add.w	r3, r7, #12
 80065b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f004 fe3c 	bl	800b23c <HAL_QSPI_Transmit>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e003      	b.n	80065d6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 80065ce:	2028      	movs	r0, #40	@ 0x28
 80065d0:	f000 fce8 	bl	8006fa4 <HAL_Delay>
  
  return QSPI_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3750      	adds	r7, #80	@ 0x50
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b096      	sub	sp, #88	@ 0x58
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 80065e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 80065ec:	2335      	movs	r3, #53	@ 0x35
 80065ee:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80065f8:	2300      	movs	r3, #0
 80065fa:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006600:	2300      	movs	r3, #0
 8006602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006604:	2300      	movs	r3, #0
 8006606:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006608:	2300      	movs	r3, #0
 800660a:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800660c:	f107 0320 	add.w	r3, r7, #32
 8006610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f004 fdb2 	bl	800b180 <HAL_QSPI_Command>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e023      	b.n	800666e <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 8006626:	2340      	movs	r3, #64	@ 0x40
 8006628:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 800662a:	2341      	movs	r3, #65	@ 0x41
 800662c:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8006632:	2301      	movs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8006636:	2310      	movs	r3, #16
 8006638:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800663a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800663e:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006640:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006644:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8006646:	2305      	movs	r3, #5
 8006648:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800664a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800664e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006650:	f107 0208 	add.w	r2, r7, #8
 8006654:	f107 0120 	add.w	r1, r7, #32
 8006658:	f241 3388 	movw	r3, #5000	@ 0x1388
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f004 ff1c 	bl	800b49a <HAL_QSPI_AutoPolling>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3758      	adds	r7, #88	@ 0x58
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b094      	sub	sp, #80	@ 0x50
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006680:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006684:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8006686:	2305      	movs	r3, #5
 8006688:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800668a:	2300      	movs	r3, #0
 800668c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800668e:	2300      	movs	r3, #0
 8006690:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006692:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006696:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 800669c:	2301      	movs	r3, #1
 800669e:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80066a4:	2300      	movs	r3, #0
 80066a6:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80066a8:	2300      	movs	r3, #0
 80066aa:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80066ac:	f107 0310 	add.w	r3, r7, #16
 80066b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f004 fd62 	bl	800b180 <HAL_QSPI_Command>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e08d      	b.n	80067e2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80066c6:	f107 030c 	add.w	r3, r7, #12
 80066ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f004 fe45 	bl	800b360 <HAL_QSPI_Receive>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e080      	b.n	80067e2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80066e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80066e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 80066e6:	2315      	movs	r3, #21
 80066e8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80066f2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 80066fc:	2301      	movs	r3, #1
 80066fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006700:	2300      	movs	r3, #0
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006704:	2300      	movs	r3, #0
 8006706:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006708:	2300      	movs	r3, #0
 800670a:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800670c:	f107 0310 	add.w	r3, r7, #16
 8006710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f004 fd32 	bl	800b180 <HAL_QSPI_Command>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e05d      	b.n	80067e2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006726:	f107 030c 	add.w	r3, r7, #12
 800672a:	3301      	adds	r3, #1
 800672c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f004 fe14 	bl	800b360 <HAL_QSPI_Receive>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e04f      	b.n	80067e2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8006742:	482a      	ldr	r0, [pc, #168]	@ (80067ec <QSPI_OutDrvStrengthCfg+0x174>)
 8006744:	f000 f854 	bl	80067f0 <QSPI_WriteEnable>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e047      	b.n	80067e2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006752:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006756:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8006758:	2301      	movs	r3, #1
 800675a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800675c:	2300      	movs	r3, #0
 800675e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006760:	2300      	movs	r3, #0
 8006762:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006764:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 2;
 800676e:	2302      	movs	r3, #2
 8006770:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006772:	2300      	movs	r3, #0
 8006774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006776:	2300      	movs	r3, #0
 8006778:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800677a:	2300      	movs	r3, #0
 800677c:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800677e:	7b7b      	ldrb	r3, [r7, #13]
 8006780:	b25b      	sxtb	r3, r3
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	b25a      	sxtb	r2, r3
 8006788:	2307      	movs	r3, #7
 800678a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800678c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678e:	fa93 f3a3 	rbit	r3, r3
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006796:	fab3 f383 	clz	r3, r3
 800679a:	b2db      	uxtb	r3, r3
 800679c:	4619      	mov	r1, r3
 800679e:	2306      	movs	r3, #6
 80067a0:	408b      	lsls	r3, r1
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	4313      	orrs	r3, r2
 80067a6:	b25b      	sxtb	r3, r3
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067ac:	f107 0310 	add.w	r3, r7, #16
 80067b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f004 fce2 	bl	800b180 <HAL_QSPI_Command>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e00d      	b.n	80067e2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067c6:	f107 030c 	add.w	r3, r7, #12
 80067ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f004 fd33 	bl	800b23c <HAL_QSPI_Transmit>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e000      	b.n	80067e2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3750      	adds	r7, #80	@ 0x50
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20002bc8 	.word	0x20002bc8

080067f0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b096      	sub	sp, #88	@ 0x58
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80067f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80067fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80067fe:	2306      	movs	r3, #6
 8006800:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006802:	2300      	movs	r3, #0
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006806:	2300      	movs	r3, #0
 8006808:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800680a:	2300      	movs	r3, #0
 800680c:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006812:	2300      	movs	r3, #0
 8006814:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006816:	2300      	movs	r3, #0
 8006818:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800681a:	2300      	movs	r3, #0
 800681c:	657b      	str	r3, [r7, #84]	@ 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800681e:	f107 0320 	add.w	r3, r7, #32
 8006822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f004 fca9 	bl	800b180 <HAL_QSPI_Command>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e020      	b.n	800687a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8006838:	2302      	movs	r3, #2
 800683a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 800683c:	2302      	movs	r3, #2
 800683e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006840:	2300      	movs	r3, #0
 8006842:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8006848:	2310      	movs	r3, #16
 800684a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800684c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006850:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8006852:	2305      	movs	r3, #5
 8006854:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8006856:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800685a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800685c:	f107 0208 	add.w	r2, r7, #8
 8006860:	f107 0120 	add.w	r1, r7, #32
 8006864:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f004 fe16 	bl	800b49a <HAL_QSPI_AutoPolling>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3758      	adds	r7, #88	@ 0x58
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b096      	sub	sp, #88	@ 0x58
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800688c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006890:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8006892:	2305      	movs	r3, #5
 8006894:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006896:	2300      	movs	r3, #0
 8006898:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800689a:	2300      	movs	r3, #0
 800689c:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800689e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80068a2:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80068ac:	2300      	movs	r3, #0
 80068ae:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80068b0:	2300      	movs	r3, #0
 80068b2:	657b      	str	r3, [r7, #84]	@ 0x54

  s_config.Match           = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 80068b8:	2301      	movs	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80068bc:	2300      	movs	r3, #0
 80068be:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80068c0:	2301      	movs	r3, #1
 80068c2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80068c4:	2310      	movs	r3, #16
 80068c6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80068c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80068cc:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80068ce:	f107 0208 	add.w	r2, r7, #8
 80068d2:	f107 0120 	add.w	r1, r7, #32
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f004 fdde 	bl	800b49a <HAL_QSPI_AutoPolling>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3758      	adds	r7, #88	@ 0x58
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80068f8:	4b29      	ldr	r3, [pc, #164]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 80068fa:	4a2a      	ldr	r2, [pc, #168]	@ (80069a4 <BSP_SDRAM_Init+0xb0>)
 80068fc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80068fe:	4b2a      	ldr	r3, [pc, #168]	@ (80069a8 <BSP_SDRAM_Init+0xb4>)
 8006900:	2202      	movs	r2, #2
 8006902:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006904:	4b28      	ldr	r3, [pc, #160]	@ (80069a8 <BSP_SDRAM_Init+0xb4>)
 8006906:	2207      	movs	r2, #7
 8006908:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800690a:	4b27      	ldr	r3, [pc, #156]	@ (80069a8 <BSP_SDRAM_Init+0xb4>)
 800690c:	2204      	movs	r2, #4
 800690e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006910:	4b25      	ldr	r3, [pc, #148]	@ (80069a8 <BSP_SDRAM_Init+0xb4>)
 8006912:	2207      	movs	r2, #7
 8006914:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8006916:	4b24      	ldr	r3, [pc, #144]	@ (80069a8 <BSP_SDRAM_Init+0xb4>)
 8006918:	2202      	movs	r2, #2
 800691a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800691c:	4b22      	ldr	r3, [pc, #136]	@ (80069a8 <BSP_SDRAM_Init+0xb4>)
 800691e:	2202      	movs	r2, #2
 8006920:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8006922:	4b21      	ldr	r3, [pc, #132]	@ (80069a8 <BSP_SDRAM_Init+0xb4>)
 8006924:	2202      	movs	r2, #2
 8006926:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006928:	4b1d      	ldr	r3, [pc, #116]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 800692a:	2200      	movs	r2, #0
 800692c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800692e:	4b1c      	ldr	r3, [pc, #112]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 8006930:	2200      	movs	r2, #0
 8006932:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006934:	4b1a      	ldr	r3, [pc, #104]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 8006936:	2204      	movs	r2, #4
 8006938:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800693a:	4b19      	ldr	r3, [pc, #100]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 800693c:	2220      	movs	r2, #32
 800693e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006940:	4b17      	ldr	r3, [pc, #92]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 8006942:	2240      	movs	r2, #64	@ 0x40
 8006944:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006946:	4b16      	ldr	r3, [pc, #88]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 8006948:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800694c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800694e:	4b14      	ldr	r3, [pc, #80]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 8006950:	2200      	movs	r2, #0
 8006952:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006954:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 8006956:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800695a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800695c:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 800695e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006962:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006964:	4b0e      	ldr	r3, [pc, #56]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 8006966:	2200      	movs	r2, #0
 8006968:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800696a:	2100      	movs	r1, #0
 800696c:	480c      	ldr	r0, [pc, #48]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 800696e:	f000 f87f 	bl	8006a70 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006972:	490d      	ldr	r1, [pc, #52]	@ (80069a8 <BSP_SDRAM_Init+0xb4>)
 8006974:	480a      	ldr	r0, [pc, #40]	@ (80069a0 <BSP_SDRAM_Init+0xac>)
 8006976:	f006 ffd2 	bl	800d91e <HAL_SDRAM_Init>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006980:	4b0a      	ldr	r3, [pc, #40]	@ (80069ac <BSP_SDRAM_Init+0xb8>)
 8006982:	2201      	movs	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	e002      	b.n	800698e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006988:	4b08      	ldr	r3, [pc, #32]	@ (80069ac <BSP_SDRAM_Init+0xb8>)
 800698a:	2200      	movs	r2, #0
 800698c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800698e:	f240 6003 	movw	r0, #1539	@ 0x603
 8006992:	f000 f80d 	bl	80069b0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8006996:	4b05      	ldr	r3, [pc, #20]	@ (80069ac <BSP_SDRAM_Init+0xb8>)
 8006998:	781b      	ldrb	r3, [r3, #0]
}
 800699a:	4618      	mov	r0, r3
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20002c14 	.word	0x20002c14
 80069a4:	a0000140 	.word	0xa0000140
 80069a8:	20002c48 	.word	0x20002c48
 80069ac:	20000094 	.word	0x20000094

080069b0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80069bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80069c2:	4b29      	ldr	r3, [pc, #164]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069c4:	2210      	movs	r2, #16
 80069c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80069c8:	4b27      	ldr	r3, [pc, #156]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80069ce:	4b26      	ldr	r3, [pc, #152]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80069d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069d8:	4923      	ldr	r1, [pc, #140]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069da:	4824      	ldr	r0, [pc, #144]	@ (8006a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80069dc:	f006 ffd3 	bl	800d986 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80069e0:	2001      	movs	r0, #1
 80069e2:	f000 fadf 	bl	8006fa4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80069e6:	4b20      	ldr	r3, [pc, #128]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069e8:	2202      	movs	r2, #2
 80069ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80069ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069ee:	2210      	movs	r2, #16
 80069f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80069f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80069f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80069fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a02:	4919      	ldr	r1, [pc, #100]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a04:	4819      	ldr	r0, [pc, #100]	@ (8006a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006a06:	f006 ffbe 	bl	800d986 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006a0a:	4b17      	ldr	r3, [pc, #92]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006a10:	4b15      	ldr	r3, [pc, #84]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a12:	2210      	movs	r2, #16
 8006a14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8006a16:	4b14      	ldr	r3, [pc, #80]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a18:	2208      	movs	r2, #8
 8006a1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006a1c:	4b12      	ldr	r3, [pc, #72]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a26:	4910      	ldr	r1, [pc, #64]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a28:	4810      	ldr	r0, [pc, #64]	@ (8006a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006a2a:	f006 ffac 	bl	800d986 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006a2e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8006a32:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006a34:	4b0c      	ldr	r3, [pc, #48]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a36:	2204      	movs	r2, #4
 8006a38:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006a40:	4b09      	ldr	r3, [pc, #36]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a07      	ldr	r2, [pc, #28]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a4a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006a4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a50:	4905      	ldr	r1, [pc, #20]	@ (8006a68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a52:	4806      	ldr	r0, [pc, #24]	@ (8006a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006a54:	f006 ff97 	bl	800d986 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	4804      	ldr	r0, [pc, #16]	@ (8006a6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006a5c:	f006 ffc8 	bl	800d9f0 <HAL_SDRAM_ProgramRefreshRate>
}
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20002c64 	.word	0x20002c64
 8006a6c:	20002c14 	.word	0x20002c14

08006a70 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b090      	sub	sp, #64	@ 0x40
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006a7a:	4b71      	ldr	r3, [pc, #452]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7e:	4a70      	ldr	r2, [pc, #448]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006a80:	f043 0301 	orr.w	r3, r3, #1
 8006a84:	6393      	str	r3, [r2, #56]	@ 0x38
 8006a86:	4b6e      	ldr	r3, [pc, #440]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8006a92:	4b6b      	ldr	r3, [pc, #428]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a96:	4a6a      	ldr	r2, [pc, #424]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006a98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a9e:	4b68      	ldr	r3, [pc, #416]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006aaa:	4b65      	ldr	r3, [pc, #404]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aae:	4a64      	ldr	r2, [pc, #400]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006ab0:	f043 0308 	orr.w	r3, r3, #8
 8006ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ab6:	4b62      	ldr	r3, [pc, #392]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	623b      	str	r3, [r7, #32]
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac6:	4a5e      	ldr	r2, [pc, #376]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006ac8:	f043 0310 	orr.w	r3, r3, #16
 8006acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ace:	4b5c      	ldr	r3, [pc, #368]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad2:	f003 0310 	and.w	r3, r3, #16
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ada:	4b59      	ldr	r3, [pc, #356]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ade:	4a58      	ldr	r2, [pc, #352]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006ae0:	f043 0320 	orr.w	r3, r3, #32
 8006ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ae6:	4b56      	ldr	r3, [pc, #344]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006af2:	4b53      	ldr	r3, [pc, #332]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af6:	4a52      	ldr	r2, [pc, #328]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006afe:	4b50      	ldr	r3, [pc, #320]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b16:	4b4a      	ldr	r3, [pc, #296]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006b22:	4b47      	ldr	r3, [pc, #284]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b26:	4a46      	ldr	r2, [pc, #280]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b2e:	4b44      	ldr	r3, [pc, #272]	@ (8006c40 <BSP_SDRAM_MspInit+0x1d0>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8006b42:	2303      	movs	r3, #3
 8006b44:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006b46:	230c      	movs	r3, #12
 8006b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006b4a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8006b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b54:	4619      	mov	r1, r3
 8006b56:	483b      	ldr	r0, [pc, #236]	@ (8006c44 <BSP_SDRAM_MspInit+0x1d4>)
 8006b58:	f002 fd46 	bl	80095e8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006b5c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8006b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b66:	4619      	mov	r1, r3
 8006b68:	4837      	ldr	r0, [pc, #220]	@ (8006c48 <BSP_SDRAM_MspInit+0x1d8>)
 8006b6a:	f002 fd3d 	bl	80095e8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006b6e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8006b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006b74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4834      	ldr	r0, [pc, #208]	@ (8006c4c <BSP_SDRAM_MspInit+0x1dc>)
 8006b7c:	f002 fd34 	bl	80095e8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8006b80:	f248 1337 	movw	r3, #33079	@ 0x8137
 8006b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4830      	ldr	r0, [pc, #192]	@ (8006c50 <BSP_SDRAM_MspInit+0x1e0>)
 8006b8e:	f002 fd2b 	bl	80095e8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006b92:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 8006b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	482d      	ldr	r0, [pc, #180]	@ (8006c54 <BSP_SDRAM_MspInit+0x1e4>)
 8006ba0:	f002 fd22 	bl	80095e8 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006ba4:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8006ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8006baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4829      	ldr	r0, [pc, #164]	@ (8006c58 <BSP_SDRAM_MspInit+0x1e8>)
 8006bb2:	f002 fd19 	bl	80095e8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006bb6:	4b29      	ldr	r3, [pc, #164]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006bbc:	4b27      	ldr	r3, [pc, #156]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bbe:	2280      	movs	r2, #128	@ 0x80
 8006bc0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006bc2:	4b26      	ldr	r3, [pc, #152]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bc8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006bca:	4b24      	ldr	r3, [pc, #144]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006bd0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006bd2:	4b22      	ldr	r3, [pc, #136]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006bd8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006bda:	4b20      	ldr	r3, [pc, #128]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bdc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006be0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8006be2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006be8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006bee:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006bf6:	4b19      	ldr	r3, [pc, #100]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006bfc:	4b17      	ldr	r3, [pc, #92]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006c02:	4b16      	ldr	r3, [pc, #88]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006c08:	4b14      	ldr	r3, [pc, #80]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006c0a:	4a15      	ldr	r2, [pc, #84]	@ (8006c60 <BSP_SDRAM_MspInit+0x1f0>)
 8006c0c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a12      	ldr	r2, [pc, #72]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006c12:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c14:	4a11      	ldr	r2, [pc, #68]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8006c1a:	4810      	ldr	r0, [pc, #64]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006c1c:	f000 fcb4 	bl	8007588 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8006c20:	480e      	ldr	r0, [pc, #56]	@ (8006c5c <BSP_SDRAM_MspInit+0x1ec>)
 8006c22:	f000 fc03 	bl	800742c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8006c26:	2200      	movs	r2, #0
 8006c28:	210f      	movs	r1, #15
 8006c2a:	2038      	movs	r0, #56	@ 0x38
 8006c2c:	f000 faba 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006c30:	2038      	movs	r0, #56	@ 0x38
 8006c32:	f000 fad3 	bl	80071dc <HAL_NVIC_EnableIRQ>
}
 8006c36:	bf00      	nop
 8006c38:	3740      	adds	r7, #64	@ 0x40
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40020c00 	.word	0x40020c00
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	40021400 	.word	0x40021400
 8006c50:	40021800 	.word	0x40021800
 8006c54:	40021c00 	.word	0x40021c00
 8006c58:	40022000 	.word	0x40022000
 8006c5c:	20002c74 	.word	0x20002c74
 8006c60:	40026410 	.word	0x40026410

08006c64 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	460a      	mov	r2, r1
 8006c6e:	80fb      	strh	r3, [r7, #6]
 8006c70:	4613      	mov	r3, r2
 8006c72:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8006c7c:	4b24      	ldr	r3, [pc, #144]	@ (8006d10 <BSP_TS_Init+0xac>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a24      	ldr	r2, [pc, #144]	@ (8006d14 <BSP_TS_Init+0xb0>)
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	4610      	mov	r0, r2
 8006c86:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8006c88:	4b21      	ldr	r3, [pc, #132]	@ (8006d10 <BSP_TS_Init+0xac>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2054      	movs	r0, #84	@ 0x54
 8006c8e:	4798      	blx	r3
 8006c90:	4603      	mov	r3, r0
 8006c92:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8006c94:	7b7b      	ldrb	r3, [r7, #13]
 8006c96:	2b11      	cmp	r3, #17
 8006c98:	d009      	beq.n	8006cae <BSP_TS_Init+0x4a>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d10 <BSP_TS_Init+0xac>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2070      	movs	r0, #112	@ 0x70
 8006ca0:	4798      	blx	r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8006ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d14 <BSP_TS_Init+0xb0>)
 8006ca8:	2270      	movs	r2, #112	@ 0x70
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	e002      	b.n	8006cb4 <BSP_TS_Init+0x50>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8006cae:	4b19      	ldr	r3, [pc, #100]	@ (8006d14 <BSP_TS_Init+0xb0>)
 8006cb0:	2254      	movs	r2, #84	@ 0x54
 8006cb2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8006cb4:	7b7b      	ldrb	r3, [r7, #13]
 8006cb6:	2b11      	cmp	r3, #17
 8006cb8:	d002      	beq.n	8006cc0 <BSP_TS_Init+0x5c>
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	2b11      	cmp	r3, #17
 8006cbe:	d11f      	bne.n	8006d00 <BSP_TS_Init+0x9c>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8006cc0:	4b15      	ldr	r3, [pc, #84]	@ (8006d18 <BSP_TS_Init+0xb4>)
 8006cc2:	4a13      	ldr	r2, [pc, #76]	@ (8006d10 <BSP_TS_Init+0xac>)
 8006cc4:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	88bb      	ldrh	r3, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d203      	bcs.n	8006cd6 <BSP_TS_Init+0x72>
    {
      ts_orientation = TS_SWAP_NONE;                
 8006cce:	4b13      	ldr	r3, [pc, #76]	@ (8006d1c <BSP_TS_Init+0xb8>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	e002      	b.n	8006cdc <BSP_TS_Init+0x78>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8006cd6:	4b11      	ldr	r3, [pc, #68]	@ (8006d1c <BSP_TS_Init+0xb8>)
 8006cd8:	220c      	movs	r2, #12
 8006cda:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d110      	bne.n	8006d04 <BSP_TS_Init+0xa0>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <BSP_TS_Init+0xb4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8006d14 <BSP_TS_Init+0xb0>)
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	4610      	mov	r0, r2
 8006cee:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8006cf0:	4b09      	ldr	r3, [pc, #36]	@ (8006d18 <BSP_TS_Init+0xb4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	4a07      	ldr	r2, [pc, #28]	@ (8006d14 <BSP_TS_Init+0xb0>)
 8006cf8:	7812      	ldrb	r2, [r2, #0]
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4798      	blx	r3
    if(ts_status == TS_OK)
 8006cfe:	e001      	b.n	8006d04 <BSP_TS_Init+0xa0>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8006d00:	2303      	movs	r3, #3
 8006d02:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000018 	.word	0x20000018
 8006d14:	20002cd9 	.word	0x20002cd9
 8006d18:	20002cd4 	.word	0x20002cd4
 8006d1c:	20002cd8 	.word	0x20002cd8

08006d20 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8006d20:	b590      	push	{r4, r7, lr}
 8006d22:	b089      	sub	sp, #36	@ 0x24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8006d2c:	4b81      	ldr	r3, [pc, #516]	@ (8006f34 <BSP_TS_GetState+0x214>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	4a81      	ldr	r2, [pc, #516]	@ (8006f38 <BSP_TS_GetState+0x218>)
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	4610      	mov	r0, r2
 8006d38:	4798      	blx	r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80ef 	beq.w	8006f2a <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	e0e4      	b.n	8006f1c <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8006d52:	4b78      	ldr	r3, [pc, #480]	@ (8006f34 <BSP_TS_GetState+0x214>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	4a77      	ldr	r2, [pc, #476]	@ (8006f38 <BSP_TS_GetState+0x218>)
 8006d5a:	7812      	ldrb	r2, [r2, #0]
 8006d5c:	4614      	mov	r4, r2
 8006d5e:	f107 0110 	add.w	r1, r7, #16
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	0052      	lsls	r2, r2, #1
 8006d66:	1888      	adds	r0, r1, r2
 8006d68:	f107 010c 	add.w	r1, r7, #12
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	0052      	lsls	r2, r2, #1
 8006d70:	440a      	add	r2, r1
 8006d72:	4601      	mov	r1, r0
 8006d74:	4620      	mov	r0, r4
 8006d76:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8006d78:	4b70      	ldr	r3, [pc, #448]	@ (8006f3c <BSP_TS_GetState+0x21c>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d019      	beq.n	8006db8 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	3320      	adds	r3, #32
 8006d8a:	443b      	add	r3, r7
 8006d8c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006d90:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	3320      	adds	r3, #32
 8006d98:	443b      	add	r3, r7
 8006d9a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	3320      	adds	r3, #32
 8006da4:	443b      	add	r3, r7
 8006da6:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	3320      	adds	r3, #32
 8006db0:	443b      	add	r3, r7
 8006db2:	8b3a      	ldrh	r2, [r7, #24]
 8006db4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8006db8:	4b60      	ldr	r3, [pc, #384]	@ (8006f3c <BSP_TS_GetState+0x21c>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00f      	beq.n	8006de4 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	3320      	adds	r3, #32
 8006dca:	443b      	add	r3, r7
 8006dcc:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8006dd0:	f240 331f 	movw	r3, #799	@ 0x31f
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	3320      	adds	r3, #32
 8006dde:	443b      	add	r3, r7
 8006de0:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8006de4:	4b55      	ldr	r3, [pc, #340]	@ (8006f3c <BSP_TS_GetState+0x21c>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00f      	beq.n	8006e10 <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	3320      	adds	r3, #32
 8006df6:	443b      	add	r3, r7
 8006df8:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006dfc:	f240 13df 	movw	r3, #479	@ 0x1df
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	3320      	adds	r3, #32
 8006e0a:	443b      	add	r3, r7
 8006e0c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	3320      	adds	r3, #32
 8006e16:	443b      	add	r3, r7
 8006e18:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4a48      	ldr	r2, [pc, #288]	@ (8006f40 <BSP_TS_GetState+0x220>)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e26:	4299      	cmp	r1, r3
 8006e28:	d90d      	bls.n	8006e46 <BSP_TS_GetState+0x126>
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	3320      	adds	r3, #32
 8006e30:	443b      	add	r3, r7
 8006e32:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8006e36:	4942      	ldr	r1, [pc, #264]	@ (8006f40 <BSP_TS_GetState+0x220>)
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	e00c      	b.n	8006e60 <BSP_TS_GetState+0x140>
 8006e46:	4a3e      	ldr	r2, [pc, #248]	@ (8006f40 <BSP_TS_GetState+0x220>)
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	3320      	adds	r3, #32
 8006e56:	443b      	add	r3, r7
 8006e58:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	3320      	adds	r3, #32
 8006e68:	443b      	add	r3, r7
 8006e6a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4a34      	ldr	r2, [pc, #208]	@ (8006f44 <BSP_TS_GetState+0x224>)
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e78:	4299      	cmp	r1, r3
 8006e7a:	d90d      	bls.n	8006e98 <BSP_TS_GetState+0x178>
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	3320      	adds	r3, #32
 8006e82:	443b      	add	r3, r7
 8006e84:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006e88:	492e      	ldr	r1, [pc, #184]	@ (8006f44 <BSP_TS_GetState+0x224>)
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	e00c      	b.n	8006eb2 <BSP_TS_GetState+0x192>
 8006e98:	4a2a      	ldr	r2, [pc, #168]	@ (8006f44 <BSP_TS_GetState+0x224>)
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	3320      	adds	r3, #32
 8006ea8:	443b      	add	r3, r7
 8006eaa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8006eb4:	8afa      	ldrh	r2, [r7, #22]
 8006eb6:	8abb      	ldrh	r3, [r7, #20]
 8006eb8:	4413      	add	r3, r2
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	dd15      	ble.n	8006eea <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	3320      	adds	r3, #32
 8006ec4:	443b      	add	r3, r7
 8006ec6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8006f40 <BSP_TS_GetState+0x220>)
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	3320      	adds	r3, #32
 8006eda:	443b      	add	r3, r7
 8006edc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4a18      	ldr	r2, [pc, #96]	@ (8006f44 <BSP_TS_GetState+0x224>)
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8006eea:	4a15      	ldr	r2, [pc, #84]	@ (8006f40 <BSP_TS_GetState+0x220>)
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef2:	b299      	uxth	r1, r3
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	4413      	add	r3, r2
 8006efc:	460a      	mov	r2, r1
 8006efe:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8006f00:	4a10      	ldr	r2, [pc, #64]	@ (8006f44 <BSP_TS_GetState+0x224>)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f08:	b299      	uxth	r1, r3
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	4413      	add	r3, r2
 8006f12:	460a      	mov	r2, r1
 8006f14:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	461a      	mov	r2, r3
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4293      	cmp	r3, r2
 8006f26:	f4ff af14 	bcc.w	8006d52 <BSP_TS_GetState+0x32>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8006f2a:	7efb      	ldrb	r3, [r7, #27]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3724      	adds	r7, #36	@ 0x24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd90      	pop	{r4, r7, pc}
 8006f34:	20002cd4 	.word	0x20002cd4
 8006f38:	20002cd9 	.word	0x20002cd9
 8006f3c:	20002cd8 	.word	0x20002cd8
 8006f40:	20002cdc 	.word	0x20002cdc
 8006f44:	20002ce4 	.word	0x20002ce4

08006f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f4c:	2003      	movs	r0, #3
 8006f4e:	f000 f91e 	bl	800718e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f52:	200f      	movs	r0, #15
 8006f54:	f7fb fd16 	bl	8002984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f58:	f7fb fce4 	bl	8002924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f68:	4b06      	ldr	r3, [pc, #24]	@ (8006f84 <HAL_IncTick+0x20>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4b06      	ldr	r3, [pc, #24]	@ (8006f88 <HAL_IncTick+0x24>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4413      	add	r3, r2
 8006f74:	4a04      	ldr	r2, [pc, #16]	@ (8006f88 <HAL_IncTick+0x24>)
 8006f76:	6013      	str	r3, [r2, #0]
}
 8006f78:	bf00      	nop
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	2000009c 	.word	0x2000009c
 8006f88:	20002cec 	.word	0x20002cec

08006f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8006f90:	4b03      	ldr	r3, [pc, #12]	@ (8006fa0 <HAL_GetTick+0x14>)
 8006f92:	681b      	ldr	r3, [r3, #0]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20002cec 	.word	0x20002cec

08006fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fac:	f7ff ffee 	bl	8006f8c <HAL_GetTick>
 8006fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fbc:	d005      	beq.n	8006fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe8 <HAL_Delay+0x44>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fca:	bf00      	nop
 8006fcc:	f7ff ffde 	bl	8006f8c <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d8f7      	bhi.n	8006fcc <HAL_Delay+0x28>
  {
  }
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	2000009c 	.word	0x2000009c

08006fec <__NVIC_SetPriorityGrouping>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800702c <__NVIC_SetPriorityGrouping+0x40>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007008:	4013      	ands	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007014:	4b06      	ldr	r3, [pc, #24]	@ (8007030 <__NVIC_SetPriorityGrouping+0x44>)
 8007016:	4313      	orrs	r3, r2
 8007018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800701a:	4a04      	ldr	r2, [pc, #16]	@ (800702c <__NVIC_SetPriorityGrouping+0x40>)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	60d3      	str	r3, [r2, #12]
}
 8007020:	bf00      	nop
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	e000ed00 	.word	0xe000ed00
 8007030:	05fa0000 	.word	0x05fa0000

08007034 <__NVIC_GetPriorityGrouping>:
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007038:	4b04      	ldr	r3, [pc, #16]	@ (800704c <__NVIC_GetPriorityGrouping+0x18>)
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	f003 0307 	and.w	r3, r3, #7
}
 8007042:	4618      	mov	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	e000ed00 	.word	0xe000ed00

08007050 <__NVIC_EnableIRQ>:
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800705a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705e:	2b00      	cmp	r3, #0
 8007060:	db0b      	blt.n	800707a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	f003 021f 	and.w	r2, r3, #31
 8007068:	4907      	ldr	r1, [pc, #28]	@ (8007088 <__NVIC_EnableIRQ+0x38>)
 800706a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	2001      	movs	r0, #1
 8007072:	fa00 f202 	lsl.w	r2, r0, r2
 8007076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	e000e100 	.word	0xe000e100

0800708c <__NVIC_DisableIRQ>:
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800709a:	2b00      	cmp	r3, #0
 800709c:	db12      	blt.n	80070c4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	f003 021f 	and.w	r2, r3, #31
 80070a4:	490a      	ldr	r1, [pc, #40]	@ (80070d0 <__NVIC_DisableIRQ+0x44>)
 80070a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	2001      	movs	r0, #1
 80070ae:	fa00 f202 	lsl.w	r2, r0, r2
 80070b2:	3320      	adds	r3, #32
 80070b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80070b8:	f3bf 8f4f 	dsb	sy
}
 80070bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80070be:	f3bf 8f6f 	isb	sy
}
 80070c2:	bf00      	nop
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	e000e100 	.word	0xe000e100

080070d4 <__NVIC_SetPriority>:
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	6039      	str	r1, [r7, #0]
 80070de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	db0a      	blt.n	80070fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	490c      	ldr	r1, [pc, #48]	@ (8007120 <__NVIC_SetPriority+0x4c>)
 80070ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f2:	0112      	lsls	r2, r2, #4
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	440b      	add	r3, r1
 80070f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80070fc:	e00a      	b.n	8007114 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	4908      	ldr	r1, [pc, #32]	@ (8007124 <__NVIC_SetPriority+0x50>)
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	3b04      	subs	r3, #4
 800710c:	0112      	lsls	r2, r2, #4
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	440b      	add	r3, r1
 8007112:	761a      	strb	r2, [r3, #24]
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	e000e100 	.word	0xe000e100
 8007124:	e000ed00 	.word	0xe000ed00

08007128 <NVIC_EncodePriority>:
{
 8007128:	b480      	push	{r7}
 800712a:	b089      	sub	sp, #36	@ 0x24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f1c3 0307 	rsb	r3, r3, #7
 8007142:	2b04      	cmp	r3, #4
 8007144:	bf28      	it	cs
 8007146:	2304      	movcs	r3, #4
 8007148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	3304      	adds	r3, #4
 800714e:	2b06      	cmp	r3, #6
 8007150:	d902      	bls.n	8007158 <NVIC_EncodePriority+0x30>
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	3b03      	subs	r3, #3
 8007156:	e000      	b.n	800715a <NVIC_EncodePriority+0x32>
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800715c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	43da      	mvns	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	401a      	ands	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007170:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	fa01 f303 	lsl.w	r3, r1, r3
 800717a:	43d9      	mvns	r1, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007180:	4313      	orrs	r3, r2
}
 8007182:	4618      	mov	r0, r3
 8007184:	3724      	adds	r7, #36	@ 0x24
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff ff28 	bl	8006fec <__NVIC_SetPriorityGrouping>
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071b6:	f7ff ff3d 	bl	8007034 <__NVIC_GetPriorityGrouping>
 80071ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	6978      	ldr	r0, [r7, #20]
 80071c2:	f7ff ffb1 	bl	8007128 <NVIC_EncodePriority>
 80071c6:	4602      	mov	r2, r0
 80071c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff ff80 	bl	80070d4 <__NVIC_SetPriority>
}
 80071d4:	bf00      	nop
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff ff30 	bl	8007050 <__NVIC_EnableIRQ>
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff ff40 	bl	800708c <__NVIC_DisableIRQ>
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e0ac      	b.n	8007380 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f8b2 	bl	8007394 <DFSDM_GetChannelFromInstance>
 8007230:	4603      	mov	r3, r0
 8007232:	4a55      	ldr	r2, [pc, #340]	@ (8007388 <HAL_DFSDM_ChannelInit+0x174>)
 8007234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e09f      	b.n	8007380 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7f9 fb9d 	bl	8000980 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8007246:	4b51      	ldr	r3, [pc, #324]	@ (800738c <HAL_DFSDM_ChannelInit+0x178>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3301      	adds	r3, #1
 800724c:	4a4f      	ldr	r2, [pc, #316]	@ (800738c <HAL_DFSDM_ChannelInit+0x178>)
 800724e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8007250:	4b4e      	ldr	r3, [pc, #312]	@ (800738c <HAL_DFSDM_ChannelInit+0x178>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d125      	bne.n	80072a4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8007258:	4b4d      	ldr	r3, [pc, #308]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a4c      	ldr	r2, [pc, #304]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 800725e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007262:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007264:	4b4a      	ldr	r3, [pc, #296]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	4948      	ldr	r1, [pc, #288]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 800726e:	4313      	orrs	r3, r2
 8007270:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007272:	4b47      	ldr	r3, [pc, #284]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a46      	ldr	r2, [pc, #280]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 8007278:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800727c:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	791b      	ldrb	r3, [r3, #4]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d108      	bne.n	8007298 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8007286:	4b42      	ldr	r3, [pc, #264]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	3b01      	subs	r3, #1
 8007290:	041b      	lsls	r3, r3, #16
 8007292:	493f      	ldr	r1, [pc, #252]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 8007294:	4313      	orrs	r3, r2
 8007296:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8007298:	4b3d      	ldr	r3, [pc, #244]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a3c      	ldr	r2, [pc, #240]	@ (8007390 <HAL_DFSDM_ChannelInit+0x17c>)
 800729e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072a2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80072b2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6819      	ldr	r1, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80072c2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80072c8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 020f 	bic.w	r2, r2, #15
 80072e0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6819      	ldr	r1, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8007308:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6899      	ldr	r1, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	3b01      	subs	r3, #1
 800731a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f002 0207 	and.w	r2, r2, #7
 8007334:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6859      	ldr	r1, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007346:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007360:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f810 	bl	8007394 <DFSDM_GetChannelFromInstance>
 8007374:	4602      	mov	r2, r0
 8007376:	4904      	ldr	r1, [pc, #16]	@ (8007388 <HAL_DFSDM_ChannelInit+0x174>)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20002cf4 	.word	0x20002cf4
 800738c:	20002cf0 	.word	0x20002cf0
 8007390:	40017400 	.word	0x40017400

08007394 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a1c      	ldr	r2, [pc, #112]	@ (8007410 <DFSDM_GetChannelFromInstance+0x7c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d102      	bne.n	80073aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e02b      	b.n	8007402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a19      	ldr	r2, [pc, #100]	@ (8007414 <DFSDM_GetChannelFromInstance+0x80>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d102      	bne.n	80073b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80073b2:	2301      	movs	r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	e024      	b.n	8007402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a17      	ldr	r2, [pc, #92]	@ (8007418 <DFSDM_GetChannelFromInstance+0x84>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d102      	bne.n	80073c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80073c0:	2302      	movs	r3, #2
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e01d      	b.n	8007402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a14      	ldr	r2, [pc, #80]	@ (800741c <DFSDM_GetChannelFromInstance+0x88>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d102      	bne.n	80073d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80073ce:	2303      	movs	r3, #3
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e016      	b.n	8007402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a12      	ldr	r2, [pc, #72]	@ (8007420 <DFSDM_GetChannelFromInstance+0x8c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d102      	bne.n	80073e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80073dc:	2304      	movs	r3, #4
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	e00f      	b.n	8007402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a0f      	ldr	r2, [pc, #60]	@ (8007424 <DFSDM_GetChannelFromInstance+0x90>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d102      	bne.n	80073f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80073ea:	2305      	movs	r3, #5
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	e008      	b.n	8007402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007428 <DFSDM_GetChannelFromInstance+0x94>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d102      	bne.n	80073fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80073f8:	2306      	movs	r3, #6
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e001      	b.n	8007402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80073fe:	2307      	movs	r3, #7
 8007400:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8007402:	68fb      	ldr	r3, [r7, #12]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	40017400 	.word	0x40017400
 8007414:	40017420 	.word	0x40017420
 8007418:	40017440 	.word	0x40017440
 800741c:	40017460 	.word	0x40017460
 8007420:	40017480 	.word	0x40017480
 8007424:	400174a0 	.word	0x400174a0
 8007428:	400174c0 	.word	0x400174c0

0800742c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007438:	f7ff fda8 	bl	8006f8c <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e099      	b.n	800757c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0201 	bic.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007468:	e00f      	b.n	800748a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800746a:	f7ff fd8f 	bl	8006f8c <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b05      	cmp	r3, #5
 8007476:	d908      	bls.n	800748a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2220      	movs	r2, #32
 800747c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2203      	movs	r2, #3
 8007482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e078      	b.n	800757c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e8      	bne.n	800746a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4b38      	ldr	r3, [pc, #224]	@ (8007584 <HAL_DMA_Init+0x158>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d107      	bne.n	80074f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ec:	4313      	orrs	r3, r2
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f023 0307 	bic.w	r3, r3, #7
 800750a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751a:	2b04      	cmp	r3, #4
 800751c:	d117      	bne.n	800754e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00e      	beq.n	800754e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fad5 	bl	8007ae0 <DMA_CheckFifoParam>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2240      	movs	r2, #64	@ 0x40
 8007540:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800754a:	2301      	movs	r3, #1
 800754c:	e016      	b.n	800757c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa8c 	bl	8007a74 <DMA_CalcBaseAndBitshift>
 800755c:	4603      	mov	r3, r0
 800755e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007564:	223f      	movs	r2, #63	@ 0x3f
 8007566:	409a      	lsls	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	e010803f 	.word	0xe010803f

08007588 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e050      	b.n	800763c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d101      	bne.n	80075aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80075a6:	2302      	movs	r3, #2
 80075a8:	e048      	b.n	800763c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0201 	bic.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2200      	movs	r2, #0
 80075c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2200      	movs	r2, #0
 80075c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2200      	movs	r2, #0
 80075d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2200      	movs	r2, #0
 80075e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2221      	movs	r2, #33	@ 0x21
 80075e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa42 	bl	8007a74 <DMA_CalcBaseAndBitshift>
 80075f0:	4603      	mov	r3, r0
 80075f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f8:	223f      	movs	r2, #63	@ 0x3f
 80075fa:	409a      	lsls	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_DMA_Start_IT+0x26>
 8007666:	2302      	movs	r3, #2
 8007668:	e048      	b.n	80076fc <HAL_DMA_Start_IT+0xb8>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	d137      	bne.n	80076ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2202      	movs	r2, #2
 8007682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f9c0 	bl	8007a18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800769c:	223f      	movs	r2, #63	@ 0x3f
 800769e:	409a      	lsls	r2, r3
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0216 	orr.w	r2, r2, #22
 80076b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695a      	ldr	r2, [r3, #20]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d007      	beq.n	80076dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0208 	orr.w	r2, r2, #8
 80076da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	e005      	b.n	80076fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80076f6:	2302      	movs	r3, #2
 80076f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800770c:	2300      	movs	r3, #0
 800770e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007710:	4b8e      	ldr	r3, [pc, #568]	@ (800794c <HAL_DMA_IRQHandler+0x248>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a8e      	ldr	r2, [pc, #568]	@ (8007950 <HAL_DMA_IRQHandler+0x24c>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	0a9b      	lsrs	r3, r3, #10
 800771c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007722:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772e:	2208      	movs	r2, #8
 8007730:	409a      	lsls	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d01a      	beq.n	8007770 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	d013      	beq.n	8007770 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0204 	bic.w	r2, r2, #4
 8007756:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800775c:	2208      	movs	r2, #8
 800775e:	409a      	lsls	r2, r3
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007768:	f043 0201 	orr.w	r2, r3, #1
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007774:	2201      	movs	r2, #1
 8007776:	409a      	lsls	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4013      	ands	r3, r2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d012      	beq.n	80077a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007792:	2201      	movs	r2, #1
 8007794:	409a      	lsls	r2, r3
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800779e:	f043 0202 	orr.w	r2, r3, #2
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077aa:	2204      	movs	r2, #4
 80077ac:	409a      	lsls	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d012      	beq.n	80077dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c8:	2204      	movs	r2, #4
 80077ca:	409a      	lsls	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d4:	f043 0204 	orr.w	r2, r3, #4
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077e0:	2210      	movs	r2, #16
 80077e2:	409a      	lsls	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d043      	beq.n	8007874 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d03c      	beq.n	8007874 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077fe:	2210      	movs	r2, #16
 8007800:	409a      	lsls	r2, r3
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d018      	beq.n	8007846 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d108      	bne.n	8007834 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d024      	beq.n	8007874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
 8007832:	e01f      	b.n	8007874 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01b      	beq.n	8007874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4798      	blx	r3
 8007844:	e016      	b.n	8007874 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d107      	bne.n	8007864 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0208 	bic.w	r2, r2, #8
 8007862:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007878:	2220      	movs	r2, #32
 800787a:	409a      	lsls	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4013      	ands	r3, r2
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 808f 	beq.w	80079a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8087 	beq.w	80079a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800789a:	2220      	movs	r2, #32
 800789c:	409a      	lsls	r2, r3
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	d136      	bne.n	800791c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0216 	bic.w	r2, r2, #22
 80078bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695a      	ldr	r2, [r3, #20]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d103      	bne.n	80078de <HAL_DMA_IRQHandler+0x1da>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d007      	beq.n	80078ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0208 	bic.w	r2, r2, #8
 80078ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078f2:	223f      	movs	r2, #63	@ 0x3f
 80078f4:	409a      	lsls	r2, r3
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800790e:	2b00      	cmp	r3, #0
 8007910:	d07e      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
        }
        return;
 800791a:	e079      	b.n	8007a10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d01d      	beq.n	8007966 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10d      	bne.n	8007954 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800793c:	2b00      	cmp	r3, #0
 800793e:	d031      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
 8007948:	e02c      	b.n	80079a4 <HAL_DMA_IRQHandler+0x2a0>
 800794a:	bf00      	nop
 800794c:	20000014 	.word	0x20000014
 8007950:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d023      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
 8007964:	e01e      	b.n	80079a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10f      	bne.n	8007994 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0210 	bic.w	r2, r2, #16
 8007982:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d032      	beq.n	8007a12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d022      	beq.n	80079fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2205      	movs	r2, #5
 80079bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0201 	bic.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d307      	bcc.n	80079ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f2      	bne.n	80079d0 <HAL_DMA_IRQHandler+0x2cc>
 80079ea:	e000      	b.n	80079ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80079ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
 8007a0e:	e000      	b.n	8007a12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007a10:	bf00      	nop
    }
  }
}
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007a34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b40      	cmp	r3, #64	@ 0x40
 8007a44:	d108      	bne.n	8007a58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007a56:	e007      	b.n	8007a68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	60da      	str	r2, [r3, #12]
}
 8007a68:	bf00      	nop
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	3b10      	subs	r3, #16
 8007a84:	4a13      	ldr	r2, [pc, #76]	@ (8007ad4 <DMA_CalcBaseAndBitshift+0x60>)
 8007a86:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8a:	091b      	lsrs	r3, r3, #4
 8007a8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007a8e:	4a12      	ldr	r2, [pc, #72]	@ (8007ad8 <DMA_CalcBaseAndBitshift+0x64>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d908      	bls.n	8007ab4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8007adc <DMA_CalcBaseAndBitshift+0x68>)
 8007aaa:	4013      	ands	r3, r2
 8007aac:	1d1a      	adds	r2, r3, #4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	659a      	str	r2, [r3, #88]	@ 0x58
 8007ab2:	e006      	b.n	8007ac2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4b08      	ldr	r3, [pc, #32]	@ (8007adc <DMA_CalcBaseAndBitshift+0x68>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	aaaaaaab 	.word	0xaaaaaaab
 8007ad8:	08014c54 	.word	0x08014c54
 8007adc:	fffffc00 	.word	0xfffffc00

08007ae0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d11f      	bne.n	8007b3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d856      	bhi.n	8007bae <DMA_CheckFifoParam+0xce>
 8007b00:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <DMA_CheckFifoParam+0x28>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b19 	.word	0x08007b19
 8007b0c:	08007b2b 	.word	0x08007b2b
 8007b10:	08007b19 	.word	0x08007b19
 8007b14:	08007baf 	.word	0x08007baf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d046      	beq.n	8007bb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b28:	e043      	b.n	8007bb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007b32:	d140      	bne.n	8007bb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b38:	e03d      	b.n	8007bb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b42:	d121      	bne.n	8007b88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d837      	bhi.n	8007bba <DMA_CheckFifoParam+0xda>
 8007b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b50 <DMA_CheckFifoParam+0x70>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b61 	.word	0x08007b61
 8007b54:	08007b67 	.word	0x08007b67
 8007b58:	08007b61 	.word	0x08007b61
 8007b5c:	08007b79 	.word	0x08007b79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
      break;
 8007b64:	e030      	b.n	8007bc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d025      	beq.n	8007bbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b76:	e022      	b.n	8007bbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007b80:	d11f      	bne.n	8007bc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007b86:	e01c      	b.n	8007bc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d903      	bls.n	8007b96 <DMA_CheckFifoParam+0xb6>
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d003      	beq.n	8007b9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007b94:	e018      	b.n	8007bc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	73fb      	strb	r3, [r7, #15]
      break;
 8007b9a:	e015      	b.n	8007bc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00e      	beq.n	8007bc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	73fb      	strb	r3, [r7, #15]
      break;
 8007bac:	e00b      	b.n	8007bc6 <DMA_CheckFifoParam+0xe6>
      break;
 8007bae:	bf00      	nop
 8007bb0:	e00a      	b.n	8007bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007bb2:	bf00      	nop
 8007bb4:	e008      	b.n	8007bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007bb6:	bf00      	nop
 8007bb8:	e006      	b.n	8007bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007bba:	bf00      	nop
 8007bbc:	e004      	b.n	8007bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007bbe:	bf00      	nop
 8007bc0:	e002      	b.n	8007bc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8007bc2:	bf00      	nop
 8007bc4:	e000      	b.n	8007bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007bc6:	bf00      	nop
    }
  } 
  
  return status; 
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop

08007bd8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e049      	b.n	8007c7e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7f8 ff7e 	bl	8000b00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c28:	f023 0107 	bic.w	r1, r3, #7
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c3e:	4b12      	ldr	r3, [pc, #72]	@ (8007c88 <HAL_DMA2D_Init+0xb0>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	68d1      	ldr	r1, [r2, #12]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6812      	ldr	r2, [r2, #0]
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	6413      	str	r3, [r2, #64]	@ 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c54:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	051a      	lsls	r2, r3, #20
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	055b      	lsls	r3, r3, #21
 8007c64:	431a      	orrs	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	635a      	str	r2, [r3, #52]	@ 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	ffffc000 	.word	0xffffc000

08007c8c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_DMA2D_Start+0x1c>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e018      	b.n	8007cda <HAL_DMA2D_Start+0x4e>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	68b9      	ldr	r1, [r7, #8]
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 faa4 	bl	8008210 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0201 	orr.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b086      	sub	sp, #24
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d056      	beq.n	8007dac <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cfe:	f7ff f945 	bl	8006f8c <HAL_GetTick>
 8007d02:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007d04:	e04b      	b.n	8007d9e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d023      	beq.n	8007d60 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d26:	f043 0202 	orr.w	r2, r3, #2
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d005      	beq.n	8007d44 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3c:	f043 0201 	orr.w	r2, r3, #1
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2221      	movs	r2, #33	@ 0x21
 8007d4a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0a5      	b.n	8007eac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d66:	d01a      	beq.n	8007d9e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d68:	f7ff f910 	bl	8006f8c <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d302      	bcc.n	8007d7e <HAL_DMA2D_PollForTransfer+0x9c>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10f      	bne.n	8007d9e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d82:	f043 0220 	orr.w	r2, r3, #32
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2203      	movs	r2, #3
 8007d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e086      	b.n	8007eac <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0ac      	beq.n	8007d06 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d061      	beq.n	8007e92 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dce:	f7ff f8dd 	bl	8006f8c <HAL_GetTick>
 8007dd2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007dd4:	e056      	b.n	8007e84 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d02e      	beq.n	8007e46 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f003 0308 	and.w	r3, r3, #8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d005      	beq.n	8007dfe <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df6:	f043 0204 	orr.w	r2, r3, #4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e0c:	f043 0202 	orr.w	r2, r3, #2
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e22:	f043 0201 	orr.w	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2229      	movs	r2, #41	@ 0x29
 8007e30:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2204      	movs	r2, #4
 8007e36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e032      	b.n	8007eac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e4c:	d01a      	beq.n	8007e84 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e4e:	f7ff f89d 	bl	8006f8c <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d302      	bcc.n	8007e64 <HAL_DMA2D_PollForTransfer+0x182>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10f      	bne.n	8007e84 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e68:	f043 0220 	orr.w	r2, r3, #32
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2203      	movs	r2, #3
 8007e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e013      	b.n	8007eac <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f003 0310 	and.w	r3, r3, #16
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0a1      	beq.n	8007dd6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2212      	movs	r2, #18
 8007e98:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d026      	beq.n	8007f24 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d021      	beq.n	8007f24 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007eee:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef4:	f043 0201 	orr.w	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2201      	movs	r2, #1
 8007f02:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2204      	movs	r2, #4
 8007f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d026      	beq.n	8007f7c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d021      	beq.n	8007f7c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f46:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f54:	f043 0202 	orr.w	r2, r3, #2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2204      	movs	r2, #4
 8007f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d026      	beq.n	8007fd4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d021      	beq.n	8007fd4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f9e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fac:	f043 0204 	orr.w	r2, r3, #4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2204      	movs	r2, #4
 8007fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d013      	beq.n	8008006 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00e      	beq.n	8008006 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ff6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f853 	bl	80080ac <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d024      	beq.n	800805a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008016:	2b00      	cmp	r3, #0
 8008018:	d01f      	beq.n	800805a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008028:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2202      	movs	r2, #2
 8008030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f003 0310 	and.w	r3, r3, #16
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01f      	beq.n	80080a4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01a      	beq.n	80080a4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800807c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2210      	movs	r2, #16
 8008084:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f80e 	bl	80080c0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80080a4:	bf00      	nop
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <HAL_DMA2D_ConfigLayer+0x20>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e084      	b.n	80081fe <HAL_DMA2D_ConfigLayer+0x12a>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	4613      	mov	r3, r2
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	4413      	add	r3, r2
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	3320      	adds	r3, #32
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	4413      	add	r3, r2
 8008114:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	041b      	lsls	r3, r3, #16
 8008120:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008128:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008134:	4b35      	ldr	r3, [pc, #212]	@ (800820c <HAL_DMA2D_ConfigLayer+0x138>)
 8008136:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b0a      	cmp	r3, #10
 800813e:	d003      	beq.n	8008148 <HAL_DMA2D_ConfigLayer+0x74>
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b09      	cmp	r3, #9
 8008146:	d107      	bne.n	8008158 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	e005      	b.n	8008164 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	061b      	lsls	r3, r3, #24
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d120      	bne.n	80081ac <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	43db      	mvns	r3, r3
 8008174:	ea02 0103 	and.w	r1, r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	430a      	orrs	r2, r1
 8008180:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	6812      	ldr	r2, [r2, #0]
 800818a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	2b0a      	cmp	r3, #10
 8008192:	d003      	beq.n	800819c <HAL_DMA2D_ConfigLayer+0xc8>
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2b09      	cmp	r3, #9
 800819a:	d127      	bne.n	80081ec <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80081a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80081aa:	e01f      	b.n	80081ec <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69da      	ldr	r2, [r3, #28]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	43db      	mvns	r3, r3
 80081b6:	ea02 0103 	and.w	r1, r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2b0a      	cmp	r3, #10
 80081d4:	d003      	beq.n	80081de <HAL_DMA2D_ConfigLayer+0x10a>
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	2b09      	cmp	r3, #9
 80081dc:	d106      	bne.n	80081ec <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80081ea:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	ff33000f 	.word	0xff33000f

08008210 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008210:	b480      	push	{r7}
 8008212:	b08b      	sub	sp, #44	@ 0x2c
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008224:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	041a      	lsls	r2, r3, #16
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	431a      	orrs	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008248:	d174      	bne.n	8008334 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008250:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008258:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008260:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d108      	bne.n	8008282 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	431a      	orrs	r2, r3
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	4313      	orrs	r3, r2
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4313      	orrs	r3, r2
 800827e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008280:	e053      	b.n	800832a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d106      	bne.n	8008298 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4313      	orrs	r3, r2
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	627b      	str	r3, [r7, #36]	@ 0x24
 8008296:	e048      	b.n	800832a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d111      	bne.n	80082c4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	0cdb      	lsrs	r3, r3, #19
 80082a4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	0a9b      	lsrs	r3, r3, #10
 80082aa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	08db      	lsrs	r3, r3, #3
 80082b0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	02db      	lsls	r3, r3, #11
 80082ba:	4313      	orrs	r3, r2
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c2:	e032      	b.n	800832a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d117      	bne.n	80082fc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	0fdb      	lsrs	r3, r3, #31
 80082d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	0cdb      	lsrs	r3, r3, #19
 80082d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	0adb      	lsrs	r3, r3, #11
 80082dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	08db      	lsrs	r3, r3, #3
 80082e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	029b      	lsls	r3, r3, #10
 80082ec:	431a      	orrs	r2, r3
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	03db      	lsls	r3, r3, #15
 80082f2:	4313      	orrs	r3, r2
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80082fa:	e016      	b.n	800832a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	0f1b      	lsrs	r3, r3, #28
 8008300:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	0d1b      	lsrs	r3, r3, #20
 8008306:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	0b1b      	lsrs	r3, r3, #12
 800830c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	091b      	lsrs	r3, r3, #4
 8008312:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	011a      	lsls	r2, r3, #4
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	431a      	orrs	r2, r3
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	031b      	lsls	r3, r3, #12
 8008322:	4313      	orrs	r3, r2
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008330:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008332:	e003      	b.n	800833c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	60da      	str	r2, [r3, #12]
}
 800833c:	bf00      	nop
 800833e:	372c      	adds	r7, #44	@ 0x2c
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	019a      	lsls	r2, r3, #6
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	431a      	orrs	r2, r3
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	431a      	orrs	r2, r3
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	041b      	lsls	r3, r3, #16
 8008368:	431a      	orrs	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b086      	sub	sp, #24
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	607a      	str	r2, [r7, #4]
 8008386:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008388:	f7fe fe00 	bl	8006f8c <HAL_GetTick>
 800838c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800838e:	e009      	b.n	80083a4 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008390:	f7fe fdfc 	bl	8006f8c <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800839e:	d901      	bls.n	80083a4 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e015      	b.n	80083d0 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0ee      	beq.n	8008390 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	019a      	lsls	r2, r3, #6
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	431a      	orrs	r2, r3
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	ea42 0103 	orr.w	r1, r2, r3
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	041a      	lsls	r2, r3, #16
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e109      	b.n	8008600 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	7c5b      	ldrb	r3, [r3, #17]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d102      	bne.n	80083fc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7f8 fc9c 	bl	8000d34 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2203      	movs	r2, #3
 8008400:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8008402:	2300      	movs	r3, #0
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008416:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008426:	613b      	str	r3, [r7, #16]
 8008428:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800842a:	f7fe fdaf 	bl	8006f8c <HAL_GetTick>
 800842e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008430:	e009      	b.n	8008446 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008432:	f7fe fdab 	bl	8006f8c <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008440:	d901      	bls.n	8008446 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e0dc      	b.n	8008600 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800844e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0ed      	beq.n	8008432 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4b69      	ldr	r3, [pc, #420]	@ (8008608 <HAL_DSI_Init+0x230>)
 8008464:	400b      	ands	r3, r1
 8008466:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800847e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008486:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0201 	orr.w	r2, r2, #1
 80084a6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80084ba:	2001      	movs	r0, #1
 80084bc:	f7fe fd72 	bl	8006fa4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80084c0:	f7fe fd64 	bl	8006f8c <HAL_GetTick>
 80084c4:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80084c6:	e009      	b.n	80084dc <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80084c8:	f7fe fd60 	bl	8006f8c <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084d6:	d901      	bls.n	80084dc <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e091      	b.n	8008600 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80084e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0ed      	beq.n	80084c8 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 0206 	orr.w	r2, r2, #6
 80084fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0203 	bic.w	r2, r2, #3
 8008510:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0201 	orr.w	r2, r2, #1
 800852a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 0203 	bic.w	r2, r2, #3
 800853e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008566:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6899      	ldr	r1, [r3, #8]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689a      	ldr	r2, [r3, #8]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_DSI_Init+0x1b0>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	e000      	b.n	800858a <HAL_DSI_Init+0x1b2>
 8008588:	2301      	movs	r3, #1
 800858a:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	4a1f      	ldr	r2, [pc, #124]	@ (800860c <HAL_DSI_Init+0x234>)
 8008590:	fb03 f202 	mul.w	r2, r3, r2
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	409a      	lsls	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80085a6:	fb01 f303 	mul.w	r3, r1, r3
 80085aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ae:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80085c0:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2200      	movs	r2, #0
 80085de:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3720      	adds	r7, #32
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	fffc8603 	.word	0xfffc8603
 800860c:	003d0900 	.word	0x003d0900

08008610 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e066      	b.n	80086f0 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2203      	movs	r2, #3
 8008626:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0208 	bic.w	r2, r2, #8
 800863c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	617b      	str	r3, [r7, #20]
 800864e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8008650:	2300      	movs	r3, #0
 8008652:	613b      	str	r3, [r7, #16]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0201 	bic.w	r2, r2, #1
 8008662:	605a      	str	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	613b      	str	r3, [r7, #16]
 8008670:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0206 	bic.w	r2, r2, #6
 8008682:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0201 	bic.w	r2, r2, #1
 800869a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80086ae:	2300      	movs	r3, #0
 80086b0:	60bb      	str	r3, [r7, #8]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80086c2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80086ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086d2:	60bb      	str	r3, [r7, #8]
 80086d4:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7f8 fb78 	bl	8000dcc <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7c1b      	ldrb	r3, [r3, #16]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d101      	bne.n	800870e <HAL_DSI_ConfigErrorMonitor+0x16>
 800870a:	2302      	movs	r3, #2
 800870c:	e0aa      	b.n	8008864 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2200      	movs	r2, #0
 800871a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00a      	beq.n	800874e <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008748:	430b      	orrs	r3, r1
 800874a:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d009      	beq.n	800876c <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8008768:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	f003 0308 	and.w	r3, r3, #8
 8008790:	2b00      	cmp	r3, #0
 8008792:	d009      	beq.n	80087a8 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f042 0202 	orr.w	r2, r2, #2
 80087a4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f003 0310 	and.w	r3, r3, #16
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 020c 	orr.w	r2, r2, #12
 80087c2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d009      	beq.n	80087e4 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f042 0210 	orr.w	r2, r2, #16
 80087e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d009      	beq.n	8008802 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0220 	orr.w	r2, r2, #32
 80087fe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008808:	2b00      	cmp	r3, #0
 800880a:	d009      	beq.n	8008820 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800881c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800883a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8008858:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00f      	beq.n	80088a8 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	2b00      	cmp	r3, #0
 8008896:	d007      	beq.n	80088a8 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2201      	movs	r2, #1
 800889e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f8ad 	bl	8008a02 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00f      	beq.n	80088d8 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d007      	beq.n	80088d8 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2202      	movs	r2, #2
 80088ce:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7f9 fb56 	bl	8001f84 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 808c 	beq.w	80089fa <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80088ea:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4013      	ands	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008902:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	4013      	ands	r3, r2
 8008910:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	b29b      	uxth	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	f043 0201 	orr.w	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	f043 0202 	orr.w	r2, r3, #2
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	f043 0204 	orr.w	r2, r3, #4
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d005      	beq.n	8008968 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	f043 0208 	orr.w	r2, r3, #8
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f003 030c 	and.w	r3, r3, #12
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	f043 0210 	orr.w	r2, r3, #16
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f003 0310 	and.w	r3, r3, #16
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	f043 0220 	orr.w	r2, r3, #32
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d005      	beq.n	80089aa <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d005      	beq.n	80089d6 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d005      	beq.n	80089ec <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f80e 	bl	8008a16 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7c1b      	ldrb	r3, [r3, #16]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d101      	bne.n	8008a40 <HAL_DSI_SetGenericVCID+0x16>
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	e016      	b.n	8008a6e <HAL_DSI_SetGenericVCID+0x44>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f022 0203 	bic.w	r2, r2, #3
 8008a54:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
	...

08008a7c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	7c1b      	ldrb	r3, [r3, #16]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d101      	bne.n	8008a92 <HAL_DSI_ConfigVideoMode+0x16>
 8008a8e:	2302      	movs	r3, #2
 8008a90:	e1ee      	b.n	8008e70 <HAL_DSI_ConfigVideoMode+0x3f4>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0201 	bic.w	r2, r2, #1
 8008aa6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0201 	bic.w	r2, r2, #1
 8008ab8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0203 	bic.w	r2, r2, #3
 8008aca:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	68da      	ldr	r2, [r3, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	4b8b      	ldr	r3, [pc, #556]	@ (8008d18 <HAL_DSI_ConfigVideoMode+0x29c>)
 8008aea:	400b      	ands	r3, r1
 8008aec:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	691a      	ldr	r2, [r3, #16]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	4b84      	ldr	r3, [pc, #528]	@ (8008d1c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8008b0c:	400b      	ands	r3, r1
 8008b0e:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	4b7b      	ldr	r3, [pc, #492]	@ (8008d1c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8008b2e:	400b      	ands	r3, r1
 8008b30:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0203 	bic.w	r2, r2, #3
 8008b52:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68d9      	ldr	r1, [r3, #12]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	695a      	ldr	r2, [r3, #20]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f022 0207 	bic.w	r2, r2, #7
 8008b74:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6959      	ldr	r1, [r3, #20]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	431a      	orrs	r2, r3
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	691a      	ldr	r2, [r3, #16]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 020f 	bic.w	r2, r2, #15
 8008ba2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6919      	ldr	r1, [r3, #16]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 020e 	bic.w	r2, r2, #14
 8008bc6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	005a      	lsls	r2, r3, #1
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d110      	bne.n	8008c0c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	691a      	ldr	r2, [r3, #16]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008bf8:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6919      	ldr	r1, [r3, #16]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	4b42      	ldr	r3, [pc, #264]	@ (8008d20 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8008c18:	400b      	ands	r3, r1
 8008c1a:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	4b39      	ldr	r3, [pc, #228]	@ (8008d20 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8008c3a:	400b      	ands	r3, r1
 8008c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	4b32      	ldr	r3, [pc, #200]	@ (8008d24 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8008c5c:	400b      	ands	r3, r1
 8008c5e:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8008d28 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8008c7e:	400b      	ands	r3, r1
 8008c80:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4b22      	ldr	r3, [pc, #136]	@ (8008d28 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8008ca0:	400b      	ands	r3, r1
 8008ca2:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	4b19      	ldr	r3, [pc, #100]	@ (8008d28 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8008cc2:	400b      	ands	r3, r1
 8008cc4:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <HAL_DSI_ConfigVideoMode+0x29c>)
 8008ce4:	400b      	ands	r3, r1
 8008ce6:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d08:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d14:	e00a      	b.n	8008d2c <HAL_DSI_ConfigVideoMode+0x2b0>
 8008d16:	bf00      	nop
 8008d18:	ffffc000 	.word	0xffffc000
 8008d1c:	ffffe000 	.word	0xffffe000
 8008d20:	fffff000 	.word	0xfffff000
 8008d24:	ffff8000 	.word	0xffff8000
 8008d28:	fffffc00 	.word	0xfffffc00
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699a      	ldr	r2, [r3, #24]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 8008d42:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6999      	ldr	r1, [r3, #24]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d4e:	041a      	lsls	r2, r3, #16
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699a      	ldr	r2, [r3, #24]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008d66:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6999      	ldr	r1, [r3, #24]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008daa:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008dcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dee:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008e10:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e32:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e54:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	7c1b      	ldrb	r3, [r3, #16]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e0c5      	b.n	800901e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0201 	orr.w	r2, r2, #1
 8008ea6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0201 	bic.w	r2, r2, #1
 8008eb8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f042 0201 	orr.w	r2, r2, #1
 8008ecc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 0203 	bic.w	r2, r2, #3
 8008ede:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68d9      	ldr	r1, [r3, #12]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	695a      	ldr	r2, [r3, #20]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0207 	bic.w	r2, r2, #7
 8008f00:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6959      	ldr	r1, [r3, #20]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	69da      	ldr	r2, [r3, #28]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	431a      	orrs	r2, r3
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691a      	ldr	r2, [r3, #16]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 020f 	bic.w	r2, r2, #15
 8008f2e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6919      	ldr	r1, [r3, #16]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f022 020e 	bic.w	r2, r2, #14
 8008f52:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	005a      	lsls	r2, r3, #1
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	4b2c      	ldr	r3, [pc, #176]	@ (800902c <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8008f7a:	400b      	ands	r3, r1
 8008f7c:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8008fa0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	431a      	orrs	r2, r3
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fba:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0201 	bic.w	r2, r2, #1
 8008fda:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f042 0202 	orr.w	r2, r2, #2
 8009012:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	ffff0000 	.word	0xffff0000

08009030 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	7c1b      	ldrb	r3, [r3, #16]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d101      	bne.n	8009046 <HAL_DSI_ConfigCommand+0x16>
 8009042:	2302      	movs	r3, #2
 8009044:	e049      	b.n	80090da <HAL_DSI_ConfigCommand+0xaa>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	4b24      	ldr	r3, [pc, #144]	@ (80090e8 <HAL_DSI_ConfigCommand+0xb8>)
 8009058:	400b      	ands	r3, r1
 800905a:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800906a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8009070:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8009076:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800907c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8009082:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8009088:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800908e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8009094:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800909a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80090a0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80090a6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 0202 	bic.w	r2, r2, #2
 80090be:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	fef080ff 	.word	0xfef080ff

080090ec <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	7c1b      	ldrb	r3, [r3, #16]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d101      	bne.n	8009102 <HAL_DSI_ConfigFlowControl+0x16>
 80090fe:	2302      	movs	r3, #2
 8009100:	e016      	b.n	8009130 <HAL_DSI_ConfigFlowControl+0x44>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 021f 	bic.w	r2, r2, #31
 8009116:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7c1b      	ldrb	r3, [r3, #16]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d101      	bne.n	8009152 <HAL_DSI_ConfigPhyTimer+0x16>
 800914e:	2302      	movs	r3, #2
 8009150:	e058      	b.n	8009204 <HAL_DSI_ConfigPhyTimer+0xc8>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	4293      	cmp	r3, r2
 8009162:	bf38      	it	cc
 8009164:	4613      	movcc	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8009178:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	041a      	lsls	r2, r3, #16
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	431a      	orrs	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	430a      	orrs	r2, r1
 8009192:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80091a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	691a      	ldr	r2, [r3, #16]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	041b      	lsls	r3, r3, #16
 80091bc:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80091c4:	431a      	orrs	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80091e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	021a      	lsls	r2, r3, #8
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	7c1b      	ldrb	r3, [r3, #16]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <HAL_DSI_ConfigHostTimeouts+0x16>
 8009222:	2302      	movs	r3, #2
 8009224:	e0b4      	b.n	8009390 <HAL_DSI_ConfigHostTimeouts+0x180>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689a      	ldr	r2, [r3, #8]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800923a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6899      	ldr	r1, [r3, #8]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	021a      	lsls	r2, r3, #8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	b292      	uxth	r2, r2
 800925c:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	041a      	lsls	r2, r3, #16
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	4b47      	ldr	r3, [pc, #284]	@ (800939c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800927e:	400b      	ands	r3, r1
 8009280:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4b3f      	ldr	r3, [pc, #252]	@ (800939c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80092a0:	400b      	ands	r3, r1
 80092a2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	4b36      	ldr	r3, [pc, #216]	@ (800939c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80092c4:	400b      	ands	r3, r1
 80092c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	691a      	ldr	r2, [r3, #16]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	4b2b      	ldr	r3, [pc, #172]	@ (800939c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80092ee:	400b      	ands	r3, r1
 80092f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	695a      	ldr	r2, [r3, #20]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800931a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	699a      	ldr	r2, [r3, #24]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	4b16      	ldr	r3, [pc, #88]	@ (800939c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8009342:	400b      	ands	r3, r1
 8009344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	4b0c      	ldr	r3, [pc, #48]	@ (800939c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800936c:	400b      	ands	r3, r1
 800936e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6a1a      	ldr	r2, [r3, #32]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	ffff0000 	.word	0xffff0000

080093a0 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	7c1b      	ldrb	r3, [r3, #16]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_DSI_Start+0x14>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e02b      	b.n	800940c <HAL_DSI_Start+0x6c>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0201 	orr.w	r2, r2, #1
 80093cc:	605a      	str	r2, [r3, #4]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	60fb      	str	r3, [r7, #12]
 80093da:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80093dc:	2300      	movs	r3, #0
 80093de:	60bb      	str	r3, [r7, #8]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0208 	orr.w	r2, r2, #8
 80093f0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	60bb      	str	r3, [r7, #8]
 8009402:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af02      	add	r7, sp, #8
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	7c1b      	ldrb	r3, [r3, #16]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d101      	bne.n	8009432 <HAL_DSI_ShortWrite+0x1a>
 800942e:	2302      	movs	r3, #2
 8009430:	e010      	b.n	8009454 <HAL_DSI_ShortWrite+0x3c>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f7fe ff99 	bl	800837a <DSI_ShortWrite>
 8009448:	4603      	mov	r3, r0
 800944a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	741a      	strb	r2, [r3, #16]

  return status;
 8009452:	7dfb      	ldrb	r3, [r7, #23]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08c      	sub	sp, #48	@ 0x30
 8009460:	af02      	add	r7, sp, #8
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800946a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	7c1b      	ldrb	r3, [r3, #16]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d101      	bne.n	800947a <HAL_DSI_LongWrite+0x1e>
 8009476:	2302      	movs	r3, #2
 8009478:	e084      	b.n	8009584 <HAL_DSI_LongWrite+0x128>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8009480:	f7fd fd84 	bl	8006f8c <HAL_GetTick>
 8009484:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009486:	e00c      	b.n	80094a2 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009488:	f7fd fd80 	bl	8006f8c <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009496:	d904      	bls.n	80094a2 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e070      	b.n	8009584 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0eb      	beq.n	8009488 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	bf28      	it	cs
 80094ba:	2303      	movcs	r3, #3
 80094bc:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80094be:	2300      	movs	r3, #0
 80094c0:	623b      	str	r3, [r7, #32]
 80094c2:	e00f      	b.n	80094e4 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	4413      	add	r3, r2
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	3301      	adds	r3, #1
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	fa02 f303 	lsl.w	r3, r2, r3
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	4313      	orrs	r3, r2
 80094dc:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	3301      	adds	r3, #1
 80094e2:	623b      	str	r3, [r7, #32]
 80094e4:	6a3a      	ldr	r2, [r7, #32]
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d3eb      	bcc.n	80094c4 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69fa      	ldr	r2, [r7, #28]
 80094f2:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	4413      	add	r3, r2
 8009502:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8009504:	e028      	b.n	8009558 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	2b04      	cmp	r3, #4
 800950a:	bf28      	it	cs
 800950c:	2304      	movcs	r3, #4
 800950e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009514:	2300      	movs	r3, #0
 8009516:	623b      	str	r3, [r7, #32]
 8009518:	e00e      	b.n	8009538 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	4413      	add	r3, r2
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	fa02 f303 	lsl.w	r3, r2, r3
 800952c:	69fa      	ldr	r2, [r7, #28]
 800952e:	4313      	orrs	r3, r2
 8009530:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	3301      	adds	r3, #1
 8009536:	623b      	str	r3, [r7, #32]
 8009538:	6a3a      	ldr	r2, [r7, #32]
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	429a      	cmp	r2, r3
 800953e:	d3ec      	bcc.n	800951a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69fa      	ldr	r2, [r7, #28]
 8009546:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 8009548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 8009550:	69ba      	ldr	r2, [r7, #24]
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	4413      	add	r3, r2
 8009556:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8009558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1d3      	bne.n	8009506 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009566:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800956e:	b2db      	uxtb	r3, r3
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	4613      	mov	r3, r2
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	f7fe fee6 	bl	8008348 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3728      	adds	r7, #40	@ 0x28
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	7c1b      	ldrb	r3, [r3, #16]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800959e:	2302      	movs	r3, #2
 80095a0:	e01b      	b.n	80095da <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80095b8:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	065a      	lsls	r2, r3, #25
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
	...

080095e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b089      	sub	sp, #36	@ 0x24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80095f2:	2300      	movs	r3, #0
 80095f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80095f6:	2300      	movs	r3, #0
 80095f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80095fa:	2300      	movs	r3, #0
 80095fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80095fe:	2300      	movs	r3, #0
 8009600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009602:	2300      	movs	r3, #0
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	e175      	b.n	80098f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009608:	2201      	movs	r2, #1
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	fa02 f303 	lsl.w	r3, r2, r3
 8009610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	4013      	ands	r3, r2
 800961a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	429a      	cmp	r2, r3
 8009622:	f040 8164 	bne.w	80098ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	2b01      	cmp	r3, #1
 8009630:	d005      	beq.n	800963e <HAL_GPIO_Init+0x56>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	2b02      	cmp	r3, #2
 800963c:	d130      	bne.n	80096a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	005b      	lsls	r3, r3, #1
 8009648:	2203      	movs	r2, #3
 800964a:	fa02 f303 	lsl.w	r3, r2, r3
 800964e:	43db      	mvns	r3, r3
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	4013      	ands	r3, r2
 8009654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	fa02 f303 	lsl.w	r3, r2, r3
 8009662:	69ba      	ldr	r2, [r7, #24]
 8009664:	4313      	orrs	r3, r2
 8009666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009674:	2201      	movs	r2, #1
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	fa02 f303 	lsl.w	r3, r2, r3
 800967c:	43db      	mvns	r3, r3
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	4013      	ands	r3, r2
 8009682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	091b      	lsrs	r3, r3, #4
 800968a:	f003 0201 	and.w	r2, r3, #1
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	fa02 f303 	lsl.w	r3, r2, r3
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	4313      	orrs	r3, r2
 8009698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	f003 0303 	and.w	r3, r3, #3
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	d017      	beq.n	80096dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	2203      	movs	r2, #3
 80096b8:	fa02 f303 	lsl.w	r3, r2, r3
 80096bc:	43db      	mvns	r3, r3
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	4013      	ands	r3, r2
 80096c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	689a      	ldr	r2, [r3, #8]
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	fa02 f303 	lsl.w	r3, r2, r3
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	f003 0303 	and.w	r3, r3, #3
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d123      	bne.n	8009730 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	08da      	lsrs	r2, r3, #3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	3208      	adds	r2, #8
 80096f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	220f      	movs	r2, #15
 8009700:	fa02 f303 	lsl.w	r3, r2, r3
 8009704:	43db      	mvns	r3, r3
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	4013      	ands	r3, r2
 800970a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	691a      	ldr	r2, [r3, #16]
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	f003 0307 	and.w	r3, r3, #7
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	fa02 f303 	lsl.w	r3, r2, r3
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	4313      	orrs	r3, r2
 8009720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	08da      	lsrs	r2, r3, #3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	3208      	adds	r2, #8
 800972a:	69b9      	ldr	r1, [r7, #24]
 800972c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	2203      	movs	r2, #3
 800973c:	fa02 f303 	lsl.w	r3, r2, r3
 8009740:	43db      	mvns	r3, r3
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	4013      	ands	r3, r2
 8009746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	f003 0203 	and.w	r2, r3, #3
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	fa02 f303 	lsl.w	r3, r2, r3
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	4313      	orrs	r3, r2
 800975c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 80be 	beq.w	80098ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009772:	4b66      	ldr	r3, [pc, #408]	@ (800990c <HAL_GPIO_Init+0x324>)
 8009774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009776:	4a65      	ldr	r2, [pc, #404]	@ (800990c <HAL_GPIO_Init+0x324>)
 8009778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800977c:	6453      	str	r3, [r2, #68]	@ 0x44
 800977e:	4b63      	ldr	r3, [pc, #396]	@ (800990c <HAL_GPIO_Init+0x324>)
 8009780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800978a:	4a61      	ldr	r2, [pc, #388]	@ (8009910 <HAL_GPIO_Init+0x328>)
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	089b      	lsrs	r3, r3, #2
 8009790:	3302      	adds	r3, #2
 8009792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009796:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	f003 0303 	and.w	r3, r3, #3
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	220f      	movs	r2, #15
 80097a2:	fa02 f303 	lsl.w	r3, r2, r3
 80097a6:	43db      	mvns	r3, r3
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	4013      	ands	r3, r2
 80097ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a58      	ldr	r2, [pc, #352]	@ (8009914 <HAL_GPIO_Init+0x32c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d037      	beq.n	8009826 <HAL_GPIO_Init+0x23e>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a57      	ldr	r2, [pc, #348]	@ (8009918 <HAL_GPIO_Init+0x330>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d031      	beq.n	8009822 <HAL_GPIO_Init+0x23a>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a56      	ldr	r2, [pc, #344]	@ (800991c <HAL_GPIO_Init+0x334>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d02b      	beq.n	800981e <HAL_GPIO_Init+0x236>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a55      	ldr	r2, [pc, #340]	@ (8009920 <HAL_GPIO_Init+0x338>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d025      	beq.n	800981a <HAL_GPIO_Init+0x232>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a54      	ldr	r2, [pc, #336]	@ (8009924 <HAL_GPIO_Init+0x33c>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d01f      	beq.n	8009816 <HAL_GPIO_Init+0x22e>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a53      	ldr	r2, [pc, #332]	@ (8009928 <HAL_GPIO_Init+0x340>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d019      	beq.n	8009812 <HAL_GPIO_Init+0x22a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a52      	ldr	r2, [pc, #328]	@ (800992c <HAL_GPIO_Init+0x344>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d013      	beq.n	800980e <HAL_GPIO_Init+0x226>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a51      	ldr	r2, [pc, #324]	@ (8009930 <HAL_GPIO_Init+0x348>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d00d      	beq.n	800980a <HAL_GPIO_Init+0x222>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a50      	ldr	r2, [pc, #320]	@ (8009934 <HAL_GPIO_Init+0x34c>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d007      	beq.n	8009806 <HAL_GPIO_Init+0x21e>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a4f      	ldr	r2, [pc, #316]	@ (8009938 <HAL_GPIO_Init+0x350>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d101      	bne.n	8009802 <HAL_GPIO_Init+0x21a>
 80097fe:	2309      	movs	r3, #9
 8009800:	e012      	b.n	8009828 <HAL_GPIO_Init+0x240>
 8009802:	230a      	movs	r3, #10
 8009804:	e010      	b.n	8009828 <HAL_GPIO_Init+0x240>
 8009806:	2308      	movs	r3, #8
 8009808:	e00e      	b.n	8009828 <HAL_GPIO_Init+0x240>
 800980a:	2307      	movs	r3, #7
 800980c:	e00c      	b.n	8009828 <HAL_GPIO_Init+0x240>
 800980e:	2306      	movs	r3, #6
 8009810:	e00a      	b.n	8009828 <HAL_GPIO_Init+0x240>
 8009812:	2305      	movs	r3, #5
 8009814:	e008      	b.n	8009828 <HAL_GPIO_Init+0x240>
 8009816:	2304      	movs	r3, #4
 8009818:	e006      	b.n	8009828 <HAL_GPIO_Init+0x240>
 800981a:	2303      	movs	r3, #3
 800981c:	e004      	b.n	8009828 <HAL_GPIO_Init+0x240>
 800981e:	2302      	movs	r3, #2
 8009820:	e002      	b.n	8009828 <HAL_GPIO_Init+0x240>
 8009822:	2301      	movs	r3, #1
 8009824:	e000      	b.n	8009828 <HAL_GPIO_Init+0x240>
 8009826:	2300      	movs	r3, #0
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	f002 0203 	and.w	r2, r2, #3
 800982e:	0092      	lsls	r2, r2, #2
 8009830:	4093      	lsls	r3, r2
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	4313      	orrs	r3, r2
 8009836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009838:	4935      	ldr	r1, [pc, #212]	@ (8009910 <HAL_GPIO_Init+0x328>)
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	089b      	lsrs	r3, r3, #2
 800983e:	3302      	adds	r3, #2
 8009840:	69ba      	ldr	r2, [r7, #24]
 8009842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009846:	4b3d      	ldr	r3, [pc, #244]	@ (800993c <HAL_GPIO_Init+0x354>)
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	43db      	mvns	r3, r3
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	4013      	ands	r3, r2
 8009854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800986a:	4a34      	ldr	r2, [pc, #208]	@ (800993c <HAL_GPIO_Init+0x354>)
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009870:	4b32      	ldr	r3, [pc, #200]	@ (800993c <HAL_GPIO_Init+0x354>)
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	43db      	mvns	r3, r3
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	4013      	ands	r3, r2
 800987e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	4313      	orrs	r3, r2
 8009892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009894:	4a29      	ldr	r2, [pc, #164]	@ (800993c <HAL_GPIO_Init+0x354>)
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800989a:	4b28      	ldr	r3, [pc, #160]	@ (800993c <HAL_GPIO_Init+0x354>)
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	43db      	mvns	r3, r3
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	4013      	ands	r3, r2
 80098a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80098be:	4a1f      	ldr	r2, [pc, #124]	@ (800993c <HAL_GPIO_Init+0x354>)
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80098c4:	4b1d      	ldr	r3, [pc, #116]	@ (800993c <HAL_GPIO_Init+0x354>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	43db      	mvns	r3, r3
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	4013      	ands	r3, r2
 80098d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80098e8:	4a14      	ldr	r2, [pc, #80]	@ (800993c <HAL_GPIO_Init+0x354>)
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	3301      	adds	r3, #1
 80098f2:	61fb      	str	r3, [r7, #28]
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	2b0f      	cmp	r3, #15
 80098f8:	f67f ae86 	bls.w	8009608 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	3724      	adds	r7, #36	@ 0x24
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	40023800 	.word	0x40023800
 8009910:	40013800 	.word	0x40013800
 8009914:	40020000 	.word	0x40020000
 8009918:	40020400 	.word	0x40020400
 800991c:	40020800 	.word	0x40020800
 8009920:	40020c00 	.word	0x40020c00
 8009924:	40021000 	.word	0x40021000
 8009928:	40021400 	.word	0x40021400
 800992c:	40021800 	.word	0x40021800
 8009930:	40021c00 	.word	0x40021c00
 8009934:	40022000 	.word	0x40022000
 8009938:	40022400 	.word	0x40022400
 800993c:	40013c00 	.word	0x40013c00

08009940 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800994a:	2300      	movs	r3, #0
 800994c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8009952:	2300      	movs	r3, #0
 8009954:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009956:	2300      	movs	r3, #0
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	e0d9      	b.n	8009b10 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800995c:	2201      	movs	r2, #1
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	fa02 f303 	lsl.w	r3, r2, r3
 8009964:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	4013      	ands	r3, r2
 800996c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	429a      	cmp	r2, r3
 8009974:	f040 80c9 	bne.w	8009b0a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009978:	4a6b      	ldr	r2, [pc, #428]	@ (8009b28 <HAL_GPIO_DeInit+0x1e8>)
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	089b      	lsrs	r3, r3, #2
 800997e:	3302      	adds	r3, #2
 8009980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009984:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f003 0303 	and.w	r3, r3, #3
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	220f      	movs	r2, #15
 8009990:	fa02 f303 	lsl.w	r3, r2, r3
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	4013      	ands	r3, r2
 8009998:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a63      	ldr	r2, [pc, #396]	@ (8009b2c <HAL_GPIO_DeInit+0x1ec>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d037      	beq.n	8009a12 <HAL_GPIO_DeInit+0xd2>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a62      	ldr	r2, [pc, #392]	@ (8009b30 <HAL_GPIO_DeInit+0x1f0>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d031      	beq.n	8009a0e <HAL_GPIO_DeInit+0xce>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a61      	ldr	r2, [pc, #388]	@ (8009b34 <HAL_GPIO_DeInit+0x1f4>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d02b      	beq.n	8009a0a <HAL_GPIO_DeInit+0xca>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a60      	ldr	r2, [pc, #384]	@ (8009b38 <HAL_GPIO_DeInit+0x1f8>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d025      	beq.n	8009a06 <HAL_GPIO_DeInit+0xc6>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a5f      	ldr	r2, [pc, #380]	@ (8009b3c <HAL_GPIO_DeInit+0x1fc>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d01f      	beq.n	8009a02 <HAL_GPIO_DeInit+0xc2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a5e      	ldr	r2, [pc, #376]	@ (8009b40 <HAL_GPIO_DeInit+0x200>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d019      	beq.n	80099fe <HAL_GPIO_DeInit+0xbe>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a5d      	ldr	r2, [pc, #372]	@ (8009b44 <HAL_GPIO_DeInit+0x204>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d013      	beq.n	80099fa <HAL_GPIO_DeInit+0xba>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a5c      	ldr	r2, [pc, #368]	@ (8009b48 <HAL_GPIO_DeInit+0x208>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d00d      	beq.n	80099f6 <HAL_GPIO_DeInit+0xb6>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a5b      	ldr	r2, [pc, #364]	@ (8009b4c <HAL_GPIO_DeInit+0x20c>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d007      	beq.n	80099f2 <HAL_GPIO_DeInit+0xb2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a5a      	ldr	r2, [pc, #360]	@ (8009b50 <HAL_GPIO_DeInit+0x210>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d101      	bne.n	80099ee <HAL_GPIO_DeInit+0xae>
 80099ea:	2309      	movs	r3, #9
 80099ec:	e012      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 80099ee:	230a      	movs	r3, #10
 80099f0:	e010      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 80099f2:	2308      	movs	r3, #8
 80099f4:	e00e      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 80099f6:	2307      	movs	r3, #7
 80099f8:	e00c      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 80099fa:	2306      	movs	r3, #6
 80099fc:	e00a      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 80099fe:	2305      	movs	r3, #5
 8009a00:	e008      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 8009a02:	2304      	movs	r3, #4
 8009a04:	e006      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 8009a06:	2303      	movs	r3, #3
 8009a08:	e004      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e002      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e000      	b.n	8009a14 <HAL_GPIO_DeInit+0xd4>
 8009a12:	2300      	movs	r3, #0
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	f002 0203 	and.w	r2, r2, #3
 8009a1a:	0092      	lsls	r2, r2, #2
 8009a1c:	4093      	lsls	r3, r2
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d132      	bne.n	8009a8a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009a24:	4b4b      	ldr	r3, [pc, #300]	@ (8009b54 <HAL_GPIO_DeInit+0x214>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	43db      	mvns	r3, r3
 8009a2c:	4949      	ldr	r1, [pc, #292]	@ (8009b54 <HAL_GPIO_DeInit+0x214>)
 8009a2e:	4013      	ands	r3, r2
 8009a30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009a32:	4b48      	ldr	r3, [pc, #288]	@ (8009b54 <HAL_GPIO_DeInit+0x214>)
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	43db      	mvns	r3, r3
 8009a3a:	4946      	ldr	r1, [pc, #280]	@ (8009b54 <HAL_GPIO_DeInit+0x214>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009a40:	4b44      	ldr	r3, [pc, #272]	@ (8009b54 <HAL_GPIO_DeInit+0x214>)
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	43db      	mvns	r3, r3
 8009a48:	4942      	ldr	r1, [pc, #264]	@ (8009b54 <HAL_GPIO_DeInit+0x214>)
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009a4e:	4b41      	ldr	r3, [pc, #260]	@ (8009b54 <HAL_GPIO_DeInit+0x214>)
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	43db      	mvns	r3, r3
 8009a56:	493f      	ldr	r1, [pc, #252]	@ (8009b54 <HAL_GPIO_DeInit+0x214>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f003 0303 	and.w	r3, r3, #3
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	220f      	movs	r2, #15
 8009a66:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8009b28 <HAL_GPIO_DeInit+0x1e8>)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	089b      	lsrs	r3, r3, #2
 8009a72:	3302      	adds	r3, #2
 8009a74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	43da      	mvns	r2, r3
 8009a7c:	482a      	ldr	r0, [pc, #168]	@ (8009b28 <HAL_GPIO_DeInit+0x1e8>)
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	089b      	lsrs	r3, r3, #2
 8009a82:	400a      	ands	r2, r1
 8009a84:	3302      	adds	r3, #2
 8009a86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	2103      	movs	r1, #3
 8009a94:	fa01 f303 	lsl.w	r3, r1, r3
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	401a      	ands	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	08da      	lsrs	r2, r3, #3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3208      	adds	r2, #8
 8009aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	220f      	movs	r2, #15
 8009ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aba:	43db      	mvns	r3, r3
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	08d2      	lsrs	r2, r2, #3
 8009ac0:	4019      	ands	r1, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3208      	adds	r2, #8
 8009ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68da      	ldr	r2, [r3, #12]
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	2103      	movs	r1, #3
 8009ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad8:	43db      	mvns	r3, r3
 8009ada:	401a      	ands	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8009aec:	43db      	mvns	r3, r3
 8009aee:	401a      	ands	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	2103      	movs	r1, #3
 8009afe:	fa01 f303 	lsl.w	r3, r1, r3
 8009b02:	43db      	mvns	r3, r3
 8009b04:	401a      	ands	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	2b0f      	cmp	r3, #15
 8009b14:	f67f af22 	bls.w	800995c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	40013800 	.word	0x40013800
 8009b2c:	40020000 	.word	0x40020000
 8009b30:	40020400 	.word	0x40020400
 8009b34:	40020800 	.word	0x40020800
 8009b38:	40020c00 	.word	0x40020c00
 8009b3c:	40021000 	.word	0x40021000
 8009b40:	40021400 	.word	0x40021400
 8009b44:	40021800 	.word	0x40021800
 8009b48:	40021c00 	.word	0x40021c00
 8009b4c:	40022000 	.word	0x40022000
 8009b50:	40022400 	.word	0x40022400
 8009b54:	40013c00 	.word	0x40013c00

08009b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	691a      	ldr	r2, [r3, #16]
 8009b68:	887b      	ldrh	r3, [r7, #2]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009b70:	2301      	movs	r3, #1
 8009b72:	73fb      	strb	r3, [r7, #15]
 8009b74:	e001      	b.n	8009b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	807b      	strh	r3, [r7, #2]
 8009b94:	4613      	mov	r3, r2
 8009b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009b98:	787b      	ldrb	r3, [r7, #1]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009b9e:	887a      	ldrh	r2, [r7, #2]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009ba4:	e003      	b.n	8009bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009ba6:	887b      	ldrh	r3, [r7, #2]
 8009ba8:	041a      	lsls	r2, r3, #16
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	619a      	str	r2, [r3, #24]
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009bcc:	887a      	ldrh	r2, [r7, #2]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	041a      	lsls	r2, r3, #16
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	43d9      	mvns	r1, r3
 8009bd8:	887b      	ldrh	r3, [r7, #2]
 8009bda:	400b      	ands	r3, r1
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	619a      	str	r2, [r3, #24]
}
 8009be2:	bf00      	nop
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
	...

08009bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e07f      	b.n	8009d02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8a9 	bl	8009d6e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2224      	movs	r2, #36	@ 0x24
 8009c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f022 0201 	bic.w	r2, r2, #1
 8009c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009c40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d107      	bne.n	8009c6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689a      	ldr	r2, [r3, #8]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c66:	609a      	str	r2, [r3, #8]
 8009c68:	e006      	b.n	8009c78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009c76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d104      	bne.n	8009c8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6859      	ldr	r1, [r3, #4]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	4b1d      	ldr	r3, [pc, #116]	@ (8009d0c <HAL_I2C_Init+0x11c>)
 8009c96:	430b      	orrs	r3, r1
 8009c98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68da      	ldr	r2, [r3, #12]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ca8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691a      	ldr	r2, [r3, #16]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	69d9      	ldr	r1, [r3, #28]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a1a      	ldr	r2, [r3, #32]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	02008000 	.word	0x02008000

08009d10 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e021      	b.n	8009d66 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2224      	movs	r2, #36	@ 0x24
 8009d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f022 0201 	bic.w	r2, r2, #1
 8009d38:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f821 	bl	8009d82 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b088      	sub	sp, #32
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	4608      	mov	r0, r1
 8009da2:	4611      	mov	r1, r2
 8009da4:	461a      	mov	r2, r3
 8009da6:	4603      	mov	r3, r0
 8009da8:	817b      	strh	r3, [r7, #10]
 8009daa:	460b      	mov	r3, r1
 8009dac:	813b      	strh	r3, [r7, #8]
 8009dae:	4613      	mov	r3, r2
 8009db0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b20      	cmp	r3, #32
 8009dbc:	f040 80f9 	bne.w	8009fb2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <HAL_I2C_Mem_Write+0x34>
 8009dc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d105      	bne.n	8009dd8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dd2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e0ed      	b.n	8009fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d101      	bne.n	8009de6 <HAL_I2C_Mem_Write+0x4e>
 8009de2:	2302      	movs	r3, #2
 8009de4:	e0e6      	b.n	8009fb4 <HAL_I2C_Mem_Write+0x21c>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009dee:	f7fd f8cd 	bl	8006f8c <HAL_GetTick>
 8009df2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	2319      	movs	r3, #25
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f000 fad1 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e0d1      	b.n	8009fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2221      	movs	r2, #33	@ 0x21
 8009e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2240      	movs	r2, #64	@ 0x40
 8009e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6a3a      	ldr	r2, [r7, #32]
 8009e2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e38:	88f8      	ldrh	r0, [r7, #6]
 8009e3a:	893a      	ldrh	r2, [r7, #8]
 8009e3c:	8979      	ldrh	r1, [r7, #10]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	4603      	mov	r3, r0
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 f9e1 	bl	800a210 <I2C_RequestMemoryWrite>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d005      	beq.n	8009e60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e0a9      	b.n	8009fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2bff      	cmp	r3, #255	@ 0xff
 8009e68:	d90e      	bls.n	8009e88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	22ff      	movs	r2, #255	@ 0xff
 8009e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	8979      	ldrh	r1, [r7, #10]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 fc2d 	bl	800a6e0 <I2C_TransferConfig>
 8009e86:	e00f      	b.n	8009ea8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	8979      	ldrh	r1, [r7, #10]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 fc1c 	bl	800a6e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 fabb 	bl	800a428 <I2C_WaitOnTXISFlagUntilTimeout>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e07b      	b.n	8009fb4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec0:	781a      	ldrb	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d034      	beq.n	8009f60 <HAL_I2C_Mem_Write+0x1c8>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d130      	bne.n	8009f60 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f04:	2200      	movs	r2, #0
 8009f06:	2180      	movs	r1, #128	@ 0x80
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 fa4d 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e04d      	b.n	8009fb4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	2bff      	cmp	r3, #255	@ 0xff
 8009f20:	d90e      	bls.n	8009f40 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	22ff      	movs	r2, #255	@ 0xff
 8009f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	8979      	ldrh	r1, [r7, #10]
 8009f30:	2300      	movs	r3, #0
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f000 fbd1 	bl	800a6e0 <I2C_TransferConfig>
 8009f3e:	e00f      	b.n	8009f60 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	8979      	ldrh	r1, [r7, #10]
 8009f52:	2300      	movs	r3, #0
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 fbc0 	bl	800a6e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d19e      	bne.n	8009ea8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 fa9a 	bl	800a4a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e01a      	b.n	8009fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2220      	movs	r2, #32
 8009f84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6859      	ldr	r1, [r3, #4]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	4b0a      	ldr	r3, [pc, #40]	@ (8009fbc <HAL_I2C_Mem_Write+0x224>)
 8009f92:	400b      	ands	r3, r1
 8009f94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e000      	b.n	8009fb4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009fb2:	2302      	movs	r3, #2
  }
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	fe00e800 	.word	0xfe00e800

08009fc0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	4608      	mov	r0, r1
 8009fca:	4611      	mov	r1, r2
 8009fcc:	461a      	mov	r2, r3
 8009fce:	4603      	mov	r3, r0
 8009fd0:	817b      	strh	r3, [r7, #10]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	813b      	strh	r3, [r7, #8]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	f040 80fd 	bne.w	800a1e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <HAL_I2C_Mem_Read+0x34>
 8009fee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d105      	bne.n	800a000 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ffa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e0f1      	b.n	800a1e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a006:	2b01      	cmp	r3, #1
 800a008:	d101      	bne.n	800a00e <HAL_I2C_Mem_Read+0x4e>
 800a00a:	2302      	movs	r3, #2
 800a00c:	e0ea      	b.n	800a1e4 <HAL_I2C_Mem_Read+0x224>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a016:	f7fc ffb9 	bl	8006f8c <HAL_GetTick>
 800a01a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2319      	movs	r3, #25
 800a022:	2201      	movs	r2, #1
 800a024:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f9bd 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e0d5      	b.n	800a1e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2222      	movs	r2, #34	@ 0x22
 800a03c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2240      	movs	r2, #64	@ 0x40
 800a044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6a3a      	ldr	r2, [r7, #32]
 800a052:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a058:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a060:	88f8      	ldrh	r0, [r7, #6]
 800a062:	893a      	ldrh	r2, [r7, #8]
 800a064:	8979      	ldrh	r1, [r7, #10]
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	4603      	mov	r3, r0
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 f921 	bl	800a2b8 <I2C_RequestMemoryRead>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e0ad      	b.n	800a1e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	2bff      	cmp	r3, #255	@ 0xff
 800a090:	d90e      	bls.n	800a0b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	22ff      	movs	r2, #255	@ 0xff
 800a096:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	8979      	ldrh	r1, [r7, #10]
 800a0a0:	4b52      	ldr	r3, [pc, #328]	@ (800a1ec <HAL_I2C_Mem_Read+0x22c>)
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 fb19 	bl	800a6e0 <I2C_TransferConfig>
 800a0ae:	e00f      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	8979      	ldrh	r1, [r7, #10]
 800a0c2:	4b4a      	ldr	r3, [pc, #296]	@ (800a1ec <HAL_I2C_Mem_Read+0x22c>)
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fb08 	bl	800a6e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2104      	movs	r1, #4
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 f964 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e07c      	b.n	800a1e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f4:	b2d2      	uxtb	r2, r2
 800a0f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a106:	3b01      	subs	r3, #1
 800a108:	b29a      	uxth	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a112:	b29b      	uxth	r3, r3
 800a114:	3b01      	subs	r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a120:	b29b      	uxth	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d034      	beq.n	800a190 <HAL_I2C_Mem_Read+0x1d0>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d130      	bne.n	800a190 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a134:	2200      	movs	r2, #0
 800a136:	2180      	movs	r1, #128	@ 0x80
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f935 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e04d      	b.n	800a1e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	2bff      	cmp	r3, #255	@ 0xff
 800a150:	d90e      	bls.n	800a170 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	22ff      	movs	r2, #255	@ 0xff
 800a156:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	8979      	ldrh	r1, [r7, #10]
 800a160:	2300      	movs	r3, #0
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 fab9 	bl	800a6e0 <I2C_TransferConfig>
 800a16e:	e00f      	b.n	800a190 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a174:	b29a      	uxth	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	8979      	ldrh	r1, [r7, #10]
 800a182:	2300      	movs	r3, #0
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f000 faa8 	bl	800a6e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a194:	b29b      	uxth	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d19a      	bne.n	800a0d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 f982 	bl	800a4a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e01a      	b.n	800a1e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6859      	ldr	r1, [r3, #4]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f0 <HAL_I2C_Mem_Read+0x230>)
 800a1c2:	400b      	ands	r3, r1
 800a1c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e000      	b.n	800a1e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a1e2:	2302      	movs	r3, #2
  }
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	80002400 	.word	0x80002400
 800a1f0:	fe00e800 	.word	0xfe00e800

0800a1f4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a202:	b2db      	uxtb	r3, r3
}
 800a204:	4618      	mov	r0, r3
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af02      	add	r7, sp, #8
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	4608      	mov	r0, r1
 800a21a:	4611      	mov	r1, r2
 800a21c:	461a      	mov	r2, r3
 800a21e:	4603      	mov	r3, r0
 800a220:	817b      	strh	r3, [r7, #10]
 800a222:	460b      	mov	r3, r1
 800a224:	813b      	strh	r3, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a22a:	88fb      	ldrh	r3, [r7, #6]
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	8979      	ldrh	r1, [r7, #10]
 800a230:	4b20      	ldr	r3, [pc, #128]	@ (800a2b4 <I2C_RequestMemoryWrite+0xa4>)
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 fa51 	bl	800a6e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	69b9      	ldr	r1, [r7, #24]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 f8f0 	bl	800a428 <I2C_WaitOnTXISFlagUntilTimeout>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e02c      	b.n	800a2ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a252:	88fb      	ldrh	r3, [r7, #6]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d105      	bne.n	800a264 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a258:	893b      	ldrh	r3, [r7, #8]
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	629a      	str	r2, [r3, #40]	@ 0x28
 800a262:	e015      	b.n	800a290 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a264:	893b      	ldrh	r3, [r7, #8]
 800a266:	0a1b      	lsrs	r3, r3, #8
 800a268:	b29b      	uxth	r3, r3
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a272:	69fa      	ldr	r2, [r7, #28]
 800a274:	69b9      	ldr	r1, [r7, #24]
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 f8d6 	bl	800a428 <I2C_WaitOnTXISFlagUntilTimeout>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e012      	b.n	800a2ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a286:	893b      	ldrh	r3, [r7, #8]
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	2200      	movs	r2, #0
 800a298:	2180      	movs	r1, #128	@ 0x80
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 f884 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e000      	b.n	800a2ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	80002000 	.word	0x80002000

0800a2b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af02      	add	r7, sp, #8
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	4608      	mov	r0, r1
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	817b      	strh	r3, [r7, #10]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	813b      	strh	r3, [r7, #8]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	8979      	ldrh	r1, [r7, #10]
 800a2d8:	4b20      	ldr	r3, [pc, #128]	@ (800a35c <I2C_RequestMemoryRead+0xa4>)
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 f9fe 	bl	800a6e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	69b9      	ldr	r1, [r7, #24]
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 f89d 	bl	800a428 <I2C_WaitOnTXISFlagUntilTimeout>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e02c      	b.n	800a352 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2f8:	88fb      	ldrh	r3, [r7, #6]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d105      	bne.n	800a30a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a2fe:	893b      	ldrh	r3, [r7, #8]
 800a300:	b2da      	uxtb	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	629a      	str	r2, [r3, #40]	@ 0x28
 800a308:	e015      	b.n	800a336 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a30a:	893b      	ldrh	r3, [r7, #8]
 800a30c:	0a1b      	lsrs	r3, r3, #8
 800a30e:	b29b      	uxth	r3, r3
 800a310:	b2da      	uxtb	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a318:	69fa      	ldr	r2, [r7, #28]
 800a31a:	69b9      	ldr	r1, [r7, #24]
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f883 	bl	800a428 <I2C_WaitOnTXISFlagUntilTimeout>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e012      	b.n	800a352 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a32c:	893b      	ldrh	r3, [r7, #8]
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	2200      	movs	r2, #0
 800a33e:	2140      	movs	r1, #64	@ 0x40
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f831 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	80002000 	.word	0x80002000

0800a360 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b02      	cmp	r3, #2
 800a374:	d103      	bne.n	800a37e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2200      	movs	r2, #0
 800a37c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	f003 0301 	and.w	r3, r3, #1
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d007      	beq.n	800a39c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	699a      	ldr	r2, [r3, #24]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f042 0201 	orr.w	r2, r2, #1
 800a39a:	619a      	str	r2, [r3, #24]
  }
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3b8:	e022      	b.n	800a400 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3c0:	d01e      	beq.n	800a400 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3c2:	f7fc fde3 	bl	8006f8c <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d302      	bcc.n	800a3d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d113      	bne.n	800a400 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3dc:	f043 0220 	orr.w	r2, r3, #32
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e00f      	b.n	800a420 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699a      	ldr	r2, [r3, #24]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4013      	ands	r3, r2
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	bf0c      	ite	eq
 800a410:	2301      	moveq	r3, #1
 800a412:	2300      	movne	r3, #0
 800a414:	b2db      	uxtb	r3, r3
 800a416:	461a      	mov	r2, r3
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d0cd      	beq.n	800a3ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a434:	e02c      	b.n	800a490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	68b9      	ldr	r1, [r7, #8]
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 f870 	bl	800a520 <I2C_IsErrorOccurred>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e02a      	b.n	800a4a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a450:	d01e      	beq.n	800a490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a452:	f7fc fd9b 	bl	8006f8c <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d302      	bcc.n	800a468 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d113      	bne.n	800a490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a46c:	f043 0220 	orr.w	r2, r3, #32
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2220      	movs	r2, #32
 800a478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e007      	b.n	800a4a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d1cb      	bne.n	800a436 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4b4:	e028      	b.n	800a508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 f830 	bl	800a520 <I2C_IsErrorOccurred>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e026      	b.n	800a518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ca:	f7fc fd5f 	bl	8006f8c <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d302      	bcc.n	800a4e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d113      	bne.n	800a508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e4:	f043 0220 	orr.w	r2, r3, #32
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e007      	b.n	800a518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	f003 0320 	and.w	r3, r3, #32
 800a512:	2b20      	cmp	r3, #32
 800a514:	d1cf      	bne.n	800a4b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08a      	sub	sp, #40	@ 0x28
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	f003 0310 	and.w	r3, r3, #16
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d068      	beq.n	800a61e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2210      	movs	r2, #16
 800a552:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a554:	e049      	b.n	800a5ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a55c:	d045      	beq.n	800a5ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a55e:	f7fc fd15 	bl	8006f8c <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d302      	bcc.n	800a574 <I2C_IsErrorOccurred+0x54>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d13a      	bne.n	800a5ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a57e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a586:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a596:	d121      	bne.n	800a5dc <I2C_IsErrorOccurred+0xbc>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a59e:	d01d      	beq.n	800a5dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a5a0:	7cfb      	ldrb	r3, [r7, #19]
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	d01a      	beq.n	800a5dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a5b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a5b6:	f7fc fce9 	bl	8006f8c <HAL_GetTick>
 800a5ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5bc:	e00e      	b.n	800a5dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a5be:	f7fc fce5 	bl	8006f8c <HAL_GetTick>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	2b19      	cmp	r3, #25
 800a5ca:	d907      	bls.n	800a5dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
 800a5ce:	f043 0320 	orr.w	r3, r3, #32
 800a5d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a5da:	e006      	b.n	800a5ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	f003 0320 	and.w	r3, r3, #32
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d1e9      	bne.n	800a5be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	f003 0320 	and.w	r3, r3, #32
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	d003      	beq.n	800a600 <I2C_IsErrorOccurred+0xe0>
 800a5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0aa      	beq.n	800a556 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a604:	2b00      	cmp	r3, #0
 800a606:	d103      	bne.n	800a610 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2220      	movs	r2, #32
 800a60e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	f043 0304 	orr.w	r3, r3, #4
 800a616:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00b      	beq.n	800a648 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	f043 0301 	orr.w	r3, r3, #1
 800a636:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00b      	beq.n	800a66a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	f043 0308 	orr.w	r3, r3, #8
 800a658:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00b      	beq.n	800a68c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	f043 0302 	orr.w	r3, r3, #2
 800a67a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a68c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a690:	2b00      	cmp	r3, #0
 800a692:	d01c      	beq.n	800a6ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f7ff fe63 	bl	800a360 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6859      	ldr	r1, [r3, #4]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a6dc <I2C_IsErrorOccurred+0x1bc>)
 800a6a6:	400b      	ands	r3, r1
 800a6a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3728      	adds	r7, #40	@ 0x28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	fe00e800 	.word	0xfe00e800

0800a6e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	607b      	str	r3, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	817b      	strh	r3, [r7, #10]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6f2:	897b      	ldrh	r3, [r7, #10]
 800a6f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6f8:	7a7b      	ldrb	r3, [r7, #9]
 800a6fa:	041b      	lsls	r3, r3, #16
 800a6fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a700:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	4313      	orrs	r3, r2
 800a70a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a70e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	0d5b      	lsrs	r3, r3, #21
 800a71a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a71e:	4b08      	ldr	r3, [pc, #32]	@ (800a740 <I2C_TransferConfig+0x60>)
 800a720:	430b      	orrs	r3, r1
 800a722:	43db      	mvns	r3, r3
 800a724:	ea02 0103 	and.w	r1, r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	430a      	orrs	r2, r1
 800a730:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a732:	bf00      	nop
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	03ff63ff 	.word	0x03ff63ff

0800a744 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e0bf      	b.n	800a8d6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7f7 f9ce 	bl	8001b0c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2202      	movs	r2, #2
 800a774:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	699a      	ldr	r2, [r3, #24]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a786:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6999      	ldr	r1, [r3, #24]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a79c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6899      	ldr	r1, [r3, #8]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	4b4a      	ldr	r3, [pc, #296]	@ (800a8e0 <HAL_LTDC_Init+0x19c>)
 800a7b8:	400b      	ands	r3, r1
 800a7ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	041b      	lsls	r3, r3, #16
 800a7c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6899      	ldr	r1, [r3, #8]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	699a      	ldr	r2, [r3, #24]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68d9      	ldr	r1, [r3, #12]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	4b3e      	ldr	r3, [pc, #248]	@ (800a8e0 <HAL_LTDC_Init+0x19c>)
 800a7e6:	400b      	ands	r3, r1
 800a7e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	041b      	lsls	r3, r3, #16
 800a7f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68d9      	ldr	r1, [r3, #12]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1a      	ldr	r2, [r3, #32]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	431a      	orrs	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	430a      	orrs	r2, r1
 800a806:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6919      	ldr	r1, [r3, #16]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	4b33      	ldr	r3, [pc, #204]	@ (800a8e0 <HAL_LTDC_Init+0x19c>)
 800a814:	400b      	ands	r3, r1
 800a816:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81c:	041b      	lsls	r3, r3, #16
 800a81e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	6919      	ldr	r1, [r3, #16]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	431a      	orrs	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	6959      	ldr	r1, [r3, #20]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	4b27      	ldr	r3, [pc, #156]	@ (800a8e0 <HAL_LTDC_Init+0x19c>)
 800a842:	400b      	ands	r3, r1
 800a844:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84a:	041b      	lsls	r3, r3, #16
 800a84c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6959      	ldr	r1, [r3, #20]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	431a      	orrs	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	430a      	orrs	r2, r1
 800a862:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a86a:	021b      	lsls	r3, r3, #8
 800a86c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a874:	041b      	lsls	r3, r3, #16
 800a876:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a886:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4313      	orrs	r3, r2
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a89a:	431a      	orrs	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0206 	orr.w	r2, r2, #6
 800a8b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	699a      	ldr	r2, [r3, #24]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f042 0201 	orr.w	r2, r2, #1
 800a8c2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	f000f800 	.word	0xf000f800

0800a8e4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8fa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f003 0304 	and.w	r3, r3, #4
 800a902:	2b00      	cmp	r3, #0
 800a904:	d023      	beq.n	800a94e <HAL_LTDC_IRQHandler+0x6a>
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01e      	beq.n	800a94e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 0204 	bic.w	r2, r2, #4
 800a91e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2204      	movs	r2, #4
 800a926:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a92e:	f043 0201 	orr.w	r2, r3, #1
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2204      	movs	r2, #4
 800a93c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 f86f 	bl	800aa2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f003 0302 	and.w	r3, r3, #2
 800a954:	2b00      	cmp	r3, #0
 800a956:	d023      	beq.n	800a9a0 <HAL_LTDC_IRQHandler+0xbc>
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01e      	beq.n	800a9a0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0202 	bic.w	r2, r2, #2
 800a970:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2202      	movs	r2, #2
 800a978:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a980:	f043 0202 	orr.w	r2, r3, #2
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2204      	movs	r2, #4
 800a98e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f846 	bl	800aa2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d01b      	beq.n	800a9e2 <HAL_LTDC_IRQHandler+0xfe>
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d016      	beq.n	800a9e2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f022 0201 	bic.w	r2, r2, #1
 800a9c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f82f 	bl	800aa40 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f003 0308 	and.w	r3, r3, #8
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d01b      	beq.n	800aa24 <HAL_LTDC_IRQHandler+0x140>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d016      	beq.n	800aa24 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f022 0208 	bic.w	r2, r2, #8
 800aa04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2208      	movs	r2, #8
 800aa0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7f7 faca 	bl	8001fb8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800aa24:	bf00      	nop
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800aa54:	b5b0      	push	{r4, r5, r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d101      	bne.n	800aa6e <HAL_LTDC_ConfigLayer+0x1a>
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	e02c      	b.n	800aac8 <HAL_LTDC_ConfigLayer+0x74>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2202      	movs	r2, #2
 800aa7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2134      	movs	r1, #52	@ 0x34
 800aa84:	fb01 f303 	mul.w	r3, r1, r3
 800aa88:	4413      	add	r3, r2
 800aa8a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	4614      	mov	r4, r2
 800aa92:	461d      	mov	r5, r3
 800aa94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	68b9      	ldr	r1, [r7, #8]
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 f88f 	bl	800abcc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2201      	movs	r2, #1
 800aab4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bdb0      	pop	{r4, r5, r7, pc}

0800aad0 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d101      	bne.n	800aaea <HAL_LTDC_ConfigColorKeying+0x1a>
 800aae6:	2302      	movs	r3, #2
 800aae8:	e030      	b.n	800ab4c <HAL_LTDC_ConfigColorKeying+0x7c>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	01db      	lsls	r3, r3, #7
 800ab04:	4413      	add	r3, r2
 800ab06:	3384      	adds	r3, #132	@ 0x84
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	6812      	ldr	r2, [r2, #0]
 800ab0e:	4611      	mov	r1, r2
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	01d2      	lsls	r2, r2, #7
 800ab14:	440a      	add	r2, r1
 800ab16:	3284      	adds	r2, #132	@ 0x84
 800ab18:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ab1c:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	461a      	mov	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	01db      	lsls	r3, r3, #7
 800ab28:	4413      	add	r3, r2
 800ab2a:	3384      	adds	r3, #132	@ 0x84
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2201      	movs	r2, #1
 800ab38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d101      	bne.n	800ab70 <HAL_LTDC_EnableColorKeying+0x18>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e026      	b.n	800abbe <HAL_LTDC_EnableColorKeying+0x66>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	461a      	mov	r2, r3
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	01db      	lsls	r3, r3, #7
 800ab8a:	4413      	add	r3, r2
 800ab8c:	3384      	adds	r3, #132	@ 0x84
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	6812      	ldr	r2, [r2, #0]
 800ab94:	4611      	mov	r1, r2
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	01d2      	lsls	r2, r2, #7
 800ab9a:	440a      	add	r2, r1
 800ab9c:	3284      	adds	r2, #132	@ 0x84
 800ab9e:	f043 0302 	orr.w	r3, r3, #2
 800aba2:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2201      	movs	r2, #1
 800abaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
	...

0800abcc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800abcc:	b480      	push	{r7}
 800abce:	b089      	sub	sp, #36	@ 0x24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	0c1b      	lsrs	r3, r3, #16
 800abe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abe8:	4413      	add	r3, r2
 800abea:	041b      	lsls	r3, r3, #16
 800abec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	461a      	mov	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	01db      	lsls	r3, r3, #7
 800abf8:	4413      	add	r3, r2
 800abfa:	3384      	adds	r3, #132	@ 0x84
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	6812      	ldr	r2, [r2, #0]
 800ac02:	4611      	mov	r1, r2
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	01d2      	lsls	r2, r2, #7
 800ac08:	440a      	add	r2, r1
 800ac0a:	3284      	adds	r2, #132	@ 0x84
 800ac0c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800ac10:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	0c1b      	lsrs	r3, r3, #16
 800ac1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ac22:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ac24:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	01db      	lsls	r3, r3, #7
 800ac30:	440b      	add	r3, r1
 800ac32:	3384      	adds	r3, #132	@ 0x84
 800ac34:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ac3a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	68da      	ldr	r2, [r3, #12]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac4a:	4413      	add	r3, r2
 800ac4c:	041b      	lsls	r3, r3, #16
 800ac4e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	01db      	lsls	r3, r3, #7
 800ac5a:	4413      	add	r3, r2
 800ac5c:	3384      	adds	r3, #132	@ 0x84
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	6812      	ldr	r2, [r2, #0]
 800ac64:	4611      	mov	r1, r2
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	01d2      	lsls	r2, r2, #7
 800ac6a:	440a      	add	r2, r1
 800ac6c:	3284      	adds	r2, #132	@ 0x84
 800ac6e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800ac72:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	689a      	ldr	r2, [r3, #8]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac82:	4413      	add	r3, r2
 800ac84:	1c5a      	adds	r2, r3, #1
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	01db      	lsls	r3, r3, #7
 800ac90:	440b      	add	r3, r1
 800ac92:	3384      	adds	r3, #132	@ 0x84
 800ac94:	4619      	mov	r1, r3
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	461a      	mov	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	01db      	lsls	r3, r3, #7
 800aca6:	4413      	add	r3, r2
 800aca8:	3384      	adds	r3, #132	@ 0x84
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	6812      	ldr	r2, [r2, #0]
 800acb0:	4611      	mov	r1, r2
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	01d2      	lsls	r2, r2, #7
 800acb6:	440a      	add	r2, r1
 800acb8:	3284      	adds	r2, #132	@ 0x84
 800acba:	f023 0307 	bic.w	r3, r3, #7
 800acbe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	01db      	lsls	r3, r3, #7
 800acca:	4413      	add	r3, r2
 800accc:	3384      	adds	r3, #132	@ 0x84
 800acce:	461a      	mov	r2, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ace6:	041b      	lsls	r3, r3, #16
 800ace8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	061b      	lsls	r3, r3, #24
 800acf0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	01db      	lsls	r3, r3, #7
 800acfc:	4413      	add	r3, r2
 800acfe:	3384      	adds	r3, #132	@ 0x84
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	01db      	lsls	r3, r3, #7
 800ad0c:	4413      	add	r3, r2
 800ad0e:	3384      	adds	r3, #132	@ 0x84
 800ad10:	461a      	mov	r2, r3
 800ad12:	2300      	movs	r3, #0
 800ad14:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	431a      	orrs	r2, r3
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	431a      	orrs	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	01db      	lsls	r3, r3, #7
 800ad30:	440b      	add	r3, r1
 800ad32:	3384      	adds	r3, #132	@ 0x84
 800ad34:	4619      	mov	r1, r3
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	01db      	lsls	r3, r3, #7
 800ad46:	4413      	add	r3, r2
 800ad48:	3384      	adds	r3, #132	@ 0x84
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	6812      	ldr	r2, [r2, #0]
 800ad50:	4611      	mov	r1, r2
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	01d2      	lsls	r2, r2, #7
 800ad56:	440a      	add	r2, r1
 800ad58:	3284      	adds	r2, #132	@ 0x84
 800ad5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ad5e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	461a      	mov	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	01db      	lsls	r3, r3, #7
 800ad6a:	4413      	add	r3, r2
 800ad6c:	3384      	adds	r3, #132	@ 0x84
 800ad6e:	461a      	mov	r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	01db      	lsls	r3, r3, #7
 800ad80:	4413      	add	r3, r2
 800ad82:	3384      	adds	r3, #132	@ 0x84
 800ad84:	69da      	ldr	r2, [r3, #28]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	01db      	lsls	r3, r3, #7
 800ad90:	440b      	add	r3, r1
 800ad92:	3384      	adds	r3, #132	@ 0x84
 800ad94:	4619      	mov	r1, r3
 800ad96:	4b58      	ldr	r3, [pc, #352]	@ (800aef8 <LTDC_SetConfig+0x32c>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	69da      	ldr	r2, [r3, #28]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	68f9      	ldr	r1, [r7, #12]
 800ada6:	6809      	ldr	r1, [r1, #0]
 800ada8:	4608      	mov	r0, r1
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	01c9      	lsls	r1, r1, #7
 800adae:	4401      	add	r1, r0
 800adb0:	3184      	adds	r1, #132	@ 0x84
 800adb2:	4313      	orrs	r3, r2
 800adb4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	01db      	lsls	r3, r3, #7
 800adc0:	4413      	add	r3, r2
 800adc2:	3384      	adds	r3, #132	@ 0x84
 800adc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	01db      	lsls	r3, r3, #7
 800add0:	4413      	add	r3, r2
 800add2:	3384      	adds	r3, #132	@ 0x84
 800add4:	461a      	mov	r2, r3
 800add6:	2300      	movs	r3, #0
 800add8:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	01db      	lsls	r3, r3, #7
 800ade4:	4413      	add	r3, r2
 800ade6:	3384      	adds	r3, #132	@ 0x84
 800ade8:	461a      	mov	r2, r3
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adee:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d102      	bne.n	800adfe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800adf8:	2304      	movs	r3, #4
 800adfa:	61fb      	str	r3, [r7, #28]
 800adfc:	e01b      	b.n	800ae36 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d102      	bne.n	800ae0c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ae06:	2303      	movs	r3, #3
 800ae08:	61fb      	str	r3, [r7, #28]
 800ae0a:	e014      	b.n	800ae36 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	2b04      	cmp	r3, #4
 800ae12:	d00b      	beq.n	800ae2c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d007      	beq.n	800ae2c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d003      	beq.n	800ae2c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ae28:	2b07      	cmp	r3, #7
 800ae2a:	d102      	bne.n	800ae32 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	61fb      	str	r3, [r7, #28]
 800ae30:	e001      	b.n	800ae36 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ae32:	2301      	movs	r3, #1
 800ae34:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	01db      	lsls	r3, r3, #7
 800ae40:	4413      	add	r3, r2
 800ae42:	3384      	adds	r3, #132	@ 0x84
 800ae44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	6812      	ldr	r2, [r2, #0]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	01d2      	lsls	r2, r2, #7
 800ae50:	440a      	add	r2, r1
 800ae52:	3284      	adds	r2, #132	@ 0x84
 800ae54:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800ae58:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5e:	69fa      	ldr	r2, [r7, #28]
 800ae60:	fb02 f303 	mul.w	r3, r2, r3
 800ae64:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	6859      	ldr	r1, [r3, #4]
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	1acb      	subs	r3, r1, r3
 800ae70:	69f9      	ldr	r1, [r7, #28]
 800ae72:	fb01 f303 	mul.w	r3, r1, r3
 800ae76:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ae78:	68f9      	ldr	r1, [r7, #12]
 800ae7a:	6809      	ldr	r1, [r1, #0]
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	01c9      	lsls	r1, r1, #7
 800ae82:	4401      	add	r1, r0
 800ae84:	3184      	adds	r1, #132	@ 0x84
 800ae86:	4313      	orrs	r3, r2
 800ae88:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	01db      	lsls	r3, r3, #7
 800ae94:	4413      	add	r3, r2
 800ae96:	3384      	adds	r3, #132	@ 0x84
 800ae98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	01db      	lsls	r3, r3, #7
 800aea4:	440b      	add	r3, r1
 800aea6:	3384      	adds	r3, #132	@ 0x84
 800aea8:	4619      	mov	r1, r3
 800aeaa:	4b14      	ldr	r3, [pc, #80]	@ (800aefc <LTDC_SetConfig+0x330>)
 800aeac:	4013      	ands	r3, r2
 800aeae:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	01db      	lsls	r3, r3, #7
 800aeba:	4413      	add	r3, r2
 800aebc:	3384      	adds	r3, #132	@ 0x84
 800aebe:	461a      	mov	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	01db      	lsls	r3, r3, #7
 800aed0:	4413      	add	r3, r2
 800aed2:	3384      	adds	r3, #132	@ 0x84
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	6812      	ldr	r2, [r2, #0]
 800aeda:	4611      	mov	r1, r2
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	01d2      	lsls	r2, r2, #7
 800aee0:	440a      	add	r2, r1
 800aee2:	3284      	adds	r2, #132	@ 0x84
 800aee4:	f043 0301 	orr.w	r3, r3, #1
 800aee8:	6013      	str	r3, [r2, #0]
}
 800aeea:	bf00      	nop
 800aeec:	3724      	adds	r7, #36	@ 0x24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	fffff8f8 	.word	0xfffff8f8
 800aefc:	fffff800 	.word	0xfffff800

0800af00 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800af12:	2200      	movs	r2, #0
 800af14:	e001      	b.n	800af1a <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800af16:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d102      	bne.n	800af2c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800af26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800af2a:	e000      	b.n	800af2e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800af2c:	2200      	movs	r2, #0
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800af3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800af3e:	e000      	b.n	800af42 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800af40:	2200      	movs	r2, #0
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af4a:	1e5a      	subs	r2, r3, #1
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af58:	4413      	add	r3, r2
 800af5a:	1e5a      	subs	r2, r3, #1
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af68:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800af6e:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 800af70:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af7e:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800af84:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af8a:	4413      	add	r3, r2
 800af8c:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800afaa:	4b23      	ldr	r3, [pc, #140]	@ (800b038 <HAL_PWREx_EnableOverDrive+0x98>)
 800afac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afae:	4a22      	ldr	r2, [pc, #136]	@ (800b038 <HAL_PWREx_EnableOverDrive+0x98>)
 800afb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afb4:	6413      	str	r3, [r2, #64]	@ 0x40
 800afb6:	4b20      	ldr	r3, [pc, #128]	@ (800b038 <HAL_PWREx_EnableOverDrive+0x98>)
 800afb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800afc2:	4b1e      	ldr	r3, [pc, #120]	@ (800b03c <HAL_PWREx_EnableOverDrive+0x9c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a1d      	ldr	r2, [pc, #116]	@ (800b03c <HAL_PWREx_EnableOverDrive+0x9c>)
 800afc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800afce:	f7fb ffdd 	bl	8006f8c <HAL_GetTick>
 800afd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800afd4:	e009      	b.n	800afea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800afd6:	f7fb ffd9 	bl	8006f8c <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800afe4:	d901      	bls.n	800afea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e022      	b.n	800b030 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800afea:	4b14      	ldr	r3, [pc, #80]	@ (800b03c <HAL_PWREx_EnableOverDrive+0x9c>)
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aff6:	d1ee      	bne.n	800afd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800aff8:	4b10      	ldr	r3, [pc, #64]	@ (800b03c <HAL_PWREx_EnableOverDrive+0x9c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a0f      	ldr	r2, [pc, #60]	@ (800b03c <HAL_PWREx_EnableOverDrive+0x9c>)
 800affe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b002:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b004:	f7fb ffc2 	bl	8006f8c <HAL_GetTick>
 800b008:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b00a:	e009      	b.n	800b020 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b00c:	f7fb ffbe 	bl	8006f8c <HAL_GetTick>
 800b010:	4602      	mov	r2, r0
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b01a:	d901      	bls.n	800b020 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e007      	b.n	800b030 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b020:	4b06      	ldr	r3, [pc, #24]	@ (800b03c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b02c:	d1ee      	bne.n	800b00c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	40023800 	.word	0x40023800
 800b03c:	40007000 	.word	0x40007000

0800b040 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af02      	add	r7, sp, #8
 800b046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b048:	f7fb ffa0 	bl	8006f8c <HAL_GetTick>
 800b04c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e067      	b.n	800b128 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10b      	bne.n	800b07c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7f7 faa3 	bl	80025b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b072:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fae8 	bl	800b64c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	021a      	lsls	r2, r3, #8
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2120      	movs	r1, #32
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fae0 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b0ac:	7afb      	ldrb	r3, [r7, #11]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d135      	bne.n	800b11e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b130 <HAL_QSPI_Init+0xf0>)
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	6852      	ldr	r2, [r2, #4]
 800b0c0:	0611      	lsls	r1, r2, #24
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	68d2      	ldr	r2, [r2, #12]
 800b0c6:	4311      	orrs	r1, r2
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	69d2      	ldr	r2, [r2, #28]
 800b0cc:	4311      	orrs	r1, r2
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	6a12      	ldr	r2, [r2, #32]
 800b0d2:	4311      	orrs	r1, r2
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	6812      	ldr	r2, [r2, #0]
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	4b14      	ldr	r3, [pc, #80]	@ (800b134 <HAL_QSPI_Init+0xf4>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6912      	ldr	r2, [r2, #16]
 800b0ea:	0411      	lsls	r1, r2, #16
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	6952      	ldr	r2, [r2, #20]
 800b0f0:	4311      	orrs	r1, r2
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	6992      	ldr	r2, [r2, #24]
 800b0f6:	4311      	orrs	r1, r2
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f042 0201 	orr.w	r2, r2, #1
 800b10e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800b126:	7afb      	ldrb	r3, [r7, #11]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	00ffff2f 	.word	0x00ffff2f
 800b134:	ffe0f8fe 	.word	0xffe0f8fe

0800b138 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e016      	b.n	800b178 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f022 0201 	bic.w	r2, r2, #1
 800b158:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7f7 fadc 	bl	8002718 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af02      	add	r7, sp, #8
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b18c:	f7fb fefe 	bl	8006f8c <HAL_GetTick>
 800b190:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d101      	bne.n	800b1a2 <HAL_QSPI_Command+0x22>
 800b19e:	2302      	movs	r3, #2
 800b1a0:	e048      	b.n	800b234 <HAL_QSPI_Command+0xb4>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d137      	bne.n	800b226 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2202      	movs	r2, #2
 800b1c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2120      	movs	r1, #32
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 fa4a 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d125      	bne.n	800b22a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b1de:	2200      	movs	r2, #0
 800b1e0:	68b9      	ldr	r1, [r7, #8]
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 fa77 	bl	800b6d6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d115      	bne.n	800b21c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	2102      	movs	r1, #2
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f000 fa34 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b200:	4603      	mov	r3, r0
 800b202:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10f      	bne.n	800b22a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2202      	movs	r2, #2
 800b210:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2201      	movs	r2, #1
 800b216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b21a:	e006      	b.n	800b22a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b224:	e001      	b.n	800b22a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b226:	2302      	movs	r3, #2
 800b228:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800b232:	7dfb      	ldrb	r3, [r7, #23]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08a      	sub	sp, #40	@ 0x28
 800b240:	af02      	add	r7, sp, #8
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b248:	2300      	movs	r3, #0
 800b24a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b24c:	f7fb fe9e 	bl	8006f8c <HAL_GetTick>
 800b250:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3320      	adds	r3, #32
 800b258:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b01      	cmp	r3, #1
 800b264:	d101      	bne.n	800b26a <HAL_QSPI_Transmit+0x2e>
 800b266:	2302      	movs	r3, #2
 800b268:	e076      	b.n	800b358 <HAL_QSPI_Transmit+0x11c>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d165      	bne.n	800b34a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d056      	beq.n	800b338 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2212      	movs	r2, #18
 800b28e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	1c5a      	adds	r2, r3, #1
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	695a      	ldr	r2, [r3, #20]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800b2be:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800b2c0:	e01b      	b.n	800b2fa <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	2104      	movs	r1, #4
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f000 f9cb 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b2d6:	7ffb      	ldrb	r3, [r7, #31]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d113      	bne.n	800b304 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e0:	781a      	ldrb	r2, [r3, #0]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f4:	1e5a      	subs	r2, r3, #1
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1df      	bne.n	800b2c2 <HAL_QSPI_Transmit+0x86>
 800b302:	e000      	b.n	800b306 <HAL_QSPI_Transmit+0xca>
          break;
 800b304:	bf00      	nop
      }

      if (status == HAL_OK)
 800b306:	7ffb      	ldrb	r3, [r7, #31]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d110      	bne.n	800b32e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	2201      	movs	r2, #1
 800b314:	2102      	movs	r1, #2
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f000 f9a6 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b31c:	4603      	mov	r3, r0
 800b31e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b320:	7ffb      	ldrb	r3, [r7, #31]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d103      	bne.n	800b32e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2202      	movs	r2, #2
 800b32c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2201      	movs	r2, #1
 800b332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b336:	e00a      	b.n	800b34e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b33c:	f043 0208 	orr.w	r2, r3, #8
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	77fb      	strb	r3, [r7, #31]
 800b348:	e001      	b.n	800b34e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b34a:	2302      	movs	r3, #2
 800b34c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800b356:	7ffb      	ldrb	r3, [r7, #31]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3720      	adds	r7, #32
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08a      	sub	sp, #40	@ 0x28
 800b364:	af02      	add	r7, sp, #8
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b370:	f7fb fe0c 	bl	8006f8c <HAL_GetTick>
 800b374:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3320      	adds	r3, #32
 800b384:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d101      	bne.n	800b396 <HAL_QSPI_Receive+0x36>
 800b392:	2302      	movs	r3, #2
 800b394:	e07d      	b.n	800b492 <HAL_QSPI_Receive+0x132>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d16c      	bne.n	800b484 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d05d      	beq.n	800b472 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2222      	movs	r2, #34	@ 0x22
 800b3ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800b3ee:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	697a      	ldr	r2, [r7, #20]
 800b3f6:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800b3f8:	e01c      	b.n	800b434 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	9300      	str	r3, [sp, #0]
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	2201      	movs	r2, #1
 800b402:	2106      	movs	r1, #6
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f000 f92f 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b40a:	4603      	mov	r3, r0
 800b40c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800b40e:	7ffb      	ldrb	r3, [r7, #31]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d114      	bne.n	800b43e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	7812      	ldrb	r2, [r2, #0]
 800b41c:	b2d2      	uxtb	r2, r2
 800b41e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b42e:	1e5a      	subs	r2, r3, #1
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1de      	bne.n	800b3fa <HAL_QSPI_Receive+0x9a>
 800b43c:	e000      	b.n	800b440 <HAL_QSPI_Receive+0xe0>
          break;
 800b43e:	bf00      	nop
      }

      if (status == HAL_OK)
 800b440:	7ffb      	ldrb	r3, [r7, #31]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d110      	bne.n	800b468 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	2201      	movs	r2, #1
 800b44e:	2102      	movs	r1, #2
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f000 f909 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b456:	4603      	mov	r3, r0
 800b458:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b45a:	7ffb      	ldrb	r3, [r7, #31]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d103      	bne.n	800b468 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2202      	movs	r2, #2
 800b466:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b470:	e00a      	b.n	800b488 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b476:	f043 0208 	orr.w	r2, r3, #8
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	77fb      	strb	r3, [r7, #31]
 800b482:	e001      	b.n	800b488 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b484:	2302      	movs	r3, #2
 800b486:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800b490:	7ffb      	ldrb	r3, [r7, #31]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b088      	sub	sp, #32
 800b49e:	af02      	add	r7, sp, #8
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
 800b4a6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b4a8:	f7fb fd70 	bl	8006f8c <HAL_GetTick>
 800b4ac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d101      	bne.n	800b4be <HAL_QSPI_AutoPolling+0x24>
 800b4ba:	2302      	movs	r3, #2
 800b4bc:	e060      	b.n	800b580 <HAL_QSPI_AutoPolling+0xe6>
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d14f      	bne.n	800b572 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2242      	movs	r2, #66	@ 0x42
 800b4dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	2120      	movs	r1, #32
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f000 f8bc 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d13d      	bne.n	800b576 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	6812      	ldr	r2, [r2, #0]
 800b502:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	6852      	ldr	r2, [r2, #4]
 800b50c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	6892      	ldr	r2, [r2, #8]
 800b516:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	431a      	orrs	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800b530:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b53a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b53e:	68b9      	ldr	r1, [r7, #8]
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f000 f8c8 	bl	800b6d6 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	2201      	movs	r2, #1
 800b54e:	2108      	movs	r1, #8
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f000 f889 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b556:	4603      	mov	r3, r0
 800b558:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2208      	movs	r2, #8
 800b566:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b570:	e001      	b.n	800b576 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b572:	2302      	movs	r3, #2
 800b574:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af02      	add	r7, sp, #8
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b594:	f7fb fcfa 	bl	8006f8c <HAL_GetTick>
 800b598:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d101      	bne.n	800b5aa <HAL_QSPI_MemoryMapped+0x22>
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e04c      	b.n	800b644 <HAL_QSPI_MemoryMapped+0xbc>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d13b      	bne.n	800b636 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2282      	movs	r2, #130	@ 0x82
 800b5c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2120      	movs	r1, #32
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f000 f845 	bl	800b668 <QSPI_WaitFlagStateUntilTimeout>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d128      	bne.n	800b63a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f023 0108 	bic.w	r1, r3, #8
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	2b08      	cmp	r3, #8
 800b604:	d110      	bne.n	800b628 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6812      	ldr	r2, [r2, #0]
 800b60e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2210      	movs	r2, #16
 800b616:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800b626:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b628:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800b62c:	68b9      	ldr	r1, [r7, #8]
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f000 f851 	bl	800b6d6 <QSPI_Config>
 800b634:	e001      	b.n	800b63a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b636:	2302      	movs	r3, #2
 800b638:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800b642:	7dfb      	ldrb	r3, [r7, #23]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800b65c:	bf00      	nop
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	4613      	mov	r3, r2
 800b676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b678:	e01a      	b.n	800b6b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b680:	d016      	beq.n	800b6b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b682:	f7fb fc83 	bl	8006f8c <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	69ba      	ldr	r2, [r7, #24]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d302      	bcc.n	800b698 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10b      	bne.n	800b6b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2204      	movs	r2, #4
 800b69c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6a4:	f043 0201 	orr.w	r2, r3, #1
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e00e      	b.n	800b6ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	689a      	ldr	r2, [r3, #8]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bf14      	ite	ne
 800b6be:	2301      	movne	r3, #1
 800b6c0:	2300      	moveq	r3, #0
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	79fb      	ldrb	r3, [r7, #7]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d1d6      	bne.n	800b67a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b085      	sub	sp, #20
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d009      	beq.n	800b6fe <QSPI_Config+0x28>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b6f0:	d005      	beq.n	800b6fe <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3a01      	subs	r2, #1
 800b6fc:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 80b9 	beq.w	800b87a <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	6a1b      	ldr	r3, [r3, #32]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d05f      	beq.n	800b7d0 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	6892      	ldr	r2, [r2, #8]
 800b718:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d031      	beq.n	800b786 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b72a:	431a      	orrs	r2, r3
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b730:	431a      	orrs	r2, r3
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b736:	431a      	orrs	r2, r3
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	695b      	ldr	r3, [r3, #20]
 800b73c:	049b      	lsls	r3, r3, #18
 800b73e:	431a      	orrs	r2, r3
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	431a      	orrs	r2, r3
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	431a      	orrs	r2, r3
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	431a      	orrs	r2, r3
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	69db      	ldr	r3, [r3, #28]
 800b756:	431a      	orrs	r2, r3
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	431a      	orrs	r2, r3
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	ea42 0103 	orr.w	r1, r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	430a      	orrs	r2, r1
 800b76e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b776:	f000 812e 	beq.w	800b9d6 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	6852      	ldr	r2, [r2, #4]
 800b782:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b784:	e127      	b.n	800b9d6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b78e:	431a      	orrs	r2, r3
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b794:	431a      	orrs	r2, r3
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b79a:	431a      	orrs	r2, r3
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	049b      	lsls	r3, r3, #18
 800b7a2:	431a      	orrs	r2, r3
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	431a      	orrs	r2, r3
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	69db      	ldr	r3, [r3, #28]
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	ea42 0103 	orr.w	r1, r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	615a      	str	r2, [r3, #20]
}
 800b7ce:	e102      	b.n	800b9d6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	69db      	ldr	r3, [r3, #28]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d02e      	beq.n	800b836 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	049b      	lsls	r3, r3, #18
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	431a      	orrs	r2, r3
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	431a      	orrs	r2, r3
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	431a      	orrs	r2, r3
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	ea42 0103 	orr.w	r1, r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	430a      	orrs	r2, r1
 800b81e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b826:	f000 80d6 	beq.w	800b9d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	6852      	ldr	r2, [r2, #4]
 800b832:	619a      	str	r2, [r3, #24]
}
 800b834:	e0cf      	b.n	800b9d6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83e:	431a      	orrs	r2, r3
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b844:	431a      	orrs	r2, r3
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b84a:	431a      	orrs	r2, r3
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	695b      	ldr	r3, [r3, #20]
 800b850:	049b      	lsls	r3, r3, #18
 800b852:	431a      	orrs	r2, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	6a1b      	ldr	r3, [r3, #32]
 800b858:	431a      	orrs	r2, r3
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	69db      	ldr	r3, [r3, #28]
 800b85e:	431a      	orrs	r2, r3
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	431a      	orrs	r2, r3
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	ea42 0103 	orr.w	r1, r2, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	430a      	orrs	r2, r1
 800b876:	615a      	str	r2, [r3, #20]
}
 800b878:	e0ad      	b.n	800b9d6 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d058      	beq.n	800b934 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	6892      	ldr	r2, [r2, #8]
 800b88a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	69db      	ldr	r3, [r3, #28]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d02d      	beq.n	800b8f0 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b89c:	431a      	orrs	r2, r3
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8a2:	431a      	orrs	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a8:	431a      	orrs	r2, r3
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	049b      	lsls	r3, r3, #18
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	431a      	orrs	r2, r3
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	6a1b      	ldr	r3, [r3, #32]
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	69db      	ldr	r3, [r3, #28]
 800b8c8:	431a      	orrs	r2, r3
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	ea42 0103 	orr.w	r1, r2, r3
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b8e2:	d078      	beq.n	800b9d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	6852      	ldr	r2, [r2, #4]
 800b8ec:	619a      	str	r2, [r3, #24]
}
 800b8ee:	e072      	b.n	800b9d6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8f8:	431a      	orrs	r2, r3
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8fe:	431a      	orrs	r2, r3
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b904:	431a      	orrs	r2, r3
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	695b      	ldr	r3, [r3, #20]
 800b90a:	049b      	lsls	r3, r3, #18
 800b90c:	431a      	orrs	r2, r3
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	431a      	orrs	r2, r3
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	6a1b      	ldr	r3, [r3, #32]
 800b918:	431a      	orrs	r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	69db      	ldr	r3, [r3, #28]
 800b91e:	431a      	orrs	r2, r3
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	699b      	ldr	r3, [r3, #24]
 800b924:	ea42 0103 	orr.w	r1, r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	430a      	orrs	r2, r1
 800b930:	615a      	str	r2, [r3, #20]
}
 800b932:	e050      	b.n	800b9d6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d02a      	beq.n	800b992 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b944:	431a      	orrs	r2, r3
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b94a:	431a      	orrs	r2, r3
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b950:	431a      	orrs	r2, r3
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	049b      	lsls	r3, r3, #18
 800b958:	431a      	orrs	r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	431a      	orrs	r2, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	431a      	orrs	r2, r3
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	69db      	ldr	r3, [r3, #28]
 800b96a:	431a      	orrs	r2, r3
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	ea42 0103 	orr.w	r1, r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	430a      	orrs	r2, r1
 800b97c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b984:	d027      	beq.n	800b9d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	6852      	ldr	r2, [r2, #4]
 800b98e:	619a      	str	r2, [r3, #24]
}
 800b990:	e021      	b.n	800b9d6 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b996:	2b00      	cmp	r3, #0
 800b998:	d01d      	beq.n	800b9d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9a8:	431a      	orrs	r2, r3
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ae:	431a      	orrs	r2, r3
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	049b      	lsls	r3, r3, #18
 800b9b6:	431a      	orrs	r2, r3
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	69db      	ldr	r3, [r3, #28]
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	ea42 0103 	orr.w	r1, r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	615a      	str	r2, [r3, #20]
}
 800b9d6:	bf00      	nop
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e29b      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f000 8087 	beq.w	800bb16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ba08:	4b96      	ldr	r3, [pc, #600]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	f003 030c 	and.w	r3, r3, #12
 800ba10:	2b04      	cmp	r3, #4
 800ba12:	d00c      	beq.n	800ba2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba14:	4b93      	ldr	r3, [pc, #588]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	f003 030c 	and.w	r3, r3, #12
 800ba1c:	2b08      	cmp	r3, #8
 800ba1e:	d112      	bne.n	800ba46 <HAL_RCC_OscConfig+0x62>
 800ba20:	4b90      	ldr	r3, [pc, #576]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba2c:	d10b      	bne.n	800ba46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba2e:	4b8d      	ldr	r3, [pc, #564]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d06c      	beq.n	800bb14 <HAL_RCC_OscConfig+0x130>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d168      	bne.n	800bb14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e275      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba4e:	d106      	bne.n	800ba5e <HAL_RCC_OscConfig+0x7a>
 800ba50:	4b84      	ldr	r3, [pc, #528]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a83      	ldr	r2, [pc, #524]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	e02e      	b.n	800babc <HAL_RCC_OscConfig+0xd8>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10c      	bne.n	800ba80 <HAL_RCC_OscConfig+0x9c>
 800ba66:	4b7f      	ldr	r3, [pc, #508]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a7e      	ldr	r2, [pc, #504]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	4b7c      	ldr	r3, [pc, #496]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a7b      	ldr	r2, [pc, #492]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	e01d      	b.n	800babc <HAL_RCC_OscConfig+0xd8>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba88:	d10c      	bne.n	800baa4 <HAL_RCC_OscConfig+0xc0>
 800ba8a:	4b76      	ldr	r3, [pc, #472]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a75      	ldr	r2, [pc, #468]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	4b73      	ldr	r3, [pc, #460]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a72      	ldr	r2, [pc, #456]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800ba9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	e00b      	b.n	800babc <HAL_RCC_OscConfig+0xd8>
 800baa4:	4b6f      	ldr	r3, [pc, #444]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a6e      	ldr	r2, [pc, #440]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800baaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	4b6c      	ldr	r3, [pc, #432]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a6b      	ldr	r2, [pc, #428]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800baba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d013      	beq.n	800baec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bac4:	f7fb fa62 	bl	8006f8c <HAL_GetTick>
 800bac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800baca:	e008      	b.n	800bade <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bacc:	f7fb fa5e 	bl	8006f8c <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	2b64      	cmp	r3, #100	@ 0x64
 800bad8:	d901      	bls.n	800bade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e229      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bade:	4b61      	ldr	r3, [pc, #388]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0f0      	beq.n	800bacc <HAL_RCC_OscConfig+0xe8>
 800baea:	e014      	b.n	800bb16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baec:	f7fb fa4e 	bl	8006f8c <HAL_GetTick>
 800baf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800baf2:	e008      	b.n	800bb06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800baf4:	f7fb fa4a 	bl	8006f8c <HAL_GetTick>
 800baf8:	4602      	mov	r2, r0
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	2b64      	cmp	r3, #100	@ 0x64
 800bb00:	d901      	bls.n	800bb06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	e215      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb06:	4b57      	ldr	r3, [pc, #348]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1f0      	bne.n	800baf4 <HAL_RCC_OscConfig+0x110>
 800bb12:	e000      	b.n	800bb16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 0302 	and.w	r3, r3, #2
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d069      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bb22:	4b50      	ldr	r3, [pc, #320]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f003 030c 	and.w	r3, r3, #12
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00b      	beq.n	800bb46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb2e:	4b4d      	ldr	r3, [pc, #308]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f003 030c 	and.w	r3, r3, #12
 800bb36:	2b08      	cmp	r3, #8
 800bb38:	d11c      	bne.n	800bb74 <HAL_RCC_OscConfig+0x190>
 800bb3a:	4b4a      	ldr	r3, [pc, #296]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d116      	bne.n	800bb74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb46:	4b47      	ldr	r3, [pc, #284]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f003 0302 	and.w	r3, r3, #2
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d005      	beq.n	800bb5e <HAL_RCC_OscConfig+0x17a>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d001      	beq.n	800bb5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e1e9      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb5e:	4b41      	ldr	r3, [pc, #260]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	493d      	ldr	r1, [pc, #244]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb72:	e040      	b.n	800bbf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d023      	beq.n	800bbc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb7c:	4b39      	ldr	r3, [pc, #228]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a38      	ldr	r2, [pc, #224]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bb82:	f043 0301 	orr.w	r3, r3, #1
 800bb86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb88:	f7fb fa00 	bl	8006f8c <HAL_GetTick>
 800bb8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb8e:	e008      	b.n	800bba2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb90:	f7fb f9fc 	bl	8006f8c <HAL_GetTick>
 800bb94:	4602      	mov	r2, r0
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d901      	bls.n	800bba2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e1c7      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bba2:	4b30      	ldr	r3, [pc, #192]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 0302 	and.w	r3, r3, #2
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0f0      	beq.n	800bb90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbae:	4b2d      	ldr	r3, [pc, #180]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	4929      	ldr	r1, [pc, #164]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	600b      	str	r3, [r1, #0]
 800bbc2:	e018      	b.n	800bbf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bbc4:	4b27      	ldr	r3, [pc, #156]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a26      	ldr	r2, [pc, #152]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bbca:	f023 0301 	bic.w	r3, r3, #1
 800bbce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbd0:	f7fb f9dc 	bl	8006f8c <HAL_GetTick>
 800bbd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbd6:	e008      	b.n	800bbea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bbd8:	f7fb f9d8 	bl	8006f8c <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d901      	bls.n	800bbea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	e1a3      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbea:	4b1e      	ldr	r3, [pc, #120]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f003 0302 	and.w	r3, r3, #2
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1f0      	bne.n	800bbd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0308 	and.w	r3, r3, #8
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d038      	beq.n	800bc74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d019      	beq.n	800bc3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc0a:	4b16      	ldr	r3, [pc, #88]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bc0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc0e:	4a15      	ldr	r2, [pc, #84]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bc10:	f043 0301 	orr.w	r3, r3, #1
 800bc14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc16:	f7fb f9b9 	bl	8006f8c <HAL_GetTick>
 800bc1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc1c:	e008      	b.n	800bc30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc1e:	f7fb f9b5 	bl	8006f8c <HAL_GetTick>
 800bc22:	4602      	mov	r2, r0
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d901      	bls.n	800bc30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e180      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc30:	4b0c      	ldr	r3, [pc, #48]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bc32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d0f0      	beq.n	800bc1e <HAL_RCC_OscConfig+0x23a>
 800bc3c:	e01a      	b.n	800bc74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc3e:	4b09      	ldr	r3, [pc, #36]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bc40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc42:	4a08      	ldr	r2, [pc, #32]	@ (800bc64 <HAL_RCC_OscConfig+0x280>)
 800bc44:	f023 0301 	bic.w	r3, r3, #1
 800bc48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc4a:	f7fb f99f 	bl	8006f8c <HAL_GetTick>
 800bc4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc50:	e00a      	b.n	800bc68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc52:	f7fb f99b 	bl	8006f8c <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d903      	bls.n	800bc68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e166      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
 800bc64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc68:	4b92      	ldr	r3, [pc, #584]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bc6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc6c:	f003 0302 	and.w	r3, r3, #2
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1ee      	bne.n	800bc52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f003 0304 	and.w	r3, r3, #4
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f000 80a4 	beq.w	800bdca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc82:	4b8c      	ldr	r3, [pc, #560]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bc84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10d      	bne.n	800bcaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc8e:	4b89      	ldr	r3, [pc, #548]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bc90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc92:	4a88      	ldr	r2, [pc, #544]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bc94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc98:	6413      	str	r3, [r2, #64]	@ 0x40
 800bc9a:	4b86      	ldr	r3, [pc, #536]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bc9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bca2:	60bb      	str	r3, [r7, #8]
 800bca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bca6:	2301      	movs	r3, #1
 800bca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bcaa:	4b83      	ldr	r3, [pc, #524]	@ (800beb8 <HAL_RCC_OscConfig+0x4d4>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d118      	bne.n	800bce8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800bcb6:	4b80      	ldr	r3, [pc, #512]	@ (800beb8 <HAL_RCC_OscConfig+0x4d4>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a7f      	ldr	r2, [pc, #508]	@ (800beb8 <HAL_RCC_OscConfig+0x4d4>)
 800bcbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bcc2:	f7fb f963 	bl	8006f8c <HAL_GetTick>
 800bcc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bcc8:	e008      	b.n	800bcdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcca:	f7fb f95f 	bl	8006f8c <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	2b64      	cmp	r3, #100	@ 0x64
 800bcd6:	d901      	bls.n	800bcdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e12a      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bcdc:	4b76      	ldr	r3, [pc, #472]	@ (800beb8 <HAL_RCC_OscConfig+0x4d4>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d0f0      	beq.n	800bcca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d106      	bne.n	800bcfe <HAL_RCC_OscConfig+0x31a>
 800bcf0:	4b70      	ldr	r3, [pc, #448]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bcf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcf4:	4a6f      	ldr	r2, [pc, #444]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bcf6:	f043 0301 	orr.w	r3, r3, #1
 800bcfa:	6713      	str	r3, [r2, #112]	@ 0x70
 800bcfc:	e02d      	b.n	800bd5a <HAL_RCC_OscConfig+0x376>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10c      	bne.n	800bd20 <HAL_RCC_OscConfig+0x33c>
 800bd06:	4b6b      	ldr	r3, [pc, #428]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd0a:	4a6a      	ldr	r2, [pc, #424]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd0c:	f023 0301 	bic.w	r3, r3, #1
 800bd10:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd12:	4b68      	ldr	r3, [pc, #416]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd16:	4a67      	ldr	r2, [pc, #412]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd18:	f023 0304 	bic.w	r3, r3, #4
 800bd1c:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd1e:	e01c      	b.n	800bd5a <HAL_RCC_OscConfig+0x376>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	2b05      	cmp	r3, #5
 800bd26:	d10c      	bne.n	800bd42 <HAL_RCC_OscConfig+0x35e>
 800bd28:	4b62      	ldr	r3, [pc, #392]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd2c:	4a61      	ldr	r2, [pc, #388]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd2e:	f043 0304 	orr.w	r3, r3, #4
 800bd32:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd34:	4b5f      	ldr	r3, [pc, #380]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd38:	4a5e      	ldr	r2, [pc, #376]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd3a:	f043 0301 	orr.w	r3, r3, #1
 800bd3e:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd40:	e00b      	b.n	800bd5a <HAL_RCC_OscConfig+0x376>
 800bd42:	4b5c      	ldr	r3, [pc, #368]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd46:	4a5b      	ldr	r2, [pc, #364]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd48:	f023 0301 	bic.w	r3, r3, #1
 800bd4c:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd4e:	4b59      	ldr	r3, [pc, #356]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd52:	4a58      	ldr	r2, [pc, #352]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd54:	f023 0304 	bic.w	r3, r3, #4
 800bd58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d015      	beq.n	800bd8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd62:	f7fb f913 	bl	8006f8c <HAL_GetTick>
 800bd66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd68:	e00a      	b.n	800bd80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd6a:	f7fb f90f 	bl	8006f8c <HAL_GetTick>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d901      	bls.n	800bd80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	e0d8      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd80:	4b4c      	ldr	r3, [pc, #304]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bd82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd84:	f003 0302 	and.w	r3, r3, #2
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d0ee      	beq.n	800bd6a <HAL_RCC_OscConfig+0x386>
 800bd8c:	e014      	b.n	800bdb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd8e:	f7fb f8fd 	bl	8006f8c <HAL_GetTick>
 800bd92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd94:	e00a      	b.n	800bdac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd96:	f7fb f8f9 	bl	8006f8c <HAL_GetTick>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d901      	bls.n	800bdac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	e0c2      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdac:	4b41      	ldr	r3, [pc, #260]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bdae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdb0:	f003 0302 	and.w	r3, r3, #2
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1ee      	bne.n	800bd96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d105      	bne.n	800bdca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdbe:	4b3d      	ldr	r3, [pc, #244]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc2:	4a3c      	ldr	r2, [pc, #240]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bdc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bdc8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 80ae 	beq.w	800bf30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bdd4:	4b37      	ldr	r3, [pc, #220]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	f003 030c 	and.w	r3, r3, #12
 800bddc:	2b08      	cmp	r3, #8
 800bdde:	d06d      	beq.n	800bebc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d14b      	bne.n	800be80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bde8:	4b32      	ldr	r3, [pc, #200]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a31      	ldr	r2, [pc, #196]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bdee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bdf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdf4:	f7fb f8ca 	bl	8006f8c <HAL_GetTick>
 800bdf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdfa:	e008      	b.n	800be0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdfc:	f7fb f8c6 	bl	8006f8c <HAL_GetTick>
 800be00:	4602      	mov	r2, r0
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	2b02      	cmp	r3, #2
 800be08:	d901      	bls.n	800be0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e091      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be0e:	4b29      	ldr	r3, [pc, #164]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1f0      	bne.n	800bdfc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	69da      	ldr	r2, [r3, #28]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	431a      	orrs	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be28:	019b      	lsls	r3, r3, #6
 800be2a:	431a      	orrs	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be30:	085b      	lsrs	r3, r3, #1
 800be32:	3b01      	subs	r3, #1
 800be34:	041b      	lsls	r3, r3, #16
 800be36:	431a      	orrs	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be3c:	061b      	lsls	r3, r3, #24
 800be3e:	431a      	orrs	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be44:	071b      	lsls	r3, r3, #28
 800be46:	491b      	ldr	r1, [pc, #108]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800be48:	4313      	orrs	r3, r2
 800be4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be4c:	4b19      	ldr	r3, [pc, #100]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a18      	ldr	r2, [pc, #96]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800be52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800be56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be58:	f7fb f898 	bl	8006f8c <HAL_GetTick>
 800be5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be5e:	e008      	b.n	800be72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be60:	f7fb f894 	bl	8006f8c <HAL_GetTick>
 800be64:	4602      	mov	r2, r0
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	2b02      	cmp	r3, #2
 800be6c:	d901      	bls.n	800be72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e05f      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be72:	4b10      	ldr	r3, [pc, #64]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0f0      	beq.n	800be60 <HAL_RCC_OscConfig+0x47c>
 800be7e:	e057      	b.n	800bf30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be80:	4b0c      	ldr	r3, [pc, #48]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a0b      	ldr	r2, [pc, #44]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800be86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be8c:	f7fb f87e 	bl	8006f8c <HAL_GetTick>
 800be90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be92:	e008      	b.n	800bea6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be94:	f7fb f87a 	bl	8006f8c <HAL_GetTick>
 800be98:	4602      	mov	r2, r0
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d901      	bls.n	800bea6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800bea2:	2303      	movs	r3, #3
 800bea4:	e045      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bea6:	4b03      	ldr	r3, [pc, #12]	@ (800beb4 <HAL_RCC_OscConfig+0x4d0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1f0      	bne.n	800be94 <HAL_RCC_OscConfig+0x4b0>
 800beb2:	e03d      	b.n	800bf30 <HAL_RCC_OscConfig+0x54c>
 800beb4:	40023800 	.word	0x40023800
 800beb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800bebc:	4b1f      	ldr	r3, [pc, #124]	@ (800bf3c <HAL_RCC_OscConfig+0x558>)
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	699b      	ldr	r3, [r3, #24]
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d030      	beq.n	800bf2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d129      	bne.n	800bf2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d122      	bne.n	800bf2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800beec:	4013      	ands	r3, r2
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bef2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d119      	bne.n	800bf2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf02:	085b      	lsrs	r3, r3, #1
 800bf04:	3b01      	subs	r3, #1
 800bf06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d10f      	bne.n	800bf2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d107      	bne.n	800bf2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d001      	beq.n	800bf30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e000      	b.n	800bf32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	40023800 	.word	0x40023800

0800bf40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	e0d0      	b.n	800c0fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bf58:	4b6a      	ldr	r3, [pc, #424]	@ (800c104 <HAL_RCC_ClockConfig+0x1c4>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 030f 	and.w	r3, r3, #15
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d910      	bls.n	800bf88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf66:	4b67      	ldr	r3, [pc, #412]	@ (800c104 <HAL_RCC_ClockConfig+0x1c4>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f023 020f 	bic.w	r2, r3, #15
 800bf6e:	4965      	ldr	r1, [pc, #404]	@ (800c104 <HAL_RCC_ClockConfig+0x1c4>)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf76:	4b63      	ldr	r3, [pc, #396]	@ (800c104 <HAL_RCC_ClockConfig+0x1c4>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 030f 	and.w	r3, r3, #15
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d001      	beq.n	800bf88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	e0b8      	b.n	800c0fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 0302 	and.w	r3, r3, #2
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d020      	beq.n	800bfd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f003 0304 	and.w	r3, r3, #4
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d005      	beq.n	800bfac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bfa0:	4b59      	ldr	r3, [pc, #356]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	4a58      	ldr	r2, [pc, #352]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800bfa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800bfaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 0308 	and.w	r3, r3, #8
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d005      	beq.n	800bfc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bfb8:	4b53      	ldr	r3, [pc, #332]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	4a52      	ldr	r2, [pc, #328]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800bfbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800bfc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfc4:	4b50      	ldr	r3, [pc, #320]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	494d      	ldr	r1, [pc, #308]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 0301 	and.w	r3, r3, #1
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d040      	beq.n	800c064 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d107      	bne.n	800bffa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfea:	4b47      	ldr	r3, [pc, #284]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d115      	bne.n	800c022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e07f      	b.n	800c0fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d107      	bne.n	800c012 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c002:	4b41      	ldr	r3, [pc, #260]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d109      	bne.n	800c022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c00e:	2301      	movs	r3, #1
 800c010:	e073      	b.n	800c0fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c012:	4b3d      	ldr	r3, [pc, #244]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0302 	and.w	r3, r3, #2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e06b      	b.n	800c0fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c022:	4b39      	ldr	r3, [pc, #228]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f023 0203 	bic.w	r2, r3, #3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	4936      	ldr	r1, [pc, #216]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c030:	4313      	orrs	r3, r2
 800c032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c034:	f7fa ffaa 	bl	8006f8c <HAL_GetTick>
 800c038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c03a:	e00a      	b.n	800c052 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c03c:	f7fa ffa6 	bl	8006f8c <HAL_GetTick>
 800c040:	4602      	mov	r2, r0
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d901      	bls.n	800c052 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e053      	b.n	800c0fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c052:	4b2d      	ldr	r3, [pc, #180]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f003 020c 	and.w	r2, r3, #12
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	429a      	cmp	r2, r3
 800c062:	d1eb      	bne.n	800c03c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c064:	4b27      	ldr	r3, [pc, #156]	@ (800c104 <HAL_RCC_ClockConfig+0x1c4>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 030f 	and.w	r3, r3, #15
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d210      	bcs.n	800c094 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c072:	4b24      	ldr	r3, [pc, #144]	@ (800c104 <HAL_RCC_ClockConfig+0x1c4>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f023 020f 	bic.w	r2, r3, #15
 800c07a:	4922      	ldr	r1, [pc, #136]	@ (800c104 <HAL_RCC_ClockConfig+0x1c4>)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	4313      	orrs	r3, r2
 800c080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c082:	4b20      	ldr	r3, [pc, #128]	@ (800c104 <HAL_RCC_ClockConfig+0x1c4>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 030f 	and.w	r3, r3, #15
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d001      	beq.n	800c094 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	e032      	b.n	800c0fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d008      	beq.n	800c0b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c0a0:	4b19      	ldr	r3, [pc, #100]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	4916      	ldr	r1, [pc, #88]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f003 0308 	and.w	r3, r3, #8
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d009      	beq.n	800c0d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c0be:	4b12      	ldr	r3, [pc, #72]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	490e      	ldr	r1, [pc, #56]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c0d2:	f000 f821 	bl	800c118 <HAL_RCC_GetSysClockFreq>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	091b      	lsrs	r3, r3, #4
 800c0de:	f003 030f 	and.w	r3, r3, #15
 800c0e2:	490a      	ldr	r1, [pc, #40]	@ (800c10c <HAL_RCC_ClockConfig+0x1cc>)
 800c0e4:	5ccb      	ldrb	r3, [r1, r3]
 800c0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ea:	4a09      	ldr	r2, [pc, #36]	@ (800c110 <HAL_RCC_ClockConfig+0x1d0>)
 800c0ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c0ee:	4b09      	ldr	r3, [pc, #36]	@ (800c114 <HAL_RCC_ClockConfig+0x1d4>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7f6 fc46 	bl	8002984 <HAL_InitTick>

  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	40023c00 	.word	0x40023c00
 800c108:	40023800 	.word	0x40023800
 800c10c:	08013184 	.word	0x08013184
 800c110:	20000014 	.word	0x20000014
 800c114:	20000098 	.word	0x20000098

0800c118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c11c:	b090      	sub	sp, #64	@ 0x40
 800c11e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c120:	2300      	movs	r3, #0
 800c122:	637b      	str	r3, [r7, #52]	@ 0x34
 800c124:	2300      	movs	r3, #0
 800c126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c128:	2300      	movs	r3, #0
 800c12a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800c12c:	2300      	movs	r3, #0
 800c12e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c130:	4b59      	ldr	r3, [pc, #356]	@ (800c298 <HAL_RCC_GetSysClockFreq+0x180>)
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	f003 030c 	and.w	r3, r3, #12
 800c138:	2b08      	cmp	r3, #8
 800c13a:	d00d      	beq.n	800c158 <HAL_RCC_GetSysClockFreq+0x40>
 800c13c:	2b08      	cmp	r3, #8
 800c13e:	f200 80a1 	bhi.w	800c284 <HAL_RCC_GetSysClockFreq+0x16c>
 800c142:	2b00      	cmp	r3, #0
 800c144:	d002      	beq.n	800c14c <HAL_RCC_GetSysClockFreq+0x34>
 800c146:	2b04      	cmp	r3, #4
 800c148:	d003      	beq.n	800c152 <HAL_RCC_GetSysClockFreq+0x3a>
 800c14a:	e09b      	b.n	800c284 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c14c:	4b53      	ldr	r3, [pc, #332]	@ (800c29c <HAL_RCC_GetSysClockFreq+0x184>)
 800c14e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c150:	e09b      	b.n	800c28a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c152:	4b53      	ldr	r3, [pc, #332]	@ (800c2a0 <HAL_RCC_GetSysClockFreq+0x188>)
 800c154:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c156:	e098      	b.n	800c28a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c158:	4b4f      	ldr	r3, [pc, #316]	@ (800c298 <HAL_RCC_GetSysClockFreq+0x180>)
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c160:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c162:	4b4d      	ldr	r3, [pc, #308]	@ (800c298 <HAL_RCC_GetSysClockFreq+0x180>)
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d028      	beq.n	800c1c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c16e:	4b4a      	ldr	r3, [pc, #296]	@ (800c298 <HAL_RCC_GetSysClockFreq+0x180>)
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	099b      	lsrs	r3, r3, #6
 800c174:	2200      	movs	r2, #0
 800c176:	623b      	str	r3, [r7, #32]
 800c178:	627a      	str	r2, [r7, #36]	@ 0x24
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c180:	2100      	movs	r1, #0
 800c182:	4b47      	ldr	r3, [pc, #284]	@ (800c2a0 <HAL_RCC_GetSysClockFreq+0x188>)
 800c184:	fb03 f201 	mul.w	r2, r3, r1
 800c188:	2300      	movs	r3, #0
 800c18a:	fb00 f303 	mul.w	r3, r0, r3
 800c18e:	4413      	add	r3, r2
 800c190:	4a43      	ldr	r2, [pc, #268]	@ (800c2a0 <HAL_RCC_GetSysClockFreq+0x188>)
 800c192:	fba0 1202 	umull	r1, r2, r0, r2
 800c196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c198:	460a      	mov	r2, r1
 800c19a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c19c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c19e:	4413      	add	r3, r2
 800c1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	61bb      	str	r3, [r7, #24]
 800c1a8:	61fa      	str	r2, [r7, #28]
 800c1aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c1ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c1b2:	f7f4 f895 	bl	80002e0 <__aeabi_uldivmod>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1be:	e053      	b.n	800c268 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c1c0:	4b35      	ldr	r3, [pc, #212]	@ (800c298 <HAL_RCC_GetSysClockFreq+0x180>)
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	099b      	lsrs	r3, r3, #6
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	613b      	str	r3, [r7, #16]
 800c1ca:	617a      	str	r2, [r7, #20]
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c1d2:	f04f 0b00 	mov.w	fp, #0
 800c1d6:	4652      	mov	r2, sl
 800c1d8:	465b      	mov	r3, fp
 800c1da:	f04f 0000 	mov.w	r0, #0
 800c1de:	f04f 0100 	mov.w	r1, #0
 800c1e2:	0159      	lsls	r1, r3, #5
 800c1e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c1e8:	0150      	lsls	r0, r2, #5
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	ebb2 080a 	subs.w	r8, r2, sl
 800c1f2:	eb63 090b 	sbc.w	r9, r3, fp
 800c1f6:	f04f 0200 	mov.w	r2, #0
 800c1fa:	f04f 0300 	mov.w	r3, #0
 800c1fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c202:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c206:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c20a:	ebb2 0408 	subs.w	r4, r2, r8
 800c20e:	eb63 0509 	sbc.w	r5, r3, r9
 800c212:	f04f 0200 	mov.w	r2, #0
 800c216:	f04f 0300 	mov.w	r3, #0
 800c21a:	00eb      	lsls	r3, r5, #3
 800c21c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c220:	00e2      	lsls	r2, r4, #3
 800c222:	4614      	mov	r4, r2
 800c224:	461d      	mov	r5, r3
 800c226:	eb14 030a 	adds.w	r3, r4, sl
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	eb45 030b 	adc.w	r3, r5, fp
 800c230:	607b      	str	r3, [r7, #4]
 800c232:	f04f 0200 	mov.w	r2, #0
 800c236:	f04f 0300 	mov.w	r3, #0
 800c23a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c23e:	4629      	mov	r1, r5
 800c240:	028b      	lsls	r3, r1, #10
 800c242:	4621      	mov	r1, r4
 800c244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c248:	4621      	mov	r1, r4
 800c24a:	028a      	lsls	r2, r1, #10
 800c24c:	4610      	mov	r0, r2
 800c24e:	4619      	mov	r1, r3
 800c250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c252:	2200      	movs	r2, #0
 800c254:	60bb      	str	r3, [r7, #8]
 800c256:	60fa      	str	r2, [r7, #12]
 800c258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c25c:	f7f4 f840 	bl	80002e0 <__aeabi_uldivmod>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4613      	mov	r3, r2
 800c266:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c268:	4b0b      	ldr	r3, [pc, #44]	@ (800c298 <HAL_RCC_GetSysClockFreq+0x180>)
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	0c1b      	lsrs	r3, r3, #16
 800c26e:	f003 0303 	and.w	r3, r3, #3
 800c272:	3301      	adds	r3, #1
 800c274:	005b      	lsls	r3, r3, #1
 800c276:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800c278:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c280:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c282:	e002      	b.n	800c28a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c284:	4b05      	ldr	r3, [pc, #20]	@ (800c29c <HAL_RCC_GetSysClockFreq+0x184>)
 800c286:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3740      	adds	r7, #64	@ 0x40
 800c290:	46bd      	mov	sp, r7
 800c292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c296:	bf00      	nop
 800c298:	40023800 	.word	0x40023800
 800c29c:	00f42400 	.word	0x00f42400
 800c2a0:	017d7840 	.word	0x017d7840

0800c2a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c2a8:	4b03      	ldr	r3, [pc, #12]	@ (800c2b8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	20000014 	.word	0x20000014

0800c2bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c2c0:	f7ff fff0 	bl	800c2a4 <HAL_RCC_GetHCLKFreq>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	4b05      	ldr	r3, [pc, #20]	@ (800c2dc <HAL_RCC_GetPCLK1Freq+0x20>)
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	0a9b      	lsrs	r3, r3, #10
 800c2cc:	f003 0307 	and.w	r3, r3, #7
 800c2d0:	4903      	ldr	r1, [pc, #12]	@ (800c2e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c2d2:	5ccb      	ldrb	r3, [r1, r3]
 800c2d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	40023800 	.word	0x40023800
 800c2e0:	08013194 	.word	0x08013194

0800c2e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c2e8:	f7ff ffdc 	bl	800c2a4 <HAL_RCC_GetHCLKFreq>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	4b05      	ldr	r3, [pc, #20]	@ (800c304 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	0b5b      	lsrs	r3, r3, #13
 800c2f4:	f003 0307 	and.w	r3, r3, #7
 800c2f8:	4903      	ldr	r1, [pc, #12]	@ (800c308 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c2fa:	5ccb      	ldrb	r3, [r1, r3]
 800c2fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c300:	4618      	mov	r0, r3
 800c302:	bd80      	pop	{r7, pc}
 800c304:	40023800 	.word	0x40023800
 800c308:	08013194 	.word	0x08013194

0800c30c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	220f      	movs	r2, #15
 800c31a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c31c:	4b12      	ldr	r3, [pc, #72]	@ (800c368 <HAL_RCC_GetClockConfig+0x5c>)
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	f003 0203 	and.w	r2, r3, #3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c328:	4b0f      	ldr	r3, [pc, #60]	@ (800c368 <HAL_RCC_GetClockConfig+0x5c>)
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c334:	4b0c      	ldr	r3, [pc, #48]	@ (800c368 <HAL_RCC_GetClockConfig+0x5c>)
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c340:	4b09      	ldr	r3, [pc, #36]	@ (800c368 <HAL_RCC_GetClockConfig+0x5c>)
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	08db      	lsrs	r3, r3, #3
 800c346:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c34e:	4b07      	ldr	r3, [pc, #28]	@ (800c36c <HAL_RCC_GetClockConfig+0x60>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 020f 	and.w	r2, r3, #15
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	601a      	str	r2, [r3, #0]
}
 800c35a:	bf00      	nop
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	40023800 	.word	0x40023800
 800c36c:	40023c00 	.word	0x40023c00

0800c370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c378:	2300      	movs	r3, #0
 800c37a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c388:	2300      	movs	r3, #0
 800c38a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d012      	beq.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c398:	4b69      	ldr	r3, [pc, #420]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	4a68      	ldr	r2, [pc, #416]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c39e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c3a2:	6093      	str	r3, [r2, #8]
 800c3a4:	4b66      	ldr	r3, [pc, #408]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3a6:	689a      	ldr	r2, [r3, #8]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3ac:	4964      	ldr	r1, [pc, #400]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d017      	beq.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c3ca:	4b5d      	ldr	r3, [pc, #372]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3d8:	4959      	ldr	r1, [pc, #356]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3e8:	d101      	bne.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c402:	2b00      	cmp	r3, #0
 800c404:	d017      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c406:	4b4e      	ldr	r3, [pc, #312]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c40c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c414:	494a      	ldr	r1, [pc, #296]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c416:	4313      	orrs	r3, r2
 800c418:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c424:	d101      	bne.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c426:	2301      	movs	r3, #1
 800c428:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d101      	bne.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c432:	2301      	movs	r3, #1
 800c434:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c442:	2301      	movs	r3, #1
 800c444:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 0320 	and.w	r3, r3, #32
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f000 808b 	beq.w	800c56a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c454:	4b3a      	ldr	r3, [pc, #232]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c458:	4a39      	ldr	r2, [pc, #228]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c45a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c45e:	6413      	str	r3, [r2, #64]	@ 0x40
 800c460:	4b37      	ldr	r3, [pc, #220]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c468:	60bb      	str	r3, [r7, #8]
 800c46a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c46c:	4b35      	ldr	r3, [pc, #212]	@ (800c544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a34      	ldr	r2, [pc, #208]	@ (800c544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c478:	f7fa fd88 	bl	8006f8c <HAL_GetTick>
 800c47c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c47e:	e008      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c480:	f7fa fd84 	bl	8006f8c <HAL_GetTick>
 800c484:	4602      	mov	r2, r0
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	2b64      	cmp	r3, #100	@ 0x64
 800c48c:	d901      	bls.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c48e:	2303      	movs	r3, #3
 800c490:	e38f      	b.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c492:	4b2c      	ldr	r3, [pc, #176]	@ (800c544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d0f0      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c49e:	4b28      	ldr	r3, [pc, #160]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d035      	beq.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d02e      	beq.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c4bc:	4b20      	ldr	r3, [pc, #128]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c4c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4ca:	4a1d      	ldr	r2, [pc, #116]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c4d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c4d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4d6:	4a1a      	ldr	r2, [pc, #104]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c4de:	4a18      	ldr	r2, [pc, #96]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c4e4:	4b16      	ldr	r3, [pc, #88]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4e8:	f003 0301 	and.w	r3, r3, #1
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d114      	bne.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4f0:	f7fa fd4c 	bl	8006f8c <HAL_GetTick>
 800c4f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4f6:	e00a      	b.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4f8:	f7fa fd48 	bl	8006f8c <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c506:	4293      	cmp	r3, r2
 800c508:	d901      	bls.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c50a:	2303      	movs	r3, #3
 800c50c:	e351      	b.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c50e:	4b0c      	ldr	r3, [pc, #48]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c512:	f003 0302 	and.w	r3, r3, #2
 800c516:	2b00      	cmp	r3, #0
 800c518:	d0ee      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c51e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c526:	d111      	bne.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c528:	4b05      	ldr	r3, [pc, #20]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c534:	4b04      	ldr	r3, [pc, #16]	@ (800c548 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c536:	400b      	ands	r3, r1
 800c538:	4901      	ldr	r1, [pc, #4]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c53a:	4313      	orrs	r3, r2
 800c53c:	608b      	str	r3, [r1, #8]
 800c53e:	e00b      	b.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c540:	40023800 	.word	0x40023800
 800c544:	40007000 	.word	0x40007000
 800c548:	0ffffcff 	.word	0x0ffffcff
 800c54c:	4bac      	ldr	r3, [pc, #688]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	4aab      	ldr	r2, [pc, #684]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c552:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800c556:	6093      	str	r3, [r2, #8]
 800c558:	4ba9      	ldr	r3, [pc, #676]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c55a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c564:	49a6      	ldr	r1, [pc, #664]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c566:	4313      	orrs	r3, r2
 800c568:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 0310 	and.w	r3, r3, #16
 800c572:	2b00      	cmp	r3, #0
 800c574:	d010      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c576:	4ba2      	ldr	r3, [pc, #648]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c57c:	4aa0      	ldr	r2, [pc, #640]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c57e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c582:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c586:	4b9e      	ldr	r3, [pc, #632]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c588:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c590:	499b      	ldr	r1, [pc, #620]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c592:	4313      	orrs	r3, r2
 800c594:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00a      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c5a4:	4b96      	ldr	r3, [pc, #600]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5b2:	4993      	ldr	r1, [pc, #588]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00a      	beq.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c5c6:	4b8e      	ldr	r3, [pc, #568]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c5d4:	498a      	ldr	r1, [pc, #552]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00a      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c5e8:	4b85      	ldr	r3, [pc, #532]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5f6:	4982      	ldr	r1, [pc, #520]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c60a:	4b7d      	ldr	r3, [pc, #500]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c60c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c610:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c618:	4979      	ldr	r1, [pc, #484]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00a      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c62c:	4b74      	ldr	r3, [pc, #464]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c632:	f023 0203 	bic.w	r2, r3, #3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c63a:	4971      	ldr	r1, [pc, #452]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c63c:	4313      	orrs	r3, r2
 800c63e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00a      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c64e:	4b6c      	ldr	r3, [pc, #432]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c654:	f023 020c 	bic.w	r2, r3, #12
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c65c:	4968      	ldr	r1, [pc, #416]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c65e:	4313      	orrs	r3, r2
 800c660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00a      	beq.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c670:	4b63      	ldr	r3, [pc, #396]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c676:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c67e:	4960      	ldr	r1, [pc, #384]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c680:	4313      	orrs	r3, r2
 800c682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00a      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c692:	4b5b      	ldr	r3, [pc, #364]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c698:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6a0:	4957      	ldr	r1, [pc, #348]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00a      	beq.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c6b4:	4b52      	ldr	r3, [pc, #328]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6c2:	494f      	ldr	r1, [pc, #316]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00a      	beq.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c6d6:	4b4a      	ldr	r3, [pc, #296]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6e4:	4946      	ldr	r1, [pc, #280]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00a      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c6f8:	4b41      	ldr	r3, [pc, #260]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c706:	493e      	ldr	r1, [pc, #248]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c708:	4313      	orrs	r3, r2
 800c70a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00a      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c71a:	4b39      	ldr	r3, [pc, #228]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c720:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c728:	4935      	ldr	r1, [pc, #212]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c72a:	4313      	orrs	r3, r2
 800c72c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00a      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c73c:	4b30      	ldr	r3, [pc, #192]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c742:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c74a:	492d      	ldr	r1, [pc, #180]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c74c:	4313      	orrs	r3, r2
 800c74e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d011      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c75e:	4b28      	ldr	r3, [pc, #160]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c764:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c76c:	4924      	ldr	r1, [pc, #144]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c77c:	d101      	bne.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c77e:	2301      	movs	r3, #1
 800c780:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f003 0308 	and.w	r3, r3, #8
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c78e:	2301      	movs	r3, #1
 800c790:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00a      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c79e:	4b18      	ldr	r3, [pc, #96]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ac:	4914      	ldr	r1, [pc, #80]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00b      	beq.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c7c0:	4b0f      	ldr	r3, [pc, #60]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c7c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7d0:	490b      	ldr	r1, [pc, #44]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00f      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c7e4:	4b06      	ldr	r3, [pc, #24]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7ea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7f4:	4902      	ldr	r1, [pc, #8]	@ (800c800 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c7fc:	e002      	b.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800c7fe:	bf00      	nop
 800c800:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00b      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c810:	4b8a      	ldr	r3, [pc, #552]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c816:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c820:	4986      	ldr	r1, [pc, #536]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c822:	4313      	orrs	r3, r2
 800c824:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00b      	beq.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c834:	4b81      	ldr	r3, [pc, #516]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c83a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c844:	497d      	ldr	r1, [pc, #500]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c846:	4313      	orrs	r3, r2
 800c848:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d006      	beq.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 80d6 	beq.w	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c860:	4b76      	ldr	r3, [pc, #472]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a75      	ldr	r2, [pc, #468]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c866:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c86a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c86c:	f7fa fb8e 	bl	8006f8c <HAL_GetTick>
 800c870:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c872:	e008      	b.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c874:	f7fa fb8a 	bl	8006f8c <HAL_GetTick>
 800c878:	4602      	mov	r2, r0
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	2b64      	cmp	r3, #100	@ 0x64
 800c880:	d901      	bls.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c882:	2303      	movs	r3, #3
 800c884:	e195      	b.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c886:	4b6d      	ldr	r3, [pc, #436]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1f0      	bne.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f003 0301 	and.w	r3, r3, #1
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d021      	beq.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d11d      	bne.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c8a6:	4b65      	ldr	r3, [pc, #404]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8ac:	0c1b      	lsrs	r3, r3, #16
 800c8ae:	f003 0303 	and.w	r3, r3, #3
 800c8b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c8b4:	4b61      	ldr	r3, [pc, #388]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c8b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8ba:	0e1b      	lsrs	r3, r3, #24
 800c8bc:	f003 030f 	and.w	r3, r3, #15
 800c8c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	019a      	lsls	r2, r3, #6
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	041b      	lsls	r3, r3, #16
 800c8cc:	431a      	orrs	r2, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	061b      	lsls	r3, r3, #24
 800c8d2:	431a      	orrs	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	071b      	lsls	r3, r3, #28
 800c8da:	4958      	ldr	r1, [pc, #352]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d004      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8f6:	d00a      	beq.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c900:	2b00      	cmp	r3, #0
 800c902:	d02e      	beq.n	800c962 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c90c:	d129      	bne.n	800c962 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c90e:	4b4b      	ldr	r3, [pc, #300]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c914:	0c1b      	lsrs	r3, r3, #16
 800c916:	f003 0303 	and.w	r3, r3, #3
 800c91a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c91c:	4b47      	ldr	r3, [pc, #284]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c922:	0f1b      	lsrs	r3, r3, #28
 800c924:	f003 0307 	and.w	r3, r3, #7
 800c928:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	019a      	lsls	r2, r3, #6
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	041b      	lsls	r3, r3, #16
 800c934:	431a      	orrs	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	061b      	lsls	r3, r3, #24
 800c93c:	431a      	orrs	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	071b      	lsls	r3, r3, #28
 800c942:	493e      	ldr	r1, [pc, #248]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c944:	4313      	orrs	r3, r2
 800c946:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c94a:	4b3c      	ldr	r3, [pc, #240]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c94c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c950:	f023 021f 	bic.w	r2, r3, #31
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c958:	3b01      	subs	r3, #1
 800c95a:	4938      	ldr	r1, [pc, #224]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c95c:	4313      	orrs	r3, r2
 800c95e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d01d      	beq.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c96e:	4b33      	ldr	r3, [pc, #204]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c974:	0e1b      	lsrs	r3, r3, #24
 800c976:	f003 030f 	and.w	r3, r3, #15
 800c97a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c97c:	4b2f      	ldr	r3, [pc, #188]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c982:	0f1b      	lsrs	r3, r3, #28
 800c984:	f003 0307 	and.w	r3, r3, #7
 800c988:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	019a      	lsls	r2, r3, #6
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	041b      	lsls	r3, r3, #16
 800c996:	431a      	orrs	r2, r3
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	061b      	lsls	r3, r3, #24
 800c99c:	431a      	orrs	r2, r3
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	071b      	lsls	r3, r3, #28
 800c9a2:	4926      	ldr	r1, [pc, #152]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d011      	beq.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	019a      	lsls	r2, r3, #6
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	041b      	lsls	r3, r3, #16
 800c9c2:	431a      	orrs	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	061b      	lsls	r3, r3, #24
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	071b      	lsls	r3, r3, #28
 800c9d2:	491a      	ldr	r1, [pc, #104]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c9da:	4b18      	ldr	r3, [pc, #96]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a17      	ldr	r2, [pc, #92]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c9e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c9e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9e6:	f7fa fad1 	bl	8006f8c <HAL_GetTick>
 800c9ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c9ec:	e008      	b.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c9ee:	f7fa facd 	bl	8006f8c <HAL_GetTick>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	2b64      	cmp	r3, #100	@ 0x64
 800c9fa:	d901      	bls.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	e0d8      	b.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca00:	4b0e      	ldr	r3, [pc, #56]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d0f0      	beq.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	f040 80ce 	bne.w	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ca14:	4b09      	ldr	r3, [pc, #36]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a08      	ldr	r2, [pc, #32]	@ (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ca1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca20:	f7fa fab4 	bl	8006f8c <HAL_GetTick>
 800ca24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca26:	e00b      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ca28:	f7fa fab0 	bl	8006f8c <HAL_GetTick>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	2b64      	cmp	r3, #100	@ 0x64
 800ca34:	d904      	bls.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca36:	2303      	movs	r3, #3
 800ca38:	e0bb      	b.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ca3a:	bf00      	nop
 800ca3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca40:	4b5e      	ldr	r3, [pc, #376]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca4c:	d0ec      	beq.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d003      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d009      	beq.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d02e      	beq.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d12a      	bne.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ca76:	4b51      	ldr	r3, [pc, #324]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca7c:	0c1b      	lsrs	r3, r3, #16
 800ca7e:	f003 0303 	and.w	r3, r3, #3
 800ca82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ca84:	4b4d      	ldr	r3, [pc, #308]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca8a:	0f1b      	lsrs	r3, r3, #28
 800ca8c:	f003 0307 	and.w	r3, r3, #7
 800ca90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	019a      	lsls	r2, r3, #6
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	041b      	lsls	r3, r3, #16
 800ca9c:	431a      	orrs	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	061b      	lsls	r3, r3, #24
 800caa4:	431a      	orrs	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	071b      	lsls	r3, r3, #28
 800caaa:	4944      	ldr	r1, [pc, #272]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800caac:	4313      	orrs	r3, r2
 800caae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cab2:	4b42      	ldr	r3, [pc, #264]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cab8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac0:	3b01      	subs	r3, #1
 800cac2:	021b      	lsls	r3, r3, #8
 800cac4:	493d      	ldr	r1, [pc, #244]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cac6:	4313      	orrs	r3, r2
 800cac8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d022      	beq.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cadc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cae0:	d11d      	bne.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cae2:	4b36      	ldr	r3, [pc, #216]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cae8:	0e1b      	lsrs	r3, r3, #24
 800caea:	f003 030f 	and.w	r3, r3, #15
 800caee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800caf0:	4b32      	ldr	r3, [pc, #200]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800caf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800caf6:	0f1b      	lsrs	r3, r3, #28
 800caf8:	f003 0307 	and.w	r3, r3, #7
 800cafc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	019a      	lsls	r2, r3, #6
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a1b      	ldr	r3, [r3, #32]
 800cb08:	041b      	lsls	r3, r3, #16
 800cb0a:	431a      	orrs	r2, r3
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	061b      	lsls	r3, r3, #24
 800cb10:	431a      	orrs	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	071b      	lsls	r3, r3, #28
 800cb16:	4929      	ldr	r1, [pc, #164]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 0308 	and.w	r3, r3, #8
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d028      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb2a:	4b24      	ldr	r3, [pc, #144]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cb2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb30:	0e1b      	lsrs	r3, r3, #24
 800cb32:	f003 030f 	and.w	r3, r3, #15
 800cb36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cb38:	4b20      	ldr	r3, [pc, #128]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb3e:	0c1b      	lsrs	r3, r3, #16
 800cb40:	f003 0303 	and.w	r3, r3, #3
 800cb44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	019a      	lsls	r2, r3, #6
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	041b      	lsls	r3, r3, #16
 800cb50:	431a      	orrs	r2, r3
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	061b      	lsls	r3, r3, #24
 800cb56:	431a      	orrs	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	69db      	ldr	r3, [r3, #28]
 800cb5c:	071b      	lsls	r3, r3, #28
 800cb5e:	4917      	ldr	r1, [pc, #92]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cb60:	4313      	orrs	r3, r2
 800cb62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cb66:	4b15      	ldr	r3, [pc, #84]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cb68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb74:	4911      	ldr	r1, [pc, #68]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cb76:	4313      	orrs	r3, r2
 800cb78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cb7c:	4b0f      	ldr	r3, [pc, #60]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a0e      	ldr	r2, [pc, #56]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cb82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb88:	f7fa fa00 	bl	8006f8c <HAL_GetTick>
 800cb8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb8e:	e008      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cb90:	f7fa f9fc 	bl	8006f8c <HAL_GetTick>
 800cb94:	4602      	mov	r2, r0
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	2b64      	cmp	r3, #100	@ 0x64
 800cb9c:	d901      	bls.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e007      	b.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cba2:	4b06      	ldr	r3, [pc, #24]	@ (800cbbc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cbaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbae:	d1ef      	bne.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3720      	adds	r7, #32
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	40023800 	.word	0x40023800

0800cbc0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a8c      	ldr	r2, [pc, #560]	@ (800ce00 <HAL_RCCEx_GetPeriphCLKConfig+0x240>)
 800cbd0:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800cbd2:	4b8c      	ldr	r3, [pc, #560]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cbd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbd8:	099b      	lsrs	r3, r3, #6
 800cbda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cbe2:	4b88      	ldr	r3, [pc, #544]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cbe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbe8:	0c1b      	lsrs	r3, r3, #16
 800cbea:	f003 0203 	and.w	r2, r3, #3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cbf2:	4b84      	ldr	r3, [pc, #528]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cbf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbf8:	0e1b      	lsrs	r3, r3, #24
 800cbfa:	f003 020f 	and.w	r2, r3, #15
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cc02:	4b80      	ldr	r3, [pc, #512]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc08:	0f1b      	lsrs	r3, r3, #28
 800cc0a:	f003 0207 	and.w	r2, r3, #7
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800cc12:	4b7c      	ldr	r3, [pc, #496]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc18:	099b      	lsrs	r3, r3, #6
 800cc1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cc22:	4b78      	ldr	r3, [pc, #480]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc28:	0c1b      	lsrs	r3, r3, #16
 800cc2a:	f003 0203 	and.w	r2, r3, #3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cc32:	4b74      	ldr	r3, [pc, #464]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc38:	0e1b      	lsrs	r3, r3, #24
 800cc3a:	f003 020f 	and.w	r2, r3, #15
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cc42:	4b70      	ldr	r3, [pc, #448]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc48:	0f1b      	lsrs	r3, r3, #28
 800cc4a:	f003 0207 	and.w	r2, r3, #7
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800cc52:	4b6c      	ldr	r3, [pc, #432]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc58:	f003 021f 	and.w	r2, r3, #31
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800cc60:	4b68      	ldr	r3, [pc, #416]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc66:	0a1b      	lsrs	r3, r3, #8
 800cc68:	f003 021f 	and.w	r2, r3, #31
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800cc70:	4b64      	ldr	r3, [pc, #400]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc76:	0c1b      	lsrs	r3, r3, #16
 800cc78:	f003 0203 	and.w	r2, r3, #3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800cc80:	4b60      	ldr	r3, [pc, #384]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc86:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800cc8e:	4b5d      	ldr	r3, [pc, #372]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc94:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800cc9c:	4b59      	ldr	r3, [pc, #356]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800cca8:	4b56      	ldr	r3, [pc, #344]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800ccb6:	4b53      	ldr	r3, [pc, #332]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccbc:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800ccc4:	4b4f      	ldr	r3, [pc, #316]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccca:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800ccd2:	4b4c      	ldr	r3, [pc, #304]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccd8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800cce0:	4b48      	ldr	r3, [pc, #288]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cce6:	f003 0203 	and.w	r2, r3, #3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800ccee:	4b45      	ldr	r3, [pc, #276]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccf4:	f003 020c 	and.w	r2, r3, #12
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800ccfc:	4b41      	ldr	r3, [pc, #260]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd02:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800cd0a:	4b3e      	ldr	r3, [pc, #248]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd10:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800cd18:	4b3a      	ldr	r3, [pc, #232]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd1e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800cd26:	4b37      	ldr	r3, [pc, #220]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd2c:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800cd34:	4b33      	ldr	r3, [pc, #204]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd3a:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800cd42:	4b30      	ldr	r3, [pc, #192]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd48:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cd50:	4b2c      	ldr	r3, [pc, #176]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd56:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800cd5e:	4b29      	ldr	r3, [pc, #164]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd64:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800cd6c:	4b25      	ldr	r3, [pc, #148]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd72:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800cd7a:	4b22      	ldr	r3, [pc, #136]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd80:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800cd8a:	4b1e      	ldr	r3, [pc, #120]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd90:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800cd9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cda0:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800cdaa:	4b16      	ldr	r3, [pc, #88]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cdac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdb0:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800cdba:	4b12      	ldr	r3, [pc, #72]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cdc2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800cdc4:	4b0f      	ldr	r3, [pc, #60]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cdc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdc8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	431a      	orrs	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800cdd4:	4b0b      	ldr	r3, [pc, #44]	@ (800ce04 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cdd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d103      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKConfig+0x22a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800cde8:	e003      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKConfig+0x232>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cdf0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800cdf2:	bf00      	nop
 800cdf4:	3714      	adds	r7, #20
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	1cfffff1 	.word	0x1cfffff1
 800ce04:	40023800 	.word	0x40023800

0800ce08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ce26:	f040 80a4 	bne.w	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800ce2a:	4ba6      	ldr	r3, [pc, #664]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce30:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ce38:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ce40:	f000 808a 	beq.w	800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ce4a:	f200 8091 	bhi.w	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce54:	d07d      	beq.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce5c:	f200 8088 	bhi.w	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d004      	beq.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce6c:	d039      	beq.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ce6e:	e07f      	b.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ce70:	4b94      	ldr	r3, [pc, #592]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d108      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ce7c:	4b91      	ldr	r3, [pc, #580]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce84:	4a90      	ldr	r2, [pc, #576]	@ (800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ce86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce8a:	613b      	str	r3, [r7, #16]
 800ce8c:	e007      	b.n	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ce8e:	4b8d      	ldr	r3, [pc, #564]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce96:	4a8d      	ldr	r2, [pc, #564]	@ (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800ce98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce9c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ce9e:	4b89      	ldr	r3, [pc, #548]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cea4:	0e1b      	lsrs	r3, r3, #24
 800cea6:	f003 030f 	and.w	r3, r3, #15
 800ceaa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ceac:	4b85      	ldr	r3, [pc, #532]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ceae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ceb2:	099b      	lsrs	r3, r3, #6
 800ceb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	fb03 f202 	mul.w	r2, r3, r2
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec4:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800cec6:	4b7f      	ldr	r3, [pc, #508]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cecc:	0a1b      	lsrs	r3, r3, #8
 800cece:	f003 031f 	and.w	r3, r3, #31
 800ced2:	3301      	adds	r3, #1
 800ced4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	fbb2 f3f3 	udiv	r3, r2, r3
 800cede:	617b      	str	r3, [r7, #20]
        break;
 800cee0:	e047      	b.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cee2:	4b78      	ldr	r3, [pc, #480]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d108      	bne.n	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ceee:	4b75      	ldr	r3, [pc, #468]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cef6:	4a74      	ldr	r2, [pc, #464]	@ (800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cef8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cefc:	613b      	str	r3, [r7, #16]
 800cefe:	e007      	b.n	800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cf00:	4b70      	ldr	r3, [pc, #448]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf08:	4a70      	ldr	r2, [pc, #448]	@ (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800cf0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf0e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800cf10:	4b6c      	ldr	r3, [pc, #432]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf16:	0e1b      	lsrs	r3, r3, #24
 800cf18:	f003 030f 	and.w	r3, r3, #15
 800cf1c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800cf1e:	4b69      	ldr	r3, [pc, #420]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf24:	099b      	lsrs	r3, r3, #6
 800cf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	fb03 f202 	mul.w	r2, r3, r2
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf36:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800cf38:	4b62      	ldr	r3, [pc, #392]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf3e:	f003 031f 	and.w	r3, r3, #31
 800cf42:	3301      	adds	r3, #1
 800cf44:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cf46:	697a      	ldr	r2, [r7, #20]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf4e:	617b      	str	r3, [r7, #20]
        break;
 800cf50:	e00f      	b.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf52:	4b5f      	ldr	r3, [pc, #380]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800cf54:	617b      	str	r3, [r7, #20]
        break;
 800cf56:	e00c      	b.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cf58:	4b5a      	ldr	r3, [pc, #360]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d102      	bne.n	800cf6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800cf64:	4b58      	ldr	r3, [pc, #352]	@ (800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cf66:	617b      	str	r3, [r7, #20]
        break;
 800cf68:	e003      	b.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800cf6a:	4b58      	ldr	r3, [pc, #352]	@ (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800cf6c:	617b      	str	r3, [r7, #20]
        break;
 800cf6e:	e000      	b.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 800cf70:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf78:	f040 80ad 	bne.w	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 800cf7c:	4b51      	ldr	r3, [pc, #324]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf82:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800cf8a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cf92:	f000 808a 	beq.w	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cf9c:	f200 809a 	bhi.w	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cfa6:	d07d      	beq.n	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cfae:	f200 8091 	bhi.w	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d004      	beq.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cfbe:	d039      	beq.n	800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800cfc0:	e088      	b.n	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cfc2:	4b40      	ldr	r3, [pc, #256]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d108      	bne.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800cfce:	4b3d      	ldr	r3, [pc, #244]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cfd6:	4a3c      	ldr	r2, [pc, #240]	@ (800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cfd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfdc:	613b      	str	r3, [r7, #16]
 800cfde:	e007      	b.n	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cfe0:	4b38      	ldr	r3, [pc, #224]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cfe8:	4a38      	ldr	r2, [pc, #224]	@ (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800cfea:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800cff0:	4b34      	ldr	r3, [pc, #208]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cff6:	0e1b      	lsrs	r3, r3, #24
 800cff8:	f003 030f 	and.w	r3, r3, #15
 800cffc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800cffe:	4b31      	ldr	r3, [pc, #196]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d004:	099b      	lsrs	r3, r3, #6
 800d006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d00a:	693a      	ldr	r2, [r7, #16]
 800d00c:	fb03 f202 	mul.w	r2, r3, r2
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	fbb2 f3f3 	udiv	r3, r2, r3
 800d016:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d018:	4b2a      	ldr	r3, [pc, #168]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d01a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d01e:	0a1b      	lsrs	r3, r3, #8
 800d020:	f003 031f 	and.w	r3, r3, #31
 800d024:	3301      	adds	r3, #1
 800d026:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d028:	697a      	ldr	r2, [r7, #20]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d030:	617b      	str	r3, [r7, #20]
        break;
 800d032:	e050      	b.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d034:	4b23      	ldr	r3, [pc, #140]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d108      	bne.n	800d052 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d040:	4b20      	ldr	r3, [pc, #128]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d048:	4a1f      	ldr	r2, [pc, #124]	@ (800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d04e:	613b      	str	r3, [r7, #16]
 800d050:	e007      	b.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d052:	4b1c      	ldr	r3, [pc, #112]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d05a:	4a1c      	ldr	r2, [pc, #112]	@ (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d060:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d062:	4b18      	ldr	r3, [pc, #96]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d068:	0e1b      	lsrs	r3, r3, #24
 800d06a:	f003 030f 	and.w	r3, r3, #15
 800d06e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d070:	4b14      	ldr	r3, [pc, #80]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d076:	099b      	lsrs	r3, r3, #6
 800d078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d07c:	693a      	ldr	r2, [r7, #16]
 800d07e:	fb03 f202 	mul.w	r2, r3, r2
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	fbb2 f3f3 	udiv	r3, r2, r3
 800d088:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d08a:	4b0e      	ldr	r3, [pc, #56]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d090:	f003 031f 	and.w	r3, r3, #31
 800d094:	3301      	adds	r3, #1
 800d096:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d098:	697a      	ldr	r2, [r7, #20]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0a0:	617b      	str	r3, [r7, #20]
        break;
 800d0a2:	e018      	b.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800d0a6:	617b      	str	r3, [r7, #20]
        break;
 800d0a8:	e015      	b.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d0aa:	4b06      	ldr	r3, [pc, #24]	@ (800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d102      	bne.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800d0b6:	4b04      	ldr	r3, [pc, #16]	@ (800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d0b8:	617b      	str	r3, [r7, #20]
        break;
 800d0ba:	e00c      	b.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 800d0bc:	4b03      	ldr	r3, [pc, #12]	@ (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d0be:	617b      	str	r3, [r7, #20]
        break;
 800d0c0:	e009      	b.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800d0c2:	bf00      	nop
 800d0c4:	40023800 	.word	0x40023800
 800d0c8:	00f42400 	.word	0x00f42400
 800d0cc:	017d7840 	.word	0x017d7840
 800d0d0:	00bb8000 	.word	0x00bb8000
        break;
 800d0d4:	bf00      	nop
      }
    }
  }

  return frequency;
 800d0d6:	697b      	ldr	r3, [r7, #20]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	371c      	adds	r7, #28
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b088      	sub	sp, #32
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	e156      	b.n	800d3b0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d106      	bne.n	800d11c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7f5 fb8a 	bl	8002830 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2202      	movs	r2, #2
 800d120:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fb13 	bl	800d750 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d00c      	beq.n	800d14c <HAL_SAI_Init+0x68>
 800d132:	2b02      	cmp	r3, #2
 800d134:	d80d      	bhi.n	800d152 <HAL_SAI_Init+0x6e>
 800d136:	2b00      	cmp	r3, #0
 800d138:	d002      	beq.n	800d140 <HAL_SAI_Init+0x5c>
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d003      	beq.n	800d146 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800d13e:	e008      	b.n	800d152 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d140:	2300      	movs	r3, #0
 800d142:	61fb      	str	r3, [r7, #28]
      break;
 800d144:	e006      	b.n	800d154 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d146:	2310      	movs	r3, #16
 800d148:	61fb      	str	r3, [r7, #28]
      break;
 800d14a:	e003      	b.n	800d154 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d14c:	2320      	movs	r3, #32
 800d14e:	61fb      	str	r3, [r7, #28]
      break;
 800d150:	e000      	b.n	800d154 <HAL_SAI_Init+0x70>
      break;
 800d152:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d81e      	bhi.n	800d19a <HAL_SAI_Init+0xb6>
 800d15c:	a201      	add	r2, pc, #4	@ (adr r2, 800d164 <HAL_SAI_Init+0x80>)
 800d15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d162:	bf00      	nop
 800d164:	0800d175 	.word	0x0800d175
 800d168:	0800d17b 	.word	0x0800d17b
 800d16c:	0800d183 	.word	0x0800d183
 800d170:	0800d18b 	.word	0x0800d18b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	617b      	str	r3, [r7, #20]
    }
    break;
 800d178:	e010      	b.n	800d19c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d17a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d17e:	617b      	str	r3, [r7, #20]
    }
    break;
 800d180:	e00c      	b.n	800d19c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d186:	617b      	str	r3, [r7, #20]
    }
    break;
 800d188:	e008      	b.n	800d19c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d18a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d18e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	f043 0301 	orr.w	r3, r3, #1
 800d196:	61fb      	str	r3, [r7, #28]
    }
    break;
 800d198:	e000      	b.n	800d19c <HAL_SAI_Init+0xb8>
    default:
      break;
 800d19a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a85      	ldr	r2, [pc, #532]	@ (800d3b8 <HAL_SAI_Init+0x2d4>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d004      	beq.n	800d1b0 <HAL_SAI_Init+0xcc>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a84      	ldr	r2, [pc, #528]	@ (800d3bc <HAL_SAI_Init+0x2d8>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d103      	bne.n	800d1b8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d1b0:	4a83      	ldr	r2, [pc, #524]	@ (800d3c0 <HAL_SAI_Init+0x2dc>)
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	6013      	str	r3, [r2, #0]
 800d1b6:	e002      	b.n	800d1be <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d1b8:	4a82      	ldr	r2, [pc, #520]	@ (800d3c4 <HAL_SAI_Init+0x2e0>)
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d04c      	beq.n	800d260 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a7a      	ldr	r2, [pc, #488]	@ (800d3b8 <HAL_SAI_Init+0x2d4>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d004      	beq.n	800d1de <HAL_SAI_Init+0xfa>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a78      	ldr	r2, [pc, #480]	@ (800d3bc <HAL_SAI_Init+0x2d8>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d104      	bne.n	800d1e8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d1de:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d1e2:	f7ff fe11 	bl	800ce08 <HAL_RCCEx_GetPeriphCLKFreq>
 800d1e6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a76      	ldr	r2, [pc, #472]	@ (800d3c8 <HAL_SAI_Init+0x2e4>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d004      	beq.n	800d1fc <HAL_SAI_Init+0x118>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a75      	ldr	r2, [pc, #468]	@ (800d3cc <HAL_SAI_Init+0x2e8>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d104      	bne.n	800d206 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d1fc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d200:	f7ff fe02 	bl	800ce08 <HAL_RCCEx_GetPeriphCLKFreq>
 800d204:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	4613      	mov	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	005b      	lsls	r3, r3, #1
 800d210:	461a      	mov	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	69db      	ldr	r3, [r3, #28]
 800d216:	025b      	lsls	r3, r3, #9
 800d218:	fbb2 f3f3 	udiv	r3, r2, r3
 800d21c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	4a6b      	ldr	r2, [pc, #428]	@ (800d3d0 <HAL_SAI_Init+0x2ec>)
 800d222:	fba2 2303 	umull	r2, r3, r2, r3
 800d226:	08da      	lsrs	r2, r3, #3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d22c:	68f9      	ldr	r1, [r7, #12]
 800d22e:	4b68      	ldr	r3, [pc, #416]	@ (800d3d0 <HAL_SAI_Init+0x2ec>)
 800d230:	fba3 2301 	umull	r2, r3, r3, r1
 800d234:	08da      	lsrs	r2, r3, #3
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	1aca      	subs	r2, r1, r3
 800d240:	2a08      	cmp	r2, #8
 800d242:	d904      	bls.n	800d24e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a1b      	ldr	r3, [r3, #32]
 800d248:	1c5a      	adds	r2, r3, #1
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d252:	2b04      	cmp	r3, #4
 800d254:	d104      	bne.n	800d260 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	085a      	lsrs	r2, r3, #1
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d003      	beq.n	800d270 <HAL_SAI_Init+0x18c>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	d109      	bne.n	800d284 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d274:	2b01      	cmp	r3, #1
 800d276:	d101      	bne.n	800d27c <HAL_SAI_Init+0x198>
 800d278:	2300      	movs	r3, #0
 800d27a:	e001      	b.n	800d280 <HAL_SAI_Init+0x19c>
 800d27c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d280:	61bb      	str	r3, [r7, #24]
 800d282:	e008      	b.n	800d296 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d102      	bne.n	800d292 <HAL_SAI_Init+0x1ae>
 800d28c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d290:	e000      	b.n	800d294 <HAL_SAI_Init+0x1b0>
 800d292:	2300      	movs	r3, #0
 800d294:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	6819      	ldr	r1, [r3, #0]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	4b4c      	ldr	r3, [pc, #304]	@ (800d3d4 <HAL_SAI_Init+0x2f0>)
 800d2a2:	400b      	ands	r3, r1
 800d2a4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6819      	ldr	r1, [r3, #0]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685a      	ldr	r2, [r3, #4]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2ba:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2c0:	431a      	orrs	r2, r3
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800d2ce:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2da:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a1b      	ldr	r3, [r3, #32]
 800d2e0:	051b      	lsls	r3, r3, #20
 800d2e2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6859      	ldr	r1, [r3, #4]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	4b38      	ldr	r3, [pc, #224]	@ (800d3d8 <HAL_SAI_Init+0x2f4>)
 800d2f8:	400b      	ands	r3, r1
 800d2fa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6859      	ldr	r1, [r3, #4]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	699a      	ldr	r2, [r3, #24]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d30a:	431a      	orrs	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d310:	431a      	orrs	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	430a      	orrs	r2, r1
 800d318:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	6899      	ldr	r1, [r3, #8]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	4b2d      	ldr	r3, [pc, #180]	@ (800d3dc <HAL_SAI_Init+0x2f8>)
 800d326:	400b      	ands	r3, r1
 800d328:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6899      	ldr	r1, [r3, #8]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d334:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d33a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800d340:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800d346:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d34c:	3b01      	subs	r3, #1
 800d34e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d350:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	430a      	orrs	r2, r1
 800d358:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	68d9      	ldr	r1, [r3, #12]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800d368:	400b      	ands	r3, r1
 800d36a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	68d9      	ldr	r1, [r3, #12]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d37a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d380:	041b      	lsls	r3, r3, #16
 800d382:	431a      	orrs	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d388:	3b01      	subs	r3, #1
 800d38a:	021b      	lsls	r3, r3, #8
 800d38c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	430a      	orrs	r2, r1
 800d394:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	40015804 	.word	0x40015804
 800d3bc:	40015824 	.word	0x40015824
 800d3c0:	40015800 	.word	0x40015800
 800d3c4:	40015c00 	.word	0x40015c00
 800d3c8:	40015c04 	.word	0x40015c04
 800d3cc:	40015c24 	.word	0x40015c24
 800d3d0:	cccccccd 	.word	0xcccccccd
 800d3d4:	ff05c010 	.word	0xff05c010
 800d3d8:	ffff1ff0 	.word	0xffff1ff0
 800d3dc:	fff88000 	.word	0xfff88000

0800d3e0 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e027      	b.n	800d442 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2202      	movs	r2, #2
 800d3f6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2200      	movs	r2, #0
 800d400:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d40a:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f99f 	bl	800d750 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	685a      	ldr	r2, [r3, #4]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f042 0208 	orr.w	r2, r2, #8
 800d420:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7f5 fa50 	bl	80028c8 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2200      	movs	r2, #0
 800d434:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
	...

0800d44c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	4613      	mov	r3, r2
 800d458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d45a:	f7f9 fd97 	bl	8006f8c <HAL_GetTick>
 800d45e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d002      	beq.n	800d46c <HAL_SAI_Transmit_DMA+0x20>
 800d466:	88fb      	ldrh	r3, [r7, #6]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d101      	bne.n	800d470 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d46c:	2301      	movs	r3, #1
 800d46e:	e093      	b.n	800d598 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d476:	b2db      	uxtb	r3, r3
 800d478:	2b01      	cmp	r3, #1
 800d47a:	f040 808c 	bne.w	800d596 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d484:	2b01      	cmp	r3, #1
 800d486:	d101      	bne.n	800d48c <HAL_SAI_Transmit_DMA+0x40>
 800d488:	2302      	movs	r3, #2
 800d48a:	e085      	b.n	800d598 <HAL_SAI_Transmit_DMA+0x14c>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	88fa      	ldrh	r2, [r7, #6]
 800d49e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	88fa      	ldrh	r2, [r7, #6]
 800d4a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2212      	movs	r2, #18
 800d4b6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4be:	4a38      	ldr	r2, [pc, #224]	@ (800d5a0 <HAL_SAI_Transmit_DMA+0x154>)
 800d4c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4c6:	4a37      	ldr	r2, [pc, #220]	@ (800d5a4 <HAL_SAI_Transmit_DMA+0x158>)
 800d4c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4ce:	4a36      	ldr	r2, [pc, #216]	@ (800d5a8 <HAL_SAI_Transmit_DMA+0x15c>)
 800d4d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	331c      	adds	r3, #28
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d4f2:	f7fa f8a7 	bl	8007644 <HAL_DMA_Start_IT>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d005      	beq.n	800d508 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	e047      	b.n	800d598 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d508:	2100      	movs	r1, #0
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f000 f8ea 	bl	800d6e4 <SAI_InterruptFlag>
 800d510:	4601      	mov	r1, r0
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	691a      	ldr	r2, [r3, #16]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	430a      	orrs	r2, r1
 800d51e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d52e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d530:	e015      	b.n	800d55e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d532:	f7f9 fd2b 	bl	8006f8c <HAL_GetTick>
 800d536:	4602      	mov	r2, r0
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d540:	d90d      	bls.n	800d55e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d548:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800d55a:	2303      	movs	r3, #3
 800d55c:	e01c      	b.n	800d598 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	695b      	ldr	r3, [r3, #20]
 800d564:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d0e2      	beq.n	800d532 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d576:	2b00      	cmp	r3, #0
 800d578:	d107      	bne.n	800d58a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d588:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800d592:	2300      	movs	r3, #0
 800d594:	e000      	b.n	800d598 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800d596:	2302      	movs	r3, #2
  }
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3718      	adds	r7, #24
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	0800d821 	.word	0x0800d821
 800d5a4:	0800d7c1 	.word	0x0800d7c1
 800d5a8:	0800d8b9 	.word	0x0800d8b9

0800d5ac <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <HAL_SAI_Receive_DMA+0x1a>
 800d5c0:	88fb      	ldrh	r3, [r7, #6]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d101      	bne.n	800d5ca <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e074      	b.n	800d6b4 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d16d      	bne.n	800d6b2 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d101      	bne.n	800d5e4 <HAL_SAI_Receive_DMA+0x38>
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	e067      	b.n	800d6b4 <HAL_SAI_Receive_DMA+0x108>
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	88fa      	ldrh	r2, [r7, #6]
 800d5f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	88fa      	ldrh	r2, [r7, #6]
 800d5fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2222      	movs	r2, #34	@ 0x22
 800d60e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d616:	4a29      	ldr	r2, [pc, #164]	@ (800d6bc <HAL_SAI_Receive_DMA+0x110>)
 800d618:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d61e:	4a28      	ldr	r2, [pc, #160]	@ (800d6c0 <HAL_SAI_Receive_DMA+0x114>)
 800d620:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d626:	4a27      	ldr	r2, [pc, #156]	@ (800d6c4 <HAL_SAI_Receive_DMA+0x118>)
 800d628:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d62e:	2200      	movs	r2, #0
 800d630:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	331c      	adds	r3, #28
 800d63c:	4619      	mov	r1, r3
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d642:	461a      	mov	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d64a:	f7f9 fffb 	bl	8007644 <HAL_DMA_Start_IT>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d005      	beq.n	800d660 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2200      	movs	r2, #0
 800d658:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	e029      	b.n	800d6b4 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d660:	2100      	movs	r1, #0
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f000 f83e 	bl	800d6e4 <SAI_InterruptFlag>
 800d668:	4601      	mov	r1, r0
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	691a      	ldr	r2, [r3, #16]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	430a      	orrs	r2, r1
 800d676:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d686:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d692:	2b00      	cmp	r3, #0
 800d694:	d107      	bne.n	800d6a6 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d6a4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	e000      	b.n	800d6b4 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800d6b2:	2302      	movs	r3, #2
  }
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	0800d89d 	.word	0x0800d89d
 800d6c0:	0800d83d 	.word	0x0800d83d
 800d6c4:	0800d8b9 	.word	0x0800d8b9

0800d6c8 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d6d6:	b2db      	uxtb	r3, r3
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d103      	bne.n	800d700 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f043 0308 	orr.w	r3, r3, #8
 800d6fe:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d704:	2b08      	cmp	r3, #8
 800d706:	d10b      	bne.n	800d720 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d70c:	2b03      	cmp	r3, #3
 800d70e:	d003      	beq.n	800d718 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	2b01      	cmp	r3, #1
 800d716:	d103      	bne.n	800d720 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f043 0310 	orr.w	r3, r3, #16
 800d71e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	2b03      	cmp	r3, #3
 800d726:	d003      	beq.n	800d730 <SAI_InterruptFlag+0x4c>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	d104      	bne.n	800d73a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d736:	60fb      	str	r3, [r7, #12]
 800d738:	e003      	b.n	800d742 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f043 0304 	orr.w	r3, r3, #4
 800d740:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d742:	68fb      	ldr	r3, [r7, #12]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3714      	adds	r7, #20
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d758:	4b17      	ldr	r3, [pc, #92]	@ (800d7b8 <SAI_Disable+0x68>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a17      	ldr	r2, [pc, #92]	@ (800d7bc <SAI_Disable+0x6c>)
 800d75e:	fba2 2303 	umull	r2, r3, r2, r3
 800d762:	0b1b      	lsrs	r3, r3, #12
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d768:	2300      	movs	r3, #0
 800d76a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d77a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	1e5a      	subs	r2, r3, #1
 800d780:	60fa      	str	r2, [r7, #12]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d10a      	bne.n	800d79c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d78c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800d796:	2303      	movs	r3, #3
 800d798:	72fb      	strb	r3, [r7, #11]
      break;
 800d79a:	e006      	b.n	800d7aa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d1e8      	bne.n	800d77c <SAI_Disable+0x2c>

  return status;
 800d7aa:	7afb      	ldrb	r3, [r7, #11]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	20000014 	.word	0x20000014
 800d7bc:	95cbec1b 	.word	0x95cbec1b

0800d7c0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7cc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	69db      	ldr	r3, [r3, #28]
 800d7d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7d6:	d01c      	beq.n	800d812 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800d7ee:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f7ff ff76 	bl	800d6e4 <SAI_InterruptFlag>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	43d9      	mvns	r1, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	691a      	ldr	r2, [r3, #16]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	400a      	ands	r2, r1
 800d808:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f7f7 fbb1 	bl	8004f7a <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d818:	bf00      	nop
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d82c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f7f7 fbad 	bl	8004f8e <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d834:	bf00      	nop
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d848:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	69db      	ldr	r3, [r3, #28]
 800d84e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d852:	d01c      	beq.n	800d88e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800d862:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2200      	movs	r2, #0
 800d868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d86c:	2100      	movs	r1, #0
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f7ff ff38 	bl	800d6e4 <SAI_InterruptFlag>
 800d874:	4603      	mov	r3, r0
 800d876:	43d9      	mvns	r1, r3
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	691a      	ldr	r2, [r3, #16]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	400a      	ands	r2, r1
 800d884:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f7f7 fc9a 	bl	80051c8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d894:	bf00      	nop
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f7f7 fc82 	bl	80051b4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8c4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d004      	beq.n	800d8ea <SAI_DMAError+0x32>
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d112      	bne.n	800d910 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800d8f8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f7ff ff28 	bl	800d750 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2201      	movs	r2, #1
 800d904:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7f7 fb47 	bl	8004fa4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d916:	bf00      	nop
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d101      	bne.n	800d932 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d92e:	2301      	movs	r3, #1
 800d930:	e025      	b.n	800d97e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d106      	bne.n	800d94c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7f3 fb40 	bl	8000fcc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2202      	movs	r2, #2
 800d950:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3304      	adds	r3, #4
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f001 f83a 	bl	800e9d8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6818      	ldr	r0, [r3, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	461a      	mov	r2, r3
 800d96e:	6839      	ldr	r1, [r7, #0]
 800d970:	f001 f88e 	bl	800ea90 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b086      	sub	sp, #24
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	60f8      	str	r0, [r7, #12]
 800d98e:	60b9      	str	r1, [r7, #8]
 800d990:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d998:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d99a:	7dfb      	ldrb	r3, [r7, #23]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d101      	bne.n	800d9a4 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	e021      	b.n	800d9e8 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d002      	beq.n	800d9b0 <HAL_SDRAM_SendCommand+0x2a>
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
 800d9ac:	2b05      	cmp	r3, #5
 800d9ae:	d118      	bne.n	800d9e2 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	68b9      	ldr	r1, [r7, #8]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f001 f8cf 	bl	800eb64 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	d104      	bne.n	800d9d8 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2205      	movs	r2, #5
 800d9d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9d6:	e006      	b.n	800d9e6 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9e0:	e001      	b.n	800d9e6 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e000      	b.n	800d9e8 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800da00:	b2db      	uxtb	r3, r3
 800da02:	2b02      	cmp	r3, #2
 800da04:	d101      	bne.n	800da0a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800da06:	2302      	movs	r3, #2
 800da08:	e016      	b.n	800da38 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b01      	cmp	r3, #1
 800da14:	d10f      	bne.n	800da36 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2202      	movs	r2, #2
 800da1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	6839      	ldr	r1, [r7, #0]
 800da24:	4618      	mov	r0, r3
 800da26:	f001 f8c1 	bl	800ebac <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	e000      	b.n	800da38 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800da36:	2301      	movs	r3, #1
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3708      	adds	r7, #8
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d101      	bne.n	800da52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	e049      	b.n	800dae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d106      	bne.n	800da6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 f841 	bl	800daee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	3304      	adds	r3, #4
 800da7c:	4619      	mov	r1, r3
 800da7e:	4610      	mov	r0, r2
 800da80:	f000 fa00 	bl	800de84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800daf6:	bf00      	nop
 800daf8:	370c      	adds	r7, #12
 800dafa:	46bd      	mov	sp, r7
 800dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db00:	4770      	bx	lr
	...

0800db04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b01      	cmp	r3, #1
 800db16:	d001      	beq.n	800db1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e054      	b.n	800dbc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2202      	movs	r2, #2
 800db20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	68da      	ldr	r2, [r3, #12]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f042 0201 	orr.w	r2, r2, #1
 800db32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a26      	ldr	r2, [pc, #152]	@ (800dbd4 <HAL_TIM_Base_Start_IT+0xd0>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d022      	beq.n	800db84 <HAL_TIM_Base_Start_IT+0x80>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db46:	d01d      	beq.n	800db84 <HAL_TIM_Base_Start_IT+0x80>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a22      	ldr	r2, [pc, #136]	@ (800dbd8 <HAL_TIM_Base_Start_IT+0xd4>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d018      	beq.n	800db84 <HAL_TIM_Base_Start_IT+0x80>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a21      	ldr	r2, [pc, #132]	@ (800dbdc <HAL_TIM_Base_Start_IT+0xd8>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d013      	beq.n	800db84 <HAL_TIM_Base_Start_IT+0x80>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a1f      	ldr	r2, [pc, #124]	@ (800dbe0 <HAL_TIM_Base_Start_IT+0xdc>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d00e      	beq.n	800db84 <HAL_TIM_Base_Start_IT+0x80>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a1e      	ldr	r2, [pc, #120]	@ (800dbe4 <HAL_TIM_Base_Start_IT+0xe0>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d009      	beq.n	800db84 <HAL_TIM_Base_Start_IT+0x80>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a1c      	ldr	r2, [pc, #112]	@ (800dbe8 <HAL_TIM_Base_Start_IT+0xe4>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d004      	beq.n	800db84 <HAL_TIM_Base_Start_IT+0x80>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a1b      	ldr	r2, [pc, #108]	@ (800dbec <HAL_TIM_Base_Start_IT+0xe8>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d115      	bne.n	800dbb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	689a      	ldr	r2, [r3, #8]
 800db8a:	4b19      	ldr	r3, [pc, #100]	@ (800dbf0 <HAL_TIM_Base_Start_IT+0xec>)
 800db8c:	4013      	ands	r3, r2
 800db8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2b06      	cmp	r3, #6
 800db94:	d015      	beq.n	800dbc2 <HAL_TIM_Base_Start_IT+0xbe>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db9c:	d011      	beq.n	800dbc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f042 0201 	orr.w	r2, r2, #1
 800dbac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbae:	e008      	b.n	800dbc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f042 0201 	orr.w	r2, r2, #1
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	e000      	b.n	800dbc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	40010000 	.word	0x40010000
 800dbd8:	40000400 	.word	0x40000400
 800dbdc:	40000800 	.word	0x40000800
 800dbe0:	40000c00 	.word	0x40000c00
 800dbe4:	40010400 	.word	0x40010400
 800dbe8:	40014000 	.word	0x40014000
 800dbec:	40001800 	.word	0x40001800
 800dbf0:	00010007 	.word	0x00010007

0800dbf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	f003 0302 	and.w	r3, r3, #2
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	d122      	bne.n	800dc50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	f003 0302 	and.w	r3, r3, #2
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	d11b      	bne.n	800dc50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f06f 0202 	mvn.w	r2, #2
 800dc20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2201      	movs	r2, #1
 800dc26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	699b      	ldr	r3, [r3, #24]
 800dc2e:	f003 0303 	and.w	r3, r3, #3
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d003      	beq.n	800dc3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 f905 	bl	800de46 <HAL_TIM_IC_CaptureCallback>
 800dc3c:	e005      	b.n	800dc4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f8f7 	bl	800de32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 f908 	bl	800de5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	f003 0304 	and.w	r3, r3, #4
 800dc5a:	2b04      	cmp	r3, #4
 800dc5c:	d122      	bne.n	800dca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	f003 0304 	and.w	r3, r3, #4
 800dc68:	2b04      	cmp	r3, #4
 800dc6a:	d11b      	bne.n	800dca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f06f 0204 	mvn.w	r2, #4
 800dc74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2202      	movs	r2, #2
 800dc7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	699b      	ldr	r3, [r3, #24]
 800dc82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f8db 	bl	800de46 <HAL_TIM_IC_CaptureCallback>
 800dc90:	e005      	b.n	800dc9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f8cd 	bl	800de32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f8de 	bl	800de5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	f003 0308 	and.w	r3, r3, #8
 800dcae:	2b08      	cmp	r3, #8
 800dcb0:	d122      	bne.n	800dcf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	f003 0308 	and.w	r3, r3, #8
 800dcbc:	2b08      	cmp	r3, #8
 800dcbe:	d11b      	bne.n	800dcf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f06f 0208 	mvn.w	r2, #8
 800dcc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2204      	movs	r2, #4
 800dcce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	69db      	ldr	r3, [r3, #28]
 800dcd6:	f003 0303 	and.w	r3, r3, #3
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d003      	beq.n	800dce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f8b1 	bl	800de46 <HAL_TIM_IC_CaptureCallback>
 800dce4:	e005      	b.n	800dcf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f8a3 	bl	800de32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 f8b4 	bl	800de5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	691b      	ldr	r3, [r3, #16]
 800dcfe:	f003 0310 	and.w	r3, r3, #16
 800dd02:	2b10      	cmp	r3, #16
 800dd04:	d122      	bne.n	800dd4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f003 0310 	and.w	r3, r3, #16
 800dd10:	2b10      	cmp	r3, #16
 800dd12:	d11b      	bne.n	800dd4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f06f 0210 	mvn.w	r2, #16
 800dd1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2208      	movs	r2, #8
 800dd22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d003      	beq.n	800dd3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f887 	bl	800de46 <HAL_TIM_IC_CaptureCallback>
 800dd38:	e005      	b.n	800dd46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f879 	bl	800de32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 f88a 	bl	800de5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	f003 0301 	and.w	r3, r3, #1
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d10e      	bne.n	800dd78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d107      	bne.n	800dd78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f06f 0201 	mvn.w	r2, #1
 800dd70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7f4 fbd4 	bl	8002520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd82:	2b80      	cmp	r3, #128	@ 0x80
 800dd84:	d10e      	bne.n	800dda4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd90:	2b80      	cmp	r3, #128	@ 0x80
 800dd92:	d107      	bne.n	800dda4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800dd9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f91a 	bl	800dfd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ddb2:	d10e      	bne.n	800ddd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddbe:	2b80      	cmp	r3, #128	@ 0x80
 800ddc0:	d107      	bne.n	800ddd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ddca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f90d 	bl	800dfec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dddc:	2b40      	cmp	r3, #64	@ 0x40
 800ddde:	d10e      	bne.n	800ddfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddea:	2b40      	cmp	r3, #64	@ 0x40
 800ddec:	d107      	bne.n	800ddfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ddf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f838 	bl	800de6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	691b      	ldr	r3, [r3, #16]
 800de04:	f003 0320 	and.w	r3, r3, #32
 800de08:	2b20      	cmp	r3, #32
 800de0a:	d10e      	bne.n	800de2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	f003 0320 	and.w	r3, r3, #32
 800de16:	2b20      	cmp	r3, #32
 800de18:	d107      	bne.n	800de2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f06f 0220 	mvn.w	r2, #32
 800de22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 f8cd 	bl	800dfc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de2a:	bf00      	nop
 800de2c:	3708      	adds	r7, #8
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de32:	b480      	push	{r7}
 800de34:	b083      	sub	sp, #12
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800de3a:	bf00      	nop
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de46:	b480      	push	{r7}
 800de48:	b083      	sub	sp, #12
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de4e:	bf00      	nop
 800de50:	370c      	adds	r7, #12
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de5a:	b480      	push	{r7}
 800de5c:	b083      	sub	sp, #12
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de62:	bf00      	nop
 800de64:	370c      	adds	r7, #12
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de6e:	b480      	push	{r7}
 800de70:	b083      	sub	sp, #12
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de76:	bf00      	nop
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
	...

0800de84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	4a40      	ldr	r2, [pc, #256]	@ (800df98 <TIM_Base_SetConfig+0x114>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d013      	beq.n	800dec4 <TIM_Base_SetConfig+0x40>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dea2:	d00f      	beq.n	800dec4 <TIM_Base_SetConfig+0x40>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4a3d      	ldr	r2, [pc, #244]	@ (800df9c <TIM_Base_SetConfig+0x118>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d00b      	beq.n	800dec4 <TIM_Base_SetConfig+0x40>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4a3c      	ldr	r2, [pc, #240]	@ (800dfa0 <TIM_Base_SetConfig+0x11c>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d007      	beq.n	800dec4 <TIM_Base_SetConfig+0x40>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4a3b      	ldr	r2, [pc, #236]	@ (800dfa4 <TIM_Base_SetConfig+0x120>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d003      	beq.n	800dec4 <TIM_Base_SetConfig+0x40>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	4a3a      	ldr	r2, [pc, #232]	@ (800dfa8 <TIM_Base_SetConfig+0x124>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d108      	bne.n	800ded6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800deca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4a2f      	ldr	r2, [pc, #188]	@ (800df98 <TIM_Base_SetConfig+0x114>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d02b      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dee4:	d027      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4a2c      	ldr	r2, [pc, #176]	@ (800df9c <TIM_Base_SetConfig+0x118>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d023      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4a2b      	ldr	r2, [pc, #172]	@ (800dfa0 <TIM_Base_SetConfig+0x11c>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d01f      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	4a2a      	ldr	r2, [pc, #168]	@ (800dfa4 <TIM_Base_SetConfig+0x120>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d01b      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	4a29      	ldr	r2, [pc, #164]	@ (800dfa8 <TIM_Base_SetConfig+0x124>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d017      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	4a28      	ldr	r2, [pc, #160]	@ (800dfac <TIM_Base_SetConfig+0x128>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d013      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	4a27      	ldr	r2, [pc, #156]	@ (800dfb0 <TIM_Base_SetConfig+0x12c>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d00f      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4a26      	ldr	r2, [pc, #152]	@ (800dfb4 <TIM_Base_SetConfig+0x130>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d00b      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4a25      	ldr	r2, [pc, #148]	@ (800dfb8 <TIM_Base_SetConfig+0x134>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d007      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4a24      	ldr	r2, [pc, #144]	@ (800dfbc <TIM_Base_SetConfig+0x138>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d003      	beq.n	800df36 <TIM_Base_SetConfig+0xb2>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a23      	ldr	r2, [pc, #140]	@ (800dfc0 <TIM_Base_SetConfig+0x13c>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d108      	bne.n	800df48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	4313      	orrs	r3, r2
 800df46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	695b      	ldr	r3, [r3, #20]
 800df52:	4313      	orrs	r3, r2
 800df54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	68fa      	ldr	r2, [r7, #12]
 800df5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	689a      	ldr	r2, [r3, #8]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a0a      	ldr	r2, [pc, #40]	@ (800df98 <TIM_Base_SetConfig+0x114>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d003      	beq.n	800df7c <TIM_Base_SetConfig+0xf8>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4a0c      	ldr	r2, [pc, #48]	@ (800dfa8 <TIM_Base_SetConfig+0x124>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d103      	bne.n	800df84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	691a      	ldr	r2, [r3, #16]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2201      	movs	r2, #1
 800df88:	615a      	str	r2, [r3, #20]
}
 800df8a:	bf00      	nop
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	40010000 	.word	0x40010000
 800df9c:	40000400 	.word	0x40000400
 800dfa0:	40000800 	.word	0x40000800
 800dfa4:	40000c00 	.word	0x40000c00
 800dfa8:	40010400 	.word	0x40010400
 800dfac:	40014000 	.word	0x40014000
 800dfb0:	40014400 	.word	0x40014400
 800dfb4:	40014800 	.word	0x40014800
 800dfb8:	40001800 	.word	0x40001800
 800dfbc:	40001c00 	.word	0x40001c00
 800dfc0:	40002000 	.word	0x40002000

0800dfc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dfcc:	bf00      	nop
 800dfce:	370c      	adds	r7, #12
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dfe0:	bf00      	nop
 800dfe2:	370c      	adds	r7, #12
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d101      	bne.n	800e012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e040      	b.n	800e094 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e016:	2b00      	cmp	r3, #0
 800e018:	d106      	bne.n	800e028 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7f4 fe60 	bl	8002ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2224      	movs	r2, #36	@ 0x24
 800e02c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f022 0201 	bic.w	r2, r2, #1
 800e03c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 f8b0 	bl	800e1a4 <UART_SetConfig>
 800e044:	4603      	mov	r3, r0
 800e046:	2b01      	cmp	r3, #1
 800e048:	d101      	bne.n	800e04e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e04a:	2301      	movs	r3, #1
 800e04c:	e022      	b.n	800e094 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e052:	2b00      	cmp	r3, #0
 800e054:	d002      	beq.n	800e05c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 fb08 	bl	800e66c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	685a      	ldr	r2, [r3, #4]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e06a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	689a      	ldr	r2, [r3, #8]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e07a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f042 0201 	orr.w	r2, r2, #1
 800e08a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fb8f 	bl	800e7b0 <UART_CheckIdleState>
 800e092:	4603      	mov	r3, r0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b08a      	sub	sp, #40	@ 0x28
 800e0a0:	af02      	add	r7, sp, #8
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	603b      	str	r3, [r7, #0]
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0b0:	2b20      	cmp	r3, #32
 800e0b2:	d171      	bne.n	800e198 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d002      	beq.n	800e0c0 <HAL_UART_Transmit+0x24>
 800e0ba:	88fb      	ldrh	r3, [r7, #6]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e06a      	b.n	800e19a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2221      	movs	r2, #33	@ 0x21
 800e0d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e0d2:	f7f8 ff5b 	bl	8006f8c <HAL_GetTick>
 800e0d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	88fa      	ldrh	r2, [r7, #6]
 800e0dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	88fa      	ldrh	r2, [r7, #6]
 800e0e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e0f0:	d108      	bne.n	800e104 <HAL_UART_Transmit+0x68>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d104      	bne.n	800e104 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	61bb      	str	r3, [r7, #24]
 800e102:	e003      	b.n	800e10c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e108:	2300      	movs	r3, #0
 800e10a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e10c:	e02c      	b.n	800e168 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	2200      	movs	r2, #0
 800e116:	2180      	movs	r1, #128	@ 0x80
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f000 fb96 	bl	800e84a <UART_WaitOnFlagUntilTimeout>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800e124:	2303      	movs	r3, #3
 800e126:	e038      	b.n	800e19a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d10b      	bne.n	800e146 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	461a      	mov	r2, r3
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e13c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	3302      	adds	r3, #2
 800e142:	61bb      	str	r3, [r7, #24]
 800e144:	e007      	b.n	800e156 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	781a      	ldrb	r2, [r3, #0]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	3301      	adds	r3, #1
 800e154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	3b01      	subs	r3, #1
 800e160:	b29a      	uxth	r2, r3
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e16e:	b29b      	uxth	r3, r3
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1cc      	bne.n	800e10e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	2200      	movs	r2, #0
 800e17c:	2140      	movs	r1, #64	@ 0x40
 800e17e:	68f8      	ldr	r0, [r7, #12]
 800e180:	f000 fb63 	bl	800e84a <UART_WaitOnFlagUntilTimeout>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800e18a:	2303      	movs	r3, #3
 800e18c:	e005      	b.n	800e19a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2220      	movs	r2, #32
 800e192:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	e000      	b.n	800e19a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e198:	2302      	movs	r3, #2
  }
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3720      	adds	r7, #32
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
	...

0800e1a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b088      	sub	sp, #32
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	689a      	ldr	r2, [r3, #8]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	431a      	orrs	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	695b      	ldr	r3, [r3, #20]
 800e1be:	431a      	orrs	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	69db      	ldr	r3, [r3, #28]
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	4ba6      	ldr	r3, [pc, #664]	@ (800e468 <UART_SetConfig+0x2c4>)
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	6812      	ldr	r2, [r2, #0]
 800e1d6:	6979      	ldr	r1, [r7, #20]
 800e1d8:	430b      	orrs	r3, r1
 800e1da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68da      	ldr	r2, [r3, #12]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	430a      	orrs	r2, r1
 800e1f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	699b      	ldr	r3, [r3, #24]
 800e1f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6a1b      	ldr	r3, [r3, #32]
 800e1fc:	697a      	ldr	r2, [r7, #20]
 800e1fe:	4313      	orrs	r3, r2
 800e200:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	697a      	ldr	r2, [r7, #20]
 800e212:	430a      	orrs	r2, r1
 800e214:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4a94      	ldr	r2, [pc, #592]	@ (800e46c <UART_SetConfig+0x2c8>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d120      	bne.n	800e262 <UART_SetConfig+0xbe>
 800e220:	4b93      	ldr	r3, [pc, #588]	@ (800e470 <UART_SetConfig+0x2cc>)
 800e222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e226:	f003 0303 	and.w	r3, r3, #3
 800e22a:	2b03      	cmp	r3, #3
 800e22c:	d816      	bhi.n	800e25c <UART_SetConfig+0xb8>
 800e22e:	a201      	add	r2, pc, #4	@ (adr r2, 800e234 <UART_SetConfig+0x90>)
 800e230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e234:	0800e245 	.word	0x0800e245
 800e238:	0800e251 	.word	0x0800e251
 800e23c:	0800e24b 	.word	0x0800e24b
 800e240:	0800e257 	.word	0x0800e257
 800e244:	2301      	movs	r3, #1
 800e246:	77fb      	strb	r3, [r7, #31]
 800e248:	e150      	b.n	800e4ec <UART_SetConfig+0x348>
 800e24a:	2302      	movs	r3, #2
 800e24c:	77fb      	strb	r3, [r7, #31]
 800e24e:	e14d      	b.n	800e4ec <UART_SetConfig+0x348>
 800e250:	2304      	movs	r3, #4
 800e252:	77fb      	strb	r3, [r7, #31]
 800e254:	e14a      	b.n	800e4ec <UART_SetConfig+0x348>
 800e256:	2308      	movs	r3, #8
 800e258:	77fb      	strb	r3, [r7, #31]
 800e25a:	e147      	b.n	800e4ec <UART_SetConfig+0x348>
 800e25c:	2310      	movs	r3, #16
 800e25e:	77fb      	strb	r3, [r7, #31]
 800e260:	e144      	b.n	800e4ec <UART_SetConfig+0x348>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a83      	ldr	r2, [pc, #524]	@ (800e474 <UART_SetConfig+0x2d0>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d132      	bne.n	800e2d2 <UART_SetConfig+0x12e>
 800e26c:	4b80      	ldr	r3, [pc, #512]	@ (800e470 <UART_SetConfig+0x2cc>)
 800e26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e272:	f003 030c 	and.w	r3, r3, #12
 800e276:	2b0c      	cmp	r3, #12
 800e278:	d828      	bhi.n	800e2cc <UART_SetConfig+0x128>
 800e27a:	a201      	add	r2, pc, #4	@ (adr r2, 800e280 <UART_SetConfig+0xdc>)
 800e27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e280:	0800e2b5 	.word	0x0800e2b5
 800e284:	0800e2cd 	.word	0x0800e2cd
 800e288:	0800e2cd 	.word	0x0800e2cd
 800e28c:	0800e2cd 	.word	0x0800e2cd
 800e290:	0800e2c1 	.word	0x0800e2c1
 800e294:	0800e2cd 	.word	0x0800e2cd
 800e298:	0800e2cd 	.word	0x0800e2cd
 800e29c:	0800e2cd 	.word	0x0800e2cd
 800e2a0:	0800e2bb 	.word	0x0800e2bb
 800e2a4:	0800e2cd 	.word	0x0800e2cd
 800e2a8:	0800e2cd 	.word	0x0800e2cd
 800e2ac:	0800e2cd 	.word	0x0800e2cd
 800e2b0:	0800e2c7 	.word	0x0800e2c7
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	77fb      	strb	r3, [r7, #31]
 800e2b8:	e118      	b.n	800e4ec <UART_SetConfig+0x348>
 800e2ba:	2302      	movs	r3, #2
 800e2bc:	77fb      	strb	r3, [r7, #31]
 800e2be:	e115      	b.n	800e4ec <UART_SetConfig+0x348>
 800e2c0:	2304      	movs	r3, #4
 800e2c2:	77fb      	strb	r3, [r7, #31]
 800e2c4:	e112      	b.n	800e4ec <UART_SetConfig+0x348>
 800e2c6:	2308      	movs	r3, #8
 800e2c8:	77fb      	strb	r3, [r7, #31]
 800e2ca:	e10f      	b.n	800e4ec <UART_SetConfig+0x348>
 800e2cc:	2310      	movs	r3, #16
 800e2ce:	77fb      	strb	r3, [r7, #31]
 800e2d0:	e10c      	b.n	800e4ec <UART_SetConfig+0x348>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a68      	ldr	r2, [pc, #416]	@ (800e478 <UART_SetConfig+0x2d4>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d120      	bne.n	800e31e <UART_SetConfig+0x17a>
 800e2dc:	4b64      	ldr	r3, [pc, #400]	@ (800e470 <UART_SetConfig+0x2cc>)
 800e2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e2e6:	2b30      	cmp	r3, #48	@ 0x30
 800e2e8:	d013      	beq.n	800e312 <UART_SetConfig+0x16e>
 800e2ea:	2b30      	cmp	r3, #48	@ 0x30
 800e2ec:	d814      	bhi.n	800e318 <UART_SetConfig+0x174>
 800e2ee:	2b20      	cmp	r3, #32
 800e2f0:	d009      	beq.n	800e306 <UART_SetConfig+0x162>
 800e2f2:	2b20      	cmp	r3, #32
 800e2f4:	d810      	bhi.n	800e318 <UART_SetConfig+0x174>
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d002      	beq.n	800e300 <UART_SetConfig+0x15c>
 800e2fa:	2b10      	cmp	r3, #16
 800e2fc:	d006      	beq.n	800e30c <UART_SetConfig+0x168>
 800e2fe:	e00b      	b.n	800e318 <UART_SetConfig+0x174>
 800e300:	2300      	movs	r3, #0
 800e302:	77fb      	strb	r3, [r7, #31]
 800e304:	e0f2      	b.n	800e4ec <UART_SetConfig+0x348>
 800e306:	2302      	movs	r3, #2
 800e308:	77fb      	strb	r3, [r7, #31]
 800e30a:	e0ef      	b.n	800e4ec <UART_SetConfig+0x348>
 800e30c:	2304      	movs	r3, #4
 800e30e:	77fb      	strb	r3, [r7, #31]
 800e310:	e0ec      	b.n	800e4ec <UART_SetConfig+0x348>
 800e312:	2308      	movs	r3, #8
 800e314:	77fb      	strb	r3, [r7, #31]
 800e316:	e0e9      	b.n	800e4ec <UART_SetConfig+0x348>
 800e318:	2310      	movs	r3, #16
 800e31a:	77fb      	strb	r3, [r7, #31]
 800e31c:	e0e6      	b.n	800e4ec <UART_SetConfig+0x348>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a56      	ldr	r2, [pc, #344]	@ (800e47c <UART_SetConfig+0x2d8>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d120      	bne.n	800e36a <UART_SetConfig+0x1c6>
 800e328:	4b51      	ldr	r3, [pc, #324]	@ (800e470 <UART_SetConfig+0x2cc>)
 800e32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e32e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e332:	2bc0      	cmp	r3, #192	@ 0xc0
 800e334:	d013      	beq.n	800e35e <UART_SetConfig+0x1ba>
 800e336:	2bc0      	cmp	r3, #192	@ 0xc0
 800e338:	d814      	bhi.n	800e364 <UART_SetConfig+0x1c0>
 800e33a:	2b80      	cmp	r3, #128	@ 0x80
 800e33c:	d009      	beq.n	800e352 <UART_SetConfig+0x1ae>
 800e33e:	2b80      	cmp	r3, #128	@ 0x80
 800e340:	d810      	bhi.n	800e364 <UART_SetConfig+0x1c0>
 800e342:	2b00      	cmp	r3, #0
 800e344:	d002      	beq.n	800e34c <UART_SetConfig+0x1a8>
 800e346:	2b40      	cmp	r3, #64	@ 0x40
 800e348:	d006      	beq.n	800e358 <UART_SetConfig+0x1b4>
 800e34a:	e00b      	b.n	800e364 <UART_SetConfig+0x1c0>
 800e34c:	2300      	movs	r3, #0
 800e34e:	77fb      	strb	r3, [r7, #31]
 800e350:	e0cc      	b.n	800e4ec <UART_SetConfig+0x348>
 800e352:	2302      	movs	r3, #2
 800e354:	77fb      	strb	r3, [r7, #31]
 800e356:	e0c9      	b.n	800e4ec <UART_SetConfig+0x348>
 800e358:	2304      	movs	r3, #4
 800e35a:	77fb      	strb	r3, [r7, #31]
 800e35c:	e0c6      	b.n	800e4ec <UART_SetConfig+0x348>
 800e35e:	2308      	movs	r3, #8
 800e360:	77fb      	strb	r3, [r7, #31]
 800e362:	e0c3      	b.n	800e4ec <UART_SetConfig+0x348>
 800e364:	2310      	movs	r3, #16
 800e366:	77fb      	strb	r3, [r7, #31]
 800e368:	e0c0      	b.n	800e4ec <UART_SetConfig+0x348>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a44      	ldr	r2, [pc, #272]	@ (800e480 <UART_SetConfig+0x2dc>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d125      	bne.n	800e3c0 <UART_SetConfig+0x21c>
 800e374:	4b3e      	ldr	r3, [pc, #248]	@ (800e470 <UART_SetConfig+0x2cc>)
 800e376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e37a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e37e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e382:	d017      	beq.n	800e3b4 <UART_SetConfig+0x210>
 800e384:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e388:	d817      	bhi.n	800e3ba <UART_SetConfig+0x216>
 800e38a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e38e:	d00b      	beq.n	800e3a8 <UART_SetConfig+0x204>
 800e390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e394:	d811      	bhi.n	800e3ba <UART_SetConfig+0x216>
 800e396:	2b00      	cmp	r3, #0
 800e398:	d003      	beq.n	800e3a2 <UART_SetConfig+0x1fe>
 800e39a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e39e:	d006      	beq.n	800e3ae <UART_SetConfig+0x20a>
 800e3a0:	e00b      	b.n	800e3ba <UART_SetConfig+0x216>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	77fb      	strb	r3, [r7, #31]
 800e3a6:	e0a1      	b.n	800e4ec <UART_SetConfig+0x348>
 800e3a8:	2302      	movs	r3, #2
 800e3aa:	77fb      	strb	r3, [r7, #31]
 800e3ac:	e09e      	b.n	800e4ec <UART_SetConfig+0x348>
 800e3ae:	2304      	movs	r3, #4
 800e3b0:	77fb      	strb	r3, [r7, #31]
 800e3b2:	e09b      	b.n	800e4ec <UART_SetConfig+0x348>
 800e3b4:	2308      	movs	r3, #8
 800e3b6:	77fb      	strb	r3, [r7, #31]
 800e3b8:	e098      	b.n	800e4ec <UART_SetConfig+0x348>
 800e3ba:	2310      	movs	r3, #16
 800e3bc:	77fb      	strb	r3, [r7, #31]
 800e3be:	e095      	b.n	800e4ec <UART_SetConfig+0x348>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a2f      	ldr	r2, [pc, #188]	@ (800e484 <UART_SetConfig+0x2e0>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d125      	bne.n	800e416 <UART_SetConfig+0x272>
 800e3ca:	4b29      	ldr	r3, [pc, #164]	@ (800e470 <UART_SetConfig+0x2cc>)
 800e3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e3d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e3d8:	d017      	beq.n	800e40a <UART_SetConfig+0x266>
 800e3da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e3de:	d817      	bhi.n	800e410 <UART_SetConfig+0x26c>
 800e3e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3e4:	d00b      	beq.n	800e3fe <UART_SetConfig+0x25a>
 800e3e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3ea:	d811      	bhi.n	800e410 <UART_SetConfig+0x26c>
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d003      	beq.n	800e3f8 <UART_SetConfig+0x254>
 800e3f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3f4:	d006      	beq.n	800e404 <UART_SetConfig+0x260>
 800e3f6:	e00b      	b.n	800e410 <UART_SetConfig+0x26c>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	77fb      	strb	r3, [r7, #31]
 800e3fc:	e076      	b.n	800e4ec <UART_SetConfig+0x348>
 800e3fe:	2302      	movs	r3, #2
 800e400:	77fb      	strb	r3, [r7, #31]
 800e402:	e073      	b.n	800e4ec <UART_SetConfig+0x348>
 800e404:	2304      	movs	r3, #4
 800e406:	77fb      	strb	r3, [r7, #31]
 800e408:	e070      	b.n	800e4ec <UART_SetConfig+0x348>
 800e40a:	2308      	movs	r3, #8
 800e40c:	77fb      	strb	r3, [r7, #31]
 800e40e:	e06d      	b.n	800e4ec <UART_SetConfig+0x348>
 800e410:	2310      	movs	r3, #16
 800e412:	77fb      	strb	r3, [r7, #31]
 800e414:	e06a      	b.n	800e4ec <UART_SetConfig+0x348>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4a1b      	ldr	r2, [pc, #108]	@ (800e488 <UART_SetConfig+0x2e4>)
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d138      	bne.n	800e492 <UART_SetConfig+0x2ee>
 800e420:	4b13      	ldr	r3, [pc, #76]	@ (800e470 <UART_SetConfig+0x2cc>)
 800e422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e426:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e42a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e42e:	d017      	beq.n	800e460 <UART_SetConfig+0x2bc>
 800e430:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e434:	d82a      	bhi.n	800e48c <UART_SetConfig+0x2e8>
 800e436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e43a:	d00b      	beq.n	800e454 <UART_SetConfig+0x2b0>
 800e43c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e440:	d824      	bhi.n	800e48c <UART_SetConfig+0x2e8>
 800e442:	2b00      	cmp	r3, #0
 800e444:	d003      	beq.n	800e44e <UART_SetConfig+0x2aa>
 800e446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e44a:	d006      	beq.n	800e45a <UART_SetConfig+0x2b6>
 800e44c:	e01e      	b.n	800e48c <UART_SetConfig+0x2e8>
 800e44e:	2300      	movs	r3, #0
 800e450:	77fb      	strb	r3, [r7, #31]
 800e452:	e04b      	b.n	800e4ec <UART_SetConfig+0x348>
 800e454:	2302      	movs	r3, #2
 800e456:	77fb      	strb	r3, [r7, #31]
 800e458:	e048      	b.n	800e4ec <UART_SetConfig+0x348>
 800e45a:	2304      	movs	r3, #4
 800e45c:	77fb      	strb	r3, [r7, #31]
 800e45e:	e045      	b.n	800e4ec <UART_SetConfig+0x348>
 800e460:	2308      	movs	r3, #8
 800e462:	77fb      	strb	r3, [r7, #31]
 800e464:	e042      	b.n	800e4ec <UART_SetConfig+0x348>
 800e466:	bf00      	nop
 800e468:	efff69f3 	.word	0xefff69f3
 800e46c:	40011000 	.word	0x40011000
 800e470:	40023800 	.word	0x40023800
 800e474:	40004400 	.word	0x40004400
 800e478:	40004800 	.word	0x40004800
 800e47c:	40004c00 	.word	0x40004c00
 800e480:	40005000 	.word	0x40005000
 800e484:	40011400 	.word	0x40011400
 800e488:	40007800 	.word	0x40007800
 800e48c:	2310      	movs	r3, #16
 800e48e:	77fb      	strb	r3, [r7, #31]
 800e490:	e02c      	b.n	800e4ec <UART_SetConfig+0x348>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a72      	ldr	r2, [pc, #456]	@ (800e660 <UART_SetConfig+0x4bc>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d125      	bne.n	800e4e8 <UART_SetConfig+0x344>
 800e49c:	4b71      	ldr	r3, [pc, #452]	@ (800e664 <UART_SetConfig+0x4c0>)
 800e49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e4a6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e4aa:	d017      	beq.n	800e4dc <UART_SetConfig+0x338>
 800e4ac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e4b0:	d817      	bhi.n	800e4e2 <UART_SetConfig+0x33e>
 800e4b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4b6:	d00b      	beq.n	800e4d0 <UART_SetConfig+0x32c>
 800e4b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4bc:	d811      	bhi.n	800e4e2 <UART_SetConfig+0x33e>
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d003      	beq.n	800e4ca <UART_SetConfig+0x326>
 800e4c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4c6:	d006      	beq.n	800e4d6 <UART_SetConfig+0x332>
 800e4c8:	e00b      	b.n	800e4e2 <UART_SetConfig+0x33e>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	77fb      	strb	r3, [r7, #31]
 800e4ce:	e00d      	b.n	800e4ec <UART_SetConfig+0x348>
 800e4d0:	2302      	movs	r3, #2
 800e4d2:	77fb      	strb	r3, [r7, #31]
 800e4d4:	e00a      	b.n	800e4ec <UART_SetConfig+0x348>
 800e4d6:	2304      	movs	r3, #4
 800e4d8:	77fb      	strb	r3, [r7, #31]
 800e4da:	e007      	b.n	800e4ec <UART_SetConfig+0x348>
 800e4dc:	2308      	movs	r3, #8
 800e4de:	77fb      	strb	r3, [r7, #31]
 800e4e0:	e004      	b.n	800e4ec <UART_SetConfig+0x348>
 800e4e2:	2310      	movs	r3, #16
 800e4e4:	77fb      	strb	r3, [r7, #31]
 800e4e6:	e001      	b.n	800e4ec <UART_SetConfig+0x348>
 800e4e8:	2310      	movs	r3, #16
 800e4ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	69db      	ldr	r3, [r3, #28]
 800e4f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4f4:	d15b      	bne.n	800e5ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e4f6:	7ffb      	ldrb	r3, [r7, #31]
 800e4f8:	2b08      	cmp	r3, #8
 800e4fa:	d828      	bhi.n	800e54e <UART_SetConfig+0x3aa>
 800e4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e504 <UART_SetConfig+0x360>)
 800e4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e502:	bf00      	nop
 800e504:	0800e529 	.word	0x0800e529
 800e508:	0800e531 	.word	0x0800e531
 800e50c:	0800e539 	.word	0x0800e539
 800e510:	0800e54f 	.word	0x0800e54f
 800e514:	0800e53f 	.word	0x0800e53f
 800e518:	0800e54f 	.word	0x0800e54f
 800e51c:	0800e54f 	.word	0x0800e54f
 800e520:	0800e54f 	.word	0x0800e54f
 800e524:	0800e547 	.word	0x0800e547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e528:	f7fd fec8 	bl	800c2bc <HAL_RCC_GetPCLK1Freq>
 800e52c:	61b8      	str	r0, [r7, #24]
        break;
 800e52e:	e013      	b.n	800e558 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e530:	f7fd fed8 	bl	800c2e4 <HAL_RCC_GetPCLK2Freq>
 800e534:	61b8      	str	r0, [r7, #24]
        break;
 800e536:	e00f      	b.n	800e558 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e538:	4b4b      	ldr	r3, [pc, #300]	@ (800e668 <UART_SetConfig+0x4c4>)
 800e53a:	61bb      	str	r3, [r7, #24]
        break;
 800e53c:	e00c      	b.n	800e558 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e53e:	f7fd fdeb 	bl	800c118 <HAL_RCC_GetSysClockFreq>
 800e542:	61b8      	str	r0, [r7, #24]
        break;
 800e544:	e008      	b.n	800e558 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e54a:	61bb      	str	r3, [r7, #24]
        break;
 800e54c:	e004      	b.n	800e558 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e54e:	2300      	movs	r3, #0
 800e550:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	77bb      	strb	r3, [r7, #30]
        break;
 800e556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d074      	beq.n	800e648 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	005a      	lsls	r2, r3, #1
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	085b      	lsrs	r3, r3, #1
 800e568:	441a      	add	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e572:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	2b0f      	cmp	r3, #15
 800e578:	d916      	bls.n	800e5a8 <UART_SetConfig+0x404>
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e580:	d212      	bcs.n	800e5a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	b29b      	uxth	r3, r3
 800e586:	f023 030f 	bic.w	r3, r3, #15
 800e58a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	085b      	lsrs	r3, r3, #1
 800e590:	b29b      	uxth	r3, r3
 800e592:	f003 0307 	and.w	r3, r3, #7
 800e596:	b29a      	uxth	r2, r3
 800e598:	89fb      	ldrh	r3, [r7, #14]
 800e59a:	4313      	orrs	r3, r2
 800e59c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	89fa      	ldrh	r2, [r7, #14]
 800e5a4:	60da      	str	r2, [r3, #12]
 800e5a6:	e04f      	b.n	800e648 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	77bb      	strb	r3, [r7, #30]
 800e5ac:	e04c      	b.n	800e648 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e5ae:	7ffb      	ldrb	r3, [r7, #31]
 800e5b0:	2b08      	cmp	r3, #8
 800e5b2:	d828      	bhi.n	800e606 <UART_SetConfig+0x462>
 800e5b4:	a201      	add	r2, pc, #4	@ (adr r2, 800e5bc <UART_SetConfig+0x418>)
 800e5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ba:	bf00      	nop
 800e5bc:	0800e5e1 	.word	0x0800e5e1
 800e5c0:	0800e5e9 	.word	0x0800e5e9
 800e5c4:	0800e5f1 	.word	0x0800e5f1
 800e5c8:	0800e607 	.word	0x0800e607
 800e5cc:	0800e5f7 	.word	0x0800e5f7
 800e5d0:	0800e607 	.word	0x0800e607
 800e5d4:	0800e607 	.word	0x0800e607
 800e5d8:	0800e607 	.word	0x0800e607
 800e5dc:	0800e5ff 	.word	0x0800e5ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5e0:	f7fd fe6c 	bl	800c2bc <HAL_RCC_GetPCLK1Freq>
 800e5e4:	61b8      	str	r0, [r7, #24]
        break;
 800e5e6:	e013      	b.n	800e610 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5e8:	f7fd fe7c 	bl	800c2e4 <HAL_RCC_GetPCLK2Freq>
 800e5ec:	61b8      	str	r0, [r7, #24]
        break;
 800e5ee:	e00f      	b.n	800e610 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e5f0:	4b1d      	ldr	r3, [pc, #116]	@ (800e668 <UART_SetConfig+0x4c4>)
 800e5f2:	61bb      	str	r3, [r7, #24]
        break;
 800e5f4:	e00c      	b.n	800e610 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e5f6:	f7fd fd8f 	bl	800c118 <HAL_RCC_GetSysClockFreq>
 800e5fa:	61b8      	str	r0, [r7, #24]
        break;
 800e5fc:	e008      	b.n	800e610 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e602:	61bb      	str	r3, [r7, #24]
        break;
 800e604:	e004      	b.n	800e610 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e606:	2300      	movs	r3, #0
 800e608:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e60a:	2301      	movs	r3, #1
 800e60c:	77bb      	strb	r3, [r7, #30]
        break;
 800e60e:	bf00      	nop
    }

    if (pclk != 0U)
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d018      	beq.n	800e648 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	085a      	lsrs	r2, r3, #1
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	441a      	add	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	fbb2 f3f3 	udiv	r3, r2, r3
 800e628:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	2b0f      	cmp	r3, #15
 800e62e:	d909      	bls.n	800e644 <UART_SetConfig+0x4a0>
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e636:	d205      	bcs.n	800e644 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	60da      	str	r2, [r3, #12]
 800e642:	e001      	b.n	800e648 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e654:	7fbb      	ldrb	r3, [r7, #30]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3720      	adds	r7, #32
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	40007c00 	.word	0x40007c00
 800e664:	40023800 	.word	0x40023800
 800e668:	00f42400 	.word	0x00f42400

0800e66c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e678:	f003 0301 	and.w	r3, r3, #1
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d00a      	beq.n	800e696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	430a      	orrs	r2, r1
 800e694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e69a:	f003 0302 	and.w	r3, r3, #2
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00a      	beq.n	800e6b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	430a      	orrs	r2, r1
 800e6b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6bc:	f003 0304 	and.w	r3, r3, #4
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00a      	beq.n	800e6da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	430a      	orrs	r2, r1
 800e6d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6de:	f003 0308 	and.w	r3, r3, #8
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00a      	beq.n	800e6fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	430a      	orrs	r2, r1
 800e6fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e700:	f003 0310 	and.w	r3, r3, #16
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00a      	beq.n	800e71e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	430a      	orrs	r2, r1
 800e71c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e722:	f003 0320 	and.w	r3, r3, #32
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00a      	beq.n	800e740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	430a      	orrs	r2, r1
 800e73e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d01a      	beq.n	800e782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	430a      	orrs	r2, r1
 800e760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e76a:	d10a      	bne.n	800e782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	430a      	orrs	r2, r1
 800e780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00a      	beq.n	800e7a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	430a      	orrs	r2, r1
 800e7a2:	605a      	str	r2, [r3, #4]
  }
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b086      	sub	sp, #24
 800e7b4:	af02      	add	r7, sp, #8
 800e7b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7c0:	f7f8 fbe4 	bl	8006f8c <HAL_GetTick>
 800e7c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f003 0308 	and.w	r3, r3, #8
 800e7d0:	2b08      	cmp	r3, #8
 800e7d2:	d10e      	bne.n	800e7f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 f831 	bl	800e84a <UART_WaitOnFlagUntilTimeout>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d001      	beq.n	800e7f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	e027      	b.n	800e842 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f003 0304 	and.w	r3, r3, #4
 800e7fc:	2b04      	cmp	r3, #4
 800e7fe:	d10e      	bne.n	800e81e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e800:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2200      	movs	r2, #0
 800e80a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f81b 	bl	800e84a <UART_WaitOnFlagUntilTimeout>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d001      	beq.n	800e81e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e81a:	2303      	movs	r3, #3
 800e81c:	e011      	b.n	800e842 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2220      	movs	r2, #32
 800e822:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2220      	movs	r2, #32
 800e828:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b09c      	sub	sp, #112	@ 0x70
 800e84e:	af00      	add	r7, sp, #0
 800e850:	60f8      	str	r0, [r7, #12]
 800e852:	60b9      	str	r1, [r7, #8]
 800e854:	603b      	str	r3, [r7, #0]
 800e856:	4613      	mov	r3, r2
 800e858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e85a:	e0a7      	b.n	800e9ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e85c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e85e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e862:	f000 80a3 	beq.w	800e9ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e866:	f7f8 fb91 	bl	8006f8c <HAL_GetTick>
 800e86a:	4602      	mov	r2, r0
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	1ad3      	subs	r3, r2, r3
 800e870:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e872:	429a      	cmp	r2, r3
 800e874:	d302      	bcc.n	800e87c <UART_WaitOnFlagUntilTimeout+0x32>
 800e876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d13f      	bne.n	800e8fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e884:	e853 3f00 	ldrex	r3, [r3]
 800e888:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e88a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e88c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800e890:	667b      	str	r3, [r7, #100]	@ 0x64
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e89a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e89c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e8a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e8a2:	e841 2300 	strex	r3, r2, [r1]
 800e8a6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e8a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1e6      	bne.n	800e87c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	3308      	adds	r3, #8
 800e8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8b8:	e853 3f00 	ldrex	r3, [r3]
 800e8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8c0:	f023 0301 	bic.w	r3, r3, #1
 800e8c4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3308      	adds	r3, #8
 800e8cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e8ce:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e8d0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8d6:	e841 2300 	strex	r3, r2, [r1]
 800e8da:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e8dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d1e5      	bne.n	800e8ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2220      	movs	r2, #32
 800e8e6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2220      	movs	r2, #32
 800e8ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e068      	b.n	800e9ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 0304 	and.w	r3, r3, #4
 800e906:	2b00      	cmp	r3, #0
 800e908:	d050      	beq.n	800e9ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	69db      	ldr	r3, [r3, #28]
 800e910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e918:	d148      	bne.n	800e9ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e922:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e92c:	e853 3f00 	ldrex	r3, [r3]
 800e930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e934:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800e938:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	461a      	mov	r2, r3
 800e940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e942:	637b      	str	r3, [r7, #52]	@ 0x34
 800e944:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e946:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e948:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e94a:	e841 2300 	strex	r3, r2, [r1]
 800e94e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1e6      	bne.n	800e924 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3308      	adds	r3, #8
 800e95c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	e853 3f00 	ldrex	r3, [r3]
 800e964:	613b      	str	r3, [r7, #16]
   return(result);
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	f023 0301 	bic.w	r3, r3, #1
 800e96c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	3308      	adds	r3, #8
 800e974:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e976:	623a      	str	r2, [r7, #32]
 800e978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97a:	69f9      	ldr	r1, [r7, #28]
 800e97c:	6a3a      	ldr	r2, [r7, #32]
 800e97e:	e841 2300 	strex	r3, r2, [r1]
 800e982:	61bb      	str	r3, [r7, #24]
   return(result);
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1e5      	bne.n	800e956 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2220      	movs	r2, #32
 800e98e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2220      	movs	r2, #32
 800e994:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2220      	movs	r2, #32
 800e99c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	e010      	b.n	800e9ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	69da      	ldr	r2, [r3, #28]
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	4013      	ands	r3, r2
 800e9b6:	68ba      	ldr	r2, [r7, #8]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	bf0c      	ite	eq
 800e9bc:	2301      	moveq	r3, #1
 800e9be:	2300      	movne	r3, #0
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	79fb      	ldrb	r3, [r7, #7]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	f43f af48 	beq.w	800e85c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3770      	adds	r7, #112	@ 0x70
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
	...

0800e9d8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d121      	bne.n	800ea2e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	4b27      	ldr	r3, [pc, #156]	@ (800ea8c <FMC_SDRAM_Init+0xb4>)
 800e9f0:	4013      	ands	r3, r2
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	6851      	ldr	r1, [r2, #4]
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	6892      	ldr	r2, [r2, #8]
 800e9fa:	4311      	orrs	r1, r2
 800e9fc:	683a      	ldr	r2, [r7, #0]
 800e9fe:	68d2      	ldr	r2, [r2, #12]
 800ea00:	4311      	orrs	r1, r2
 800ea02:	683a      	ldr	r2, [r7, #0]
 800ea04:	6912      	ldr	r2, [r2, #16]
 800ea06:	4311      	orrs	r1, r2
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	6952      	ldr	r2, [r2, #20]
 800ea0c:	4311      	orrs	r1, r2
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	6992      	ldr	r2, [r2, #24]
 800ea12:	4311      	orrs	r1, r2
 800ea14:	683a      	ldr	r2, [r7, #0]
 800ea16:	69d2      	ldr	r2, [r2, #28]
 800ea18:	4311      	orrs	r1, r2
 800ea1a:	683a      	ldr	r2, [r7, #0]
 800ea1c:	6a12      	ldr	r2, [r2, #32]
 800ea1e:	4311      	orrs	r1, r2
 800ea20:	683a      	ldr	r2, [r7, #0]
 800ea22:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ea24:	430a      	orrs	r2, r1
 800ea26:	431a      	orrs	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	601a      	str	r2, [r3, #0]
 800ea2c:	e026      	b.n	800ea7c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	69d9      	ldr	r1, [r3, #28]
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	6a1b      	ldr	r3, [r3, #32]
 800ea3e:	4319      	orrs	r1, r3
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea44:	430b      	orrs	r3, r1
 800ea46:	431a      	orrs	r2, r3
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	685a      	ldr	r2, [r3, #4]
 800ea50:	4b0e      	ldr	r3, [pc, #56]	@ (800ea8c <FMC_SDRAM_Init+0xb4>)
 800ea52:	4013      	ands	r3, r2
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	6851      	ldr	r1, [r2, #4]
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	6892      	ldr	r2, [r2, #8]
 800ea5c:	4311      	orrs	r1, r2
 800ea5e:	683a      	ldr	r2, [r7, #0]
 800ea60:	68d2      	ldr	r2, [r2, #12]
 800ea62:	4311      	orrs	r1, r2
 800ea64:	683a      	ldr	r2, [r7, #0]
 800ea66:	6912      	ldr	r2, [r2, #16]
 800ea68:	4311      	orrs	r1, r2
 800ea6a:	683a      	ldr	r2, [r7, #0]
 800ea6c:	6952      	ldr	r2, [r2, #20]
 800ea6e:	4311      	orrs	r1, r2
 800ea70:	683a      	ldr	r2, [r7, #0]
 800ea72:	6992      	ldr	r2, [r2, #24]
 800ea74:	430a      	orrs	r2, r1
 800ea76:	431a      	orrs	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	370c      	adds	r7, #12
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	ffff8000 	.word	0xffff8000

0800ea90 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b085      	sub	sp, #20
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d128      	bne.n	800eaf4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	1e59      	subs	r1, r3, #1
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	3b01      	subs	r3, #1
 800eab6:	011b      	lsls	r3, r3, #4
 800eab8:	4319      	orrs	r1, r3
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	3b01      	subs	r3, #1
 800eac0:	021b      	lsls	r3, r3, #8
 800eac2:	4319      	orrs	r1, r3
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	031b      	lsls	r3, r3, #12
 800eacc:	4319      	orrs	r1, r3
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	3b01      	subs	r3, #1
 800ead4:	041b      	lsls	r3, r3, #16
 800ead6:	4319      	orrs	r1, r3
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	695b      	ldr	r3, [r3, #20]
 800eadc:	3b01      	subs	r3, #1
 800eade:	051b      	lsls	r3, r3, #20
 800eae0:	4319      	orrs	r1, r3
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	699b      	ldr	r3, [r3, #24]
 800eae6:	3b01      	subs	r3, #1
 800eae8:	061b      	lsls	r3, r3, #24
 800eaea:	430b      	orrs	r3, r1
 800eaec:	431a      	orrs	r2, r3
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	609a      	str	r2, [r3, #8]
 800eaf2:	e02d      	b.n	800eb50 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	689a      	ldr	r2, [r3, #8]
 800eaf8:	4b19      	ldr	r3, [pc, #100]	@ (800eb60 <FMC_SDRAM_Timing_Init+0xd0>)
 800eafa:	4013      	ands	r3, r2
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	68d2      	ldr	r2, [r2, #12]
 800eb00:	3a01      	subs	r2, #1
 800eb02:	0311      	lsls	r1, r2, #12
 800eb04:	68ba      	ldr	r2, [r7, #8]
 800eb06:	6952      	ldr	r2, [r2, #20]
 800eb08:	3a01      	subs	r2, #1
 800eb0a:	0512      	lsls	r2, r2, #20
 800eb0c:	430a      	orrs	r2, r1
 800eb0e:	431a      	orrs	r2, r3
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	1e59      	subs	r1, r3, #1
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	3b01      	subs	r3, #1
 800eb28:	011b      	lsls	r3, r3, #4
 800eb2a:	4319      	orrs	r1, r3
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	3b01      	subs	r3, #1
 800eb32:	021b      	lsls	r3, r3, #8
 800eb34:	4319      	orrs	r1, r3
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	041b      	lsls	r3, r3, #16
 800eb3e:	4319      	orrs	r1, r3
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	699b      	ldr	r3, [r3, #24]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	061b      	lsls	r3, r3, #24
 800eb48:	430b      	orrs	r3, r1
 800eb4a:	431a      	orrs	r2, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800eb50:	2300      	movs	r3, #0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3714      	adds	r7, #20
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	ff0f0fff 	.word	0xff0f0fff

0800eb64 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	691a      	ldr	r2, [r3, #16]
 800eb74:	4b0c      	ldr	r3, [pc, #48]	@ (800eba8 <FMC_SDRAM_SendCommand+0x44>)
 800eb76:	4013      	ands	r3, r2
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	6811      	ldr	r1, [r2, #0]
 800eb7c:	68ba      	ldr	r2, [r7, #8]
 800eb7e:	6852      	ldr	r2, [r2, #4]
 800eb80:	4311      	orrs	r1, r2
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	6892      	ldr	r2, [r2, #8]
 800eb86:	3a01      	subs	r2, #1
 800eb88:	0152      	lsls	r2, r2, #5
 800eb8a:	4311      	orrs	r1, r2
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	68d2      	ldr	r2, [r2, #12]
 800eb90:	0252      	lsls	r2, r2, #9
 800eb92:	430a      	orrs	r2, r1
 800eb94:	431a      	orrs	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3714      	adds	r7, #20
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr
 800eba8:	ffc00000 	.word	0xffc00000

0800ebac <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	695a      	ldr	r2, [r3, #20]
 800ebba:	4b07      	ldr	r3, [pc, #28]	@ (800ebd8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ebbc:	4013      	ands	r3, r2
 800ebbe:	683a      	ldr	r2, [r7, #0]
 800ebc0:	0052      	lsls	r2, r2, #1
 800ebc2:	431a      	orrs	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	ffffc001 	.word	0xffffc001

0800ebdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ebea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ebee:	2b84      	cmp	r3, #132	@ 0x84
 800ebf0:	d005      	beq.n	800ebfe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ebf2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	3303      	adds	r3, #3
 800ebfc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3714      	adds	r7, #20
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec12:	f3ef 8305 	mrs	r3, IPSR
 800ec16:	607b      	str	r3, [r7, #4]
  return(result);
 800ec18:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	bf14      	ite	ne
 800ec1e:	2301      	movne	r3, #1
 800ec20:	2300      	moveq	r3, #0
 800ec22:	b2db      	uxtb	r3, r3
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ec34:	f001 f968 	bl	800ff08 <vTaskStartScheduler>
  
  return osOK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ec3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec40:	b089      	sub	sp, #36	@ 0x24
 800ec42:	af04      	add	r7, sp, #16
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	695b      	ldr	r3, [r3, #20]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d020      	beq.n	800ec92 <osThreadCreate+0x54>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	699b      	ldr	r3, [r3, #24]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d01c      	beq.n	800ec92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	685c      	ldr	r4, [r3, #4]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	691e      	ldr	r6, [r3, #16]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7ff ffb6 	bl	800ebdc <makeFreeRtosPriority>
 800ec70:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	695b      	ldr	r3, [r3, #20]
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec7a:	9202      	str	r2, [sp, #8]
 800ec7c:	9301      	str	r3, [sp, #4]
 800ec7e:	9100      	str	r1, [sp, #0]
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	4632      	mov	r2, r6
 800ec84:	4629      	mov	r1, r5
 800ec86:	4620      	mov	r0, r4
 800ec88:	f000 ff4e 	bl	800fb28 <xTaskCreateStatic>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	60fb      	str	r3, [r7, #12]
 800ec90:	e01c      	b.n	800eccc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	685c      	ldr	r4, [r3, #4]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec9e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff ff98 	bl	800ebdc <makeFreeRtosPriority>
 800ecac:	4602      	mov	r2, r0
 800ecae:	f107 030c 	add.w	r3, r7, #12
 800ecb2:	9301      	str	r3, [sp, #4]
 800ecb4:	9200      	str	r2, [sp, #0]
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	4632      	mov	r2, r6
 800ecba:	4629      	mov	r1, r5
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	f000 ff99 	bl	800fbf4 <xTaskCreate>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d001      	beq.n	800eccc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	e000      	b.n	800ecce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eccc:	68fb      	ldr	r3, [r7, #12]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3714      	adds	r7, #20
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecd6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b084      	sub	sp, #16
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d001      	beq.n	800ecec <osDelay+0x16>
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	e000      	b.n	800ecee <osDelay+0x18>
 800ecec:	2301      	movs	r3, #1
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f001 f8d2 	bl	800fe98 <vTaskDelay>
  
  return osOK;
 800ecf4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ecfe:	b590      	push	{r4, r7, lr}
 800ed00:	b085      	sub	sp, #20
 800ed02:	af02      	add	r7, sp, #8
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d011      	beq.n	800ed34 <osMessageCreate+0x36>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00d      	beq.n	800ed34 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6818      	ldr	r0, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6859      	ldr	r1, [r3, #4]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	689a      	ldr	r2, [r3, #8]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	2400      	movs	r4, #0
 800ed2a:	9400      	str	r4, [sp, #0]
 800ed2c:	f000 f9e4 	bl	800f0f8 <xQueueGenericCreateStatic>
 800ed30:	4603      	mov	r3, r0
 800ed32:	e008      	b.n	800ed46 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6818      	ldr	r0, [r3, #0]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	4619      	mov	r1, r3
 800ed40:	f000 fa61 	bl	800f206 <xQueueGenericCreate>
 800ed44:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	370c      	adds	r7, #12
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd90      	pop	{r4, r7, pc}
	...

0800ed50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b086      	sub	sp, #24
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <osMessagePut+0x1e>
    ticks = 1;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ed6e:	f7ff ff4d 	bl	800ec0c <inHandlerMode>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d018      	beq.n	800edaa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ed78:	f107 0210 	add.w	r2, r7, #16
 800ed7c:	f107 0108 	add.w	r1, r7, #8
 800ed80:	2300      	movs	r3, #0
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f000 fbac 	bl	800f4e0 <xQueueGenericSendFromISR>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d001      	beq.n	800ed92 <osMessagePut+0x42>
      return osErrorOS;
 800ed8e:	23ff      	movs	r3, #255	@ 0xff
 800ed90:	e018      	b.n	800edc4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d014      	beq.n	800edc2 <osMessagePut+0x72>
 800ed98:	4b0c      	ldr	r3, [pc, #48]	@ (800edcc <osMessagePut+0x7c>)
 800ed9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed9e:	601a      	str	r2, [r3, #0]
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	f3bf 8f6f 	isb	sy
 800eda8:	e00b      	b.n	800edc2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800edaa:	f107 0108 	add.w	r1, r7, #8
 800edae:	2300      	movs	r3, #0
 800edb0:	697a      	ldr	r2, [r7, #20]
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f000 fa8a 	bl	800f2cc <xQueueGenericSend>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d001      	beq.n	800edc2 <osMessagePut+0x72>
      return osErrorOS;
 800edbe:	23ff      	movs	r3, #255	@ 0xff
 800edc0:	e000      	b.n	800edc4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3718      	adds	r7, #24
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	e000ed04 	.word	0xe000ed04

0800edd0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800edd0:	b590      	push	{r4, r7, lr}
 800edd2:	b08b      	sub	sp, #44	@ 0x2c
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ede0:	2300      	movs	r3, #0
 800ede2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10a      	bne.n	800ee00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800edea:	2380      	movs	r3, #128	@ 0x80
 800edec:	617b      	str	r3, [r7, #20]
    return event;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	461c      	mov	r4, r3
 800edf2:	f107 0314 	add.w	r3, r7, #20
 800edf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800edfe:	e054      	b.n	800eeaa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ee00:	2300      	movs	r3, #0
 800ee02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ee04:	2300      	movs	r3, #0
 800ee06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee0e:	d103      	bne.n	800ee18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ee10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee16:	e009      	b.n	800ee2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d006      	beq.n	800ee2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ee22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d101      	bne.n	800ee2c <osMessageGet+0x5c>
      ticks = 1;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ee2c:	f7ff feee 	bl	800ec0c <inHandlerMode>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d01c      	beq.n	800ee70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ee36:	f107 0220 	add.w	r2, r7, #32
 800ee3a:	f107 0314 	add.w	r3, r7, #20
 800ee3e:	3304      	adds	r3, #4
 800ee40:	4619      	mov	r1, r3
 800ee42:	68b8      	ldr	r0, [r7, #8]
 800ee44:	f000 fcd8 	bl	800f7f8 <xQueueReceiveFromISR>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d102      	bne.n	800ee54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ee4e:	2310      	movs	r3, #16
 800ee50:	617b      	str	r3, [r7, #20]
 800ee52:	e001      	b.n	800ee58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ee54:	2300      	movs	r3, #0
 800ee56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ee58:	6a3b      	ldr	r3, [r7, #32]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d01d      	beq.n	800ee9a <osMessageGet+0xca>
 800ee5e:	4b15      	ldr	r3, [pc, #84]	@ (800eeb4 <osMessageGet+0xe4>)
 800ee60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	f3bf 8f6f 	isb	sy
 800ee6e:	e014      	b.n	800ee9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ee70:	f107 0314 	add.w	r3, r7, #20
 800ee74:	3304      	adds	r3, #4
 800ee76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee78:	4619      	mov	r1, r3
 800ee7a:	68b8      	ldr	r0, [r7, #8]
 800ee7c:	f000 fbd4 	bl	800f628 <xQueueReceive>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d102      	bne.n	800ee8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ee86:	2310      	movs	r3, #16
 800ee88:	617b      	str	r3, [r7, #20]
 800ee8a:	e006      	b.n	800ee9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d101      	bne.n	800ee96 <osMessageGet+0xc6>
 800ee92:	2300      	movs	r3, #0
 800ee94:	e000      	b.n	800ee98 <osMessageGet+0xc8>
 800ee96:	2340      	movs	r3, #64	@ 0x40
 800ee98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	461c      	mov	r4, r3
 800ee9e:	f107 0314 	add.w	r3, r7, #20
 800eea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	372c      	adds	r7, #44	@ 0x2c
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd90      	pop	{r4, r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	e000ed04 	.word	0xe000ed04

0800eeb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f103 0208 	add.w	r2, r3, #8
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f103 0208 	add.w	r2, r3, #8
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f103 0208 	add.w	r2, r3, #8
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eeec:	bf00      	nop
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ef06:	bf00      	nop
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr

0800ef12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef12:	b480      	push	{r7}
 800ef14:	b085      	sub	sp, #20
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	689a      	ldr	r2, [r3, #8]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	683a      	ldr	r2, [r7, #0]
 800ef36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	1c5a      	adds	r2, r3, #1
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	601a      	str	r2, [r3, #0]
}
 800ef4e:	bf00      	nop
 800ef50:	3714      	adds	r7, #20
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr

0800ef5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef5a:	b480      	push	{r7}
 800ef5c:	b085      	sub	sp, #20
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
 800ef62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef70:	d103      	bne.n	800ef7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	691b      	ldr	r3, [r3, #16]
 800ef76:	60fb      	str	r3, [r7, #12]
 800ef78:	e00c      	b.n	800ef94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	3308      	adds	r3, #8
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	e002      	b.n	800ef88 <vListInsert+0x2e>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	60fb      	str	r3, [r7, #12]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d2f6      	bcs.n	800ef82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	685a      	ldr	r2, [r3, #4]
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	1c5a      	adds	r2, r3, #1
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	601a      	str	r2, [r3, #0]
}
 800efc0:	bf00      	nop
 800efc2:	3714      	adds	r7, #20
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800efcc:	b480      	push	{r7}
 800efce:	b085      	sub	sp, #20
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	691b      	ldr	r3, [r3, #16]
 800efd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	6892      	ldr	r2, [r2, #8]
 800efe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	6852      	ldr	r2, [r2, #4]
 800efec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d103      	bne.n	800f000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	689a      	ldr	r2, [r3, #8]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	1e5a      	subs	r2, r3, #1
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
}
 800f014:	4618      	mov	r0, r3
 800f016:	3714      	adds	r7, #20
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d10d      	bne.n	800f050 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f038:	b672      	cpsid	i
 800f03a:	f383 8811 	msr	BASEPRI, r3
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f3bf 8f4f 	dsb	sy
 800f046:	b662      	cpsie	i
 800f048:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f04a:	bf00      	nop
 800f04c:	bf00      	nop
 800f04e:	e7fd      	b.n	800f04c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f050:	f001 fdac 	bl	8010bac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f05c:	68f9      	ldr	r1, [r7, #12]
 800f05e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f060:	fb01 f303 	mul.w	r3, r1, r3
 800f064:	441a      	add	r2, r3
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2200      	movs	r2, #0
 800f06e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f080:	3b01      	subs	r3, #1
 800f082:	68f9      	ldr	r1, [r7, #12]
 800f084:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f086:	fb01 f303 	mul.w	r3, r1, r3
 800f08a:	441a      	add	r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	22ff      	movs	r2, #255	@ 0xff
 800f094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	22ff      	movs	r2, #255	@ 0xff
 800f09c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d114      	bne.n	800f0d0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	691b      	ldr	r3, [r3, #16]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d01a      	beq.n	800f0e4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	3310      	adds	r3, #16
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f001 f98e 	bl	80103d4 <xTaskRemoveFromEventList>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d012      	beq.n	800f0e4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f0be:	4b0d      	ldr	r3, [pc, #52]	@ (800f0f4 <xQueueGenericReset+0xd4>)
 800f0c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	f3bf 8f6f 	isb	sy
 800f0ce:	e009      	b.n	800f0e4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	3310      	adds	r3, #16
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7ff feef 	bl	800eeb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	3324      	adds	r3, #36	@ 0x24
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7ff feea 	bl	800eeb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f0e4:	f001 fd98 	bl	8010c18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f0e8:	2301      	movs	r3, #1
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	e000ed04 	.word	0xe000ed04

0800f0f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b08e      	sub	sp, #56	@ 0x38
 800f0fc:	af02      	add	r7, sp, #8
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
 800f104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d10d      	bne.n	800f128 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800f10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f110:	b672      	cpsid	i
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	b662      	cpsie	i
 800f120:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f122:	bf00      	nop
 800f124:	bf00      	nop
 800f126:	e7fd      	b.n	800f124 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d10d      	bne.n	800f14a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800f12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f132:	b672      	cpsid	i
 800f134:	f383 8811 	msr	BASEPRI, r3
 800f138:	f3bf 8f6f 	isb	sy
 800f13c:	f3bf 8f4f 	dsb	sy
 800f140:	b662      	cpsie	i
 800f142:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f144:	bf00      	nop
 800f146:	bf00      	nop
 800f148:	e7fd      	b.n	800f146 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d002      	beq.n	800f156 <xQueueGenericCreateStatic+0x5e>
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <xQueueGenericCreateStatic+0x62>
 800f156:	2301      	movs	r3, #1
 800f158:	e000      	b.n	800f15c <xQueueGenericCreateStatic+0x64>
 800f15a:	2300      	movs	r3, #0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10d      	bne.n	800f17c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f164:	b672      	cpsid	i
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	b662      	cpsie	i
 800f174:	623b      	str	r3, [r7, #32]
}
 800f176:	bf00      	nop
 800f178:	bf00      	nop
 800f17a:	e7fd      	b.n	800f178 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d102      	bne.n	800f188 <xQueueGenericCreateStatic+0x90>
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d101      	bne.n	800f18c <xQueueGenericCreateStatic+0x94>
 800f188:	2301      	movs	r3, #1
 800f18a:	e000      	b.n	800f18e <xQueueGenericCreateStatic+0x96>
 800f18c:	2300      	movs	r3, #0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d10d      	bne.n	800f1ae <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800f192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f196:	b672      	cpsid	i
 800f198:	f383 8811 	msr	BASEPRI, r3
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	b662      	cpsie	i
 800f1a6:	61fb      	str	r3, [r7, #28]
}
 800f1a8:	bf00      	nop
 800f1aa:	bf00      	nop
 800f1ac:	e7fd      	b.n	800f1aa <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f1ae:	2348      	movs	r3, #72	@ 0x48
 800f1b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	2b48      	cmp	r3, #72	@ 0x48
 800f1b6:	d00d      	beq.n	800f1d4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800f1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1bc:	b672      	cpsid	i
 800f1be:	f383 8811 	msr	BASEPRI, r3
 800f1c2:	f3bf 8f6f 	isb	sy
 800f1c6:	f3bf 8f4f 	dsb	sy
 800f1ca:	b662      	cpsie	i
 800f1cc:	61bb      	str	r3, [r7, #24]
}
 800f1ce:	bf00      	nop
 800f1d0:	bf00      	nop
 800f1d2:	e7fd      	b.n	800f1d0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f1d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00d      	beq.n	800f1fc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f1e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	68b9      	ldr	r1, [r7, #8]
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	f000 f848 	bl	800f28c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3730      	adds	r7, #48	@ 0x30
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f206:	b580      	push	{r7, lr}
 800f208:	b08a      	sub	sp, #40	@ 0x28
 800f20a:	af02      	add	r7, sp, #8
 800f20c:	60f8      	str	r0, [r7, #12]
 800f20e:	60b9      	str	r1, [r7, #8]
 800f210:	4613      	mov	r3, r2
 800f212:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d10d      	bne.n	800f236 <xQueueGenericCreate+0x30>
	__asm volatile
 800f21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f21e:	b672      	cpsid	i
 800f220:	f383 8811 	msr	BASEPRI, r3
 800f224:	f3bf 8f6f 	isb	sy
 800f228:	f3bf 8f4f 	dsb	sy
 800f22c:	b662      	cpsie	i
 800f22e:	613b      	str	r3, [r7, #16]
}
 800f230:	bf00      	nop
 800f232:	bf00      	nop
 800f234:	e7fd      	b.n	800f232 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d102      	bne.n	800f242 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	61fb      	str	r3, [r7, #28]
 800f240:	e004      	b.n	800f24c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	fb02 f303 	mul.w	r3, r2, r3
 800f24a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	3348      	adds	r3, #72	@ 0x48
 800f250:	4618      	mov	r0, r3
 800f252:	f001 fdd9 	bl	8010e08 <pvPortMalloc>
 800f256:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d011      	beq.n	800f282 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	3348      	adds	r3, #72	@ 0x48
 800f266:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f270:	79fa      	ldrb	r2, [r7, #7]
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	4613      	mov	r3, r2
 800f278:	697a      	ldr	r2, [r7, #20]
 800f27a:	68b9      	ldr	r1, [r7, #8]
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f000 f805 	bl	800f28c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f282:	69bb      	ldr	r3, [r7, #24]
	}
 800f284:	4618      	mov	r0, r3
 800f286:	3720      	adds	r7, #32
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
 800f298:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d103      	bne.n	800f2a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	69ba      	ldr	r2, [r7, #24]
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	e002      	b.n	800f2ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f2b4:	69bb      	ldr	r3, [r7, #24]
 800f2b6:	68ba      	ldr	r2, [r7, #8]
 800f2b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f2ba:	2101      	movs	r1, #1
 800f2bc:	69b8      	ldr	r0, [r7, #24]
 800f2be:	f7ff feaf 	bl	800f020 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f2c2:	bf00      	nop
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
	...

0800f2cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b08e      	sub	sp, #56	@ 0x38
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
 800f2d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d10d      	bne.n	800f304 <xQueueGenericSend+0x38>
	__asm volatile
 800f2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ec:	b672      	cpsid	i
 800f2ee:	f383 8811 	msr	BASEPRI, r3
 800f2f2:	f3bf 8f6f 	isb	sy
 800f2f6:	f3bf 8f4f 	dsb	sy
 800f2fa:	b662      	cpsie	i
 800f2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f2fe:	bf00      	nop
 800f300:	bf00      	nop
 800f302:	e7fd      	b.n	800f300 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d103      	bne.n	800f312 <xQueueGenericSend+0x46>
 800f30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d101      	bne.n	800f316 <xQueueGenericSend+0x4a>
 800f312:	2301      	movs	r3, #1
 800f314:	e000      	b.n	800f318 <xQueueGenericSend+0x4c>
 800f316:	2300      	movs	r3, #0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d10d      	bne.n	800f338 <xQueueGenericSend+0x6c>
	__asm volatile
 800f31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f320:	b672      	cpsid	i
 800f322:	f383 8811 	msr	BASEPRI, r3
 800f326:	f3bf 8f6f 	isb	sy
 800f32a:	f3bf 8f4f 	dsb	sy
 800f32e:	b662      	cpsie	i
 800f330:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f332:	bf00      	nop
 800f334:	bf00      	nop
 800f336:	e7fd      	b.n	800f334 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	2b02      	cmp	r3, #2
 800f33c:	d103      	bne.n	800f346 <xQueueGenericSend+0x7a>
 800f33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f342:	2b01      	cmp	r3, #1
 800f344:	d101      	bne.n	800f34a <xQueueGenericSend+0x7e>
 800f346:	2301      	movs	r3, #1
 800f348:	e000      	b.n	800f34c <xQueueGenericSend+0x80>
 800f34a:	2300      	movs	r3, #0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d10d      	bne.n	800f36c <xQueueGenericSend+0xa0>
	__asm volatile
 800f350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f354:	b672      	cpsid	i
 800f356:	f383 8811 	msr	BASEPRI, r3
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	b662      	cpsie	i
 800f364:	623b      	str	r3, [r7, #32]
}
 800f366:	bf00      	nop
 800f368:	bf00      	nop
 800f36a:	e7fd      	b.n	800f368 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f36c:	f001 fa00 	bl	8010770 <xTaskGetSchedulerState>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d102      	bne.n	800f37c <xQueueGenericSend+0xb0>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d101      	bne.n	800f380 <xQueueGenericSend+0xb4>
 800f37c:	2301      	movs	r3, #1
 800f37e:	e000      	b.n	800f382 <xQueueGenericSend+0xb6>
 800f380:	2300      	movs	r3, #0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d10d      	bne.n	800f3a2 <xQueueGenericSend+0xd6>
	__asm volatile
 800f386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f38a:	b672      	cpsid	i
 800f38c:	f383 8811 	msr	BASEPRI, r3
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	b662      	cpsie	i
 800f39a:	61fb      	str	r3, [r7, #28]
}
 800f39c:	bf00      	nop
 800f39e:	bf00      	nop
 800f3a0:	e7fd      	b.n	800f39e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f3a2:	f001 fc03 	bl	8010bac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d302      	bcc.n	800f3b8 <xQueueGenericSend+0xec>
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	2b02      	cmp	r3, #2
 800f3b6:	d129      	bne.n	800f40c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f3b8:	683a      	ldr	r2, [r7, #0]
 800f3ba:	68b9      	ldr	r1, [r7, #8]
 800f3bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f3be:	f000 faa3 	bl	800f908 <prvCopyDataToQueue>
 800f3c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d010      	beq.n	800f3ee <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ce:	3324      	adds	r3, #36	@ 0x24
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f000 ffff 	bl	80103d4 <xTaskRemoveFromEventList>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d013      	beq.n	800f404 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f3dc:	4b3f      	ldr	r3, [pc, #252]	@ (800f4dc <xQueueGenericSend+0x210>)
 800f3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	f3bf 8f4f 	dsb	sy
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	e00a      	b.n	800f404 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d007      	beq.n	800f404 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f3f4:	4b39      	ldr	r3, [pc, #228]	@ (800f4dc <xQueueGenericSend+0x210>)
 800f3f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3fa:	601a      	str	r2, [r3, #0]
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f404:	f001 fc08 	bl	8010c18 <vPortExitCritical>
				return pdPASS;
 800f408:	2301      	movs	r3, #1
 800f40a:	e063      	b.n	800f4d4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d103      	bne.n	800f41a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f412:	f001 fc01 	bl	8010c18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f416:	2300      	movs	r3, #0
 800f418:	e05c      	b.n	800f4d4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f41a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d106      	bne.n	800f42e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f420:	f107 0314 	add.w	r3, r7, #20
 800f424:	4618      	mov	r0, r3
 800f426:	f001 f83b 	bl	80104a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f42a:	2301      	movs	r3, #1
 800f42c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f42e:	f001 fbf3 	bl	8010c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f432:	f000 fdd7 	bl	800ffe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f436:	f001 fbb9 	bl	8010bac <vPortEnterCritical>
 800f43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f43c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f440:	b25b      	sxtb	r3, r3
 800f442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f446:	d103      	bne.n	800f450 <xQueueGenericSend+0x184>
 800f448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f44a:	2200      	movs	r2, #0
 800f44c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f456:	b25b      	sxtb	r3, r3
 800f458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f45c:	d103      	bne.n	800f466 <xQueueGenericSend+0x19a>
 800f45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f460:	2200      	movs	r2, #0
 800f462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f466:	f001 fbd7 	bl	8010c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f46a:	1d3a      	adds	r2, r7, #4
 800f46c:	f107 0314 	add.w	r3, r7, #20
 800f470:	4611      	mov	r1, r2
 800f472:	4618      	mov	r0, r3
 800f474:	f001 f82a 	bl	80104cc <xTaskCheckForTimeOut>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d124      	bne.n	800f4c8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f47e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f480:	f000 fb3a 	bl	800faf8 <prvIsQueueFull>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	d018      	beq.n	800f4bc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f48c:	3310      	adds	r3, #16
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	4611      	mov	r1, r2
 800f492:	4618      	mov	r0, r3
 800f494:	f000 ff76 	bl	8010384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f49a:	f000 fac5 	bl	800fa28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f49e:	f000 fdaf 	bl	8010000 <xTaskResumeAll>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f47f af7c 	bne.w	800f3a2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800f4aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f4dc <xQueueGenericSend+0x210>)
 800f4ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4b0:	601a      	str	r2, [r3, #0]
 800f4b2:	f3bf 8f4f 	dsb	sy
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	e772      	b.n	800f3a2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f4bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4be:	f000 fab3 	bl	800fa28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4c2:	f000 fd9d 	bl	8010000 <xTaskResumeAll>
 800f4c6:	e76c      	b.n	800f3a2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f4c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4ca:	f000 faad 	bl	800fa28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4ce:	f000 fd97 	bl	8010000 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f4d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3738      	adds	r7, #56	@ 0x38
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	e000ed04 	.word	0xe000ed04

0800f4e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b08e      	sub	sp, #56	@ 0x38
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10d      	bne.n	800f514 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800f4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4fc:	b672      	cpsid	i
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	b662      	cpsie	i
 800f50c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f50e:	bf00      	nop
 800f510:	bf00      	nop
 800f512:	e7fd      	b.n	800f510 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d103      	bne.n	800f522 <xQueueGenericSendFromISR+0x42>
 800f51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f51c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d101      	bne.n	800f526 <xQueueGenericSendFromISR+0x46>
 800f522:	2301      	movs	r3, #1
 800f524:	e000      	b.n	800f528 <xQueueGenericSendFromISR+0x48>
 800f526:	2300      	movs	r3, #0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d10d      	bne.n	800f548 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800f52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f530:	b672      	cpsid	i
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	b662      	cpsie	i
 800f540:	623b      	str	r3, [r7, #32]
}
 800f542:	bf00      	nop
 800f544:	bf00      	nop
 800f546:	e7fd      	b.n	800f544 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	2b02      	cmp	r3, #2
 800f54c:	d103      	bne.n	800f556 <xQueueGenericSendFromISR+0x76>
 800f54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f552:	2b01      	cmp	r3, #1
 800f554:	d101      	bne.n	800f55a <xQueueGenericSendFromISR+0x7a>
 800f556:	2301      	movs	r3, #1
 800f558:	e000      	b.n	800f55c <xQueueGenericSendFromISR+0x7c>
 800f55a:	2300      	movs	r3, #0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d10d      	bne.n	800f57c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f564:	b672      	cpsid	i
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	b662      	cpsie	i
 800f574:	61fb      	str	r3, [r7, #28]
}
 800f576:	bf00      	nop
 800f578:	bf00      	nop
 800f57a:	e7fd      	b.n	800f578 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f57c:	f001 fbfe 	bl	8010d7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f580:	f3ef 8211 	mrs	r2, BASEPRI
 800f584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f588:	b672      	cpsid	i
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	b662      	cpsie	i
 800f598:	61ba      	str	r2, [r7, #24]
 800f59a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f59c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f59e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d302      	bcc.n	800f5b2 <xQueueGenericSendFromISR+0xd2>
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	d12c      	bne.n	800f60c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f5b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f5bc:	683a      	ldr	r2, [r7, #0]
 800f5be:	68b9      	ldr	r1, [r7, #8]
 800f5c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5c2:	f000 f9a1 	bl	800f908 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f5c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800f5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5ce:	d112      	bne.n	800f5f6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d016      	beq.n	800f606 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5da:	3324      	adds	r3, #36	@ 0x24
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f000 fef9 	bl	80103d4 <xTaskRemoveFromEventList>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d00e      	beq.n	800f606 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00b      	beq.n	800f606 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	601a      	str	r2, [r3, #0]
 800f5f4:	e007      	b.n	800f606 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f5f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	b25a      	sxtb	r2, r3
 800f600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f606:	2301      	movs	r3, #1
 800f608:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800f60a:	e001      	b.n	800f610 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f60c:	2300      	movs	r3, #0
 800f60e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f612:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f61a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3738      	adds	r7, #56	@ 0x38
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
	...

0800f628 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b08c      	sub	sp, #48	@ 0x30
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f634:	2300      	movs	r3, #0
 800f636:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d10d      	bne.n	800f65e <xQueueReceive+0x36>
	__asm volatile
 800f642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f646:	b672      	cpsid	i
 800f648:	f383 8811 	msr	BASEPRI, r3
 800f64c:	f3bf 8f6f 	isb	sy
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	b662      	cpsie	i
 800f656:	623b      	str	r3, [r7, #32]
}
 800f658:	bf00      	nop
 800f65a:	bf00      	nop
 800f65c:	e7fd      	b.n	800f65a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d103      	bne.n	800f66c <xQueueReceive+0x44>
 800f664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d101      	bne.n	800f670 <xQueueReceive+0x48>
 800f66c:	2301      	movs	r3, #1
 800f66e:	e000      	b.n	800f672 <xQueueReceive+0x4a>
 800f670:	2300      	movs	r3, #0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d10d      	bne.n	800f692 <xQueueReceive+0x6a>
	__asm volatile
 800f676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f67a:	b672      	cpsid	i
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	b662      	cpsie	i
 800f68a:	61fb      	str	r3, [r7, #28]
}
 800f68c:	bf00      	nop
 800f68e:	bf00      	nop
 800f690:	e7fd      	b.n	800f68e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f692:	f001 f86d 	bl	8010770 <xTaskGetSchedulerState>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d102      	bne.n	800f6a2 <xQueueReceive+0x7a>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d101      	bne.n	800f6a6 <xQueueReceive+0x7e>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e000      	b.n	800f6a8 <xQueueReceive+0x80>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d10d      	bne.n	800f6c8 <xQueueReceive+0xa0>
	__asm volatile
 800f6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6b0:	b672      	cpsid	i
 800f6b2:	f383 8811 	msr	BASEPRI, r3
 800f6b6:	f3bf 8f6f 	isb	sy
 800f6ba:	f3bf 8f4f 	dsb	sy
 800f6be:	b662      	cpsie	i
 800f6c0:	61bb      	str	r3, [r7, #24]
}
 800f6c2:	bf00      	nop
 800f6c4:	bf00      	nop
 800f6c6:	e7fd      	b.n	800f6c4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6c8:	f001 fa70 	bl	8010bac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d01f      	beq.n	800f718 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f6d8:	68b9      	ldr	r1, [r7, #8]
 800f6da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6dc:	f000 f97e 	bl	800f9dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e2:	1e5a      	subs	r2, r3, #1
 800f6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00f      	beq.n	800f710 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f2:	3310      	adds	r3, #16
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 fe6d 	bl	80103d4 <xTaskRemoveFromEventList>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d007      	beq.n	800f710 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f700:	4b3c      	ldr	r3, [pc, #240]	@ (800f7f4 <xQueueReceive+0x1cc>)
 800f702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f710:	f001 fa82 	bl	8010c18 <vPortExitCritical>
				return pdPASS;
 800f714:	2301      	movs	r3, #1
 800f716:	e069      	b.n	800f7ec <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d103      	bne.n	800f726 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f71e:	f001 fa7b 	bl	8010c18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f722:	2300      	movs	r3, #0
 800f724:	e062      	b.n	800f7ec <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d106      	bne.n	800f73a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f72c:	f107 0310 	add.w	r3, r7, #16
 800f730:	4618      	mov	r0, r3
 800f732:	f000 feb5 	bl	80104a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f736:	2301      	movs	r3, #1
 800f738:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f73a:	f001 fa6d 	bl	8010c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f73e:	f000 fc51 	bl	800ffe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f742:	f001 fa33 	bl	8010bac <vPortEnterCritical>
 800f746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f748:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f74c:	b25b      	sxtb	r3, r3
 800f74e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f752:	d103      	bne.n	800f75c <xQueueReceive+0x134>
 800f754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f756:	2200      	movs	r2, #0
 800f758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f75e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f762:	b25b      	sxtb	r3, r3
 800f764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f768:	d103      	bne.n	800f772 <xQueueReceive+0x14a>
 800f76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f772:	f001 fa51 	bl	8010c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f776:	1d3a      	adds	r2, r7, #4
 800f778:	f107 0310 	add.w	r3, r7, #16
 800f77c:	4611      	mov	r1, r2
 800f77e:	4618      	mov	r0, r3
 800f780:	f000 fea4 	bl	80104cc <xTaskCheckForTimeOut>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d123      	bne.n	800f7d2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f78a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f78c:	f000 f99e 	bl	800facc <prvIsQueueEmpty>
 800f790:	4603      	mov	r3, r0
 800f792:	2b00      	cmp	r3, #0
 800f794:	d017      	beq.n	800f7c6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f798:	3324      	adds	r3, #36	@ 0x24
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	4611      	mov	r1, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f000 fdf0 	bl	8010384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f7a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7a6:	f000 f93f 	bl	800fa28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f7aa:	f000 fc29 	bl	8010000 <xTaskResumeAll>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d189      	bne.n	800f6c8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800f7b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f7f4 <xQueueReceive+0x1cc>)
 800f7b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7ba:	601a      	str	r2, [r3, #0]
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	f3bf 8f6f 	isb	sy
 800f7c4:	e780      	b.n	800f6c8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f7c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7c8:	f000 f92e 	bl	800fa28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7cc:	f000 fc18 	bl	8010000 <xTaskResumeAll>
 800f7d0:	e77a      	b.n	800f6c8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f7d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7d4:	f000 f928 	bl	800fa28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7d8:	f000 fc12 	bl	8010000 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7de:	f000 f975 	bl	800facc <prvIsQueueEmpty>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f43f af6f 	beq.w	800f6c8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f7ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3730      	adds	r7, #48	@ 0x30
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	e000ed04 	.word	0xe000ed04

0800f7f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b08e      	sub	sp, #56	@ 0x38
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d10d      	bne.n	800f82a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f812:	b672      	cpsid	i
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	b662      	cpsie	i
 800f822:	623b      	str	r3, [r7, #32]
}
 800f824:	bf00      	nop
 800f826:	bf00      	nop
 800f828:	e7fd      	b.n	800f826 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d103      	bne.n	800f838 <xQueueReceiveFromISR+0x40>
 800f830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f834:	2b00      	cmp	r3, #0
 800f836:	d101      	bne.n	800f83c <xQueueReceiveFromISR+0x44>
 800f838:	2301      	movs	r3, #1
 800f83a:	e000      	b.n	800f83e <xQueueReceiveFromISR+0x46>
 800f83c:	2300      	movs	r3, #0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d10d      	bne.n	800f85e <xQueueReceiveFromISR+0x66>
	__asm volatile
 800f842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f846:	b672      	cpsid	i
 800f848:	f383 8811 	msr	BASEPRI, r3
 800f84c:	f3bf 8f6f 	isb	sy
 800f850:	f3bf 8f4f 	dsb	sy
 800f854:	b662      	cpsie	i
 800f856:	61fb      	str	r3, [r7, #28]
}
 800f858:	bf00      	nop
 800f85a:	bf00      	nop
 800f85c:	e7fd      	b.n	800f85a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f85e:	f001 fa8d 	bl	8010d7c <vPortValidateInterruptPriority>
	__asm volatile
 800f862:	f3ef 8211 	mrs	r2, BASEPRI
 800f866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f86a:	b672      	cpsid	i
 800f86c:	f383 8811 	msr	BASEPRI, r3
 800f870:	f3bf 8f6f 	isb	sy
 800f874:	f3bf 8f4f 	dsb	sy
 800f878:	b662      	cpsie	i
 800f87a:	61ba      	str	r2, [r7, #24]
 800f87c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f87e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f880:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f886:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d02f      	beq.n	800f8ee <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f890:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f898:	68b9      	ldr	r1, [r7, #8]
 800f89a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f89c:	f000 f89e 	bl	800f9dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a2:	1e5a      	subs	r2, r3, #1
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f8a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f8ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f8b0:	d112      	bne.n	800f8d8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d016      	beq.n	800f8e8 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8bc:	3310      	adds	r3, #16
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 fd88 	bl	80103d4 <xTaskRemoveFromEventList>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00e      	beq.n	800f8e8 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00b      	beq.n	800f8e8 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	601a      	str	r2, [r3, #0]
 800f8d6:	e007      	b.n	800f8e8 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f8dc:	3301      	adds	r3, #1
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	b25a      	sxtb	r2, r3
 800f8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8ec:	e001      	b.n	800f8f2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	f383 8811 	msr	BASEPRI, r3
}
 800f8fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f8fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f900:	4618      	mov	r0, r3
 800f902:	3738      	adds	r7, #56	@ 0x38
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b086      	sub	sp, #24
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f914:	2300      	movs	r3, #0
 800f916:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f91c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f922:	2b00      	cmp	r3, #0
 800f924:	d10d      	bne.n	800f942 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d14d      	bne.n	800f9ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	689b      	ldr	r3, [r3, #8]
 800f932:	4618      	mov	r0, r3
 800f934:	f000 ff3a 	bl	80107ac <xTaskPriorityDisinherit>
 800f938:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2200      	movs	r2, #0
 800f93e:	609a      	str	r2, [r3, #8]
 800f940:	e043      	b.n	800f9ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d119      	bne.n	800f97c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6858      	ldr	r0, [r3, #4]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f950:	461a      	mov	r2, r3
 800f952:	68b9      	ldr	r1, [r7, #8]
 800f954:	f002 fc39 	bl	80121ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	685a      	ldr	r2, [r3, #4]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f960:	441a      	add	r2, r3
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	685a      	ldr	r2, [r3, #4]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d32b      	bcc.n	800f9ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	605a      	str	r2, [r3, #4]
 800f97a:	e026      	b.n	800f9ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	68d8      	ldr	r0, [r3, #12]
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f984:	461a      	mov	r2, r3
 800f986:	68b9      	ldr	r1, [r7, #8]
 800f988:	f002 fc1f 	bl	80121ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	68da      	ldr	r2, [r3, #12]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f994:	425b      	negs	r3, r3
 800f996:	441a      	add	r2, r3
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	68da      	ldr	r2, [r3, #12]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d207      	bcs.n	800f9b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	689a      	ldr	r2, [r3, #8]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9b0:	425b      	negs	r3, r3
 800f9b2:	441a      	add	r2, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d105      	bne.n	800f9ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d002      	beq.n	800f9ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	3b01      	subs	r3, #1
 800f9c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	1c5a      	adds	r2, r3, #1
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f9d2:	697b      	ldr	r3, [r7, #20]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3718      	adds	r7, #24
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d018      	beq.n	800fa20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	68da      	ldr	r2, [r3, #12]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9f6:	441a      	add	r2, r3
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	68da      	ldr	r2, [r3, #12]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d303      	bcc.n	800fa10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	68d9      	ldr	r1, [r3, #12]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa18:	461a      	mov	r2, r3
 800fa1a:	6838      	ldr	r0, [r7, #0]
 800fa1c:	f002 fbd5 	bl	80121ca <memcpy>
	}
}
 800fa20:	bf00      	nop
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fa30:	f001 f8bc 	bl	8010bac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fa3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fa3c:	e011      	b.n	800fa62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d012      	beq.n	800fa6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	3324      	adds	r3, #36	@ 0x24
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f000 fcc2 	bl	80103d4 <xTaskRemoveFromEventList>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d001      	beq.n	800fa5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fa56:	f000 fda1 	bl	801059c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fa5a:	7bfb      	ldrb	r3, [r7, #15]
 800fa5c:	3b01      	subs	r3, #1
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fa62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	dce9      	bgt.n	800fa3e <prvUnlockQueue+0x16>
 800fa6a:	e000      	b.n	800fa6e <prvUnlockQueue+0x46>
					break;
 800fa6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	22ff      	movs	r2, #255	@ 0xff
 800fa72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800fa76:	f001 f8cf 	bl	8010c18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fa7a:	f001 f897 	bl	8010bac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fa84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa86:	e011      	b.n	800faac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	691b      	ldr	r3, [r3, #16]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d012      	beq.n	800fab6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	3310      	adds	r3, #16
 800fa94:	4618      	mov	r0, r3
 800fa96:	f000 fc9d 	bl	80103d4 <xTaskRemoveFromEventList>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d001      	beq.n	800faa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800faa0:	f000 fd7c 	bl	801059c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800faa4:	7bbb      	ldrb	r3, [r7, #14]
 800faa6:	3b01      	subs	r3, #1
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800faac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	dce9      	bgt.n	800fa88 <prvUnlockQueue+0x60>
 800fab4:	e000      	b.n	800fab8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fab6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	22ff      	movs	r2, #255	@ 0xff
 800fabc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800fac0:	f001 f8aa 	bl	8010c18 <vPortExitCritical>
}
 800fac4:	bf00      	nop
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fad4:	f001 f86a 	bl	8010bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d102      	bne.n	800fae6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fae0:	2301      	movs	r3, #1
 800fae2:	60fb      	str	r3, [r7, #12]
 800fae4:	e001      	b.n	800faea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fae6:	2300      	movs	r3, #0
 800fae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800faea:	f001 f895 	bl	8010c18 <vPortExitCritical>

	return xReturn;
 800faee:	68fb      	ldr	r3, [r7, #12]
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fb00:	f001 f854 	bl	8010bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d102      	bne.n	800fb16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fb10:	2301      	movs	r3, #1
 800fb12:	60fb      	str	r3, [r7, #12]
 800fb14:	e001      	b.n	800fb1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fb16:	2300      	movs	r3, #0
 800fb18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fb1a:	f001 f87d 	bl	8010c18 <vPortExitCritical>

	return xReturn;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3710      	adds	r7, #16
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08e      	sub	sp, #56	@ 0x38
 800fb2c:	af04      	add	r7, sp, #16
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
 800fb34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d10d      	bne.n	800fb58 <xTaskCreateStatic+0x30>
	__asm volatile
 800fb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb40:	b672      	cpsid	i
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	b662      	cpsie	i
 800fb50:	623b      	str	r3, [r7, #32]
}
 800fb52:	bf00      	nop
 800fb54:	bf00      	nop
 800fb56:	e7fd      	b.n	800fb54 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800fb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d10d      	bne.n	800fb7a <xTaskCreateStatic+0x52>
	__asm volatile
 800fb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb62:	b672      	cpsid	i
 800fb64:	f383 8811 	msr	BASEPRI, r3
 800fb68:	f3bf 8f6f 	isb	sy
 800fb6c:	f3bf 8f4f 	dsb	sy
 800fb70:	b662      	cpsie	i
 800fb72:	61fb      	str	r3, [r7, #28]
}
 800fb74:	bf00      	nop
 800fb76:	bf00      	nop
 800fb78:	e7fd      	b.n	800fb76 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb7a:	23a0      	movs	r3, #160	@ 0xa0
 800fb7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	2ba0      	cmp	r3, #160	@ 0xa0
 800fb82:	d00d      	beq.n	800fba0 <xTaskCreateStatic+0x78>
	__asm volatile
 800fb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb88:	b672      	cpsid	i
 800fb8a:	f383 8811 	msr	BASEPRI, r3
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	b662      	cpsie	i
 800fb98:	61bb      	str	r3, [r7, #24]
}
 800fb9a:	bf00      	nop
 800fb9c:	bf00      	nop
 800fb9e:	e7fd      	b.n	800fb9c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fba0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d01e      	beq.n	800fbe6 <xTaskCreateStatic+0xbe>
 800fba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d01b      	beq.n	800fbe6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fbae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbb6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbba:	2202      	movs	r2, #2
 800fbbc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	9303      	str	r3, [sp, #12]
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc6:	9302      	str	r3, [sp, #8]
 800fbc8:	f107 0314 	add.w	r3, r7, #20
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd0:	9300      	str	r3, [sp, #0]
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	68b9      	ldr	r1, [r7, #8]
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f000 f851 	bl	800fc80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fbe0:	f000 f8f0 	bl	800fdc4 <prvAddNewTaskToReadyList>
 800fbe4:	e001      	b.n	800fbea <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fbea:	697b      	ldr	r3, [r7, #20]
	}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3728      	adds	r7, #40	@ 0x28
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b08c      	sub	sp, #48	@ 0x30
 800fbf8:	af04      	add	r7, sp, #16
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	603b      	str	r3, [r7, #0]
 800fc00:	4613      	mov	r3, r2
 800fc02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fc04:	88fb      	ldrh	r3, [r7, #6]
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f001 f8fd 	bl	8010e08 <pvPortMalloc>
 800fc0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d00e      	beq.n	800fc34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc16:	20a0      	movs	r0, #160	@ 0xa0
 800fc18:	f001 f8f6 	bl	8010e08 <pvPortMalloc>
 800fc1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d003      	beq.n	800fc2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc2a:	e005      	b.n	800fc38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc2c:	6978      	ldr	r0, [r7, #20]
 800fc2e:	f001 f9b9 	bl	8010fa4 <vPortFree>
 800fc32:	e001      	b.n	800fc38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc34:	2300      	movs	r3, #0
 800fc36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d017      	beq.n	800fc6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	2200      	movs	r2, #0
 800fc42:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc46:	88fa      	ldrh	r2, [r7, #6]
 800fc48:	2300      	movs	r3, #0
 800fc4a:	9303      	str	r3, [sp, #12]
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	9302      	str	r3, [sp, #8]
 800fc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc52:	9301      	str	r3, [sp, #4]
 800fc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc56:	9300      	str	r3, [sp, #0]
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	68b9      	ldr	r1, [r7, #8]
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f000 f80f 	bl	800fc80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc62:	69f8      	ldr	r0, [r7, #28]
 800fc64:	f000 f8ae 	bl	800fdc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	61bb      	str	r3, [r7, #24]
 800fc6c:	e002      	b.n	800fc74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fc6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc74:	69bb      	ldr	r3, [r7, #24]
	}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3720      	adds	r7, #32
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
	...

0800fc80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b088      	sub	sp, #32
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
 800fc8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fc92:	6879      	ldr	r1, [r7, #4]
 800fc94:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800fc98:	440b      	add	r3, r1
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	4413      	add	r3, r2
 800fc9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	f023 0307 	bic.w	r3, r3, #7
 800fca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	f003 0307 	and.w	r3, r3, #7
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00d      	beq.n	800fcce <prvInitialiseNewTask+0x4e>
	__asm volatile
 800fcb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb6:	b672      	cpsid	i
 800fcb8:	f383 8811 	msr	BASEPRI, r3
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	b662      	cpsie	i
 800fcc6:	617b      	str	r3, [r7, #20]
}
 800fcc8:	bf00      	nop
 800fcca:	bf00      	nop
 800fccc:	e7fd      	b.n	800fcca <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d01f      	beq.n	800fd14 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	61fb      	str	r3, [r7, #28]
 800fcd8:	e012      	b.n	800fd00 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fcda:	68ba      	ldr	r2, [r7, #8]
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	4413      	add	r3, r2
 800fce0:	7819      	ldrb	r1, [r3, #0]
 800fce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	4413      	add	r3, r2
 800fce8:	3334      	adds	r3, #52	@ 0x34
 800fcea:	460a      	mov	r2, r1
 800fcec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fcee:	68ba      	ldr	r2, [r7, #8]
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d006      	beq.n	800fd08 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	61fb      	str	r3, [r7, #28]
 800fd00:	69fb      	ldr	r3, [r7, #28]
 800fd02:	2b0f      	cmp	r3, #15
 800fd04:	d9e9      	bls.n	800fcda <prvInitialiseNewTask+0x5a>
 800fd06:	e000      	b.n	800fd0a <prvInitialiseNewTask+0x8a>
			{
				break;
 800fd08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fd12:	e003      	b.n	800fd1c <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd16:	2200      	movs	r2, #0
 800fd18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd1e:	2b06      	cmp	r3, #6
 800fd20:	d901      	bls.n	800fd26 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd22:	2306      	movs	r3, #6
 800fd24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd30:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd34:	2200      	movs	r2, #0
 800fd36:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3a:	3304      	adds	r3, #4
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff f8db 	bl	800eef8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd44:	3318      	adds	r3, #24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7ff f8d6 	bl	800eef8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd54:	f1c3 0207 	rsb	r2, r3, #7
 800fd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd64:	2200      	movs	r2, #0
 800fd66:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd74:	334c      	adds	r3, #76	@ 0x4c
 800fd76:	224c      	movs	r2, #76	@ 0x4c
 800fd78:	2100      	movs	r1, #0
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f002 f99a 	bl	80120b4 <memset>
 800fd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd82:	4a0d      	ldr	r2, [pc, #52]	@ (800fdb8 <prvInitialiseNewTask+0x138>)
 800fd84:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd88:	4a0c      	ldr	r2, [pc, #48]	@ (800fdbc <prvInitialiseNewTask+0x13c>)
 800fd8a:	655a      	str	r2, [r3, #84]	@ 0x54
 800fd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8e:	4a0c      	ldr	r2, [pc, #48]	@ (800fdc0 <prvInitialiseNewTask+0x140>)
 800fd90:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd92:	683a      	ldr	r2, [r7, #0]
 800fd94:	68f9      	ldr	r1, [r7, #12]
 800fd96:	69b8      	ldr	r0, [r7, #24]
 800fd98:	f000 fdfa 	bl	8010990 <pxPortInitialiseStack>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d002      	beq.n	800fdae <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdae:	bf00      	nop
 800fdb0:	3720      	adds	r7, #32
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	20006a60 	.word	0x20006a60
 800fdbc:	20006ac8 	.word	0x20006ac8
 800fdc0:	20006b30 	.word	0x20006b30

0800fdc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fdcc:	f000 feee 	bl	8010bac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fdd0:	4b2a      	ldr	r3, [pc, #168]	@ (800fe7c <prvAddNewTaskToReadyList+0xb8>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	4a29      	ldr	r2, [pc, #164]	@ (800fe7c <prvAddNewTaskToReadyList+0xb8>)
 800fdd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fdda:	4b29      	ldr	r3, [pc, #164]	@ (800fe80 <prvAddNewTaskToReadyList+0xbc>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d109      	bne.n	800fdf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fde2:	4a27      	ldr	r2, [pc, #156]	@ (800fe80 <prvAddNewTaskToReadyList+0xbc>)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fde8:	4b24      	ldr	r3, [pc, #144]	@ (800fe7c <prvAddNewTaskToReadyList+0xb8>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d110      	bne.n	800fe12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fdf0:	f000 fbf8 	bl	80105e4 <prvInitialiseTaskLists>
 800fdf4:	e00d      	b.n	800fe12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fdf6:	4b23      	ldr	r3, [pc, #140]	@ (800fe84 <prvAddNewTaskToReadyList+0xc0>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d109      	bne.n	800fe12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fdfe:	4b20      	ldr	r3, [pc, #128]	@ (800fe80 <prvAddNewTaskToReadyList+0xbc>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d802      	bhi.n	800fe12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe0c:	4a1c      	ldr	r2, [pc, #112]	@ (800fe80 <prvAddNewTaskToReadyList+0xbc>)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fe12:	4b1d      	ldr	r3, [pc, #116]	@ (800fe88 <prvAddNewTaskToReadyList+0xc4>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	3301      	adds	r3, #1
 800fe18:	4a1b      	ldr	r2, [pc, #108]	@ (800fe88 <prvAddNewTaskToReadyList+0xc4>)
 800fe1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe20:	2201      	movs	r2, #1
 800fe22:	409a      	lsls	r2, r3
 800fe24:	4b19      	ldr	r3, [pc, #100]	@ (800fe8c <prvAddNewTaskToReadyList+0xc8>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	4a18      	ldr	r2, [pc, #96]	@ (800fe8c <prvAddNewTaskToReadyList+0xc8>)
 800fe2c:	6013      	str	r3, [r2, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe32:	4613      	mov	r3, r2
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	4413      	add	r3, r2
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4a15      	ldr	r2, [pc, #84]	@ (800fe90 <prvAddNewTaskToReadyList+0xcc>)
 800fe3c:	441a      	add	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	3304      	adds	r3, #4
 800fe42:	4619      	mov	r1, r3
 800fe44:	4610      	mov	r0, r2
 800fe46:	f7ff f864 	bl	800ef12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fe4a:	f000 fee5 	bl	8010c18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe4e:	4b0d      	ldr	r3, [pc, #52]	@ (800fe84 <prvAddNewTaskToReadyList+0xc0>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d00e      	beq.n	800fe74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe56:	4b0a      	ldr	r3, [pc, #40]	@ (800fe80 <prvAddNewTaskToReadyList+0xbc>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d207      	bcs.n	800fe74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fe64:	4b0b      	ldr	r3, [pc, #44]	@ (800fe94 <prvAddNewTaskToReadyList+0xd0>)
 800fe66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	f3bf 8f4f 	dsb	sy
 800fe70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe74:	bf00      	nop
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	20002e14 	.word	0x20002e14
 800fe80:	20002d14 	.word	0x20002d14
 800fe84:	20002e20 	.word	0x20002e20
 800fe88:	20002e30 	.word	0x20002e30
 800fe8c:	20002e1c 	.word	0x20002e1c
 800fe90:	20002d18 	.word	0x20002d18
 800fe94:	e000ed04 	.word	0xe000ed04

0800fe98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fea0:	2300      	movs	r3, #0
 800fea2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d01a      	beq.n	800fee0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800feaa:	4b15      	ldr	r3, [pc, #84]	@ (800ff00 <vTaskDelay+0x68>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00d      	beq.n	800fece <vTaskDelay+0x36>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb6:	b672      	cpsid	i
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	b662      	cpsie	i
 800fec6:	60bb      	str	r3, [r7, #8]
}
 800fec8:	bf00      	nop
 800feca:	bf00      	nop
 800fecc:	e7fd      	b.n	800feca <vTaskDelay+0x32>
			vTaskSuspendAll();
 800fece:	f000 f889 	bl	800ffe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fed2:	2100      	movs	r1, #0
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 fcf5 	bl	80108c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800feda:	f000 f891 	bl	8010000 <xTaskResumeAll>
 800fede:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d107      	bne.n	800fef6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800fee6:	4b07      	ldr	r3, [pc, #28]	@ (800ff04 <vTaskDelay+0x6c>)
 800fee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fef6:	bf00      	nop
 800fef8:	3710      	adds	r7, #16
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	20002e3c 	.word	0x20002e3c
 800ff04:	e000ed04 	.word	0xe000ed04

0800ff08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b08a      	sub	sp, #40	@ 0x28
 800ff0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ff12:	2300      	movs	r3, #0
 800ff14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ff16:	463a      	mov	r2, r7
 800ff18:	1d39      	adds	r1, r7, #4
 800ff1a:	f107 0308 	add.w	r3, r7, #8
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7f1 f85e 	bl	8000fe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ff24:	6839      	ldr	r1, [r7, #0]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	68ba      	ldr	r2, [r7, #8]
 800ff2a:	9202      	str	r2, [sp, #8]
 800ff2c:	9301      	str	r3, [sp, #4]
 800ff2e:	2300      	movs	r3, #0
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	2300      	movs	r3, #0
 800ff34:	460a      	mov	r2, r1
 800ff36:	4923      	ldr	r1, [pc, #140]	@ (800ffc4 <vTaskStartScheduler+0xbc>)
 800ff38:	4823      	ldr	r0, [pc, #140]	@ (800ffc8 <vTaskStartScheduler+0xc0>)
 800ff3a:	f7ff fdf5 	bl	800fb28 <xTaskCreateStatic>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	4a22      	ldr	r2, [pc, #136]	@ (800ffcc <vTaskStartScheduler+0xc4>)
 800ff42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ff44:	4b21      	ldr	r3, [pc, #132]	@ (800ffcc <vTaskStartScheduler+0xc4>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d002      	beq.n	800ff52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	617b      	str	r3, [r7, #20]
 800ff50:	e001      	b.n	800ff56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ff52:	2300      	movs	r3, #0
 800ff54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d11d      	bne.n	800ff98 <vTaskStartScheduler+0x90>
	__asm volatile
 800ff5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff60:	b672      	cpsid	i
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	b662      	cpsie	i
 800ff70:	613b      	str	r3, [r7, #16]
}
 800ff72:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff74:	4b16      	ldr	r3, [pc, #88]	@ (800ffd0 <vTaskStartScheduler+0xc8>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	334c      	adds	r3, #76	@ 0x4c
 800ff7a:	4a16      	ldr	r2, [pc, #88]	@ (800ffd4 <vTaskStartScheduler+0xcc>)
 800ff7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff7e:	4b16      	ldr	r3, [pc, #88]	@ (800ffd8 <vTaskStartScheduler+0xd0>)
 800ff80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff86:	4b15      	ldr	r3, [pc, #84]	@ (800ffdc <vTaskStartScheduler+0xd4>)
 800ff88:	2201      	movs	r2, #1
 800ff8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff8c:	4b14      	ldr	r3, [pc, #80]	@ (800ffe0 <vTaskStartScheduler+0xd8>)
 800ff8e:	2200      	movs	r2, #0
 800ff90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff92:	f000 fd8d 	bl	8010ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff96:	e011      	b.n	800ffbc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff9e:	d10d      	bne.n	800ffbc <vTaskStartScheduler+0xb4>
	__asm volatile
 800ffa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffa4:	b672      	cpsid	i
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	b662      	cpsie	i
 800ffb4:	60fb      	str	r3, [r7, #12]
}
 800ffb6:	bf00      	nop
 800ffb8:	bf00      	nop
 800ffba:	e7fd      	b.n	800ffb8 <vTaskStartScheduler+0xb0>
}
 800ffbc:	bf00      	nop
 800ffbe:	3718      	adds	r7, #24
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	0801317c 	.word	0x0801317c
 800ffc8:	080105b5 	.word	0x080105b5
 800ffcc:	20002e38 	.word	0x20002e38
 800ffd0:	20002d14 	.word	0x20002d14
 800ffd4:	200000b0 	.word	0x200000b0
 800ffd8:	20002e34 	.word	0x20002e34
 800ffdc:	20002e20 	.word	0x20002e20
 800ffe0:	20002e18 	.word	0x20002e18

0800ffe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ffe8:	4b04      	ldr	r3, [pc, #16]	@ (800fffc <vTaskSuspendAll+0x18>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3301      	adds	r3, #1
 800ffee:	4a03      	ldr	r2, [pc, #12]	@ (800fffc <vTaskSuspendAll+0x18>)
 800fff0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fff2:	bf00      	nop
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr
 800fffc:	20002e3c 	.word	0x20002e3c

08010000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010006:	2300      	movs	r3, #0
 8010008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801000a:	2300      	movs	r3, #0
 801000c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801000e:	4b43      	ldr	r3, [pc, #268]	@ (801011c <xTaskResumeAll+0x11c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d10d      	bne.n	8010032 <xTaskResumeAll+0x32>
	__asm volatile
 8010016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801001a:	b672      	cpsid	i
 801001c:	f383 8811 	msr	BASEPRI, r3
 8010020:	f3bf 8f6f 	isb	sy
 8010024:	f3bf 8f4f 	dsb	sy
 8010028:	b662      	cpsie	i
 801002a:	603b      	str	r3, [r7, #0]
}
 801002c:	bf00      	nop
 801002e:	bf00      	nop
 8010030:	e7fd      	b.n	801002e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010032:	f000 fdbb 	bl	8010bac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010036:	4b39      	ldr	r3, [pc, #228]	@ (801011c <xTaskResumeAll+0x11c>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	3b01      	subs	r3, #1
 801003c:	4a37      	ldr	r2, [pc, #220]	@ (801011c <xTaskResumeAll+0x11c>)
 801003e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010040:	4b36      	ldr	r3, [pc, #216]	@ (801011c <xTaskResumeAll+0x11c>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d161      	bne.n	801010c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010048:	4b35      	ldr	r3, [pc, #212]	@ (8010120 <xTaskResumeAll+0x120>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d05d      	beq.n	801010c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010050:	e02e      	b.n	80100b0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010052:	4b34      	ldr	r3, [pc, #208]	@ (8010124 <xTaskResumeAll+0x124>)
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	3318      	adds	r3, #24
 801005e:	4618      	mov	r0, r3
 8010060:	f7fe ffb4 	bl	800efcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	3304      	adds	r3, #4
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe ffaf 	bl	800efcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010072:	2201      	movs	r2, #1
 8010074:	409a      	lsls	r2, r3
 8010076:	4b2c      	ldr	r3, [pc, #176]	@ (8010128 <xTaskResumeAll+0x128>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4313      	orrs	r3, r2
 801007c:	4a2a      	ldr	r2, [pc, #168]	@ (8010128 <xTaskResumeAll+0x128>)
 801007e:	6013      	str	r3, [r2, #0]
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010084:	4613      	mov	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4413      	add	r3, r2
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4a27      	ldr	r2, [pc, #156]	@ (801012c <xTaskResumeAll+0x12c>)
 801008e:	441a      	add	r2, r3
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	3304      	adds	r3, #4
 8010094:	4619      	mov	r1, r3
 8010096:	4610      	mov	r0, r2
 8010098:	f7fe ff3b 	bl	800ef12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100a0:	4b23      	ldr	r3, [pc, #140]	@ (8010130 <xTaskResumeAll+0x130>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d302      	bcc.n	80100b0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80100aa:	4b22      	ldr	r3, [pc, #136]	@ (8010134 <xTaskResumeAll+0x134>)
 80100ac:	2201      	movs	r2, #1
 80100ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80100b0:	4b1c      	ldr	r3, [pc, #112]	@ (8010124 <xTaskResumeAll+0x124>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d1cc      	bne.n	8010052 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d001      	beq.n	80100c2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80100be:	f000 fb37 	bl	8010730 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80100c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010138 <xTaskResumeAll+0x138>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d010      	beq.n	80100f0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80100ce:	f000 f837 	bl	8010140 <xTaskIncrementTick>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d002      	beq.n	80100de <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80100d8:	4b16      	ldr	r3, [pc, #88]	@ (8010134 <xTaskResumeAll+0x134>)
 80100da:	2201      	movs	r2, #1
 80100dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	3b01      	subs	r3, #1
 80100e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1f1      	bne.n	80100ce <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80100ea:	4b13      	ldr	r3, [pc, #76]	@ (8010138 <xTaskResumeAll+0x138>)
 80100ec:	2200      	movs	r2, #0
 80100ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80100f0:	4b10      	ldr	r3, [pc, #64]	@ (8010134 <xTaskResumeAll+0x134>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d009      	beq.n	801010c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80100f8:	2301      	movs	r3, #1
 80100fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80100fc:	4b0f      	ldr	r3, [pc, #60]	@ (801013c <xTaskResumeAll+0x13c>)
 80100fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010102:	601a      	str	r2, [r3, #0]
 8010104:	f3bf 8f4f 	dsb	sy
 8010108:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801010c:	f000 fd84 	bl	8010c18 <vPortExitCritical>

	return xAlreadyYielded;
 8010110:	68bb      	ldr	r3, [r7, #8]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	20002e3c 	.word	0x20002e3c
 8010120:	20002e14 	.word	0x20002e14
 8010124:	20002dd4 	.word	0x20002dd4
 8010128:	20002e1c 	.word	0x20002e1c
 801012c:	20002d18 	.word	0x20002d18
 8010130:	20002d14 	.word	0x20002d14
 8010134:	20002e28 	.word	0x20002e28
 8010138:	20002e24 	.word	0x20002e24
 801013c:	e000ed04 	.word	0xe000ed04

08010140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010146:	2300      	movs	r3, #0
 8010148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801014a:	4b50      	ldr	r3, [pc, #320]	@ (801028c <xTaskIncrementTick+0x14c>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	f040 808b 	bne.w	801026a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010154:	4b4e      	ldr	r3, [pc, #312]	@ (8010290 <xTaskIncrementTick+0x150>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	3301      	adds	r3, #1
 801015a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801015c:	4a4c      	ldr	r2, [pc, #304]	@ (8010290 <xTaskIncrementTick+0x150>)
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d123      	bne.n	80101b0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8010168:	4b4a      	ldr	r3, [pc, #296]	@ (8010294 <xTaskIncrementTick+0x154>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00d      	beq.n	801018e <xTaskIncrementTick+0x4e>
	__asm volatile
 8010172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010176:	b672      	cpsid	i
 8010178:	f383 8811 	msr	BASEPRI, r3
 801017c:	f3bf 8f6f 	isb	sy
 8010180:	f3bf 8f4f 	dsb	sy
 8010184:	b662      	cpsie	i
 8010186:	603b      	str	r3, [r7, #0]
}
 8010188:	bf00      	nop
 801018a:	bf00      	nop
 801018c:	e7fd      	b.n	801018a <xTaskIncrementTick+0x4a>
 801018e:	4b41      	ldr	r3, [pc, #260]	@ (8010294 <xTaskIncrementTick+0x154>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	60fb      	str	r3, [r7, #12]
 8010194:	4b40      	ldr	r3, [pc, #256]	@ (8010298 <xTaskIncrementTick+0x158>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4a3e      	ldr	r2, [pc, #248]	@ (8010294 <xTaskIncrementTick+0x154>)
 801019a:	6013      	str	r3, [r2, #0]
 801019c:	4a3e      	ldr	r2, [pc, #248]	@ (8010298 <xTaskIncrementTick+0x158>)
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6013      	str	r3, [r2, #0]
 80101a2:	4b3e      	ldr	r3, [pc, #248]	@ (801029c <xTaskIncrementTick+0x15c>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	3301      	adds	r3, #1
 80101a8:	4a3c      	ldr	r2, [pc, #240]	@ (801029c <xTaskIncrementTick+0x15c>)
 80101aa:	6013      	str	r3, [r2, #0]
 80101ac:	f000 fac0 	bl	8010730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80101b0:	4b3b      	ldr	r3, [pc, #236]	@ (80102a0 <xTaskIncrementTick+0x160>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	693a      	ldr	r2, [r7, #16]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d348      	bcc.n	801024c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101ba:	4b36      	ldr	r3, [pc, #216]	@ (8010294 <xTaskIncrementTick+0x154>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d104      	bne.n	80101ce <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101c4:	4b36      	ldr	r3, [pc, #216]	@ (80102a0 <xTaskIncrementTick+0x160>)
 80101c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80101ca:	601a      	str	r2, [r3, #0]
					break;
 80101cc:	e03e      	b.n	801024c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101ce:	4b31      	ldr	r3, [pc, #196]	@ (8010294 <xTaskIncrementTick+0x154>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80101de:	693a      	ldr	r2, [r7, #16]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d203      	bcs.n	80101ee <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101e6:	4a2e      	ldr	r2, [pc, #184]	@ (80102a0 <xTaskIncrementTick+0x160>)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80101ec:	e02e      	b.n	801024c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	3304      	adds	r3, #4
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fe feea 	bl	800efcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d004      	beq.n	801020a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	3318      	adds	r3, #24
 8010204:	4618      	mov	r0, r3
 8010206:	f7fe fee1 	bl	800efcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801020e:	2201      	movs	r2, #1
 8010210:	409a      	lsls	r2, r3
 8010212:	4b24      	ldr	r3, [pc, #144]	@ (80102a4 <xTaskIncrementTick+0x164>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4313      	orrs	r3, r2
 8010218:	4a22      	ldr	r2, [pc, #136]	@ (80102a4 <xTaskIncrementTick+0x164>)
 801021a:	6013      	str	r3, [r2, #0]
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010220:	4613      	mov	r3, r2
 8010222:	009b      	lsls	r3, r3, #2
 8010224:	4413      	add	r3, r2
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	4a1f      	ldr	r2, [pc, #124]	@ (80102a8 <xTaskIncrementTick+0x168>)
 801022a:	441a      	add	r2, r3
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	3304      	adds	r3, #4
 8010230:	4619      	mov	r1, r3
 8010232:	4610      	mov	r0, r2
 8010234:	f7fe fe6d 	bl	800ef12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801023c:	4b1b      	ldr	r3, [pc, #108]	@ (80102ac <xTaskIncrementTick+0x16c>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010242:	429a      	cmp	r2, r3
 8010244:	d3b9      	bcc.n	80101ba <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8010246:	2301      	movs	r3, #1
 8010248:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801024a:	e7b6      	b.n	80101ba <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801024c:	4b17      	ldr	r3, [pc, #92]	@ (80102ac <xTaskIncrementTick+0x16c>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010252:	4915      	ldr	r1, [pc, #84]	@ (80102a8 <xTaskIncrementTick+0x168>)
 8010254:	4613      	mov	r3, r2
 8010256:	009b      	lsls	r3, r3, #2
 8010258:	4413      	add	r3, r2
 801025a:	009b      	lsls	r3, r3, #2
 801025c:	440b      	add	r3, r1
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d907      	bls.n	8010274 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8010264:	2301      	movs	r3, #1
 8010266:	617b      	str	r3, [r7, #20]
 8010268:	e004      	b.n	8010274 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801026a:	4b11      	ldr	r3, [pc, #68]	@ (80102b0 <xTaskIncrementTick+0x170>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	3301      	adds	r3, #1
 8010270:	4a0f      	ldr	r2, [pc, #60]	@ (80102b0 <xTaskIncrementTick+0x170>)
 8010272:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010274:	4b0f      	ldr	r3, [pc, #60]	@ (80102b4 <xTaskIncrementTick+0x174>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d001      	beq.n	8010280 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801027c:	2301      	movs	r3, #1
 801027e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010280:	697b      	ldr	r3, [r7, #20]
}
 8010282:	4618      	mov	r0, r3
 8010284:	3718      	adds	r7, #24
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	20002e3c 	.word	0x20002e3c
 8010290:	20002e18 	.word	0x20002e18
 8010294:	20002dcc 	.word	0x20002dcc
 8010298:	20002dd0 	.word	0x20002dd0
 801029c:	20002e2c 	.word	0x20002e2c
 80102a0:	20002e34 	.word	0x20002e34
 80102a4:	20002e1c 	.word	0x20002e1c
 80102a8:	20002d18 	.word	0x20002d18
 80102ac:	20002d14 	.word	0x20002d14
 80102b0:	20002e24 	.word	0x20002e24
 80102b4:	20002e28 	.word	0x20002e28

080102b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80102b8:	b480      	push	{r7}
 80102ba:	b087      	sub	sp, #28
 80102bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80102be:	4b2b      	ldr	r3, [pc, #172]	@ (801036c <vTaskSwitchContext+0xb4>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d003      	beq.n	80102ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80102c6:	4b2a      	ldr	r3, [pc, #168]	@ (8010370 <vTaskSwitchContext+0xb8>)
 80102c8:	2201      	movs	r2, #1
 80102ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80102cc:	e047      	b.n	801035e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80102ce:	4b28      	ldr	r3, [pc, #160]	@ (8010370 <vTaskSwitchContext+0xb8>)
 80102d0:	2200      	movs	r2, #0
 80102d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102d4:	4b27      	ldr	r3, [pc, #156]	@ (8010374 <vTaskSwitchContext+0xbc>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	fab3 f383 	clz	r3, r3
 80102e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80102e2:	7afb      	ldrb	r3, [r7, #11]
 80102e4:	f1c3 031f 	rsb	r3, r3, #31
 80102e8:	617b      	str	r3, [r7, #20]
 80102ea:	4923      	ldr	r1, [pc, #140]	@ (8010378 <vTaskSwitchContext+0xc0>)
 80102ec:	697a      	ldr	r2, [r7, #20]
 80102ee:	4613      	mov	r3, r2
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	4413      	add	r3, r2
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	440b      	add	r3, r1
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d10d      	bne.n	801031a <vTaskSwitchContext+0x62>
	__asm volatile
 80102fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010302:	b672      	cpsid	i
 8010304:	f383 8811 	msr	BASEPRI, r3
 8010308:	f3bf 8f6f 	isb	sy
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	b662      	cpsie	i
 8010312:	607b      	str	r3, [r7, #4]
}
 8010314:	bf00      	nop
 8010316:	bf00      	nop
 8010318:	e7fd      	b.n	8010316 <vTaskSwitchContext+0x5e>
 801031a:	697a      	ldr	r2, [r7, #20]
 801031c:	4613      	mov	r3, r2
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	4413      	add	r3, r2
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	4a14      	ldr	r2, [pc, #80]	@ (8010378 <vTaskSwitchContext+0xc0>)
 8010326:	4413      	add	r3, r2
 8010328:	613b      	str	r3, [r7, #16]
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	685a      	ldr	r2, [r3, #4]
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	605a      	str	r2, [r3, #4]
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	685a      	ldr	r2, [r3, #4]
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	3308      	adds	r3, #8
 801033c:	429a      	cmp	r2, r3
 801033e:	d104      	bne.n	801034a <vTaskSwitchContext+0x92>
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	685a      	ldr	r2, [r3, #4]
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	605a      	str	r2, [r3, #4]
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	4a0a      	ldr	r2, [pc, #40]	@ (801037c <vTaskSwitchContext+0xc4>)
 8010352:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010354:	4b09      	ldr	r3, [pc, #36]	@ (801037c <vTaskSwitchContext+0xc4>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	334c      	adds	r3, #76	@ 0x4c
 801035a:	4a09      	ldr	r2, [pc, #36]	@ (8010380 <vTaskSwitchContext+0xc8>)
 801035c:	6013      	str	r3, [r2, #0]
}
 801035e:	bf00      	nop
 8010360:	371c      	adds	r7, #28
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	20002e3c 	.word	0x20002e3c
 8010370:	20002e28 	.word	0x20002e28
 8010374:	20002e1c 	.word	0x20002e1c
 8010378:	20002d18 	.word	0x20002d18
 801037c:	20002d14 	.word	0x20002d14
 8010380:	200000b0 	.word	0x200000b0

08010384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d10d      	bne.n	80103b0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8010394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010398:	b672      	cpsid	i
 801039a:	f383 8811 	msr	BASEPRI, r3
 801039e:	f3bf 8f6f 	isb	sy
 80103a2:	f3bf 8f4f 	dsb	sy
 80103a6:	b662      	cpsie	i
 80103a8:	60fb      	str	r3, [r7, #12]
}
 80103aa:	bf00      	nop
 80103ac:	bf00      	nop
 80103ae:	e7fd      	b.n	80103ac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103b0:	4b07      	ldr	r3, [pc, #28]	@ (80103d0 <vTaskPlaceOnEventList+0x4c>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	3318      	adds	r3, #24
 80103b6:	4619      	mov	r1, r3
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f7fe fdce 	bl	800ef5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80103be:	2101      	movs	r1, #1
 80103c0:	6838      	ldr	r0, [r7, #0]
 80103c2:	f000 fa7f 	bl	80108c4 <prvAddCurrentTaskToDelayedList>
}
 80103c6:	bf00      	nop
 80103c8:	3710      	adds	r7, #16
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	20002d14 	.word	0x20002d14

080103d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b086      	sub	sp, #24
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d10d      	bne.n	8010406 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80103ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ee:	b672      	cpsid	i
 80103f0:	f383 8811 	msr	BASEPRI, r3
 80103f4:	f3bf 8f6f 	isb	sy
 80103f8:	f3bf 8f4f 	dsb	sy
 80103fc:	b662      	cpsie	i
 80103fe:	60fb      	str	r3, [r7, #12]
}
 8010400:	bf00      	nop
 8010402:	bf00      	nop
 8010404:	e7fd      	b.n	8010402 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	3318      	adds	r3, #24
 801040a:	4618      	mov	r0, r3
 801040c:	f7fe fdde 	bl	800efcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010410:	4b1d      	ldr	r3, [pc, #116]	@ (8010488 <xTaskRemoveFromEventList+0xb4>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d11c      	bne.n	8010452 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	3304      	adds	r3, #4
 801041c:	4618      	mov	r0, r3
 801041e:	f7fe fdd5 	bl	800efcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010426:	2201      	movs	r2, #1
 8010428:	409a      	lsls	r2, r3
 801042a:	4b18      	ldr	r3, [pc, #96]	@ (801048c <xTaskRemoveFromEventList+0xb8>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4313      	orrs	r3, r2
 8010430:	4a16      	ldr	r2, [pc, #88]	@ (801048c <xTaskRemoveFromEventList+0xb8>)
 8010432:	6013      	str	r3, [r2, #0]
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010438:	4613      	mov	r3, r2
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	4413      	add	r3, r2
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	4a13      	ldr	r2, [pc, #76]	@ (8010490 <xTaskRemoveFromEventList+0xbc>)
 8010442:	441a      	add	r2, r3
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	3304      	adds	r3, #4
 8010448:	4619      	mov	r1, r3
 801044a:	4610      	mov	r0, r2
 801044c:	f7fe fd61 	bl	800ef12 <vListInsertEnd>
 8010450:	e005      	b.n	801045e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	3318      	adds	r3, #24
 8010456:	4619      	mov	r1, r3
 8010458:	480e      	ldr	r0, [pc, #56]	@ (8010494 <xTaskRemoveFromEventList+0xc0>)
 801045a:	f7fe fd5a 	bl	800ef12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010462:	4b0d      	ldr	r3, [pc, #52]	@ (8010498 <xTaskRemoveFromEventList+0xc4>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010468:	429a      	cmp	r2, r3
 801046a:	d905      	bls.n	8010478 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801046c:	2301      	movs	r3, #1
 801046e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010470:	4b0a      	ldr	r3, [pc, #40]	@ (801049c <xTaskRemoveFromEventList+0xc8>)
 8010472:	2201      	movs	r2, #1
 8010474:	601a      	str	r2, [r3, #0]
 8010476:	e001      	b.n	801047c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010478:	2300      	movs	r3, #0
 801047a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801047c:	697b      	ldr	r3, [r7, #20]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3718      	adds	r7, #24
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	20002e3c 	.word	0x20002e3c
 801048c:	20002e1c 	.word	0x20002e1c
 8010490:	20002d18 	.word	0x20002d18
 8010494:	20002dd4 	.word	0x20002dd4
 8010498:	20002d14 	.word	0x20002d14
 801049c:	20002e28 	.word	0x20002e28

080104a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80104a8:	4b06      	ldr	r3, [pc, #24]	@ (80104c4 <vTaskInternalSetTimeOutState+0x24>)
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80104b0:	4b05      	ldr	r3, [pc, #20]	@ (80104c8 <vTaskInternalSetTimeOutState+0x28>)
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	605a      	str	r2, [r3, #4]
}
 80104b8:	bf00      	nop
 80104ba:	370c      	adds	r7, #12
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr
 80104c4:	20002e2c 	.word	0x20002e2c
 80104c8:	20002e18 	.word	0x20002e18

080104cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b088      	sub	sp, #32
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d10d      	bne.n	80104f8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80104dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104e0:	b672      	cpsid	i
 80104e2:	f383 8811 	msr	BASEPRI, r3
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	b662      	cpsie	i
 80104f0:	613b      	str	r3, [r7, #16]
}
 80104f2:	bf00      	nop
 80104f4:	bf00      	nop
 80104f6:	e7fd      	b.n	80104f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d10d      	bne.n	801051a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80104fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010502:	b672      	cpsid	i
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	b662      	cpsie	i
 8010512:	60fb      	str	r3, [r7, #12]
}
 8010514:	bf00      	nop
 8010516:	bf00      	nop
 8010518:	e7fd      	b.n	8010516 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801051a:	f000 fb47 	bl	8010bac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801051e:	4b1d      	ldr	r3, [pc, #116]	@ (8010594 <xTaskCheckForTimeOut+0xc8>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	69ba      	ldr	r2, [r7, #24]
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010536:	d102      	bne.n	801053e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010538:	2300      	movs	r3, #0
 801053a:	61fb      	str	r3, [r7, #28]
 801053c:	e023      	b.n	8010586 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	4b15      	ldr	r3, [pc, #84]	@ (8010598 <xTaskCheckForTimeOut+0xcc>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	429a      	cmp	r2, r3
 8010548:	d007      	beq.n	801055a <xTaskCheckForTimeOut+0x8e>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	69ba      	ldr	r2, [r7, #24]
 8010550:	429a      	cmp	r2, r3
 8010552:	d302      	bcc.n	801055a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010554:	2301      	movs	r3, #1
 8010556:	61fb      	str	r3, [r7, #28]
 8010558:	e015      	b.n	8010586 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	697a      	ldr	r2, [r7, #20]
 8010560:	429a      	cmp	r2, r3
 8010562:	d20b      	bcs.n	801057c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	681a      	ldr	r2, [r3, #0]
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	1ad2      	subs	r2, r2, r3
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff ff95 	bl	80104a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010576:	2300      	movs	r3, #0
 8010578:	61fb      	str	r3, [r7, #28]
 801057a:	e004      	b.n	8010586 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	2200      	movs	r2, #0
 8010580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010582:	2301      	movs	r3, #1
 8010584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010586:	f000 fb47 	bl	8010c18 <vPortExitCritical>

	return xReturn;
 801058a:	69fb      	ldr	r3, [r7, #28]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3720      	adds	r7, #32
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	20002e18 	.word	0x20002e18
 8010598:	20002e2c 	.word	0x20002e2c

0801059c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801059c:	b480      	push	{r7}
 801059e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80105a0:	4b03      	ldr	r3, [pc, #12]	@ (80105b0 <vTaskMissedYield+0x14>)
 80105a2:	2201      	movs	r2, #1
 80105a4:	601a      	str	r2, [r3, #0]
}
 80105a6:	bf00      	nop
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr
 80105b0:	20002e28 	.word	0x20002e28

080105b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80105bc:	f000 f852 	bl	8010664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80105c0:	4b06      	ldr	r3, [pc, #24]	@ (80105dc <prvIdleTask+0x28>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d9f9      	bls.n	80105bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80105c8:	4b05      	ldr	r3, [pc, #20]	@ (80105e0 <prvIdleTask+0x2c>)
 80105ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105ce:	601a      	str	r2, [r3, #0]
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80105d8:	e7f0      	b.n	80105bc <prvIdleTask+0x8>
 80105da:	bf00      	nop
 80105dc:	20002d18 	.word	0x20002d18
 80105e0:	e000ed04 	.word	0xe000ed04

080105e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105ea:	2300      	movs	r3, #0
 80105ec:	607b      	str	r3, [r7, #4]
 80105ee:	e00c      	b.n	801060a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	4613      	mov	r3, r2
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	4413      	add	r3, r2
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	4a12      	ldr	r2, [pc, #72]	@ (8010644 <prvInitialiseTaskLists+0x60>)
 80105fc:	4413      	add	r3, r2
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fe fc5a 	bl	800eeb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	3301      	adds	r3, #1
 8010608:	607b      	str	r3, [r7, #4]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2b06      	cmp	r3, #6
 801060e:	d9ef      	bls.n	80105f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010610:	480d      	ldr	r0, [pc, #52]	@ (8010648 <prvInitialiseTaskLists+0x64>)
 8010612:	f7fe fc51 	bl	800eeb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010616:	480d      	ldr	r0, [pc, #52]	@ (801064c <prvInitialiseTaskLists+0x68>)
 8010618:	f7fe fc4e 	bl	800eeb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801061c:	480c      	ldr	r0, [pc, #48]	@ (8010650 <prvInitialiseTaskLists+0x6c>)
 801061e:	f7fe fc4b 	bl	800eeb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010622:	480c      	ldr	r0, [pc, #48]	@ (8010654 <prvInitialiseTaskLists+0x70>)
 8010624:	f7fe fc48 	bl	800eeb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010628:	480b      	ldr	r0, [pc, #44]	@ (8010658 <prvInitialiseTaskLists+0x74>)
 801062a:	f7fe fc45 	bl	800eeb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801062e:	4b0b      	ldr	r3, [pc, #44]	@ (801065c <prvInitialiseTaskLists+0x78>)
 8010630:	4a05      	ldr	r2, [pc, #20]	@ (8010648 <prvInitialiseTaskLists+0x64>)
 8010632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010634:	4b0a      	ldr	r3, [pc, #40]	@ (8010660 <prvInitialiseTaskLists+0x7c>)
 8010636:	4a05      	ldr	r2, [pc, #20]	@ (801064c <prvInitialiseTaskLists+0x68>)
 8010638:	601a      	str	r2, [r3, #0]
}
 801063a:	bf00      	nop
 801063c:	3708      	adds	r7, #8
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	20002d18 	.word	0x20002d18
 8010648:	20002da4 	.word	0x20002da4
 801064c:	20002db8 	.word	0x20002db8
 8010650:	20002dd4 	.word	0x20002dd4
 8010654:	20002de8 	.word	0x20002de8
 8010658:	20002e00 	.word	0x20002e00
 801065c:	20002dcc 	.word	0x20002dcc
 8010660:	20002dd0 	.word	0x20002dd0

08010664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801066a:	e019      	b.n	80106a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801066c:	f000 fa9e 	bl	8010bac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010670:	4b10      	ldr	r3, [pc, #64]	@ (80106b4 <prvCheckTasksWaitingTermination+0x50>)
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	68db      	ldr	r3, [r3, #12]
 8010676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	3304      	adds	r3, #4
 801067c:	4618      	mov	r0, r3
 801067e:	f7fe fca5 	bl	800efcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010682:	4b0d      	ldr	r3, [pc, #52]	@ (80106b8 <prvCheckTasksWaitingTermination+0x54>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	3b01      	subs	r3, #1
 8010688:	4a0b      	ldr	r2, [pc, #44]	@ (80106b8 <prvCheckTasksWaitingTermination+0x54>)
 801068a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801068c:	4b0b      	ldr	r3, [pc, #44]	@ (80106bc <prvCheckTasksWaitingTermination+0x58>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	3b01      	subs	r3, #1
 8010692:	4a0a      	ldr	r2, [pc, #40]	@ (80106bc <prvCheckTasksWaitingTermination+0x58>)
 8010694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010696:	f000 fabf 	bl	8010c18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 f810 	bl	80106c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106a0:	4b06      	ldr	r3, [pc, #24]	@ (80106bc <prvCheckTasksWaitingTermination+0x58>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d1e1      	bne.n	801066c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80106a8:	bf00      	nop
 80106aa:	bf00      	nop
 80106ac:	3708      	adds	r7, #8
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	20002de8 	.word	0x20002de8
 80106b8:	20002e14 	.word	0x20002e14
 80106bc:	20002dfc 	.word	0x20002dfc

080106c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	334c      	adds	r3, #76	@ 0x4c
 80106cc:	4618      	mov	r0, r3
 80106ce:	f001 fcf9 	bl	80120c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d108      	bne.n	80106ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106e0:	4618      	mov	r0, r3
 80106e2:	f000 fc5f 	bl	8010fa4 <vPortFree>
				vPortFree( pxTCB );
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f000 fc5c 	bl	8010fa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80106ec:	e01b      	b.n	8010726 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d103      	bne.n	8010700 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 fc53 	bl	8010fa4 <vPortFree>
	}
 80106fe:	e012      	b.n	8010726 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010706:	2b02      	cmp	r3, #2
 8010708:	d00d      	beq.n	8010726 <prvDeleteTCB+0x66>
	__asm volatile
 801070a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801070e:	b672      	cpsid	i
 8010710:	f383 8811 	msr	BASEPRI, r3
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	b662      	cpsie	i
 801071e:	60fb      	str	r3, [r7, #12]
}
 8010720:	bf00      	nop
 8010722:	bf00      	nop
 8010724:	e7fd      	b.n	8010722 <prvDeleteTCB+0x62>
	}
 8010726:	bf00      	nop
 8010728:	3710      	adds	r7, #16
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
	...

08010730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010736:	4b0c      	ldr	r3, [pc, #48]	@ (8010768 <prvResetNextTaskUnblockTime+0x38>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d104      	bne.n	801074a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010740:	4b0a      	ldr	r3, [pc, #40]	@ (801076c <prvResetNextTaskUnblockTime+0x3c>)
 8010742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010746:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010748:	e008      	b.n	801075c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801074a:	4b07      	ldr	r3, [pc, #28]	@ (8010768 <prvResetNextTaskUnblockTime+0x38>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	68db      	ldr	r3, [r3, #12]
 8010752:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	4a04      	ldr	r2, [pc, #16]	@ (801076c <prvResetNextTaskUnblockTime+0x3c>)
 801075a:	6013      	str	r3, [r2, #0]
}
 801075c:	bf00      	nop
 801075e:	370c      	adds	r7, #12
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr
 8010768:	20002dcc 	.word	0x20002dcc
 801076c:	20002e34 	.word	0x20002e34

08010770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010776:	4b0b      	ldr	r3, [pc, #44]	@ (80107a4 <xTaskGetSchedulerState+0x34>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d102      	bne.n	8010784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801077e:	2301      	movs	r3, #1
 8010780:	607b      	str	r3, [r7, #4]
 8010782:	e008      	b.n	8010796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010784:	4b08      	ldr	r3, [pc, #32]	@ (80107a8 <xTaskGetSchedulerState+0x38>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d102      	bne.n	8010792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801078c:	2302      	movs	r3, #2
 801078e:	607b      	str	r3, [r7, #4]
 8010790:	e001      	b.n	8010796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010792:	2300      	movs	r3, #0
 8010794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010796:	687b      	ldr	r3, [r7, #4]
	}
 8010798:	4618      	mov	r0, r3
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr
 80107a4:	20002e20 	.word	0x20002e20
 80107a8:	20002e3c 	.word	0x20002e3c

080107ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b086      	sub	sp, #24
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80107b8:	2300      	movs	r3, #0
 80107ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d074      	beq.n	80108ac <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80107c2:	4b3d      	ldr	r3, [pc, #244]	@ (80108b8 <xTaskPriorityDisinherit+0x10c>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	693a      	ldr	r2, [r7, #16]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d00d      	beq.n	80107e8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80107cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107d0:	b672      	cpsid	i
 80107d2:	f383 8811 	msr	BASEPRI, r3
 80107d6:	f3bf 8f6f 	isb	sy
 80107da:	f3bf 8f4f 	dsb	sy
 80107de:	b662      	cpsie	i
 80107e0:	60fb      	str	r3, [r7, #12]
}
 80107e2:	bf00      	nop
 80107e4:	bf00      	nop
 80107e6:	e7fd      	b.n	80107e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d10d      	bne.n	801080c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80107f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107f4:	b672      	cpsid	i
 80107f6:	f383 8811 	msr	BASEPRI, r3
 80107fa:	f3bf 8f6f 	isb	sy
 80107fe:	f3bf 8f4f 	dsb	sy
 8010802:	b662      	cpsie	i
 8010804:	60bb      	str	r3, [r7, #8]
}
 8010806:	bf00      	nop
 8010808:	bf00      	nop
 801080a:	e7fd      	b.n	8010808 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010810:	1e5a      	subs	r2, r3, #1
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801081e:	429a      	cmp	r2, r3
 8010820:	d044      	beq.n	80108ac <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010826:	2b00      	cmp	r3, #0
 8010828:	d140      	bne.n	80108ac <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801082a:	693b      	ldr	r3, [r7, #16]
 801082c:	3304      	adds	r3, #4
 801082e:	4618      	mov	r0, r3
 8010830:	f7fe fbcc 	bl	800efcc <uxListRemove>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d115      	bne.n	8010866 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801083e:	491f      	ldr	r1, [pc, #124]	@ (80108bc <xTaskPriorityDisinherit+0x110>)
 8010840:	4613      	mov	r3, r2
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	4413      	add	r3, r2
 8010846:	009b      	lsls	r3, r3, #2
 8010848:	440b      	add	r3, r1
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d10a      	bne.n	8010866 <xTaskPriorityDisinherit+0xba>
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010854:	2201      	movs	r2, #1
 8010856:	fa02 f303 	lsl.w	r3, r2, r3
 801085a:	43da      	mvns	r2, r3
 801085c:	4b18      	ldr	r3, [pc, #96]	@ (80108c0 <xTaskPriorityDisinherit+0x114>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4013      	ands	r3, r2
 8010862:	4a17      	ldr	r2, [pc, #92]	@ (80108c0 <xTaskPriorityDisinherit+0x114>)
 8010864:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010872:	f1c3 0207 	rsb	r2, r3, #7
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801087e:	2201      	movs	r2, #1
 8010880:	409a      	lsls	r2, r3
 8010882:	4b0f      	ldr	r3, [pc, #60]	@ (80108c0 <xTaskPriorityDisinherit+0x114>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4313      	orrs	r3, r2
 8010888:	4a0d      	ldr	r2, [pc, #52]	@ (80108c0 <xTaskPriorityDisinherit+0x114>)
 801088a:	6013      	str	r3, [r2, #0]
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010890:	4613      	mov	r3, r2
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	4413      	add	r3, r2
 8010896:	009b      	lsls	r3, r3, #2
 8010898:	4a08      	ldr	r2, [pc, #32]	@ (80108bc <xTaskPriorityDisinherit+0x110>)
 801089a:	441a      	add	r2, r3
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	3304      	adds	r3, #4
 80108a0:	4619      	mov	r1, r3
 80108a2:	4610      	mov	r0, r2
 80108a4:	f7fe fb35 	bl	800ef12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80108a8:	2301      	movs	r3, #1
 80108aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80108ac:	697b      	ldr	r3, [r7, #20]
	}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3718      	adds	r7, #24
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	20002d14 	.word	0x20002d14
 80108bc:	20002d18 	.word	0x20002d18
 80108c0:	20002e1c 	.word	0x20002e1c

080108c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80108ce:	4b29      	ldr	r3, [pc, #164]	@ (8010974 <prvAddCurrentTaskToDelayedList+0xb0>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108d4:	4b28      	ldr	r3, [pc, #160]	@ (8010978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	3304      	adds	r3, #4
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fe fb76 	bl	800efcc <uxListRemove>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d10b      	bne.n	80108fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80108e6:	4b24      	ldr	r3, [pc, #144]	@ (8010978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108ec:	2201      	movs	r2, #1
 80108ee:	fa02 f303 	lsl.w	r3, r2, r3
 80108f2:	43da      	mvns	r2, r3
 80108f4:	4b21      	ldr	r3, [pc, #132]	@ (801097c <prvAddCurrentTaskToDelayedList+0xb8>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4013      	ands	r3, r2
 80108fa:	4a20      	ldr	r2, [pc, #128]	@ (801097c <prvAddCurrentTaskToDelayedList+0xb8>)
 80108fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010904:	d10a      	bne.n	801091c <prvAddCurrentTaskToDelayedList+0x58>
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d007      	beq.n	801091c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801090c:	4b1a      	ldr	r3, [pc, #104]	@ (8010978 <prvAddCurrentTaskToDelayedList+0xb4>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	3304      	adds	r3, #4
 8010912:	4619      	mov	r1, r3
 8010914:	481a      	ldr	r0, [pc, #104]	@ (8010980 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010916:	f7fe fafc 	bl	800ef12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801091a:	e026      	b.n	801096a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801091c:	68fa      	ldr	r2, [r7, #12]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	4413      	add	r3, r2
 8010922:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010924:	4b14      	ldr	r3, [pc, #80]	@ (8010978 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	68ba      	ldr	r2, [r7, #8]
 801092a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801092c:	68ba      	ldr	r2, [r7, #8]
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	429a      	cmp	r2, r3
 8010932:	d209      	bcs.n	8010948 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010934:	4b13      	ldr	r3, [pc, #76]	@ (8010984 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	4b0f      	ldr	r3, [pc, #60]	@ (8010978 <prvAddCurrentTaskToDelayedList+0xb4>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	3304      	adds	r3, #4
 801093e:	4619      	mov	r1, r3
 8010940:	4610      	mov	r0, r2
 8010942:	f7fe fb0a 	bl	800ef5a <vListInsert>
}
 8010946:	e010      	b.n	801096a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010948:	4b0f      	ldr	r3, [pc, #60]	@ (8010988 <prvAddCurrentTaskToDelayedList+0xc4>)
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	4b0a      	ldr	r3, [pc, #40]	@ (8010978 <prvAddCurrentTaskToDelayedList+0xb4>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	3304      	adds	r3, #4
 8010952:	4619      	mov	r1, r3
 8010954:	4610      	mov	r0, r2
 8010956:	f7fe fb00 	bl	800ef5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801095a:	4b0c      	ldr	r3, [pc, #48]	@ (801098c <prvAddCurrentTaskToDelayedList+0xc8>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	68ba      	ldr	r2, [r7, #8]
 8010960:	429a      	cmp	r2, r3
 8010962:	d202      	bcs.n	801096a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010964:	4a09      	ldr	r2, [pc, #36]	@ (801098c <prvAddCurrentTaskToDelayedList+0xc8>)
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	6013      	str	r3, [r2, #0]
}
 801096a:	bf00      	nop
 801096c:	3710      	adds	r7, #16
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	20002e18 	.word	0x20002e18
 8010978:	20002d14 	.word	0x20002d14
 801097c:	20002e1c 	.word	0x20002e1c
 8010980:	20002e00 	.word	0x20002e00
 8010984:	20002dd0 	.word	0x20002dd0
 8010988:	20002dcc 	.word	0x20002dcc
 801098c:	20002e34 	.word	0x20002e34

08010990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010990:	b480      	push	{r7}
 8010992:	b085      	sub	sp, #20
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	3b04      	subs	r3, #4
 80109a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80109a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	3b04      	subs	r3, #4
 80109ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	f023 0201 	bic.w	r2, r3, #1
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	3b04      	subs	r3, #4
 80109be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80109c0:	4a0c      	ldr	r2, [pc, #48]	@ (80109f4 <pxPortInitialiseStack+0x64>)
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	3b14      	subs	r3, #20
 80109ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	3b04      	subs	r3, #4
 80109d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f06f 0202 	mvn.w	r2, #2
 80109de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	3b20      	subs	r3, #32
 80109e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80109e6:	68fb      	ldr	r3, [r7, #12]
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3714      	adds	r7, #20
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr
 80109f4:	080109f9 	.word	0x080109f9

080109f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010a02:	4b15      	ldr	r3, [pc, #84]	@ (8010a58 <prvTaskExitError+0x60>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010a0a:	d00d      	beq.n	8010a28 <prvTaskExitError+0x30>
	__asm volatile
 8010a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a10:	b672      	cpsid	i
 8010a12:	f383 8811 	msr	BASEPRI, r3
 8010a16:	f3bf 8f6f 	isb	sy
 8010a1a:	f3bf 8f4f 	dsb	sy
 8010a1e:	b662      	cpsie	i
 8010a20:	60fb      	str	r3, [r7, #12]
}
 8010a22:	bf00      	nop
 8010a24:	bf00      	nop
 8010a26:	e7fd      	b.n	8010a24 <prvTaskExitError+0x2c>
	__asm volatile
 8010a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a2c:	b672      	cpsid	i
 8010a2e:	f383 8811 	msr	BASEPRI, r3
 8010a32:	f3bf 8f6f 	isb	sy
 8010a36:	f3bf 8f4f 	dsb	sy
 8010a3a:	b662      	cpsie	i
 8010a3c:	60bb      	str	r3, [r7, #8]
}
 8010a3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010a40:	bf00      	nop
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d0fc      	beq.n	8010a42 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010a48:	bf00      	nop
 8010a4a:	bf00      	nop
 8010a4c:	3714      	adds	r7, #20
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	200000a0 	.word	0x200000a0
 8010a5c:	00000000 	.word	0x00000000

08010a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a60:	4b07      	ldr	r3, [pc, #28]	@ (8010a80 <pxCurrentTCBConst2>)
 8010a62:	6819      	ldr	r1, [r3, #0]
 8010a64:	6808      	ldr	r0, [r1, #0]
 8010a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a6a:	f380 8809 	msr	PSP, r0
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f04f 0000 	mov.w	r0, #0
 8010a76:	f380 8811 	msr	BASEPRI, r0
 8010a7a:	4770      	bx	lr
 8010a7c:	f3af 8000 	nop.w

08010a80 <pxCurrentTCBConst2>:
 8010a80:	20002d14 	.word	0x20002d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010a84:	bf00      	nop
 8010a86:	bf00      	nop

08010a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a88:	4808      	ldr	r0, [pc, #32]	@ (8010aac <prvPortStartFirstTask+0x24>)
 8010a8a:	6800      	ldr	r0, [r0, #0]
 8010a8c:	6800      	ldr	r0, [r0, #0]
 8010a8e:	f380 8808 	msr	MSP, r0
 8010a92:	f04f 0000 	mov.w	r0, #0
 8010a96:	f380 8814 	msr	CONTROL, r0
 8010a9a:	b662      	cpsie	i
 8010a9c:	b661      	cpsie	f
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	df00      	svc	0
 8010aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010aaa:	bf00      	nop
 8010aac:	e000ed08 	.word	0xe000ed08

08010ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010ab6:	4b37      	ldr	r3, [pc, #220]	@ (8010b94 <xPortStartScheduler+0xe4>)
 8010ab8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	22ff      	movs	r2, #255	@ 0xff
 8010ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ad0:	78fb      	ldrb	r3, [r7, #3]
 8010ad2:	b2db      	uxtb	r3, r3
 8010ad4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	4b2f      	ldr	r3, [pc, #188]	@ (8010b98 <xPortStartScheduler+0xe8>)
 8010adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010ade:	4b2f      	ldr	r3, [pc, #188]	@ (8010b9c <xPortStartScheduler+0xec>)
 8010ae0:	2207      	movs	r2, #7
 8010ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ae4:	e009      	b.n	8010afa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8010b9c <xPortStartScheduler+0xec>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	3b01      	subs	r3, #1
 8010aec:	4a2b      	ldr	r2, [pc, #172]	@ (8010b9c <xPortStartScheduler+0xec>)
 8010aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010af0:	78fb      	ldrb	r3, [r7, #3]
 8010af2:	b2db      	uxtb	r3, r3
 8010af4:	005b      	lsls	r3, r3, #1
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010afa:	78fb      	ldrb	r3, [r7, #3]
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b02:	2b80      	cmp	r3, #128	@ 0x80
 8010b04:	d0ef      	beq.n	8010ae6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010b06:	4b25      	ldr	r3, [pc, #148]	@ (8010b9c <xPortStartScheduler+0xec>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f1c3 0307 	rsb	r3, r3, #7
 8010b0e:	2b04      	cmp	r3, #4
 8010b10:	d00d      	beq.n	8010b2e <xPortStartScheduler+0x7e>
	__asm volatile
 8010b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b16:	b672      	cpsid	i
 8010b18:	f383 8811 	msr	BASEPRI, r3
 8010b1c:	f3bf 8f6f 	isb	sy
 8010b20:	f3bf 8f4f 	dsb	sy
 8010b24:	b662      	cpsie	i
 8010b26:	60bb      	str	r3, [r7, #8]
}
 8010b28:	bf00      	nop
 8010b2a:	bf00      	nop
 8010b2c:	e7fd      	b.n	8010b2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8010b9c <xPortStartScheduler+0xec>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	021b      	lsls	r3, r3, #8
 8010b34:	4a19      	ldr	r2, [pc, #100]	@ (8010b9c <xPortStartScheduler+0xec>)
 8010b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b38:	4b18      	ldr	r3, [pc, #96]	@ (8010b9c <xPortStartScheduler+0xec>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010b40:	4a16      	ldr	r2, [pc, #88]	@ (8010b9c <xPortStartScheduler+0xec>)
 8010b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	b2da      	uxtb	r2, r3
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b4c:	4b14      	ldr	r3, [pc, #80]	@ (8010ba0 <xPortStartScheduler+0xf0>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a13      	ldr	r2, [pc, #76]	@ (8010ba0 <xPortStartScheduler+0xf0>)
 8010b52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b58:	4b11      	ldr	r3, [pc, #68]	@ (8010ba0 <xPortStartScheduler+0xf0>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	4a10      	ldr	r2, [pc, #64]	@ (8010ba0 <xPortStartScheduler+0xf0>)
 8010b5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b64:	f000 f8dc 	bl	8010d20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b68:	4b0e      	ldr	r3, [pc, #56]	@ (8010ba4 <xPortStartScheduler+0xf4>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b6e:	f000 f8fb 	bl	8010d68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010b72:	4b0d      	ldr	r3, [pc, #52]	@ (8010ba8 <xPortStartScheduler+0xf8>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4a0c      	ldr	r2, [pc, #48]	@ (8010ba8 <xPortStartScheduler+0xf8>)
 8010b78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010b7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b7e:	f7ff ff83 	bl	8010a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b82:	f7ff fb99 	bl	80102b8 <vTaskSwitchContext>
	prvTaskExitError();
 8010b86:	f7ff ff37 	bl	80109f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b8a:	2300      	movs	r3, #0
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3710      	adds	r7, #16
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	e000e400 	.word	0xe000e400
 8010b98:	20002e40 	.word	0x20002e40
 8010b9c:	20002e44 	.word	0x20002e44
 8010ba0:	e000ed20 	.word	0xe000ed20
 8010ba4:	200000a0 	.word	0x200000a0
 8010ba8:	e000ef34 	.word	0xe000ef34

08010bac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
	__asm volatile
 8010bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bb6:	b672      	cpsid	i
 8010bb8:	f383 8811 	msr	BASEPRI, r3
 8010bbc:	f3bf 8f6f 	isb	sy
 8010bc0:	f3bf 8f4f 	dsb	sy
 8010bc4:	b662      	cpsie	i
 8010bc6:	607b      	str	r3, [r7, #4]
}
 8010bc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010bca:	4b11      	ldr	r3, [pc, #68]	@ (8010c10 <vPortEnterCritical+0x64>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	3301      	adds	r3, #1
 8010bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8010c10 <vPortEnterCritical+0x64>)
 8010bd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8010c10 <vPortEnterCritical+0x64>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d112      	bne.n	8010c02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8010c14 <vPortEnterCritical+0x68>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00d      	beq.n	8010c02 <vPortEnterCritical+0x56>
	__asm volatile
 8010be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bea:	b672      	cpsid	i
 8010bec:	f383 8811 	msr	BASEPRI, r3
 8010bf0:	f3bf 8f6f 	isb	sy
 8010bf4:	f3bf 8f4f 	dsb	sy
 8010bf8:	b662      	cpsie	i
 8010bfa:	603b      	str	r3, [r7, #0]
}
 8010bfc:	bf00      	nop
 8010bfe:	bf00      	nop
 8010c00:	e7fd      	b.n	8010bfe <vPortEnterCritical+0x52>
	}
}
 8010c02:	bf00      	nop
 8010c04:	370c      	adds	r7, #12
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr
 8010c0e:	bf00      	nop
 8010c10:	200000a0 	.word	0x200000a0
 8010c14:	e000ed04 	.word	0xe000ed04

08010c18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c1e:	4b13      	ldr	r3, [pc, #76]	@ (8010c6c <vPortExitCritical+0x54>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d10d      	bne.n	8010c42 <vPortExitCritical+0x2a>
	__asm volatile
 8010c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c2a:	b672      	cpsid	i
 8010c2c:	f383 8811 	msr	BASEPRI, r3
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	f3bf 8f4f 	dsb	sy
 8010c38:	b662      	cpsie	i
 8010c3a:	607b      	str	r3, [r7, #4]
}
 8010c3c:	bf00      	nop
 8010c3e:	bf00      	nop
 8010c40:	e7fd      	b.n	8010c3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010c42:	4b0a      	ldr	r3, [pc, #40]	@ (8010c6c <vPortExitCritical+0x54>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	3b01      	subs	r3, #1
 8010c48:	4a08      	ldr	r2, [pc, #32]	@ (8010c6c <vPortExitCritical+0x54>)
 8010c4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c4c:	4b07      	ldr	r3, [pc, #28]	@ (8010c6c <vPortExitCritical+0x54>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d105      	bne.n	8010c60 <vPortExitCritical+0x48>
 8010c54:	2300      	movs	r3, #0
 8010c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	f383 8811 	msr	BASEPRI, r3
}
 8010c5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c60:	bf00      	nop
 8010c62:	370c      	adds	r7, #12
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	200000a0 	.word	0x200000a0

08010c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c70:	f3ef 8009 	mrs	r0, PSP
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	4b15      	ldr	r3, [pc, #84]	@ (8010cd0 <pxCurrentTCBConst>)
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	f01e 0f10 	tst.w	lr, #16
 8010c80:	bf08      	it	eq
 8010c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c8a:	6010      	str	r0, [r2, #0]
 8010c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010c94:	b672      	cpsid	i
 8010c96:	f380 8811 	msr	BASEPRI, r0
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	b662      	cpsie	i
 8010ca4:	f7ff fb08 	bl	80102b8 <vTaskSwitchContext>
 8010ca8:	f04f 0000 	mov.w	r0, #0
 8010cac:	f380 8811 	msr	BASEPRI, r0
 8010cb0:	bc09      	pop	{r0, r3}
 8010cb2:	6819      	ldr	r1, [r3, #0]
 8010cb4:	6808      	ldr	r0, [r1, #0]
 8010cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cba:	f01e 0f10 	tst.w	lr, #16
 8010cbe:	bf08      	it	eq
 8010cc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010cc4:	f380 8809 	msr	PSP, r0
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop

08010cd0 <pxCurrentTCBConst>:
 8010cd0:	20002d14 	.word	0x20002d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010cd4:	bf00      	nop
 8010cd6:	bf00      	nop

08010cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8010cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ce2:	b672      	cpsid	i
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	b662      	cpsie	i
 8010cf2:	607b      	str	r3, [r7, #4]
}
 8010cf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010cf6:	f7ff fa23 	bl	8010140 <xTaskIncrementTick>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d003      	beq.n	8010d08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d00:	4b06      	ldr	r3, [pc, #24]	@ (8010d1c <SysTick_Handler+0x44>)
 8010d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d06:	601a      	str	r2, [r3, #0]
 8010d08:	2300      	movs	r3, #0
 8010d0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	f383 8811 	msr	BASEPRI, r3
}
 8010d12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010d14:	bf00      	nop
 8010d16:	3708      	adds	r7, #8
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	e000ed04 	.word	0xe000ed04

08010d20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d20:	b480      	push	{r7}
 8010d22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d24:	4b0b      	ldr	r3, [pc, #44]	@ (8010d54 <vPortSetupTimerInterrupt+0x34>)
 8010d26:	2200      	movs	r2, #0
 8010d28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8010d58 <vPortSetupTimerInterrupt+0x38>)
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d30:	4b0a      	ldr	r3, [pc, #40]	@ (8010d5c <vPortSetupTimerInterrupt+0x3c>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a0a      	ldr	r2, [pc, #40]	@ (8010d60 <vPortSetupTimerInterrupt+0x40>)
 8010d36:	fba2 2303 	umull	r2, r3, r2, r3
 8010d3a:	099b      	lsrs	r3, r3, #6
 8010d3c:	4a09      	ldr	r2, [pc, #36]	@ (8010d64 <vPortSetupTimerInterrupt+0x44>)
 8010d3e:	3b01      	subs	r3, #1
 8010d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d42:	4b04      	ldr	r3, [pc, #16]	@ (8010d54 <vPortSetupTimerInterrupt+0x34>)
 8010d44:	2207      	movs	r2, #7
 8010d46:	601a      	str	r2, [r3, #0]
}
 8010d48:	bf00      	nop
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d50:	4770      	bx	lr
 8010d52:	bf00      	nop
 8010d54:	e000e010 	.word	0xe000e010
 8010d58:	e000e018 	.word	0xe000e018
 8010d5c:	20000014 	.word	0x20000014
 8010d60:	10624dd3 	.word	0x10624dd3
 8010d64:	e000e014 	.word	0xe000e014

08010d68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010d78 <vPortEnableVFP+0x10>
 8010d6c:	6801      	ldr	r1, [r0, #0]
 8010d6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010d72:	6001      	str	r1, [r0, #0]
 8010d74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010d76:	bf00      	nop
 8010d78:	e000ed88 	.word	0xe000ed88

08010d7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d82:	f3ef 8305 	mrs	r3, IPSR
 8010d86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2b0f      	cmp	r3, #15
 8010d8c:	d917      	bls.n	8010dbe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8010df8 <vPortValidateInterruptPriority+0x7c>)
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	4413      	add	r3, r2
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d98:	4b18      	ldr	r3, [pc, #96]	@ (8010dfc <vPortValidateInterruptPriority+0x80>)
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	7afa      	ldrb	r2, [r7, #11]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d20d      	bcs.n	8010dbe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da6:	b672      	cpsid	i
 8010da8:	f383 8811 	msr	BASEPRI, r3
 8010dac:	f3bf 8f6f 	isb	sy
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	b662      	cpsie	i
 8010db6:	607b      	str	r3, [r7, #4]
}
 8010db8:	bf00      	nop
 8010dba:	bf00      	nop
 8010dbc:	e7fd      	b.n	8010dba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010dbe:	4b10      	ldr	r3, [pc, #64]	@ (8010e00 <vPortValidateInterruptPriority+0x84>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8010e04 <vPortValidateInterruptPriority+0x88>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d90d      	bls.n	8010dea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8010dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dd2:	b672      	cpsid	i
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	b662      	cpsie	i
 8010de2:	603b      	str	r3, [r7, #0]
}
 8010de4:	bf00      	nop
 8010de6:	bf00      	nop
 8010de8:	e7fd      	b.n	8010de6 <vPortValidateInterruptPriority+0x6a>
	}
 8010dea:	bf00      	nop
 8010dec:	3714      	adds	r7, #20
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	e000e3f0 	.word	0xe000e3f0
 8010dfc:	20002e40 	.word	0x20002e40
 8010e00:	e000ed0c 	.word	0xe000ed0c
 8010e04:	20002e44 	.word	0x20002e44

08010e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08a      	sub	sp, #40	@ 0x28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010e10:	2300      	movs	r3, #0
 8010e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010e14:	f7ff f8e6 	bl	800ffe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e18:	4b5d      	ldr	r3, [pc, #372]	@ (8010f90 <pvPortMalloc+0x188>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d101      	bne.n	8010e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e20:	f000 f920 	bl	8011064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e24:	4b5b      	ldr	r3, [pc, #364]	@ (8010f94 <pvPortMalloc+0x18c>)
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4013      	ands	r3, r2
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	f040 8094 	bne.w	8010f5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d020      	beq.n	8010e7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010e38:	2208      	movs	r2, #8
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f003 0307 	and.w	r3, r3, #7
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d017      	beq.n	8010e7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f023 0307 	bic.w	r3, r3, #7
 8010e50:	3308      	adds	r3, #8
 8010e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f003 0307 	and.w	r3, r3, #7
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00d      	beq.n	8010e7a <pvPortMalloc+0x72>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e62:	b672      	cpsid	i
 8010e64:	f383 8811 	msr	BASEPRI, r3
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	f3bf 8f4f 	dsb	sy
 8010e70:	b662      	cpsie	i
 8010e72:	617b      	str	r3, [r7, #20]
}
 8010e74:	bf00      	nop
 8010e76:	bf00      	nop
 8010e78:	e7fd      	b.n	8010e76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d06c      	beq.n	8010f5a <pvPortMalloc+0x152>
 8010e80:	4b45      	ldr	r3, [pc, #276]	@ (8010f98 <pvPortMalloc+0x190>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d867      	bhi.n	8010f5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e8a:	4b44      	ldr	r3, [pc, #272]	@ (8010f9c <pvPortMalloc+0x194>)
 8010e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010e8e:	4b43      	ldr	r3, [pc, #268]	@ (8010f9c <pvPortMalloc+0x194>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e94:	e004      	b.n	8010ea0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d903      	bls.n	8010eb2 <pvPortMalloc+0xaa>
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d1f1      	bne.n	8010e96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010eb2:	4b37      	ldr	r3, [pc, #220]	@ (8010f90 <pvPortMalloc+0x188>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d04e      	beq.n	8010f5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010ebc:	6a3b      	ldr	r3, [r7, #32]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2208      	movs	r2, #8
 8010ec2:	4413      	add	r3, r2
 8010ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed0:	685a      	ldr	r2, [r3, #4]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	1ad2      	subs	r2, r2, r3
 8010ed6:	2308      	movs	r3, #8
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d922      	bls.n	8010f24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	4413      	add	r3, r2
 8010ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	f003 0307 	and.w	r3, r3, #7
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00d      	beq.n	8010f0c <pvPortMalloc+0x104>
	__asm volatile
 8010ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ef4:	b672      	cpsid	i
 8010ef6:	f383 8811 	msr	BASEPRI, r3
 8010efa:	f3bf 8f6f 	isb	sy
 8010efe:	f3bf 8f4f 	dsb	sy
 8010f02:	b662      	cpsie	i
 8010f04:	613b      	str	r3, [r7, #16]
}
 8010f06:	bf00      	nop
 8010f08:	bf00      	nop
 8010f0a:	e7fd      	b.n	8010f08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f0e:	685a      	ldr	r2, [r3, #4]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	1ad2      	subs	r2, r2, r3
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f1e:	69b8      	ldr	r0, [r7, #24]
 8010f20:	f000 f902 	bl	8011128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f24:	4b1c      	ldr	r3, [pc, #112]	@ (8010f98 <pvPortMalloc+0x190>)
 8010f26:	681a      	ldr	r2, [r3, #0]
 8010f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	1ad3      	subs	r3, r2, r3
 8010f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8010f98 <pvPortMalloc+0x190>)
 8010f30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f32:	4b19      	ldr	r3, [pc, #100]	@ (8010f98 <pvPortMalloc+0x190>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	4b1a      	ldr	r3, [pc, #104]	@ (8010fa0 <pvPortMalloc+0x198>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d203      	bcs.n	8010f46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f3e:	4b16      	ldr	r3, [pc, #88]	@ (8010f98 <pvPortMalloc+0x190>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	4a17      	ldr	r2, [pc, #92]	@ (8010fa0 <pvPortMalloc+0x198>)
 8010f44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f48:	685a      	ldr	r2, [r3, #4]
 8010f4a:	4b12      	ldr	r3, [pc, #72]	@ (8010f94 <pvPortMalloc+0x18c>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	431a      	orrs	r2, r3
 8010f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f56:	2200      	movs	r2, #0
 8010f58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f5a:	f7ff f851 	bl	8010000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f5e:	69fb      	ldr	r3, [r7, #28]
 8010f60:	f003 0307 	and.w	r3, r3, #7
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00d      	beq.n	8010f84 <pvPortMalloc+0x17c>
	__asm volatile
 8010f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f6c:	b672      	cpsid	i
 8010f6e:	f383 8811 	msr	BASEPRI, r3
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	f3bf 8f4f 	dsb	sy
 8010f7a:	b662      	cpsie	i
 8010f7c:	60fb      	str	r3, [r7, #12]
}
 8010f7e:	bf00      	nop
 8010f80:	bf00      	nop
 8010f82:	e7fd      	b.n	8010f80 <pvPortMalloc+0x178>
	return pvReturn;
 8010f84:	69fb      	ldr	r3, [r7, #28]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3728      	adds	r7, #40	@ 0x28
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	20006a50 	.word	0x20006a50
 8010f94:	20006a5c 	.word	0x20006a5c
 8010f98:	20006a54 	.word	0x20006a54
 8010f9c:	20006a48 	.word	0x20006a48
 8010fa0:	20006a58 	.word	0x20006a58

08010fa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b086      	sub	sp, #24
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d04e      	beq.n	8011054 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010fb6:	2308      	movs	r3, #8
 8010fb8:	425b      	negs	r3, r3
 8010fba:	697a      	ldr	r2, [r7, #20]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	685a      	ldr	r2, [r3, #4]
 8010fc8:	4b24      	ldr	r3, [pc, #144]	@ (801105c <vPortFree+0xb8>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4013      	ands	r3, r2
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d10d      	bne.n	8010fee <vPortFree+0x4a>
	__asm volatile
 8010fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fd6:	b672      	cpsid	i
 8010fd8:	f383 8811 	msr	BASEPRI, r3
 8010fdc:	f3bf 8f6f 	isb	sy
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	b662      	cpsie	i
 8010fe6:	60fb      	str	r3, [r7, #12]
}
 8010fe8:	bf00      	nop
 8010fea:	bf00      	nop
 8010fec:	e7fd      	b.n	8010fea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d00d      	beq.n	8011012 <vPortFree+0x6e>
	__asm volatile
 8010ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ffa:	b672      	cpsid	i
 8010ffc:	f383 8811 	msr	BASEPRI, r3
 8011000:	f3bf 8f6f 	isb	sy
 8011004:	f3bf 8f4f 	dsb	sy
 8011008:	b662      	cpsie	i
 801100a:	60bb      	str	r3, [r7, #8]
}
 801100c:	bf00      	nop
 801100e:	bf00      	nop
 8011010:	e7fd      	b.n	801100e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	685a      	ldr	r2, [r3, #4]
 8011016:	4b11      	ldr	r3, [pc, #68]	@ (801105c <vPortFree+0xb8>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4013      	ands	r3, r2
 801101c:	2b00      	cmp	r3, #0
 801101e:	d019      	beq.n	8011054 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d115      	bne.n	8011054 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	685a      	ldr	r2, [r3, #4]
 801102c:	4b0b      	ldr	r3, [pc, #44]	@ (801105c <vPortFree+0xb8>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	43db      	mvns	r3, r3
 8011032:	401a      	ands	r2, r3
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011038:	f7fe ffd4 	bl	800ffe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	685a      	ldr	r2, [r3, #4]
 8011040:	4b07      	ldr	r3, [pc, #28]	@ (8011060 <vPortFree+0xbc>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	4413      	add	r3, r2
 8011046:	4a06      	ldr	r2, [pc, #24]	@ (8011060 <vPortFree+0xbc>)
 8011048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801104a:	6938      	ldr	r0, [r7, #16]
 801104c:	f000 f86c 	bl	8011128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011050:	f7fe ffd6 	bl	8010000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011054:	bf00      	nop
 8011056:	3718      	adds	r7, #24
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	20006a5c 	.word	0x20006a5c
 8011060:	20006a54 	.word	0x20006a54

08011064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011064:	b480      	push	{r7}
 8011066:	b085      	sub	sp, #20
 8011068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801106a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801106e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011070:	4b27      	ldr	r3, [pc, #156]	@ (8011110 <prvHeapInit+0xac>)
 8011072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f003 0307 	and.w	r3, r3, #7
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00c      	beq.n	8011098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	3307      	adds	r3, #7
 8011082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f023 0307 	bic.w	r3, r3, #7
 801108a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	4a1f      	ldr	r2, [pc, #124]	@ (8011110 <prvHeapInit+0xac>)
 8011094:	4413      	add	r3, r2
 8011096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801109c:	4a1d      	ldr	r2, [pc, #116]	@ (8011114 <prvHeapInit+0xb0>)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80110a2:	4b1c      	ldr	r3, [pc, #112]	@ (8011114 <prvHeapInit+0xb0>)
 80110a4:	2200      	movs	r2, #0
 80110a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	68ba      	ldr	r2, [r7, #8]
 80110ac:	4413      	add	r3, r2
 80110ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80110b0:	2208      	movs	r2, #8
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	1a9b      	subs	r3, r3, r2
 80110b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f023 0307 	bic.w	r3, r3, #7
 80110be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	4a15      	ldr	r2, [pc, #84]	@ (8011118 <prvHeapInit+0xb4>)
 80110c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80110c6:	4b14      	ldr	r3, [pc, #80]	@ (8011118 <prvHeapInit+0xb4>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2200      	movs	r2, #0
 80110cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80110ce:	4b12      	ldr	r3, [pc, #72]	@ (8011118 <prvHeapInit+0xb4>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	1ad2      	subs	r2, r2, r3
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80110e4:	4b0c      	ldr	r3, [pc, #48]	@ (8011118 <prvHeapInit+0xb4>)
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	4a0a      	ldr	r2, [pc, #40]	@ (801111c <prvHeapInit+0xb8>)
 80110f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	4a09      	ldr	r2, [pc, #36]	@ (8011120 <prvHeapInit+0xbc>)
 80110fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80110fc:	4b09      	ldr	r3, [pc, #36]	@ (8011124 <prvHeapInit+0xc0>)
 80110fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011102:	601a      	str	r2, [r3, #0]
}
 8011104:	bf00      	nop
 8011106:	3714      	adds	r7, #20
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr
 8011110:	20002e48 	.word	0x20002e48
 8011114:	20006a48 	.word	0x20006a48
 8011118:	20006a50 	.word	0x20006a50
 801111c:	20006a58 	.word	0x20006a58
 8011120:	20006a54 	.word	0x20006a54
 8011124:	20006a5c 	.word	0x20006a5c

08011128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011130:	4b28      	ldr	r3, [pc, #160]	@ (80111d4 <prvInsertBlockIntoFreeList+0xac>)
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	e002      	b.n	801113c <prvInsertBlockIntoFreeList+0x14>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	60fb      	str	r3, [r7, #12]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d8f7      	bhi.n	8011136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	4413      	add	r3, r2
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	429a      	cmp	r2, r3
 8011156:	d108      	bne.n	801116a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	441a      	add	r2, r3
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	441a      	add	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	429a      	cmp	r2, r3
 801117c:	d118      	bne.n	80111b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681a      	ldr	r2, [r3, #0]
 8011182:	4b15      	ldr	r3, [pc, #84]	@ (80111d8 <prvInsertBlockIntoFreeList+0xb0>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	429a      	cmp	r2, r3
 8011188:	d00d      	beq.n	80111a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	685a      	ldr	r2, [r3, #4]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	441a      	add	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	601a      	str	r2, [r3, #0]
 80111a4:	e008      	b.n	80111b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80111a6:	4b0c      	ldr	r3, [pc, #48]	@ (80111d8 <prvInsertBlockIntoFreeList+0xb0>)
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	e003      	b.n	80111b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80111b8:	68fa      	ldr	r2, [r7, #12]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d002      	beq.n	80111c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111c6:	bf00      	nop
 80111c8:	3714      	adds	r7, #20
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop
 80111d4:	20006a48 	.word	0x20006a48
 80111d8:	20006a50 	.word	0x20006a50
 80111dc:	00000000 	.word	0x00000000

080111e0 <sin>:
 80111e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111e2:	eeb0 7b40 	vmov.f64	d7, d0
 80111e6:	ee17 3a90 	vmov	r3, s15
 80111ea:	4a21      	ldr	r2, [pc, #132]	@ (8011270 <sin+0x90>)
 80111ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d807      	bhi.n	8011204 <sin+0x24>
 80111f4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8011268 <sin+0x88>
 80111f8:	2000      	movs	r0, #0
 80111fa:	b005      	add	sp, #20
 80111fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011200:	f000 bc62 	b.w	8011ac8 <__kernel_sin>
 8011204:	4a1b      	ldr	r2, [pc, #108]	@ (8011274 <sin+0x94>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d904      	bls.n	8011214 <sin+0x34>
 801120a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801120e:	b005      	add	sp, #20
 8011210:	f85d fb04 	ldr.w	pc, [sp], #4
 8011214:	4668      	mov	r0, sp
 8011216:	f000 f82f 	bl	8011278 <__ieee754_rem_pio2>
 801121a:	f000 0003 	and.w	r0, r0, #3
 801121e:	2801      	cmp	r0, #1
 8011220:	d00a      	beq.n	8011238 <sin+0x58>
 8011222:	2802      	cmp	r0, #2
 8011224:	d00f      	beq.n	8011246 <sin+0x66>
 8011226:	b9c0      	cbnz	r0, 801125a <sin+0x7a>
 8011228:	ed9d 1b02 	vldr	d1, [sp, #8]
 801122c:	ed9d 0b00 	vldr	d0, [sp]
 8011230:	2001      	movs	r0, #1
 8011232:	f000 fc49 	bl	8011ac8 <__kernel_sin>
 8011236:	e7ea      	b.n	801120e <sin+0x2e>
 8011238:	ed9d 1b02 	vldr	d1, [sp, #8]
 801123c:	ed9d 0b00 	vldr	d0, [sp]
 8011240:	f000 fbda 	bl	80119f8 <__kernel_cos>
 8011244:	e7e3      	b.n	801120e <sin+0x2e>
 8011246:	ed9d 1b02 	vldr	d1, [sp, #8]
 801124a:	ed9d 0b00 	vldr	d0, [sp]
 801124e:	2001      	movs	r0, #1
 8011250:	f000 fc3a 	bl	8011ac8 <__kernel_sin>
 8011254:	eeb1 0b40 	vneg.f64	d0, d0
 8011258:	e7d9      	b.n	801120e <sin+0x2e>
 801125a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801125e:	ed9d 0b00 	vldr	d0, [sp]
 8011262:	f000 fbc9 	bl	80119f8 <__kernel_cos>
 8011266:	e7f5      	b.n	8011254 <sin+0x74>
	...
 8011270:	3fe921fb 	.word	0x3fe921fb
 8011274:	7fefffff 	.word	0x7fefffff

08011278 <__ieee754_rem_pio2>:
 8011278:	b570      	push	{r4, r5, r6, lr}
 801127a:	eeb0 7b40 	vmov.f64	d7, d0
 801127e:	ee17 5a90 	vmov	r5, s15
 8011282:	4b99      	ldr	r3, [pc, #612]	@ (80114e8 <__ieee754_rem_pio2+0x270>)
 8011284:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011288:	429e      	cmp	r6, r3
 801128a:	b088      	sub	sp, #32
 801128c:	4604      	mov	r4, r0
 801128e:	d807      	bhi.n	80112a0 <__ieee754_rem_pio2+0x28>
 8011290:	2200      	movs	r2, #0
 8011292:	2300      	movs	r3, #0
 8011294:	ed84 0b00 	vstr	d0, [r4]
 8011298:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801129c:	2000      	movs	r0, #0
 801129e:	e01b      	b.n	80112d8 <__ieee754_rem_pio2+0x60>
 80112a0:	4b92      	ldr	r3, [pc, #584]	@ (80114ec <__ieee754_rem_pio2+0x274>)
 80112a2:	429e      	cmp	r6, r3
 80112a4:	d83b      	bhi.n	801131e <__ieee754_rem_pio2+0xa6>
 80112a6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 80112aa:	2d00      	cmp	r5, #0
 80112ac:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 80114a8 <__ieee754_rem_pio2+0x230>
 80112b0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 80112b4:	dd19      	ble.n	80112ea <__ieee754_rem_pio2+0x72>
 80112b6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80112ba:	429e      	cmp	r6, r3
 80112bc:	d00e      	beq.n	80112dc <__ieee754_rem_pio2+0x64>
 80112be:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 80114b0 <__ieee754_rem_pio2+0x238>
 80112c2:	ee37 6b45 	vsub.f64	d6, d7, d5
 80112c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112ca:	ed84 6b00 	vstr	d6, [r4]
 80112ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 80112d2:	ed84 7b02 	vstr	d7, [r4, #8]
 80112d6:	2001      	movs	r0, #1
 80112d8:	b008      	add	sp, #32
 80112da:	bd70      	pop	{r4, r5, r6, pc}
 80112dc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 80114b8 <__ieee754_rem_pio2+0x240>
 80112e0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 80114c0 <__ieee754_rem_pio2+0x248>
 80112e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112e8:	e7eb      	b.n	80112c2 <__ieee754_rem_pio2+0x4a>
 80112ea:	429e      	cmp	r6, r3
 80112ec:	ee30 7b06 	vadd.f64	d7, d0, d6
 80112f0:	d00e      	beq.n	8011310 <__ieee754_rem_pio2+0x98>
 80112f2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 80114b0 <__ieee754_rem_pio2+0x238>
 80112f6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80112fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112fe:	ed84 6b00 	vstr	d6, [r4]
 8011302:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801130a:	ed84 7b02 	vstr	d7, [r4, #8]
 801130e:	e7e3      	b.n	80112d8 <__ieee754_rem_pio2+0x60>
 8011310:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 80114b8 <__ieee754_rem_pio2+0x240>
 8011314:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 80114c0 <__ieee754_rem_pio2+0x248>
 8011318:	ee37 7b06 	vadd.f64	d7, d7, d6
 801131c:	e7eb      	b.n	80112f6 <__ieee754_rem_pio2+0x7e>
 801131e:	4b74      	ldr	r3, [pc, #464]	@ (80114f0 <__ieee754_rem_pio2+0x278>)
 8011320:	429e      	cmp	r6, r3
 8011322:	d870      	bhi.n	8011406 <__ieee754_rem_pio2+0x18e>
 8011324:	f000 fc28 	bl	8011b78 <fabs>
 8011328:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801132c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80114c8 <__ieee754_rem_pio2+0x250>
 8011330:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011334:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011338:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801133c:	ee17 0a90 	vmov	r0, s15
 8011340:	eeb1 4b45 	vneg.f64	d4, d5
 8011344:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80114a8 <__ieee754_rem_pio2+0x230>
 8011348:	eea5 0b47 	vfms.f64	d0, d5, d7
 801134c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80114b0 <__ieee754_rem_pio2+0x238>
 8011350:	281f      	cmp	r0, #31
 8011352:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011356:	ee30 6b47 	vsub.f64	d6, d0, d7
 801135a:	dc05      	bgt.n	8011368 <__ieee754_rem_pio2+0xf0>
 801135c:	4b65      	ldr	r3, [pc, #404]	@ (80114f4 <__ieee754_rem_pio2+0x27c>)
 801135e:	1e42      	subs	r2, r0, #1
 8011360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011364:	42b3      	cmp	r3, r6
 8011366:	d109      	bne.n	801137c <__ieee754_rem_pio2+0x104>
 8011368:	ee16 3a90 	vmov	r3, s13
 801136c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011370:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011374:	2b10      	cmp	r3, #16
 8011376:	ea4f 5226 	mov.w	r2, r6, asr #20
 801137a:	dc02      	bgt.n	8011382 <__ieee754_rem_pio2+0x10a>
 801137c:	ed84 6b00 	vstr	d6, [r4]
 8011380:	e01a      	b.n	80113b8 <__ieee754_rem_pio2+0x140>
 8011382:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 80114b8 <__ieee754_rem_pio2+0x240>
 8011386:	eeb0 6b40 	vmov.f64	d6, d0
 801138a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801138e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011392:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011396:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 80114c0 <__ieee754_rem_pio2+0x248>
 801139a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801139e:	ee36 3b47 	vsub.f64	d3, d6, d7
 80113a2:	ee13 3a90 	vmov	r3, s7
 80113a6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80113aa:	1ad3      	subs	r3, r2, r3
 80113ac:	2b31      	cmp	r3, #49	@ 0x31
 80113ae:	dc17      	bgt.n	80113e0 <__ieee754_rem_pio2+0x168>
 80113b0:	eeb0 0b46 	vmov.f64	d0, d6
 80113b4:	ed84 3b00 	vstr	d3, [r4]
 80113b8:	ed94 6b00 	vldr	d6, [r4]
 80113bc:	2d00      	cmp	r5, #0
 80113be:	ee30 0b46 	vsub.f64	d0, d0, d6
 80113c2:	ee30 0b47 	vsub.f64	d0, d0, d7
 80113c6:	ed84 0b02 	vstr	d0, [r4, #8]
 80113ca:	da85      	bge.n	80112d8 <__ieee754_rem_pio2+0x60>
 80113cc:	eeb1 6b46 	vneg.f64	d6, d6
 80113d0:	eeb1 0b40 	vneg.f64	d0, d0
 80113d4:	ed84 6b00 	vstr	d6, [r4]
 80113d8:	ed84 0b02 	vstr	d0, [r4, #8]
 80113dc:	4240      	negs	r0, r0
 80113de:	e77b      	b.n	80112d8 <__ieee754_rem_pio2+0x60>
 80113e0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 80114d0 <__ieee754_rem_pio2+0x258>
 80113e4:	eeb0 0b46 	vmov.f64	d0, d6
 80113e8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80113ec:	ee36 6b40 	vsub.f64	d6, d6, d0
 80113f0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80113f4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 80114d8 <__ieee754_rem_pio2+0x260>
 80113f8:	eeb0 7b46 	vmov.f64	d7, d6
 80113fc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8011400:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011404:	e7ba      	b.n	801137c <__ieee754_rem_pio2+0x104>
 8011406:	4b3c      	ldr	r3, [pc, #240]	@ (80114f8 <__ieee754_rem_pio2+0x280>)
 8011408:	429e      	cmp	r6, r3
 801140a:	d906      	bls.n	801141a <__ieee754_rem_pio2+0x1a2>
 801140c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011410:	ed80 7b02 	vstr	d7, [r0, #8]
 8011414:	ed80 7b00 	vstr	d7, [r0]
 8011418:	e740      	b.n	801129c <__ieee754_rem_pio2+0x24>
 801141a:	ee10 3a10 	vmov	r3, s0
 801141e:	1532      	asrs	r2, r6, #20
 8011420:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8011424:	4618      	mov	r0, r3
 8011426:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801142a:	ec41 0b17 	vmov	d7, r0, r1
 801142e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011432:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80114e0 <__ieee754_rem_pio2+0x268>
 8011436:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801143a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801143e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011442:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011446:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801144a:	a808      	add	r0, sp, #32
 801144c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011450:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011454:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011458:	ee27 7b05 	vmul.f64	d7, d7, d5
 801145c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011460:	2103      	movs	r1, #3
 8011462:	ed30 7b02 	vldmdb	r0!, {d7}
 8011466:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146e:	460b      	mov	r3, r1
 8011470:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8011474:	d0f5      	beq.n	8011462 <__ieee754_rem_pio2+0x1ea>
 8011476:	4921      	ldr	r1, [pc, #132]	@ (80114fc <__ieee754_rem_pio2+0x284>)
 8011478:	9101      	str	r1, [sp, #4]
 801147a:	2102      	movs	r1, #2
 801147c:	9100      	str	r1, [sp, #0]
 801147e:	a802      	add	r0, sp, #8
 8011480:	4621      	mov	r1, r4
 8011482:	f000 f83d 	bl	8011500 <__kernel_rem_pio2>
 8011486:	2d00      	cmp	r5, #0
 8011488:	f6bf af26 	bge.w	80112d8 <__ieee754_rem_pio2+0x60>
 801148c:	ed94 7b00 	vldr	d7, [r4]
 8011490:	eeb1 7b47 	vneg.f64	d7, d7
 8011494:	ed84 7b00 	vstr	d7, [r4]
 8011498:	ed94 7b02 	vldr	d7, [r4, #8]
 801149c:	eeb1 7b47 	vneg.f64	d7, d7
 80114a0:	ed84 7b02 	vstr	d7, [r4, #8]
 80114a4:	e79a      	b.n	80113dc <__ieee754_rem_pio2+0x164>
 80114a6:	bf00      	nop
 80114a8:	54400000 	.word	0x54400000
 80114ac:	3ff921fb 	.word	0x3ff921fb
 80114b0:	1a626331 	.word	0x1a626331
 80114b4:	3dd0b461 	.word	0x3dd0b461
 80114b8:	1a600000 	.word	0x1a600000
 80114bc:	3dd0b461 	.word	0x3dd0b461
 80114c0:	2e037073 	.word	0x2e037073
 80114c4:	3ba3198a 	.word	0x3ba3198a
 80114c8:	6dc9c883 	.word	0x6dc9c883
 80114cc:	3fe45f30 	.word	0x3fe45f30
 80114d0:	2e000000 	.word	0x2e000000
 80114d4:	3ba3198a 	.word	0x3ba3198a
 80114d8:	252049c1 	.word	0x252049c1
 80114dc:	397b839a 	.word	0x397b839a
 80114e0:	00000000 	.word	0x00000000
 80114e4:	41700000 	.word	0x41700000
 80114e8:	3fe921fb 	.word	0x3fe921fb
 80114ec:	4002d97b 	.word	0x4002d97b
 80114f0:	413921fb 	.word	0x413921fb
 80114f4:	08014c5c 	.word	0x08014c5c
 80114f8:	7fefffff 	.word	0x7fefffff
 80114fc:	08014cdc 	.word	0x08014cdc

08011500 <__kernel_rem_pio2>:
 8011500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011504:	ed2d 8b06 	vpush	{d8-d10}
 8011508:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801150c:	469b      	mov	fp, r3
 801150e:	9001      	str	r0, [sp, #4]
 8011510:	4bbb      	ldr	r3, [pc, #748]	@ (8011800 <__kernel_rem_pio2+0x300>)
 8011512:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8011514:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8011518:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801151c:	f112 0f14 	cmn.w	r2, #20
 8011520:	bfa8      	it	ge
 8011522:	1ed3      	subge	r3, r2, #3
 8011524:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8011528:	bfb8      	it	lt
 801152a:	2300      	movlt	r3, #0
 801152c:	f06f 0517 	mvn.w	r5, #23
 8011530:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80117e8 <__kernel_rem_pio2+0x2e8>
 8011534:	bfa4      	itt	ge
 8011536:	2018      	movge	r0, #24
 8011538:	fb93 f3f0 	sdivge	r3, r3, r0
 801153c:	fb03 5505 	mla	r5, r3, r5, r5
 8011540:	eba3 040a 	sub.w	r4, r3, sl
 8011544:	4415      	add	r5, r2
 8011546:	460f      	mov	r7, r1
 8011548:	eb09 060a 	add.w	r6, r9, sl
 801154c:	a81a      	add	r0, sp, #104	@ 0x68
 801154e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8011552:	2200      	movs	r2, #0
 8011554:	42b2      	cmp	r2, r6
 8011556:	dd0e      	ble.n	8011576 <__kernel_rem_pio2+0x76>
 8011558:	aa1a      	add	r2, sp, #104	@ 0x68
 801155a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801155e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8011562:	2600      	movs	r6, #0
 8011564:	454e      	cmp	r6, r9
 8011566:	dc25      	bgt.n	80115b4 <__kernel_rem_pio2+0xb4>
 8011568:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80117e8 <__kernel_rem_pio2+0x2e8>
 801156c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011570:	4614      	mov	r4, r2
 8011572:	2000      	movs	r0, #0
 8011574:	e015      	b.n	80115a2 <__kernel_rem_pio2+0xa2>
 8011576:	42d4      	cmn	r4, r2
 8011578:	d409      	bmi.n	801158e <__kernel_rem_pio2+0x8e>
 801157a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801157e:	ee07 1a90 	vmov	s15, r1
 8011582:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011586:	eca0 7b02 	vstmia	r0!, {d7}
 801158a:	3201      	adds	r2, #1
 801158c:	e7e2      	b.n	8011554 <__kernel_rem_pio2+0x54>
 801158e:	eeb0 7b46 	vmov.f64	d7, d6
 8011592:	e7f8      	b.n	8011586 <__kernel_rem_pio2+0x86>
 8011594:	ecbc 5b02 	vldmia	ip!, {d5}
 8011598:	ed94 6b00 	vldr	d6, [r4]
 801159c:	3001      	adds	r0, #1
 801159e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80115a2:	4550      	cmp	r0, sl
 80115a4:	f1a4 0408 	sub.w	r4, r4, #8
 80115a8:	ddf4      	ble.n	8011594 <__kernel_rem_pio2+0x94>
 80115aa:	ecae 7b02 	vstmia	lr!, {d7}
 80115ae:	3601      	adds	r6, #1
 80115b0:	3208      	adds	r2, #8
 80115b2:	e7d7      	b.n	8011564 <__kernel_rem_pio2+0x64>
 80115b4:	aa06      	add	r2, sp, #24
 80115b6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80117f0 <__kernel_rem_pio2+0x2f0>
 80115ba:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80117f8 <__kernel_rem_pio2+0x2f8>
 80115be:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80115c2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80115c6:	9203      	str	r2, [sp, #12]
 80115c8:	9302      	str	r3, [sp, #8]
 80115ca:	464c      	mov	r4, r9
 80115cc:	00e3      	lsls	r3, r4, #3
 80115ce:	9304      	str	r3, [sp, #16]
 80115d0:	ab92      	add	r3, sp, #584	@ 0x248
 80115d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80115d6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80115da:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80115dc:	ab06      	add	r3, sp, #24
 80115de:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80115e2:	461e      	mov	r6, r3
 80115e4:	4620      	mov	r0, r4
 80115e6:	2800      	cmp	r0, #0
 80115e8:	f1a2 0208 	sub.w	r2, r2, #8
 80115ec:	dc4a      	bgt.n	8011684 <__kernel_rem_pio2+0x184>
 80115ee:	4628      	mov	r0, r5
 80115f0:	9305      	str	r3, [sp, #20]
 80115f2:	f000 fac9 	bl	8011b88 <scalbn>
 80115f6:	eeb0 8b40 	vmov.f64	d8, d0
 80115fa:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80115fe:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011602:	f000 fb41 	bl	8011c88 <floor>
 8011606:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801160a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801160e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011612:	2d00      	cmp	r5, #0
 8011614:	ee17 8a90 	vmov	r8, s15
 8011618:	9b05      	ldr	r3, [sp, #20]
 801161a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801161e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8011622:	dd41      	ble.n	80116a8 <__kernel_rem_pio2+0x1a8>
 8011624:	1e60      	subs	r0, r4, #1
 8011626:	aa06      	add	r2, sp, #24
 8011628:	f1c5 0c18 	rsb	ip, r5, #24
 801162c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8011630:	fa46 f20c 	asr.w	r2, r6, ip
 8011634:	4490      	add	r8, r2
 8011636:	fa02 f20c 	lsl.w	r2, r2, ip
 801163a:	1ab6      	subs	r6, r6, r2
 801163c:	aa06      	add	r2, sp, #24
 801163e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8011642:	f1c5 0217 	rsb	r2, r5, #23
 8011646:	4116      	asrs	r6, r2
 8011648:	2e00      	cmp	r6, #0
 801164a:	dd3c      	ble.n	80116c6 <__kernel_rem_pio2+0x1c6>
 801164c:	f04f 0c00 	mov.w	ip, #0
 8011650:	f108 0801 	add.w	r8, r8, #1
 8011654:	4660      	mov	r0, ip
 8011656:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801165a:	4564      	cmp	r4, ip
 801165c:	dc66      	bgt.n	801172c <__kernel_rem_pio2+0x22c>
 801165e:	2d00      	cmp	r5, #0
 8011660:	dd03      	ble.n	801166a <__kernel_rem_pio2+0x16a>
 8011662:	2d01      	cmp	r5, #1
 8011664:	d072      	beq.n	801174c <__kernel_rem_pio2+0x24c>
 8011666:	2d02      	cmp	r5, #2
 8011668:	d07a      	beq.n	8011760 <__kernel_rem_pio2+0x260>
 801166a:	2e02      	cmp	r6, #2
 801166c:	d12b      	bne.n	80116c6 <__kernel_rem_pio2+0x1c6>
 801166e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011672:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011676:	b330      	cbz	r0, 80116c6 <__kernel_rem_pio2+0x1c6>
 8011678:	4628      	mov	r0, r5
 801167a:	f000 fa85 	bl	8011b88 <scalbn>
 801167e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011682:	e020      	b.n	80116c6 <__kernel_rem_pio2+0x1c6>
 8011684:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011688:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801168c:	3801      	subs	r0, #1
 801168e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011692:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011696:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801169a:	eca6 0a01 	vstmia	r6!, {s0}
 801169e:	ed92 0b00 	vldr	d0, [r2]
 80116a2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80116a6:	e79e      	b.n	80115e6 <__kernel_rem_pio2+0xe6>
 80116a8:	d105      	bne.n	80116b6 <__kernel_rem_pio2+0x1b6>
 80116aa:	1e62      	subs	r2, r4, #1
 80116ac:	a906      	add	r1, sp, #24
 80116ae:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80116b2:	15f6      	asrs	r6, r6, #23
 80116b4:	e7c8      	b.n	8011648 <__kernel_rem_pio2+0x148>
 80116b6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80116ba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80116be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c2:	da31      	bge.n	8011728 <__kernel_rem_pio2+0x228>
 80116c4:	2600      	movs	r6, #0
 80116c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80116ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ce:	f040 809b 	bne.w	8011808 <__kernel_rem_pio2+0x308>
 80116d2:	1e62      	subs	r2, r4, #1
 80116d4:	2000      	movs	r0, #0
 80116d6:	454a      	cmp	r2, r9
 80116d8:	da49      	bge.n	801176e <__kernel_rem_pio2+0x26e>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d062      	beq.n	80117a4 <__kernel_rem_pio2+0x2a4>
 80116de:	3c01      	subs	r4, #1
 80116e0:	ab06      	add	r3, sp, #24
 80116e2:	3d18      	subs	r5, #24
 80116e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d0f8      	beq.n	80116de <__kernel_rem_pio2+0x1de>
 80116ec:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80116f0:	4628      	mov	r0, r5
 80116f2:	f000 fa49 	bl	8011b88 <scalbn>
 80116f6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80117f0 <__kernel_rem_pio2+0x2f0>
 80116fa:	1c62      	adds	r2, r4, #1
 80116fc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80116fe:	00d3      	lsls	r3, r2, #3
 8011700:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011704:	4622      	mov	r2, r4
 8011706:	2a00      	cmp	r2, #0
 8011708:	f280 80a8 	bge.w	801185c <__kernel_rem_pio2+0x35c>
 801170c:	4622      	mov	r2, r4
 801170e:	2a00      	cmp	r2, #0
 8011710:	f2c0 80c6 	blt.w	80118a0 <__kernel_rem_pio2+0x3a0>
 8011714:	a96a      	add	r1, sp, #424	@ 0x1a8
 8011716:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801171a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80117e8 <__kernel_rem_pio2+0x2e8>
 801171e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8011804 <__kernel_rem_pio2+0x304>
 8011722:	2000      	movs	r0, #0
 8011724:	1aa1      	subs	r1, r4, r2
 8011726:	e0b0      	b.n	801188a <__kernel_rem_pio2+0x38a>
 8011728:	2602      	movs	r6, #2
 801172a:	e78f      	b.n	801164c <__kernel_rem_pio2+0x14c>
 801172c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011730:	b948      	cbnz	r0, 8011746 <__kernel_rem_pio2+0x246>
 8011732:	b122      	cbz	r2, 801173e <__kernel_rem_pio2+0x23e>
 8011734:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8011738:	f843 2c04 	str.w	r2, [r3, #-4]
 801173c:	2201      	movs	r2, #1
 801173e:	f10c 0c01 	add.w	ip, ip, #1
 8011742:	4610      	mov	r0, r2
 8011744:	e789      	b.n	801165a <__kernel_rem_pio2+0x15a>
 8011746:	ebae 0202 	sub.w	r2, lr, r2
 801174a:	e7f5      	b.n	8011738 <__kernel_rem_pio2+0x238>
 801174c:	1e62      	subs	r2, r4, #1
 801174e:	ab06      	add	r3, sp, #24
 8011750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011754:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011758:	a906      	add	r1, sp, #24
 801175a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801175e:	e784      	b.n	801166a <__kernel_rem_pio2+0x16a>
 8011760:	1e62      	subs	r2, r4, #1
 8011762:	ab06      	add	r3, sp, #24
 8011764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011768:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801176c:	e7f4      	b.n	8011758 <__kernel_rem_pio2+0x258>
 801176e:	ab06      	add	r3, sp, #24
 8011770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011774:	3a01      	subs	r2, #1
 8011776:	4318      	orrs	r0, r3
 8011778:	e7ad      	b.n	80116d6 <__kernel_rem_pio2+0x1d6>
 801177a:	3301      	adds	r3, #1
 801177c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011780:	2800      	cmp	r0, #0
 8011782:	d0fa      	beq.n	801177a <__kernel_rem_pio2+0x27a>
 8011784:	9a04      	ldr	r2, [sp, #16]
 8011786:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801178a:	446a      	add	r2, sp
 801178c:	eb04 000b 	add.w	r0, r4, fp
 8011790:	a91a      	add	r1, sp, #104	@ 0x68
 8011792:	1c66      	adds	r6, r4, #1
 8011794:	3a98      	subs	r2, #152	@ 0x98
 8011796:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801179a:	4423      	add	r3, r4
 801179c:	42b3      	cmp	r3, r6
 801179e:	da04      	bge.n	80117aa <__kernel_rem_pio2+0x2aa>
 80117a0:	461c      	mov	r4, r3
 80117a2:	e713      	b.n	80115cc <__kernel_rem_pio2+0xcc>
 80117a4:	9a03      	ldr	r2, [sp, #12]
 80117a6:	2301      	movs	r3, #1
 80117a8:	e7e8      	b.n	801177c <__kernel_rem_pio2+0x27c>
 80117aa:	9902      	ldr	r1, [sp, #8]
 80117ac:	f8dd c004 	ldr.w	ip, [sp, #4]
 80117b0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80117b4:	9104      	str	r1, [sp, #16]
 80117b6:	ee07 1a90 	vmov	s15, r1
 80117ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80117be:	2400      	movs	r4, #0
 80117c0:	eca0 7b02 	vstmia	r0!, {d7}
 80117c4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80117e8 <__kernel_rem_pio2+0x2e8>
 80117c8:	4686      	mov	lr, r0
 80117ca:	4554      	cmp	r4, sl
 80117cc:	dd03      	ble.n	80117d6 <__kernel_rem_pio2+0x2d6>
 80117ce:	eca2 7b02 	vstmia	r2!, {d7}
 80117d2:	3601      	adds	r6, #1
 80117d4:	e7e2      	b.n	801179c <__kernel_rem_pio2+0x29c>
 80117d6:	ecbc 5b02 	vldmia	ip!, {d5}
 80117da:	ed3e 6b02 	vldmdb	lr!, {d6}
 80117de:	3401      	adds	r4, #1
 80117e0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80117e4:	e7f1      	b.n	80117ca <__kernel_rem_pio2+0x2ca>
 80117e6:	bf00      	nop
	...
 80117f4:	3e700000 	.word	0x3e700000
 80117f8:	00000000 	.word	0x00000000
 80117fc:	41700000 	.word	0x41700000
 8011800:	08014e28 	.word	0x08014e28
 8011804:	08014de8 	.word	0x08014de8
 8011808:	4268      	negs	r0, r5
 801180a:	eeb0 0b48 	vmov.f64	d0, d8
 801180e:	f000 f9bb 	bl	8011b88 <scalbn>
 8011812:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80119e0 <__kernel_rem_pio2+0x4e0>
 8011816:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801181e:	db17      	blt.n	8011850 <__kernel_rem_pio2+0x350>
 8011820:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80119e8 <__kernel_rem_pio2+0x4e8>
 8011824:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011828:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801182c:	aa06      	add	r2, sp, #24
 801182e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011832:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011836:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801183a:	3518      	adds	r5, #24
 801183c:	ee10 3a10 	vmov	r3, s0
 8011840:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011844:	ee17 3a10 	vmov	r3, s14
 8011848:	3401      	adds	r4, #1
 801184a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801184e:	e74d      	b.n	80116ec <__kernel_rem_pio2+0x1ec>
 8011850:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011854:	aa06      	add	r2, sp, #24
 8011856:	ee10 3a10 	vmov	r3, s0
 801185a:	e7f6      	b.n	801184a <__kernel_rem_pio2+0x34a>
 801185c:	a806      	add	r0, sp, #24
 801185e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011862:	9001      	str	r0, [sp, #4]
 8011864:	ee07 0a90 	vmov	s15, r0
 8011868:	3a01      	subs	r2, #1
 801186a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801186e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011872:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011876:	ed21 7b02 	vstmdb	r1!, {d7}
 801187a:	e744      	b.n	8011706 <__kernel_rem_pio2+0x206>
 801187c:	ecbc 5b02 	vldmia	ip!, {d5}
 8011880:	ecb5 6b02 	vldmia	r5!, {d6}
 8011884:	3001      	adds	r0, #1
 8011886:	eea5 7b06 	vfma.f64	d7, d5, d6
 801188a:	4548      	cmp	r0, r9
 801188c:	dc01      	bgt.n	8011892 <__kernel_rem_pio2+0x392>
 801188e:	4281      	cmp	r1, r0
 8011890:	daf4      	bge.n	801187c <__kernel_rem_pio2+0x37c>
 8011892:	a842      	add	r0, sp, #264	@ 0x108
 8011894:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011898:	ed81 7b00 	vstr	d7, [r1]
 801189c:	3a01      	subs	r2, #1
 801189e:	e736      	b.n	801170e <__kernel_rem_pio2+0x20e>
 80118a0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80118a2:	2a02      	cmp	r2, #2
 80118a4:	dc0a      	bgt.n	80118bc <__kernel_rem_pio2+0x3bc>
 80118a6:	2a00      	cmp	r2, #0
 80118a8:	dc2d      	bgt.n	8011906 <__kernel_rem_pio2+0x406>
 80118aa:	d046      	beq.n	801193a <__kernel_rem_pio2+0x43a>
 80118ac:	f008 0007 	and.w	r0, r8, #7
 80118b0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80118b4:	ecbd 8b06 	vpop	{d8-d10}
 80118b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118bc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80118be:	2a03      	cmp	r2, #3
 80118c0:	d1f4      	bne.n	80118ac <__kernel_rem_pio2+0x3ac>
 80118c2:	a942      	add	r1, sp, #264	@ 0x108
 80118c4:	f1a3 0208 	sub.w	r2, r3, #8
 80118c8:	440a      	add	r2, r1
 80118ca:	4611      	mov	r1, r2
 80118cc:	4620      	mov	r0, r4
 80118ce:	2800      	cmp	r0, #0
 80118d0:	f1a1 0108 	sub.w	r1, r1, #8
 80118d4:	dc52      	bgt.n	801197c <__kernel_rem_pio2+0x47c>
 80118d6:	4621      	mov	r1, r4
 80118d8:	2901      	cmp	r1, #1
 80118da:	f1a2 0208 	sub.w	r2, r2, #8
 80118de:	dc5d      	bgt.n	801199c <__kernel_rem_pio2+0x49c>
 80118e0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80119f0 <__kernel_rem_pio2+0x4f0>
 80118e4:	aa42      	add	r2, sp, #264	@ 0x108
 80118e6:	4413      	add	r3, r2
 80118e8:	2c01      	cmp	r4, #1
 80118ea:	dc67      	bgt.n	80119bc <__kernel_rem_pio2+0x4bc>
 80118ec:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80118f0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80118f4:	2e00      	cmp	r6, #0
 80118f6:	d167      	bne.n	80119c8 <__kernel_rem_pio2+0x4c8>
 80118f8:	ed87 5b00 	vstr	d5, [r7]
 80118fc:	ed87 6b02 	vstr	d6, [r7, #8]
 8011900:	ed87 7b04 	vstr	d7, [r7, #16]
 8011904:	e7d2      	b.n	80118ac <__kernel_rem_pio2+0x3ac>
 8011906:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80119f0 <__kernel_rem_pio2+0x4f0>
 801190a:	aa42      	add	r2, sp, #264	@ 0x108
 801190c:	4413      	add	r3, r2
 801190e:	4622      	mov	r2, r4
 8011910:	2a00      	cmp	r2, #0
 8011912:	da24      	bge.n	801195e <__kernel_rem_pio2+0x45e>
 8011914:	b34e      	cbz	r6, 801196a <__kernel_rem_pio2+0x46a>
 8011916:	eeb1 7b46 	vneg.f64	d7, d6
 801191a:	ed87 7b00 	vstr	d7, [r7]
 801191e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8011922:	aa44      	add	r2, sp, #272	@ 0x110
 8011924:	2301      	movs	r3, #1
 8011926:	ee37 7b46 	vsub.f64	d7, d7, d6
 801192a:	429c      	cmp	r4, r3
 801192c:	da20      	bge.n	8011970 <__kernel_rem_pio2+0x470>
 801192e:	b10e      	cbz	r6, 8011934 <__kernel_rem_pio2+0x434>
 8011930:	eeb1 7b47 	vneg.f64	d7, d7
 8011934:	ed87 7b02 	vstr	d7, [r7, #8]
 8011938:	e7b8      	b.n	80118ac <__kernel_rem_pio2+0x3ac>
 801193a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80119f0 <__kernel_rem_pio2+0x4f0>
 801193e:	aa42      	add	r2, sp, #264	@ 0x108
 8011940:	4413      	add	r3, r2
 8011942:	2c00      	cmp	r4, #0
 8011944:	da05      	bge.n	8011952 <__kernel_rem_pio2+0x452>
 8011946:	b10e      	cbz	r6, 801194c <__kernel_rem_pio2+0x44c>
 8011948:	eeb1 7b47 	vneg.f64	d7, d7
 801194c:	ed87 7b00 	vstr	d7, [r7]
 8011950:	e7ac      	b.n	80118ac <__kernel_rem_pio2+0x3ac>
 8011952:	ed33 6b02 	vldmdb	r3!, {d6}
 8011956:	3c01      	subs	r4, #1
 8011958:	ee37 7b06 	vadd.f64	d7, d7, d6
 801195c:	e7f1      	b.n	8011942 <__kernel_rem_pio2+0x442>
 801195e:	ed33 7b02 	vldmdb	r3!, {d7}
 8011962:	3a01      	subs	r2, #1
 8011964:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011968:	e7d2      	b.n	8011910 <__kernel_rem_pio2+0x410>
 801196a:	eeb0 7b46 	vmov.f64	d7, d6
 801196e:	e7d4      	b.n	801191a <__kernel_rem_pio2+0x41a>
 8011970:	ecb2 6b02 	vldmia	r2!, {d6}
 8011974:	3301      	adds	r3, #1
 8011976:	ee37 7b06 	vadd.f64	d7, d7, d6
 801197a:	e7d6      	b.n	801192a <__kernel_rem_pio2+0x42a>
 801197c:	ed91 7b00 	vldr	d7, [r1]
 8011980:	ed91 5b02 	vldr	d5, [r1, #8]
 8011984:	3801      	subs	r0, #1
 8011986:	ee37 6b05 	vadd.f64	d6, d7, d5
 801198a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801198e:	ed81 6b00 	vstr	d6, [r1]
 8011992:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011996:	ed81 7b02 	vstr	d7, [r1, #8]
 801199a:	e798      	b.n	80118ce <__kernel_rem_pio2+0x3ce>
 801199c:	ed92 7b00 	vldr	d7, [r2]
 80119a0:	ed92 5b02 	vldr	d5, [r2, #8]
 80119a4:	3901      	subs	r1, #1
 80119a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80119aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80119ae:	ed82 6b00 	vstr	d6, [r2]
 80119b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80119b6:	ed82 7b02 	vstr	d7, [r2, #8]
 80119ba:	e78d      	b.n	80118d8 <__kernel_rem_pio2+0x3d8>
 80119bc:	ed33 6b02 	vldmdb	r3!, {d6}
 80119c0:	3c01      	subs	r4, #1
 80119c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80119c6:	e78f      	b.n	80118e8 <__kernel_rem_pio2+0x3e8>
 80119c8:	eeb1 5b45 	vneg.f64	d5, d5
 80119cc:	eeb1 6b46 	vneg.f64	d6, d6
 80119d0:	ed87 5b00 	vstr	d5, [r7]
 80119d4:	eeb1 7b47 	vneg.f64	d7, d7
 80119d8:	ed87 6b02 	vstr	d6, [r7, #8]
 80119dc:	e790      	b.n	8011900 <__kernel_rem_pio2+0x400>
 80119de:	bf00      	nop
 80119e0:	00000000 	.word	0x00000000
 80119e4:	41700000 	.word	0x41700000
 80119e8:	00000000 	.word	0x00000000
 80119ec:	3e700000 	.word	0x3e700000
	...

080119f8 <__kernel_cos>:
 80119f8:	eeb0 5b40 	vmov.f64	d5, d0
 80119fc:	ee15 1a90 	vmov	r1, s11
 8011a00:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011a04:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8011a08:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8011a0c:	d204      	bcs.n	8011a18 <__kernel_cos+0x20>
 8011a0e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8011a12:	ee17 3a90 	vmov	r3, s15
 8011a16:	b343      	cbz	r3, 8011a6a <__kernel_cos+0x72>
 8011a18:	ee25 6b05 	vmul.f64	d6, d5, d5
 8011a1c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8011a20:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8011a90 <__kernel_cos+0x98>
 8011a24:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8011a98 <__kernel_cos+0xa0>
 8011a28:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011a2c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8011aa0 <__kernel_cos+0xa8>
 8011a30:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011a34:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8011aa8 <__kernel_cos+0xb0>
 8011a38:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011a3c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8011ab0 <__kernel_cos+0xb8>
 8011a40:	4b1f      	ldr	r3, [pc, #124]	@ (8011ac0 <__kernel_cos+0xc8>)
 8011a42:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011a46:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8011ab8 <__kernel_cos+0xc0>
 8011a4a:	4299      	cmp	r1, r3
 8011a4c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011a50:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8011a54:	ee24 4b06 	vmul.f64	d4, d4, d6
 8011a58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011a5c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8011a60:	d804      	bhi.n	8011a6c <__kernel_cos+0x74>
 8011a62:	ee37 7b41 	vsub.f64	d7, d7, d1
 8011a66:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011a6a:	4770      	bx	lr
 8011a6c:	4b15      	ldr	r3, [pc, #84]	@ (8011ac4 <__kernel_cos+0xcc>)
 8011a6e:	4299      	cmp	r1, r3
 8011a70:	d809      	bhi.n	8011a86 <__kernel_cos+0x8e>
 8011a72:	2200      	movs	r2, #0
 8011a74:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8011a78:	ec43 2b16 	vmov	d6, r2, r3
 8011a7c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011a80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011a84:	e7ed      	b.n	8011a62 <__kernel_cos+0x6a>
 8011a86:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8011a8a:	e7f7      	b.n	8011a7c <__kernel_cos+0x84>
 8011a8c:	f3af 8000 	nop.w
 8011a90:	be8838d4 	.word	0xbe8838d4
 8011a94:	bda8fae9 	.word	0xbda8fae9
 8011a98:	bdb4b1c4 	.word	0xbdb4b1c4
 8011a9c:	3e21ee9e 	.word	0x3e21ee9e
 8011aa0:	809c52ad 	.word	0x809c52ad
 8011aa4:	be927e4f 	.word	0xbe927e4f
 8011aa8:	19cb1590 	.word	0x19cb1590
 8011aac:	3efa01a0 	.word	0x3efa01a0
 8011ab0:	16c15177 	.word	0x16c15177
 8011ab4:	bf56c16c 	.word	0xbf56c16c
 8011ab8:	5555554c 	.word	0x5555554c
 8011abc:	3fa55555 	.word	0x3fa55555
 8011ac0:	3fd33332 	.word	0x3fd33332
 8011ac4:	3fe90000 	.word	0x3fe90000

08011ac8 <__kernel_sin>:
 8011ac8:	ee10 3a90 	vmov	r3, s1
 8011acc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011ad0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8011ad4:	d204      	bcs.n	8011ae0 <__kernel_sin+0x18>
 8011ad6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011ada:	ee17 3a90 	vmov	r3, s15
 8011ade:	b35b      	cbz	r3, 8011b38 <__kernel_sin+0x70>
 8011ae0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011ae4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011ae8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8011b40 <__kernel_sin+0x78>
 8011aec:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8011b48 <__kernel_sin+0x80>
 8011af0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011af4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011b50 <__kernel_sin+0x88>
 8011af8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011afc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8011b58 <__kernel_sin+0x90>
 8011b00:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011b04:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011b60 <__kernel_sin+0x98>
 8011b08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011b0c:	b930      	cbnz	r0, 8011b1c <__kernel_sin+0x54>
 8011b0e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8011b68 <__kernel_sin+0xa0>
 8011b12:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011b16:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011b1a:	4770      	bx	lr
 8011b1c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011b20:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8011b24:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011b28:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011b2c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8011b70 <__kernel_sin+0xa8>
 8011b30:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011b34:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop
 8011b3c:	f3af 8000 	nop.w
 8011b40:	5acfd57c 	.word	0x5acfd57c
 8011b44:	3de5d93a 	.word	0x3de5d93a
 8011b48:	8a2b9ceb 	.word	0x8a2b9ceb
 8011b4c:	be5ae5e6 	.word	0xbe5ae5e6
 8011b50:	57b1fe7d 	.word	0x57b1fe7d
 8011b54:	3ec71de3 	.word	0x3ec71de3
 8011b58:	19c161d5 	.word	0x19c161d5
 8011b5c:	bf2a01a0 	.word	0xbf2a01a0
 8011b60:	1110f8a6 	.word	0x1110f8a6
 8011b64:	3f811111 	.word	0x3f811111
 8011b68:	55555549 	.word	0x55555549
 8011b6c:	bfc55555 	.word	0xbfc55555
 8011b70:	55555549 	.word	0x55555549
 8011b74:	3fc55555 	.word	0x3fc55555

08011b78 <fabs>:
 8011b78:	ec51 0b10 	vmov	r0, r1, d0
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011b82:	ec43 2b10 	vmov	d0, r2, r3
 8011b86:	4770      	bx	lr

08011b88 <scalbn>:
 8011b88:	ee10 1a90 	vmov	r1, s1
 8011b8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011b90:	b98b      	cbnz	r3, 8011bb6 <scalbn+0x2e>
 8011b92:	ee10 3a10 	vmov	r3, s0
 8011b96:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8011b9a:	4319      	orrs	r1, r3
 8011b9c:	d00a      	beq.n	8011bb4 <scalbn+0x2c>
 8011b9e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8011c50 <scalbn+0xc8>
 8011ba2:	4b37      	ldr	r3, [pc, #220]	@ (8011c80 <scalbn+0xf8>)
 8011ba4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011ba8:	4298      	cmp	r0, r3
 8011baa:	da0b      	bge.n	8011bc4 <scalbn+0x3c>
 8011bac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011c58 <scalbn+0xd0>
 8011bb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011bb4:	4770      	bx	lr
 8011bb6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d107      	bne.n	8011bce <scalbn+0x46>
 8011bbe:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011bc2:	4770      	bx	lr
 8011bc4:	ee10 1a90 	vmov	r1, s1
 8011bc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011bcc:	3b36      	subs	r3, #54	@ 0x36
 8011bce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011bd2:	4290      	cmp	r0, r2
 8011bd4:	dd0d      	ble.n	8011bf2 <scalbn+0x6a>
 8011bd6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8011c60 <scalbn+0xd8>
 8011bda:	ee10 3a90 	vmov	r3, s1
 8011bde:	eeb0 6b47 	vmov.f64	d6, d7
 8011be2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8011c68 <scalbn+0xe0>
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011bec:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011bf0:	4770      	bx	lr
 8011bf2:	4418      	add	r0, r3
 8011bf4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8011bf8:	4298      	cmp	r0, r3
 8011bfa:	dcec      	bgt.n	8011bd6 <scalbn+0x4e>
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	dd0a      	ble.n	8011c16 <scalbn+0x8e>
 8011c00:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8011c04:	ec53 2b10 	vmov	r2, r3, d0
 8011c08:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8011c0c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011c10:	ec43 2b10 	vmov	d0, r2, r3
 8011c14:	4770      	bx	lr
 8011c16:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8011c1a:	da09      	bge.n	8011c30 <scalbn+0xa8>
 8011c1c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8011c58 <scalbn+0xd0>
 8011c20:	ee10 3a90 	vmov	r3, s1
 8011c24:	eeb0 6b47 	vmov.f64	d6, d7
 8011c28:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8011c70 <scalbn+0xe8>
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	e7db      	b.n	8011be8 <scalbn+0x60>
 8011c30:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8011c34:	ec53 2b10 	vmov	r2, r3, d0
 8011c38:	3036      	adds	r0, #54	@ 0x36
 8011c3a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8011c3e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011c42:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011c78 <scalbn+0xf0>
 8011c46:	ec43 2b10 	vmov	d0, r2, r3
 8011c4a:	e7b1      	b.n	8011bb0 <scalbn+0x28>
 8011c4c:	f3af 8000 	nop.w
 8011c50:	00000000 	.word	0x00000000
 8011c54:	43500000 	.word	0x43500000
 8011c58:	c2f8f359 	.word	0xc2f8f359
 8011c5c:	01a56e1f 	.word	0x01a56e1f
 8011c60:	8800759c 	.word	0x8800759c
 8011c64:	7e37e43c 	.word	0x7e37e43c
 8011c68:	8800759c 	.word	0x8800759c
 8011c6c:	fe37e43c 	.word	0xfe37e43c
 8011c70:	c2f8f359 	.word	0xc2f8f359
 8011c74:	81a56e1f 	.word	0x81a56e1f
 8011c78:	00000000 	.word	0x00000000
 8011c7c:	3c900000 	.word	0x3c900000
 8011c80:	ffff3cb0 	.word	0xffff3cb0
 8011c84:	00000000 	.word	0x00000000

08011c88 <floor>:
 8011c88:	ee10 3a90 	vmov	r3, s1
 8011c8c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8011c90:	ee10 2a10 	vmov	r2, s0
 8011c94:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8011c98:	2913      	cmp	r1, #19
 8011c9a:	b530      	push	{r4, r5, lr}
 8011c9c:	4615      	mov	r5, r2
 8011c9e:	dc33      	bgt.n	8011d08 <floor+0x80>
 8011ca0:	2900      	cmp	r1, #0
 8011ca2:	da18      	bge.n	8011cd6 <floor+0x4e>
 8011ca4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8011d68 <floor+0xe0>
 8011ca8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011cac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb4:	dd0a      	ble.n	8011ccc <floor+0x44>
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	da50      	bge.n	8011d5c <floor+0xd4>
 8011cba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011cbe:	4313      	orrs	r3, r2
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8011d70 <floor+0xe8>)
 8011cc6:	bf08      	it	eq
 8011cc8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011ccc:	4619      	mov	r1, r3
 8011cce:	4610      	mov	r0, r2
 8011cd0:	ec41 0b10 	vmov	d0, r0, r1
 8011cd4:	e01f      	b.n	8011d16 <floor+0x8e>
 8011cd6:	4827      	ldr	r0, [pc, #156]	@ (8011d74 <floor+0xec>)
 8011cd8:	4108      	asrs	r0, r1
 8011cda:	ea03 0400 	and.w	r4, r3, r0
 8011cde:	4314      	orrs	r4, r2
 8011ce0:	d019      	beq.n	8011d16 <floor+0x8e>
 8011ce2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011d68 <floor+0xe0>
 8011ce6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011cea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf2:	ddeb      	ble.n	8011ccc <floor+0x44>
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	bfbe      	ittt	lt
 8011cf8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8011cfc:	410a      	asrlt	r2, r1
 8011cfe:	189b      	addlt	r3, r3, r2
 8011d00:	ea23 0300 	bic.w	r3, r3, r0
 8011d04:	2200      	movs	r2, #0
 8011d06:	e7e1      	b.n	8011ccc <floor+0x44>
 8011d08:	2933      	cmp	r1, #51	@ 0x33
 8011d0a:	dd05      	ble.n	8011d18 <floor+0x90>
 8011d0c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011d10:	d101      	bne.n	8011d16 <floor+0x8e>
 8011d12:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011d16:	bd30      	pop	{r4, r5, pc}
 8011d18:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8011d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d20:	40e0      	lsrs	r0, r4
 8011d22:	4210      	tst	r0, r2
 8011d24:	d0f7      	beq.n	8011d16 <floor+0x8e>
 8011d26:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8011d68 <floor+0xe0>
 8011d2a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011d2e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d36:	ddc9      	ble.n	8011ccc <floor+0x44>
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	da02      	bge.n	8011d42 <floor+0xba>
 8011d3c:	2914      	cmp	r1, #20
 8011d3e:	d103      	bne.n	8011d48 <floor+0xc0>
 8011d40:	3301      	adds	r3, #1
 8011d42:	ea22 0200 	bic.w	r2, r2, r0
 8011d46:	e7c1      	b.n	8011ccc <floor+0x44>
 8011d48:	2401      	movs	r4, #1
 8011d4a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8011d4e:	fa04 f101 	lsl.w	r1, r4, r1
 8011d52:	440a      	add	r2, r1
 8011d54:	42aa      	cmp	r2, r5
 8011d56:	bf38      	it	cc
 8011d58:	191b      	addcc	r3, r3, r4
 8011d5a:	e7f2      	b.n	8011d42 <floor+0xba>
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	4613      	mov	r3, r2
 8011d60:	e7b4      	b.n	8011ccc <floor+0x44>
 8011d62:	bf00      	nop
 8011d64:	f3af 8000 	nop.w
 8011d68:	8800759c 	.word	0x8800759c
 8011d6c:	7e37e43c 	.word	0x7e37e43c
 8011d70:	bff00000 	.word	0xbff00000
 8011d74:	000fffff 	.word	0x000fffff

08011d78 <srandom>:
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	4b10      	ldr	r3, [pc, #64]	@ (8011dbc <srandom+0x44>)
 8011d7c:	681d      	ldr	r5, [r3, #0]
 8011d7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011d80:	4604      	mov	r4, r0
 8011d82:	b9b3      	cbnz	r3, 8011db2 <srandom+0x3a>
 8011d84:	2018      	movs	r0, #24
 8011d86:	f000 fbd9 	bl	801253c <malloc>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	6328      	str	r0, [r5, #48]	@ 0x30
 8011d8e:	b920      	cbnz	r0, 8011d9a <srandom+0x22>
 8011d90:	4b0b      	ldr	r3, [pc, #44]	@ (8011dc0 <srandom+0x48>)
 8011d92:	480c      	ldr	r0, [pc, #48]	@ (8011dc4 <srandom+0x4c>)
 8011d94:	2140      	movs	r1, #64	@ 0x40
 8011d96:	f000 fa27 	bl	80121e8 <__assert_func>
 8011d9a:	490b      	ldr	r1, [pc, #44]	@ (8011dc8 <srandom+0x50>)
 8011d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8011dcc <srandom+0x54>)
 8011d9e:	e9c0 1300 	strd	r1, r3, [r0]
 8011da2:	4b0b      	ldr	r3, [pc, #44]	@ (8011dd0 <srandom+0x58>)
 8011da4:	6083      	str	r3, [r0, #8]
 8011da6:	230b      	movs	r3, #11
 8011da8:	8183      	strh	r3, [r0, #12]
 8011daa:	2100      	movs	r1, #0
 8011dac:	2001      	movs	r0, #1
 8011dae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011db2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011db4:	2200      	movs	r2, #0
 8011db6:	611c      	str	r4, [r3, #16]
 8011db8:	615a      	str	r2, [r3, #20]
 8011dba:	bd38      	pop	{r3, r4, r5, pc}
 8011dbc:	200000b0 	.word	0x200000b0
 8011dc0:	08014e38 	.word	0x08014e38
 8011dc4:	08014e4f 	.word	0x08014e4f
 8011dc8:	abcd330e 	.word	0xabcd330e
 8011dcc:	e66d1234 	.word	0xe66d1234
 8011dd0:	0005deec 	.word	0x0005deec

08011dd4 <random>:
 8011dd4:	4b16      	ldr	r3, [pc, #88]	@ (8011e30 <random+0x5c>)
 8011dd6:	b510      	push	{r4, lr}
 8011dd8:	681c      	ldr	r4, [r3, #0]
 8011dda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ddc:	b9b3      	cbnz	r3, 8011e0c <random+0x38>
 8011dde:	2018      	movs	r0, #24
 8011de0:	f000 fbac 	bl	801253c <malloc>
 8011de4:	4602      	mov	r2, r0
 8011de6:	6320      	str	r0, [r4, #48]	@ 0x30
 8011de8:	b920      	cbnz	r0, 8011df4 <random+0x20>
 8011dea:	4b12      	ldr	r3, [pc, #72]	@ (8011e34 <random+0x60>)
 8011dec:	4812      	ldr	r0, [pc, #72]	@ (8011e38 <random+0x64>)
 8011dee:	214c      	movs	r1, #76	@ 0x4c
 8011df0:	f000 f9fa 	bl	80121e8 <__assert_func>
 8011df4:	4911      	ldr	r1, [pc, #68]	@ (8011e3c <random+0x68>)
 8011df6:	4b12      	ldr	r3, [pc, #72]	@ (8011e40 <random+0x6c>)
 8011df8:	e9c0 1300 	strd	r1, r3, [r0]
 8011dfc:	4b11      	ldr	r3, [pc, #68]	@ (8011e44 <random+0x70>)
 8011dfe:	6083      	str	r3, [r0, #8]
 8011e00:	230b      	movs	r3, #11
 8011e02:	8183      	strh	r3, [r0, #12]
 8011e04:	2100      	movs	r1, #0
 8011e06:	2001      	movs	r0, #1
 8011e08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011e0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011e0e:	480e      	ldr	r0, [pc, #56]	@ (8011e48 <random+0x74>)
 8011e10:	690b      	ldr	r3, [r1, #16]
 8011e12:	694c      	ldr	r4, [r1, #20]
 8011e14:	4a0d      	ldr	r2, [pc, #52]	@ (8011e4c <random+0x78>)
 8011e16:	4358      	muls	r0, r3
 8011e18:	fb02 0004 	mla	r0, r2, r4, r0
 8011e1c:	fba3 3202 	umull	r3, r2, r3, r2
 8011e20:	3301      	adds	r3, #1
 8011e22:	eb40 0002 	adc.w	r0, r0, r2
 8011e26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011e2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011e2e:	bd10      	pop	{r4, pc}
 8011e30:	200000b0 	.word	0x200000b0
 8011e34:	08014e38 	.word	0x08014e38
 8011e38:	08014e4f 	.word	0x08014e4f
 8011e3c:	abcd330e 	.word	0xabcd330e
 8011e40:	e66d1234 	.word	0xe66d1234
 8011e44:	0005deec 	.word	0x0005deec
 8011e48:	5851f42d 	.word	0x5851f42d
 8011e4c:	4c957f2d 	.word	0x4c957f2d

08011e50 <std>:
 8011e50:	2300      	movs	r3, #0
 8011e52:	b510      	push	{r4, lr}
 8011e54:	4604      	mov	r4, r0
 8011e56:	e9c0 3300 	strd	r3, r3, [r0]
 8011e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e5e:	6083      	str	r3, [r0, #8]
 8011e60:	8181      	strh	r1, [r0, #12]
 8011e62:	6643      	str	r3, [r0, #100]	@ 0x64
 8011e64:	81c2      	strh	r2, [r0, #14]
 8011e66:	6183      	str	r3, [r0, #24]
 8011e68:	4619      	mov	r1, r3
 8011e6a:	2208      	movs	r2, #8
 8011e6c:	305c      	adds	r0, #92	@ 0x5c
 8011e6e:	f000 f921 	bl	80120b4 <memset>
 8011e72:	4b0d      	ldr	r3, [pc, #52]	@ (8011ea8 <std+0x58>)
 8011e74:	6263      	str	r3, [r4, #36]	@ 0x24
 8011e76:	4b0d      	ldr	r3, [pc, #52]	@ (8011eac <std+0x5c>)
 8011e78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8011eb0 <std+0x60>)
 8011e7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8011eb4 <std+0x64>)
 8011e80:	6323      	str	r3, [r4, #48]	@ 0x30
 8011e82:	4b0d      	ldr	r3, [pc, #52]	@ (8011eb8 <std+0x68>)
 8011e84:	6224      	str	r4, [r4, #32]
 8011e86:	429c      	cmp	r4, r3
 8011e88:	d006      	beq.n	8011e98 <std+0x48>
 8011e8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011e8e:	4294      	cmp	r4, r2
 8011e90:	d002      	beq.n	8011e98 <std+0x48>
 8011e92:	33d0      	adds	r3, #208	@ 0xd0
 8011e94:	429c      	cmp	r4, r3
 8011e96:	d105      	bne.n	8011ea4 <std+0x54>
 8011e98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ea0:	f000 b990 	b.w	80121c4 <__retarget_lock_init_recursive>
 8011ea4:	bd10      	pop	{r4, pc}
 8011ea6:	bf00      	nop
 8011ea8:	08012b1d 	.word	0x08012b1d
 8011eac:	08012b3f 	.word	0x08012b3f
 8011eb0:	08012b77 	.word	0x08012b77
 8011eb4:	08012b9b 	.word	0x08012b9b
 8011eb8:	20006a60 	.word	0x20006a60

08011ebc <stdio_exit_handler>:
 8011ebc:	4a02      	ldr	r2, [pc, #8]	@ (8011ec8 <stdio_exit_handler+0xc>)
 8011ebe:	4903      	ldr	r1, [pc, #12]	@ (8011ecc <stdio_exit_handler+0x10>)
 8011ec0:	4803      	ldr	r0, [pc, #12]	@ (8011ed0 <stdio_exit_handler+0x14>)
 8011ec2:	f000 b869 	b.w	8011f98 <_fwalk_sglue>
 8011ec6:	bf00      	nop
 8011ec8:	200000a4 	.word	0x200000a4
 8011ecc:	08012ab5 	.word	0x08012ab5
 8011ed0:	200000b4 	.word	0x200000b4

08011ed4 <cleanup_stdio>:
 8011ed4:	6841      	ldr	r1, [r0, #4]
 8011ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8011f08 <cleanup_stdio+0x34>)
 8011ed8:	4299      	cmp	r1, r3
 8011eda:	b510      	push	{r4, lr}
 8011edc:	4604      	mov	r4, r0
 8011ede:	d001      	beq.n	8011ee4 <cleanup_stdio+0x10>
 8011ee0:	f000 fde8 	bl	8012ab4 <_fflush_r>
 8011ee4:	68a1      	ldr	r1, [r4, #8]
 8011ee6:	4b09      	ldr	r3, [pc, #36]	@ (8011f0c <cleanup_stdio+0x38>)
 8011ee8:	4299      	cmp	r1, r3
 8011eea:	d002      	beq.n	8011ef2 <cleanup_stdio+0x1e>
 8011eec:	4620      	mov	r0, r4
 8011eee:	f000 fde1 	bl	8012ab4 <_fflush_r>
 8011ef2:	68e1      	ldr	r1, [r4, #12]
 8011ef4:	4b06      	ldr	r3, [pc, #24]	@ (8011f10 <cleanup_stdio+0x3c>)
 8011ef6:	4299      	cmp	r1, r3
 8011ef8:	d004      	beq.n	8011f04 <cleanup_stdio+0x30>
 8011efa:	4620      	mov	r0, r4
 8011efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f00:	f000 bdd8 	b.w	8012ab4 <_fflush_r>
 8011f04:	bd10      	pop	{r4, pc}
 8011f06:	bf00      	nop
 8011f08:	20006a60 	.word	0x20006a60
 8011f0c:	20006ac8 	.word	0x20006ac8
 8011f10:	20006b30 	.word	0x20006b30

08011f14 <global_stdio_init.part.0>:
 8011f14:	b510      	push	{r4, lr}
 8011f16:	4b0b      	ldr	r3, [pc, #44]	@ (8011f44 <global_stdio_init.part.0+0x30>)
 8011f18:	4c0b      	ldr	r4, [pc, #44]	@ (8011f48 <global_stdio_init.part.0+0x34>)
 8011f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8011f4c <global_stdio_init.part.0+0x38>)
 8011f1c:	601a      	str	r2, [r3, #0]
 8011f1e:	4620      	mov	r0, r4
 8011f20:	2200      	movs	r2, #0
 8011f22:	2104      	movs	r1, #4
 8011f24:	f7ff ff94 	bl	8011e50 <std>
 8011f28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	2109      	movs	r1, #9
 8011f30:	f7ff ff8e 	bl	8011e50 <std>
 8011f34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011f38:	2202      	movs	r2, #2
 8011f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f3e:	2112      	movs	r1, #18
 8011f40:	f7ff bf86 	b.w	8011e50 <std>
 8011f44:	20006b98 	.word	0x20006b98
 8011f48:	20006a60 	.word	0x20006a60
 8011f4c:	08011ebd 	.word	0x08011ebd

08011f50 <__sfp_lock_acquire>:
 8011f50:	4801      	ldr	r0, [pc, #4]	@ (8011f58 <__sfp_lock_acquire+0x8>)
 8011f52:	f000 b938 	b.w	80121c6 <__retarget_lock_acquire_recursive>
 8011f56:	bf00      	nop
 8011f58:	20006ba1 	.word	0x20006ba1

08011f5c <__sfp_lock_release>:
 8011f5c:	4801      	ldr	r0, [pc, #4]	@ (8011f64 <__sfp_lock_release+0x8>)
 8011f5e:	f000 b933 	b.w	80121c8 <__retarget_lock_release_recursive>
 8011f62:	bf00      	nop
 8011f64:	20006ba1 	.word	0x20006ba1

08011f68 <__sinit>:
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	f7ff fff0 	bl	8011f50 <__sfp_lock_acquire>
 8011f70:	6a23      	ldr	r3, [r4, #32]
 8011f72:	b11b      	cbz	r3, 8011f7c <__sinit+0x14>
 8011f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f78:	f7ff bff0 	b.w	8011f5c <__sfp_lock_release>
 8011f7c:	4b04      	ldr	r3, [pc, #16]	@ (8011f90 <__sinit+0x28>)
 8011f7e:	6223      	str	r3, [r4, #32]
 8011f80:	4b04      	ldr	r3, [pc, #16]	@ (8011f94 <__sinit+0x2c>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1f5      	bne.n	8011f74 <__sinit+0xc>
 8011f88:	f7ff ffc4 	bl	8011f14 <global_stdio_init.part.0>
 8011f8c:	e7f2      	b.n	8011f74 <__sinit+0xc>
 8011f8e:	bf00      	nop
 8011f90:	08011ed5 	.word	0x08011ed5
 8011f94:	20006b98 	.word	0x20006b98

08011f98 <_fwalk_sglue>:
 8011f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f9c:	4607      	mov	r7, r0
 8011f9e:	4688      	mov	r8, r1
 8011fa0:	4614      	mov	r4, r2
 8011fa2:	2600      	movs	r6, #0
 8011fa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011fa8:	f1b9 0901 	subs.w	r9, r9, #1
 8011fac:	d505      	bpl.n	8011fba <_fwalk_sglue+0x22>
 8011fae:	6824      	ldr	r4, [r4, #0]
 8011fb0:	2c00      	cmp	r4, #0
 8011fb2:	d1f7      	bne.n	8011fa4 <_fwalk_sglue+0xc>
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fba:	89ab      	ldrh	r3, [r5, #12]
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d907      	bls.n	8011fd0 <_fwalk_sglue+0x38>
 8011fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	d003      	beq.n	8011fd0 <_fwalk_sglue+0x38>
 8011fc8:	4629      	mov	r1, r5
 8011fca:	4638      	mov	r0, r7
 8011fcc:	47c0      	blx	r8
 8011fce:	4306      	orrs	r6, r0
 8011fd0:	3568      	adds	r5, #104	@ 0x68
 8011fd2:	e7e9      	b.n	8011fa8 <_fwalk_sglue+0x10>

08011fd4 <iprintf>:
 8011fd4:	b40f      	push	{r0, r1, r2, r3}
 8011fd6:	b507      	push	{r0, r1, r2, lr}
 8011fd8:	4906      	ldr	r1, [pc, #24]	@ (8011ff4 <iprintf+0x20>)
 8011fda:	ab04      	add	r3, sp, #16
 8011fdc:	6808      	ldr	r0, [r1, #0]
 8011fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fe2:	6881      	ldr	r1, [r0, #8]
 8011fe4:	9301      	str	r3, [sp, #4]
 8011fe6:	f000 f991 	bl	801230c <_vfiprintf_r>
 8011fea:	b003      	add	sp, #12
 8011fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ff0:	b004      	add	sp, #16
 8011ff2:	4770      	bx	lr
 8011ff4:	200000b0 	.word	0x200000b0

08011ff8 <_puts_r>:
 8011ff8:	6a03      	ldr	r3, [r0, #32]
 8011ffa:	b570      	push	{r4, r5, r6, lr}
 8011ffc:	6884      	ldr	r4, [r0, #8]
 8011ffe:	4605      	mov	r5, r0
 8012000:	460e      	mov	r6, r1
 8012002:	b90b      	cbnz	r3, 8012008 <_puts_r+0x10>
 8012004:	f7ff ffb0 	bl	8011f68 <__sinit>
 8012008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801200a:	07db      	lsls	r3, r3, #31
 801200c:	d405      	bmi.n	801201a <_puts_r+0x22>
 801200e:	89a3      	ldrh	r3, [r4, #12]
 8012010:	0598      	lsls	r0, r3, #22
 8012012:	d402      	bmi.n	801201a <_puts_r+0x22>
 8012014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012016:	f000 f8d6 	bl	80121c6 <__retarget_lock_acquire_recursive>
 801201a:	89a3      	ldrh	r3, [r4, #12]
 801201c:	0719      	lsls	r1, r3, #28
 801201e:	d502      	bpl.n	8012026 <_puts_r+0x2e>
 8012020:	6923      	ldr	r3, [r4, #16]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d135      	bne.n	8012092 <_puts_r+0x9a>
 8012026:	4621      	mov	r1, r4
 8012028:	4628      	mov	r0, r5
 801202a:	f000 fe0b 	bl	8012c44 <__swsetup_r>
 801202e:	b380      	cbz	r0, 8012092 <_puts_r+0x9a>
 8012030:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8012034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012036:	07da      	lsls	r2, r3, #31
 8012038:	d405      	bmi.n	8012046 <_puts_r+0x4e>
 801203a:	89a3      	ldrh	r3, [r4, #12]
 801203c:	059b      	lsls	r3, r3, #22
 801203e:	d402      	bmi.n	8012046 <_puts_r+0x4e>
 8012040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012042:	f000 f8c1 	bl	80121c8 <__retarget_lock_release_recursive>
 8012046:	4628      	mov	r0, r5
 8012048:	bd70      	pop	{r4, r5, r6, pc}
 801204a:	2b00      	cmp	r3, #0
 801204c:	da04      	bge.n	8012058 <_puts_r+0x60>
 801204e:	69a2      	ldr	r2, [r4, #24]
 8012050:	429a      	cmp	r2, r3
 8012052:	dc17      	bgt.n	8012084 <_puts_r+0x8c>
 8012054:	290a      	cmp	r1, #10
 8012056:	d015      	beq.n	8012084 <_puts_r+0x8c>
 8012058:	6823      	ldr	r3, [r4, #0]
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	6022      	str	r2, [r4, #0]
 801205e:	7019      	strb	r1, [r3, #0]
 8012060:	68a3      	ldr	r3, [r4, #8]
 8012062:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012066:	3b01      	subs	r3, #1
 8012068:	60a3      	str	r3, [r4, #8]
 801206a:	2900      	cmp	r1, #0
 801206c:	d1ed      	bne.n	801204a <_puts_r+0x52>
 801206e:	2b00      	cmp	r3, #0
 8012070:	da11      	bge.n	8012096 <_puts_r+0x9e>
 8012072:	4622      	mov	r2, r4
 8012074:	210a      	movs	r1, #10
 8012076:	4628      	mov	r0, r5
 8012078:	f000 fda6 	bl	8012bc8 <__swbuf_r>
 801207c:	3001      	adds	r0, #1
 801207e:	d0d7      	beq.n	8012030 <_puts_r+0x38>
 8012080:	250a      	movs	r5, #10
 8012082:	e7d7      	b.n	8012034 <_puts_r+0x3c>
 8012084:	4622      	mov	r2, r4
 8012086:	4628      	mov	r0, r5
 8012088:	f000 fd9e 	bl	8012bc8 <__swbuf_r>
 801208c:	3001      	adds	r0, #1
 801208e:	d1e7      	bne.n	8012060 <_puts_r+0x68>
 8012090:	e7ce      	b.n	8012030 <_puts_r+0x38>
 8012092:	3e01      	subs	r6, #1
 8012094:	e7e4      	b.n	8012060 <_puts_r+0x68>
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	1c5a      	adds	r2, r3, #1
 801209a:	6022      	str	r2, [r4, #0]
 801209c:	220a      	movs	r2, #10
 801209e:	701a      	strb	r2, [r3, #0]
 80120a0:	e7ee      	b.n	8012080 <_puts_r+0x88>
	...

080120a4 <puts>:
 80120a4:	4b02      	ldr	r3, [pc, #8]	@ (80120b0 <puts+0xc>)
 80120a6:	4601      	mov	r1, r0
 80120a8:	6818      	ldr	r0, [r3, #0]
 80120aa:	f7ff bfa5 	b.w	8011ff8 <_puts_r>
 80120ae:	bf00      	nop
 80120b0:	200000b0 	.word	0x200000b0

080120b4 <memset>:
 80120b4:	4402      	add	r2, r0
 80120b6:	4603      	mov	r3, r0
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d100      	bne.n	80120be <memset+0xa>
 80120bc:	4770      	bx	lr
 80120be:	f803 1b01 	strb.w	r1, [r3], #1
 80120c2:	e7f9      	b.n	80120b8 <memset+0x4>

080120c4 <_reclaim_reent>:
 80120c4:	4b29      	ldr	r3, [pc, #164]	@ (801216c <_reclaim_reent+0xa8>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4283      	cmp	r3, r0
 80120ca:	b570      	push	{r4, r5, r6, lr}
 80120cc:	4604      	mov	r4, r0
 80120ce:	d04b      	beq.n	8012168 <_reclaim_reent+0xa4>
 80120d0:	69c3      	ldr	r3, [r0, #28]
 80120d2:	b1ab      	cbz	r3, 8012100 <_reclaim_reent+0x3c>
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	b16b      	cbz	r3, 80120f4 <_reclaim_reent+0x30>
 80120d8:	2500      	movs	r5, #0
 80120da:	69e3      	ldr	r3, [r4, #28]
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	5959      	ldr	r1, [r3, r5]
 80120e0:	2900      	cmp	r1, #0
 80120e2:	d13b      	bne.n	801215c <_reclaim_reent+0x98>
 80120e4:	3504      	adds	r5, #4
 80120e6:	2d80      	cmp	r5, #128	@ 0x80
 80120e8:	d1f7      	bne.n	80120da <_reclaim_reent+0x16>
 80120ea:	69e3      	ldr	r3, [r4, #28]
 80120ec:	4620      	mov	r0, r4
 80120ee:	68d9      	ldr	r1, [r3, #12]
 80120f0:	f000 f898 	bl	8012224 <_free_r>
 80120f4:	69e3      	ldr	r3, [r4, #28]
 80120f6:	6819      	ldr	r1, [r3, #0]
 80120f8:	b111      	cbz	r1, 8012100 <_reclaim_reent+0x3c>
 80120fa:	4620      	mov	r0, r4
 80120fc:	f000 f892 	bl	8012224 <_free_r>
 8012100:	6961      	ldr	r1, [r4, #20]
 8012102:	b111      	cbz	r1, 801210a <_reclaim_reent+0x46>
 8012104:	4620      	mov	r0, r4
 8012106:	f000 f88d 	bl	8012224 <_free_r>
 801210a:	69e1      	ldr	r1, [r4, #28]
 801210c:	b111      	cbz	r1, 8012114 <_reclaim_reent+0x50>
 801210e:	4620      	mov	r0, r4
 8012110:	f000 f888 	bl	8012224 <_free_r>
 8012114:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012116:	b111      	cbz	r1, 801211e <_reclaim_reent+0x5a>
 8012118:	4620      	mov	r0, r4
 801211a:	f000 f883 	bl	8012224 <_free_r>
 801211e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012120:	b111      	cbz	r1, 8012128 <_reclaim_reent+0x64>
 8012122:	4620      	mov	r0, r4
 8012124:	f000 f87e 	bl	8012224 <_free_r>
 8012128:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801212a:	b111      	cbz	r1, 8012132 <_reclaim_reent+0x6e>
 801212c:	4620      	mov	r0, r4
 801212e:	f000 f879 	bl	8012224 <_free_r>
 8012132:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012134:	b111      	cbz	r1, 801213c <_reclaim_reent+0x78>
 8012136:	4620      	mov	r0, r4
 8012138:	f000 f874 	bl	8012224 <_free_r>
 801213c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801213e:	b111      	cbz	r1, 8012146 <_reclaim_reent+0x82>
 8012140:	4620      	mov	r0, r4
 8012142:	f000 f86f 	bl	8012224 <_free_r>
 8012146:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012148:	b111      	cbz	r1, 8012150 <_reclaim_reent+0x8c>
 801214a:	4620      	mov	r0, r4
 801214c:	f000 f86a 	bl	8012224 <_free_r>
 8012150:	6a23      	ldr	r3, [r4, #32]
 8012152:	b14b      	cbz	r3, 8012168 <_reclaim_reent+0xa4>
 8012154:	4620      	mov	r0, r4
 8012156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801215a:	4718      	bx	r3
 801215c:	680e      	ldr	r6, [r1, #0]
 801215e:	4620      	mov	r0, r4
 8012160:	f000 f860 	bl	8012224 <_free_r>
 8012164:	4631      	mov	r1, r6
 8012166:	e7bb      	b.n	80120e0 <_reclaim_reent+0x1c>
 8012168:	bd70      	pop	{r4, r5, r6, pc}
 801216a:	bf00      	nop
 801216c:	200000b0 	.word	0x200000b0

08012170 <__errno>:
 8012170:	4b01      	ldr	r3, [pc, #4]	@ (8012178 <__errno+0x8>)
 8012172:	6818      	ldr	r0, [r3, #0]
 8012174:	4770      	bx	lr
 8012176:	bf00      	nop
 8012178:	200000b0 	.word	0x200000b0

0801217c <__libc_init_array>:
 801217c:	b570      	push	{r4, r5, r6, lr}
 801217e:	4d0d      	ldr	r5, [pc, #52]	@ (80121b4 <__libc_init_array+0x38>)
 8012180:	4c0d      	ldr	r4, [pc, #52]	@ (80121b8 <__libc_init_array+0x3c>)
 8012182:	1b64      	subs	r4, r4, r5
 8012184:	10a4      	asrs	r4, r4, #2
 8012186:	2600      	movs	r6, #0
 8012188:	42a6      	cmp	r6, r4
 801218a:	d109      	bne.n	80121a0 <__libc_init_array+0x24>
 801218c:	4d0b      	ldr	r5, [pc, #44]	@ (80121bc <__libc_init_array+0x40>)
 801218e:	4c0c      	ldr	r4, [pc, #48]	@ (80121c0 <__libc_init_array+0x44>)
 8012190:	f000 fed4 	bl	8012f3c <_init>
 8012194:	1b64      	subs	r4, r4, r5
 8012196:	10a4      	asrs	r4, r4, #2
 8012198:	2600      	movs	r6, #0
 801219a:	42a6      	cmp	r6, r4
 801219c:	d105      	bne.n	80121aa <__libc_init_array+0x2e>
 801219e:	bd70      	pop	{r4, r5, r6, pc}
 80121a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80121a4:	4798      	blx	r3
 80121a6:	3601      	adds	r6, #1
 80121a8:	e7ee      	b.n	8012188 <__libc_init_array+0xc>
 80121aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80121ae:	4798      	blx	r3
 80121b0:	3601      	adds	r6, #1
 80121b2:	e7f2      	b.n	801219a <__libc_init_array+0x1e>
 80121b4:	08014f20 	.word	0x08014f20
 80121b8:	08014f20 	.word	0x08014f20
 80121bc:	08014f20 	.word	0x08014f20
 80121c0:	08014f28 	.word	0x08014f28

080121c4 <__retarget_lock_init_recursive>:
 80121c4:	4770      	bx	lr

080121c6 <__retarget_lock_acquire_recursive>:
 80121c6:	4770      	bx	lr

080121c8 <__retarget_lock_release_recursive>:
 80121c8:	4770      	bx	lr

080121ca <memcpy>:
 80121ca:	440a      	add	r2, r1
 80121cc:	4291      	cmp	r1, r2
 80121ce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80121d2:	d100      	bne.n	80121d6 <memcpy+0xc>
 80121d4:	4770      	bx	lr
 80121d6:	b510      	push	{r4, lr}
 80121d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121e0:	4291      	cmp	r1, r2
 80121e2:	d1f9      	bne.n	80121d8 <memcpy+0xe>
 80121e4:	bd10      	pop	{r4, pc}
	...

080121e8 <__assert_func>:
 80121e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121ea:	4614      	mov	r4, r2
 80121ec:	461a      	mov	r2, r3
 80121ee:	4b09      	ldr	r3, [pc, #36]	@ (8012214 <__assert_func+0x2c>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	4605      	mov	r5, r0
 80121f4:	68d8      	ldr	r0, [r3, #12]
 80121f6:	b954      	cbnz	r4, 801220e <__assert_func+0x26>
 80121f8:	4b07      	ldr	r3, [pc, #28]	@ (8012218 <__assert_func+0x30>)
 80121fa:	461c      	mov	r4, r3
 80121fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012200:	9100      	str	r1, [sp, #0]
 8012202:	462b      	mov	r3, r5
 8012204:	4905      	ldr	r1, [pc, #20]	@ (801221c <__assert_func+0x34>)
 8012206:	f000 fccd 	bl	8012ba4 <fiprintf>
 801220a:	f000 fe4b 	bl	8012ea4 <abort>
 801220e:	4b04      	ldr	r3, [pc, #16]	@ (8012220 <__assert_func+0x38>)
 8012210:	e7f4      	b.n	80121fc <__assert_func+0x14>
 8012212:	bf00      	nop
 8012214:	200000b0 	.word	0x200000b0
 8012218:	08014ee4 	.word	0x08014ee4
 801221c:	08014eb6 	.word	0x08014eb6
 8012220:	08014ea9 	.word	0x08014ea9

08012224 <_free_r>:
 8012224:	b538      	push	{r3, r4, r5, lr}
 8012226:	4605      	mov	r5, r0
 8012228:	2900      	cmp	r1, #0
 801222a:	d041      	beq.n	80122b0 <_free_r+0x8c>
 801222c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012230:	1f0c      	subs	r4, r1, #4
 8012232:	2b00      	cmp	r3, #0
 8012234:	bfb8      	it	lt
 8012236:	18e4      	addlt	r4, r4, r3
 8012238:	f000 fc64 	bl	8012b04 <__malloc_lock>
 801223c:	4a1d      	ldr	r2, [pc, #116]	@ (80122b4 <_free_r+0x90>)
 801223e:	6813      	ldr	r3, [r2, #0]
 8012240:	b933      	cbnz	r3, 8012250 <_free_r+0x2c>
 8012242:	6063      	str	r3, [r4, #4]
 8012244:	6014      	str	r4, [r2, #0]
 8012246:	4628      	mov	r0, r5
 8012248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801224c:	f000 bc60 	b.w	8012b10 <__malloc_unlock>
 8012250:	42a3      	cmp	r3, r4
 8012252:	d908      	bls.n	8012266 <_free_r+0x42>
 8012254:	6820      	ldr	r0, [r4, #0]
 8012256:	1821      	adds	r1, r4, r0
 8012258:	428b      	cmp	r3, r1
 801225a:	bf01      	itttt	eq
 801225c:	6819      	ldreq	r1, [r3, #0]
 801225e:	685b      	ldreq	r3, [r3, #4]
 8012260:	1809      	addeq	r1, r1, r0
 8012262:	6021      	streq	r1, [r4, #0]
 8012264:	e7ed      	b.n	8012242 <_free_r+0x1e>
 8012266:	461a      	mov	r2, r3
 8012268:	685b      	ldr	r3, [r3, #4]
 801226a:	b10b      	cbz	r3, 8012270 <_free_r+0x4c>
 801226c:	42a3      	cmp	r3, r4
 801226e:	d9fa      	bls.n	8012266 <_free_r+0x42>
 8012270:	6811      	ldr	r1, [r2, #0]
 8012272:	1850      	adds	r0, r2, r1
 8012274:	42a0      	cmp	r0, r4
 8012276:	d10b      	bne.n	8012290 <_free_r+0x6c>
 8012278:	6820      	ldr	r0, [r4, #0]
 801227a:	4401      	add	r1, r0
 801227c:	1850      	adds	r0, r2, r1
 801227e:	4283      	cmp	r3, r0
 8012280:	6011      	str	r1, [r2, #0]
 8012282:	d1e0      	bne.n	8012246 <_free_r+0x22>
 8012284:	6818      	ldr	r0, [r3, #0]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	6053      	str	r3, [r2, #4]
 801228a:	4408      	add	r0, r1
 801228c:	6010      	str	r0, [r2, #0]
 801228e:	e7da      	b.n	8012246 <_free_r+0x22>
 8012290:	d902      	bls.n	8012298 <_free_r+0x74>
 8012292:	230c      	movs	r3, #12
 8012294:	602b      	str	r3, [r5, #0]
 8012296:	e7d6      	b.n	8012246 <_free_r+0x22>
 8012298:	6820      	ldr	r0, [r4, #0]
 801229a:	1821      	adds	r1, r4, r0
 801229c:	428b      	cmp	r3, r1
 801229e:	bf04      	itt	eq
 80122a0:	6819      	ldreq	r1, [r3, #0]
 80122a2:	685b      	ldreq	r3, [r3, #4]
 80122a4:	6063      	str	r3, [r4, #4]
 80122a6:	bf04      	itt	eq
 80122a8:	1809      	addeq	r1, r1, r0
 80122aa:	6021      	streq	r1, [r4, #0]
 80122ac:	6054      	str	r4, [r2, #4]
 80122ae:	e7ca      	b.n	8012246 <_free_r+0x22>
 80122b0:	bd38      	pop	{r3, r4, r5, pc}
 80122b2:	bf00      	nop
 80122b4:	20006ba8 	.word	0x20006ba8

080122b8 <__sfputc_r>:
 80122b8:	6893      	ldr	r3, [r2, #8]
 80122ba:	3b01      	subs	r3, #1
 80122bc:	2b00      	cmp	r3, #0
 80122be:	b410      	push	{r4}
 80122c0:	6093      	str	r3, [r2, #8]
 80122c2:	da08      	bge.n	80122d6 <__sfputc_r+0x1e>
 80122c4:	6994      	ldr	r4, [r2, #24]
 80122c6:	42a3      	cmp	r3, r4
 80122c8:	db01      	blt.n	80122ce <__sfputc_r+0x16>
 80122ca:	290a      	cmp	r1, #10
 80122cc:	d103      	bne.n	80122d6 <__sfputc_r+0x1e>
 80122ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122d2:	f000 bc79 	b.w	8012bc8 <__swbuf_r>
 80122d6:	6813      	ldr	r3, [r2, #0]
 80122d8:	1c58      	adds	r0, r3, #1
 80122da:	6010      	str	r0, [r2, #0]
 80122dc:	7019      	strb	r1, [r3, #0]
 80122de:	4608      	mov	r0, r1
 80122e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122e4:	4770      	bx	lr

080122e6 <__sfputs_r>:
 80122e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122e8:	4606      	mov	r6, r0
 80122ea:	460f      	mov	r7, r1
 80122ec:	4614      	mov	r4, r2
 80122ee:	18d5      	adds	r5, r2, r3
 80122f0:	42ac      	cmp	r4, r5
 80122f2:	d101      	bne.n	80122f8 <__sfputs_r+0x12>
 80122f4:	2000      	movs	r0, #0
 80122f6:	e007      	b.n	8012308 <__sfputs_r+0x22>
 80122f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122fc:	463a      	mov	r2, r7
 80122fe:	4630      	mov	r0, r6
 8012300:	f7ff ffda 	bl	80122b8 <__sfputc_r>
 8012304:	1c43      	adds	r3, r0, #1
 8012306:	d1f3      	bne.n	80122f0 <__sfputs_r+0xa>
 8012308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801230c <_vfiprintf_r>:
 801230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012310:	460d      	mov	r5, r1
 8012312:	b09d      	sub	sp, #116	@ 0x74
 8012314:	4614      	mov	r4, r2
 8012316:	4698      	mov	r8, r3
 8012318:	4606      	mov	r6, r0
 801231a:	b118      	cbz	r0, 8012324 <_vfiprintf_r+0x18>
 801231c:	6a03      	ldr	r3, [r0, #32]
 801231e:	b90b      	cbnz	r3, 8012324 <_vfiprintf_r+0x18>
 8012320:	f7ff fe22 	bl	8011f68 <__sinit>
 8012324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012326:	07d9      	lsls	r1, r3, #31
 8012328:	d405      	bmi.n	8012336 <_vfiprintf_r+0x2a>
 801232a:	89ab      	ldrh	r3, [r5, #12]
 801232c:	059a      	lsls	r2, r3, #22
 801232e:	d402      	bmi.n	8012336 <_vfiprintf_r+0x2a>
 8012330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012332:	f7ff ff48 	bl	80121c6 <__retarget_lock_acquire_recursive>
 8012336:	89ab      	ldrh	r3, [r5, #12]
 8012338:	071b      	lsls	r3, r3, #28
 801233a:	d501      	bpl.n	8012340 <_vfiprintf_r+0x34>
 801233c:	692b      	ldr	r3, [r5, #16]
 801233e:	b99b      	cbnz	r3, 8012368 <_vfiprintf_r+0x5c>
 8012340:	4629      	mov	r1, r5
 8012342:	4630      	mov	r0, r6
 8012344:	f000 fc7e 	bl	8012c44 <__swsetup_r>
 8012348:	b170      	cbz	r0, 8012368 <_vfiprintf_r+0x5c>
 801234a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801234c:	07dc      	lsls	r4, r3, #31
 801234e:	d504      	bpl.n	801235a <_vfiprintf_r+0x4e>
 8012350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012354:	b01d      	add	sp, #116	@ 0x74
 8012356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235a:	89ab      	ldrh	r3, [r5, #12]
 801235c:	0598      	lsls	r0, r3, #22
 801235e:	d4f7      	bmi.n	8012350 <_vfiprintf_r+0x44>
 8012360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012362:	f7ff ff31 	bl	80121c8 <__retarget_lock_release_recursive>
 8012366:	e7f3      	b.n	8012350 <_vfiprintf_r+0x44>
 8012368:	2300      	movs	r3, #0
 801236a:	9309      	str	r3, [sp, #36]	@ 0x24
 801236c:	2320      	movs	r3, #32
 801236e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012372:	f8cd 800c 	str.w	r8, [sp, #12]
 8012376:	2330      	movs	r3, #48	@ 0x30
 8012378:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012528 <_vfiprintf_r+0x21c>
 801237c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012380:	f04f 0901 	mov.w	r9, #1
 8012384:	4623      	mov	r3, r4
 8012386:	469a      	mov	sl, r3
 8012388:	f813 2b01 	ldrb.w	r2, [r3], #1
 801238c:	b10a      	cbz	r2, 8012392 <_vfiprintf_r+0x86>
 801238e:	2a25      	cmp	r2, #37	@ 0x25
 8012390:	d1f9      	bne.n	8012386 <_vfiprintf_r+0x7a>
 8012392:	ebba 0b04 	subs.w	fp, sl, r4
 8012396:	d00b      	beq.n	80123b0 <_vfiprintf_r+0xa4>
 8012398:	465b      	mov	r3, fp
 801239a:	4622      	mov	r2, r4
 801239c:	4629      	mov	r1, r5
 801239e:	4630      	mov	r0, r6
 80123a0:	f7ff ffa1 	bl	80122e6 <__sfputs_r>
 80123a4:	3001      	adds	r0, #1
 80123a6:	f000 80a7 	beq.w	80124f8 <_vfiprintf_r+0x1ec>
 80123aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123ac:	445a      	add	r2, fp
 80123ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80123b0:	f89a 3000 	ldrb.w	r3, [sl]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f000 809f 	beq.w	80124f8 <_vfiprintf_r+0x1ec>
 80123ba:	2300      	movs	r3, #0
 80123bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80123c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123c4:	f10a 0a01 	add.w	sl, sl, #1
 80123c8:	9304      	str	r3, [sp, #16]
 80123ca:	9307      	str	r3, [sp, #28]
 80123cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80123d2:	4654      	mov	r4, sl
 80123d4:	2205      	movs	r2, #5
 80123d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123da:	4853      	ldr	r0, [pc, #332]	@ (8012528 <_vfiprintf_r+0x21c>)
 80123dc:	f7ed ff30 	bl	8000240 <memchr>
 80123e0:	9a04      	ldr	r2, [sp, #16]
 80123e2:	b9d8      	cbnz	r0, 801241c <_vfiprintf_r+0x110>
 80123e4:	06d1      	lsls	r1, r2, #27
 80123e6:	bf44      	itt	mi
 80123e8:	2320      	movmi	r3, #32
 80123ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123ee:	0713      	lsls	r3, r2, #28
 80123f0:	bf44      	itt	mi
 80123f2:	232b      	movmi	r3, #43	@ 0x2b
 80123f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123f8:	f89a 3000 	ldrb.w	r3, [sl]
 80123fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80123fe:	d015      	beq.n	801242c <_vfiprintf_r+0x120>
 8012400:	9a07      	ldr	r2, [sp, #28]
 8012402:	4654      	mov	r4, sl
 8012404:	2000      	movs	r0, #0
 8012406:	f04f 0c0a 	mov.w	ip, #10
 801240a:	4621      	mov	r1, r4
 801240c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012410:	3b30      	subs	r3, #48	@ 0x30
 8012412:	2b09      	cmp	r3, #9
 8012414:	d94b      	bls.n	80124ae <_vfiprintf_r+0x1a2>
 8012416:	b1b0      	cbz	r0, 8012446 <_vfiprintf_r+0x13a>
 8012418:	9207      	str	r2, [sp, #28]
 801241a:	e014      	b.n	8012446 <_vfiprintf_r+0x13a>
 801241c:	eba0 0308 	sub.w	r3, r0, r8
 8012420:	fa09 f303 	lsl.w	r3, r9, r3
 8012424:	4313      	orrs	r3, r2
 8012426:	9304      	str	r3, [sp, #16]
 8012428:	46a2      	mov	sl, r4
 801242a:	e7d2      	b.n	80123d2 <_vfiprintf_r+0xc6>
 801242c:	9b03      	ldr	r3, [sp, #12]
 801242e:	1d19      	adds	r1, r3, #4
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	9103      	str	r1, [sp, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	bfbb      	ittet	lt
 8012438:	425b      	neglt	r3, r3
 801243a:	f042 0202 	orrlt.w	r2, r2, #2
 801243e:	9307      	strge	r3, [sp, #28]
 8012440:	9307      	strlt	r3, [sp, #28]
 8012442:	bfb8      	it	lt
 8012444:	9204      	strlt	r2, [sp, #16]
 8012446:	7823      	ldrb	r3, [r4, #0]
 8012448:	2b2e      	cmp	r3, #46	@ 0x2e
 801244a:	d10a      	bne.n	8012462 <_vfiprintf_r+0x156>
 801244c:	7863      	ldrb	r3, [r4, #1]
 801244e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012450:	d132      	bne.n	80124b8 <_vfiprintf_r+0x1ac>
 8012452:	9b03      	ldr	r3, [sp, #12]
 8012454:	1d1a      	adds	r2, r3, #4
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	9203      	str	r2, [sp, #12]
 801245a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801245e:	3402      	adds	r4, #2
 8012460:	9305      	str	r3, [sp, #20]
 8012462:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012538 <_vfiprintf_r+0x22c>
 8012466:	7821      	ldrb	r1, [r4, #0]
 8012468:	2203      	movs	r2, #3
 801246a:	4650      	mov	r0, sl
 801246c:	f7ed fee8 	bl	8000240 <memchr>
 8012470:	b138      	cbz	r0, 8012482 <_vfiprintf_r+0x176>
 8012472:	9b04      	ldr	r3, [sp, #16]
 8012474:	eba0 000a 	sub.w	r0, r0, sl
 8012478:	2240      	movs	r2, #64	@ 0x40
 801247a:	4082      	lsls	r2, r0
 801247c:	4313      	orrs	r3, r2
 801247e:	3401      	adds	r4, #1
 8012480:	9304      	str	r3, [sp, #16]
 8012482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012486:	4829      	ldr	r0, [pc, #164]	@ (801252c <_vfiprintf_r+0x220>)
 8012488:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801248c:	2206      	movs	r2, #6
 801248e:	f7ed fed7 	bl	8000240 <memchr>
 8012492:	2800      	cmp	r0, #0
 8012494:	d03f      	beq.n	8012516 <_vfiprintf_r+0x20a>
 8012496:	4b26      	ldr	r3, [pc, #152]	@ (8012530 <_vfiprintf_r+0x224>)
 8012498:	bb1b      	cbnz	r3, 80124e2 <_vfiprintf_r+0x1d6>
 801249a:	9b03      	ldr	r3, [sp, #12]
 801249c:	3307      	adds	r3, #7
 801249e:	f023 0307 	bic.w	r3, r3, #7
 80124a2:	3308      	adds	r3, #8
 80124a4:	9303      	str	r3, [sp, #12]
 80124a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124a8:	443b      	add	r3, r7
 80124aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80124ac:	e76a      	b.n	8012384 <_vfiprintf_r+0x78>
 80124ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80124b2:	460c      	mov	r4, r1
 80124b4:	2001      	movs	r0, #1
 80124b6:	e7a8      	b.n	801240a <_vfiprintf_r+0xfe>
 80124b8:	2300      	movs	r3, #0
 80124ba:	3401      	adds	r4, #1
 80124bc:	9305      	str	r3, [sp, #20]
 80124be:	4619      	mov	r1, r3
 80124c0:	f04f 0c0a 	mov.w	ip, #10
 80124c4:	4620      	mov	r0, r4
 80124c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124ca:	3a30      	subs	r2, #48	@ 0x30
 80124cc:	2a09      	cmp	r2, #9
 80124ce:	d903      	bls.n	80124d8 <_vfiprintf_r+0x1cc>
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d0c6      	beq.n	8012462 <_vfiprintf_r+0x156>
 80124d4:	9105      	str	r1, [sp, #20]
 80124d6:	e7c4      	b.n	8012462 <_vfiprintf_r+0x156>
 80124d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80124dc:	4604      	mov	r4, r0
 80124de:	2301      	movs	r3, #1
 80124e0:	e7f0      	b.n	80124c4 <_vfiprintf_r+0x1b8>
 80124e2:	ab03      	add	r3, sp, #12
 80124e4:	9300      	str	r3, [sp, #0]
 80124e6:	462a      	mov	r2, r5
 80124e8:	4b12      	ldr	r3, [pc, #72]	@ (8012534 <_vfiprintf_r+0x228>)
 80124ea:	a904      	add	r1, sp, #16
 80124ec:	4630      	mov	r0, r6
 80124ee:	f3af 8000 	nop.w
 80124f2:	4607      	mov	r7, r0
 80124f4:	1c78      	adds	r0, r7, #1
 80124f6:	d1d6      	bne.n	80124a6 <_vfiprintf_r+0x19a>
 80124f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124fa:	07d9      	lsls	r1, r3, #31
 80124fc:	d405      	bmi.n	801250a <_vfiprintf_r+0x1fe>
 80124fe:	89ab      	ldrh	r3, [r5, #12]
 8012500:	059a      	lsls	r2, r3, #22
 8012502:	d402      	bmi.n	801250a <_vfiprintf_r+0x1fe>
 8012504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012506:	f7ff fe5f 	bl	80121c8 <__retarget_lock_release_recursive>
 801250a:	89ab      	ldrh	r3, [r5, #12]
 801250c:	065b      	lsls	r3, r3, #25
 801250e:	f53f af1f 	bmi.w	8012350 <_vfiprintf_r+0x44>
 8012512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012514:	e71e      	b.n	8012354 <_vfiprintf_r+0x48>
 8012516:	ab03      	add	r3, sp, #12
 8012518:	9300      	str	r3, [sp, #0]
 801251a:	462a      	mov	r2, r5
 801251c:	4b05      	ldr	r3, [pc, #20]	@ (8012534 <_vfiprintf_r+0x228>)
 801251e:	a904      	add	r1, sp, #16
 8012520:	4630      	mov	r0, r6
 8012522:	f000 f923 	bl	801276c <_printf_i>
 8012526:	e7e4      	b.n	80124f2 <_vfiprintf_r+0x1e6>
 8012528:	08014ee5 	.word	0x08014ee5
 801252c:	08014eef 	.word	0x08014eef
 8012530:	00000000 	.word	0x00000000
 8012534:	080122e7 	.word	0x080122e7
 8012538:	08014eeb 	.word	0x08014eeb

0801253c <malloc>:
 801253c:	4b02      	ldr	r3, [pc, #8]	@ (8012548 <malloc+0xc>)
 801253e:	4601      	mov	r1, r0
 8012540:	6818      	ldr	r0, [r3, #0]
 8012542:	f000 b825 	b.w	8012590 <_malloc_r>
 8012546:	bf00      	nop
 8012548:	200000b0 	.word	0x200000b0

0801254c <sbrk_aligned>:
 801254c:	b570      	push	{r4, r5, r6, lr}
 801254e:	4e0f      	ldr	r6, [pc, #60]	@ (801258c <sbrk_aligned+0x40>)
 8012550:	460c      	mov	r4, r1
 8012552:	6831      	ldr	r1, [r6, #0]
 8012554:	4605      	mov	r5, r0
 8012556:	b911      	cbnz	r1, 801255e <sbrk_aligned+0x12>
 8012558:	f000 fc82 	bl	8012e60 <_sbrk_r>
 801255c:	6030      	str	r0, [r6, #0]
 801255e:	4621      	mov	r1, r4
 8012560:	4628      	mov	r0, r5
 8012562:	f000 fc7d 	bl	8012e60 <_sbrk_r>
 8012566:	1c43      	adds	r3, r0, #1
 8012568:	d103      	bne.n	8012572 <sbrk_aligned+0x26>
 801256a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801256e:	4620      	mov	r0, r4
 8012570:	bd70      	pop	{r4, r5, r6, pc}
 8012572:	1cc4      	adds	r4, r0, #3
 8012574:	f024 0403 	bic.w	r4, r4, #3
 8012578:	42a0      	cmp	r0, r4
 801257a:	d0f8      	beq.n	801256e <sbrk_aligned+0x22>
 801257c:	1a21      	subs	r1, r4, r0
 801257e:	4628      	mov	r0, r5
 8012580:	f000 fc6e 	bl	8012e60 <_sbrk_r>
 8012584:	3001      	adds	r0, #1
 8012586:	d1f2      	bne.n	801256e <sbrk_aligned+0x22>
 8012588:	e7ef      	b.n	801256a <sbrk_aligned+0x1e>
 801258a:	bf00      	nop
 801258c:	20006ba4 	.word	0x20006ba4

08012590 <_malloc_r>:
 8012590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012594:	1ccd      	adds	r5, r1, #3
 8012596:	f025 0503 	bic.w	r5, r5, #3
 801259a:	3508      	adds	r5, #8
 801259c:	2d0c      	cmp	r5, #12
 801259e:	bf38      	it	cc
 80125a0:	250c      	movcc	r5, #12
 80125a2:	2d00      	cmp	r5, #0
 80125a4:	4606      	mov	r6, r0
 80125a6:	db01      	blt.n	80125ac <_malloc_r+0x1c>
 80125a8:	42a9      	cmp	r1, r5
 80125aa:	d904      	bls.n	80125b6 <_malloc_r+0x26>
 80125ac:	230c      	movs	r3, #12
 80125ae:	6033      	str	r3, [r6, #0]
 80125b0:	2000      	movs	r0, #0
 80125b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801268c <_malloc_r+0xfc>
 80125ba:	f000 faa3 	bl	8012b04 <__malloc_lock>
 80125be:	f8d8 3000 	ldr.w	r3, [r8]
 80125c2:	461c      	mov	r4, r3
 80125c4:	bb44      	cbnz	r4, 8012618 <_malloc_r+0x88>
 80125c6:	4629      	mov	r1, r5
 80125c8:	4630      	mov	r0, r6
 80125ca:	f7ff ffbf 	bl	801254c <sbrk_aligned>
 80125ce:	1c43      	adds	r3, r0, #1
 80125d0:	4604      	mov	r4, r0
 80125d2:	d158      	bne.n	8012686 <_malloc_r+0xf6>
 80125d4:	f8d8 4000 	ldr.w	r4, [r8]
 80125d8:	4627      	mov	r7, r4
 80125da:	2f00      	cmp	r7, #0
 80125dc:	d143      	bne.n	8012666 <_malloc_r+0xd6>
 80125de:	2c00      	cmp	r4, #0
 80125e0:	d04b      	beq.n	801267a <_malloc_r+0xea>
 80125e2:	6823      	ldr	r3, [r4, #0]
 80125e4:	4639      	mov	r1, r7
 80125e6:	4630      	mov	r0, r6
 80125e8:	eb04 0903 	add.w	r9, r4, r3
 80125ec:	f000 fc38 	bl	8012e60 <_sbrk_r>
 80125f0:	4581      	cmp	r9, r0
 80125f2:	d142      	bne.n	801267a <_malloc_r+0xea>
 80125f4:	6821      	ldr	r1, [r4, #0]
 80125f6:	1a6d      	subs	r5, r5, r1
 80125f8:	4629      	mov	r1, r5
 80125fa:	4630      	mov	r0, r6
 80125fc:	f7ff ffa6 	bl	801254c <sbrk_aligned>
 8012600:	3001      	adds	r0, #1
 8012602:	d03a      	beq.n	801267a <_malloc_r+0xea>
 8012604:	6823      	ldr	r3, [r4, #0]
 8012606:	442b      	add	r3, r5
 8012608:	6023      	str	r3, [r4, #0]
 801260a:	f8d8 3000 	ldr.w	r3, [r8]
 801260e:	685a      	ldr	r2, [r3, #4]
 8012610:	bb62      	cbnz	r2, 801266c <_malloc_r+0xdc>
 8012612:	f8c8 7000 	str.w	r7, [r8]
 8012616:	e00f      	b.n	8012638 <_malloc_r+0xa8>
 8012618:	6822      	ldr	r2, [r4, #0]
 801261a:	1b52      	subs	r2, r2, r5
 801261c:	d420      	bmi.n	8012660 <_malloc_r+0xd0>
 801261e:	2a0b      	cmp	r2, #11
 8012620:	d917      	bls.n	8012652 <_malloc_r+0xc2>
 8012622:	1961      	adds	r1, r4, r5
 8012624:	42a3      	cmp	r3, r4
 8012626:	6025      	str	r5, [r4, #0]
 8012628:	bf18      	it	ne
 801262a:	6059      	strne	r1, [r3, #4]
 801262c:	6863      	ldr	r3, [r4, #4]
 801262e:	bf08      	it	eq
 8012630:	f8c8 1000 	streq.w	r1, [r8]
 8012634:	5162      	str	r2, [r4, r5]
 8012636:	604b      	str	r3, [r1, #4]
 8012638:	4630      	mov	r0, r6
 801263a:	f000 fa69 	bl	8012b10 <__malloc_unlock>
 801263e:	f104 000b 	add.w	r0, r4, #11
 8012642:	1d23      	adds	r3, r4, #4
 8012644:	f020 0007 	bic.w	r0, r0, #7
 8012648:	1ac2      	subs	r2, r0, r3
 801264a:	bf1c      	itt	ne
 801264c:	1a1b      	subne	r3, r3, r0
 801264e:	50a3      	strne	r3, [r4, r2]
 8012650:	e7af      	b.n	80125b2 <_malloc_r+0x22>
 8012652:	6862      	ldr	r2, [r4, #4]
 8012654:	42a3      	cmp	r3, r4
 8012656:	bf0c      	ite	eq
 8012658:	f8c8 2000 	streq.w	r2, [r8]
 801265c:	605a      	strne	r2, [r3, #4]
 801265e:	e7eb      	b.n	8012638 <_malloc_r+0xa8>
 8012660:	4623      	mov	r3, r4
 8012662:	6864      	ldr	r4, [r4, #4]
 8012664:	e7ae      	b.n	80125c4 <_malloc_r+0x34>
 8012666:	463c      	mov	r4, r7
 8012668:	687f      	ldr	r7, [r7, #4]
 801266a:	e7b6      	b.n	80125da <_malloc_r+0x4a>
 801266c:	461a      	mov	r2, r3
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	42a3      	cmp	r3, r4
 8012672:	d1fb      	bne.n	801266c <_malloc_r+0xdc>
 8012674:	2300      	movs	r3, #0
 8012676:	6053      	str	r3, [r2, #4]
 8012678:	e7de      	b.n	8012638 <_malloc_r+0xa8>
 801267a:	230c      	movs	r3, #12
 801267c:	6033      	str	r3, [r6, #0]
 801267e:	4630      	mov	r0, r6
 8012680:	f000 fa46 	bl	8012b10 <__malloc_unlock>
 8012684:	e794      	b.n	80125b0 <_malloc_r+0x20>
 8012686:	6005      	str	r5, [r0, #0]
 8012688:	e7d6      	b.n	8012638 <_malloc_r+0xa8>
 801268a:	bf00      	nop
 801268c:	20006ba8 	.word	0x20006ba8

08012690 <_printf_common>:
 8012690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012694:	4616      	mov	r6, r2
 8012696:	4698      	mov	r8, r3
 8012698:	688a      	ldr	r2, [r1, #8]
 801269a:	690b      	ldr	r3, [r1, #16]
 801269c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80126a0:	4293      	cmp	r3, r2
 80126a2:	bfb8      	it	lt
 80126a4:	4613      	movlt	r3, r2
 80126a6:	6033      	str	r3, [r6, #0]
 80126a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80126ac:	4607      	mov	r7, r0
 80126ae:	460c      	mov	r4, r1
 80126b0:	b10a      	cbz	r2, 80126b6 <_printf_common+0x26>
 80126b2:	3301      	adds	r3, #1
 80126b4:	6033      	str	r3, [r6, #0]
 80126b6:	6823      	ldr	r3, [r4, #0]
 80126b8:	0699      	lsls	r1, r3, #26
 80126ba:	bf42      	ittt	mi
 80126bc:	6833      	ldrmi	r3, [r6, #0]
 80126be:	3302      	addmi	r3, #2
 80126c0:	6033      	strmi	r3, [r6, #0]
 80126c2:	6825      	ldr	r5, [r4, #0]
 80126c4:	f015 0506 	ands.w	r5, r5, #6
 80126c8:	d106      	bne.n	80126d8 <_printf_common+0x48>
 80126ca:	f104 0a19 	add.w	sl, r4, #25
 80126ce:	68e3      	ldr	r3, [r4, #12]
 80126d0:	6832      	ldr	r2, [r6, #0]
 80126d2:	1a9b      	subs	r3, r3, r2
 80126d4:	42ab      	cmp	r3, r5
 80126d6:	dc26      	bgt.n	8012726 <_printf_common+0x96>
 80126d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80126dc:	6822      	ldr	r2, [r4, #0]
 80126de:	3b00      	subs	r3, #0
 80126e0:	bf18      	it	ne
 80126e2:	2301      	movne	r3, #1
 80126e4:	0692      	lsls	r2, r2, #26
 80126e6:	d42b      	bmi.n	8012740 <_printf_common+0xb0>
 80126e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80126ec:	4641      	mov	r1, r8
 80126ee:	4638      	mov	r0, r7
 80126f0:	47c8      	blx	r9
 80126f2:	3001      	adds	r0, #1
 80126f4:	d01e      	beq.n	8012734 <_printf_common+0xa4>
 80126f6:	6823      	ldr	r3, [r4, #0]
 80126f8:	6922      	ldr	r2, [r4, #16]
 80126fa:	f003 0306 	and.w	r3, r3, #6
 80126fe:	2b04      	cmp	r3, #4
 8012700:	bf02      	ittt	eq
 8012702:	68e5      	ldreq	r5, [r4, #12]
 8012704:	6833      	ldreq	r3, [r6, #0]
 8012706:	1aed      	subeq	r5, r5, r3
 8012708:	68a3      	ldr	r3, [r4, #8]
 801270a:	bf0c      	ite	eq
 801270c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012710:	2500      	movne	r5, #0
 8012712:	4293      	cmp	r3, r2
 8012714:	bfc4      	itt	gt
 8012716:	1a9b      	subgt	r3, r3, r2
 8012718:	18ed      	addgt	r5, r5, r3
 801271a:	2600      	movs	r6, #0
 801271c:	341a      	adds	r4, #26
 801271e:	42b5      	cmp	r5, r6
 8012720:	d11a      	bne.n	8012758 <_printf_common+0xc8>
 8012722:	2000      	movs	r0, #0
 8012724:	e008      	b.n	8012738 <_printf_common+0xa8>
 8012726:	2301      	movs	r3, #1
 8012728:	4652      	mov	r2, sl
 801272a:	4641      	mov	r1, r8
 801272c:	4638      	mov	r0, r7
 801272e:	47c8      	blx	r9
 8012730:	3001      	adds	r0, #1
 8012732:	d103      	bne.n	801273c <_printf_common+0xac>
 8012734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801273c:	3501      	adds	r5, #1
 801273e:	e7c6      	b.n	80126ce <_printf_common+0x3e>
 8012740:	18e1      	adds	r1, r4, r3
 8012742:	1c5a      	adds	r2, r3, #1
 8012744:	2030      	movs	r0, #48	@ 0x30
 8012746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801274a:	4422      	add	r2, r4
 801274c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012754:	3302      	adds	r3, #2
 8012756:	e7c7      	b.n	80126e8 <_printf_common+0x58>
 8012758:	2301      	movs	r3, #1
 801275a:	4622      	mov	r2, r4
 801275c:	4641      	mov	r1, r8
 801275e:	4638      	mov	r0, r7
 8012760:	47c8      	blx	r9
 8012762:	3001      	adds	r0, #1
 8012764:	d0e6      	beq.n	8012734 <_printf_common+0xa4>
 8012766:	3601      	adds	r6, #1
 8012768:	e7d9      	b.n	801271e <_printf_common+0x8e>
	...

0801276c <_printf_i>:
 801276c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012770:	7e0f      	ldrb	r7, [r1, #24]
 8012772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012774:	2f78      	cmp	r7, #120	@ 0x78
 8012776:	4691      	mov	r9, r2
 8012778:	4680      	mov	r8, r0
 801277a:	460c      	mov	r4, r1
 801277c:	469a      	mov	sl, r3
 801277e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012782:	d807      	bhi.n	8012794 <_printf_i+0x28>
 8012784:	2f62      	cmp	r7, #98	@ 0x62
 8012786:	d80a      	bhi.n	801279e <_printf_i+0x32>
 8012788:	2f00      	cmp	r7, #0
 801278a:	f000 80d2 	beq.w	8012932 <_printf_i+0x1c6>
 801278e:	2f58      	cmp	r7, #88	@ 0x58
 8012790:	f000 80b9 	beq.w	8012906 <_printf_i+0x19a>
 8012794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801279c:	e03a      	b.n	8012814 <_printf_i+0xa8>
 801279e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80127a2:	2b15      	cmp	r3, #21
 80127a4:	d8f6      	bhi.n	8012794 <_printf_i+0x28>
 80127a6:	a101      	add	r1, pc, #4	@ (adr r1, 80127ac <_printf_i+0x40>)
 80127a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80127ac:	08012805 	.word	0x08012805
 80127b0:	08012819 	.word	0x08012819
 80127b4:	08012795 	.word	0x08012795
 80127b8:	08012795 	.word	0x08012795
 80127bc:	08012795 	.word	0x08012795
 80127c0:	08012795 	.word	0x08012795
 80127c4:	08012819 	.word	0x08012819
 80127c8:	08012795 	.word	0x08012795
 80127cc:	08012795 	.word	0x08012795
 80127d0:	08012795 	.word	0x08012795
 80127d4:	08012795 	.word	0x08012795
 80127d8:	08012919 	.word	0x08012919
 80127dc:	08012843 	.word	0x08012843
 80127e0:	080128d3 	.word	0x080128d3
 80127e4:	08012795 	.word	0x08012795
 80127e8:	08012795 	.word	0x08012795
 80127ec:	0801293b 	.word	0x0801293b
 80127f0:	08012795 	.word	0x08012795
 80127f4:	08012843 	.word	0x08012843
 80127f8:	08012795 	.word	0x08012795
 80127fc:	08012795 	.word	0x08012795
 8012800:	080128db 	.word	0x080128db
 8012804:	6833      	ldr	r3, [r6, #0]
 8012806:	1d1a      	adds	r2, r3, #4
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	6032      	str	r2, [r6, #0]
 801280c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012814:	2301      	movs	r3, #1
 8012816:	e09d      	b.n	8012954 <_printf_i+0x1e8>
 8012818:	6833      	ldr	r3, [r6, #0]
 801281a:	6820      	ldr	r0, [r4, #0]
 801281c:	1d19      	adds	r1, r3, #4
 801281e:	6031      	str	r1, [r6, #0]
 8012820:	0606      	lsls	r6, r0, #24
 8012822:	d501      	bpl.n	8012828 <_printf_i+0xbc>
 8012824:	681d      	ldr	r5, [r3, #0]
 8012826:	e003      	b.n	8012830 <_printf_i+0xc4>
 8012828:	0645      	lsls	r5, r0, #25
 801282a:	d5fb      	bpl.n	8012824 <_printf_i+0xb8>
 801282c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012830:	2d00      	cmp	r5, #0
 8012832:	da03      	bge.n	801283c <_printf_i+0xd0>
 8012834:	232d      	movs	r3, #45	@ 0x2d
 8012836:	426d      	negs	r5, r5
 8012838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801283c:	4859      	ldr	r0, [pc, #356]	@ (80129a4 <_printf_i+0x238>)
 801283e:	230a      	movs	r3, #10
 8012840:	e011      	b.n	8012866 <_printf_i+0xfa>
 8012842:	6821      	ldr	r1, [r4, #0]
 8012844:	6833      	ldr	r3, [r6, #0]
 8012846:	0608      	lsls	r0, r1, #24
 8012848:	f853 5b04 	ldr.w	r5, [r3], #4
 801284c:	d402      	bmi.n	8012854 <_printf_i+0xe8>
 801284e:	0649      	lsls	r1, r1, #25
 8012850:	bf48      	it	mi
 8012852:	b2ad      	uxthmi	r5, r5
 8012854:	2f6f      	cmp	r7, #111	@ 0x6f
 8012856:	4853      	ldr	r0, [pc, #332]	@ (80129a4 <_printf_i+0x238>)
 8012858:	6033      	str	r3, [r6, #0]
 801285a:	bf14      	ite	ne
 801285c:	230a      	movne	r3, #10
 801285e:	2308      	moveq	r3, #8
 8012860:	2100      	movs	r1, #0
 8012862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012866:	6866      	ldr	r6, [r4, #4]
 8012868:	60a6      	str	r6, [r4, #8]
 801286a:	2e00      	cmp	r6, #0
 801286c:	bfa2      	ittt	ge
 801286e:	6821      	ldrge	r1, [r4, #0]
 8012870:	f021 0104 	bicge.w	r1, r1, #4
 8012874:	6021      	strge	r1, [r4, #0]
 8012876:	b90d      	cbnz	r5, 801287c <_printf_i+0x110>
 8012878:	2e00      	cmp	r6, #0
 801287a:	d04b      	beq.n	8012914 <_printf_i+0x1a8>
 801287c:	4616      	mov	r6, r2
 801287e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012882:	fb03 5711 	mls	r7, r3, r1, r5
 8012886:	5dc7      	ldrb	r7, [r0, r7]
 8012888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801288c:	462f      	mov	r7, r5
 801288e:	42bb      	cmp	r3, r7
 8012890:	460d      	mov	r5, r1
 8012892:	d9f4      	bls.n	801287e <_printf_i+0x112>
 8012894:	2b08      	cmp	r3, #8
 8012896:	d10b      	bne.n	80128b0 <_printf_i+0x144>
 8012898:	6823      	ldr	r3, [r4, #0]
 801289a:	07df      	lsls	r7, r3, #31
 801289c:	d508      	bpl.n	80128b0 <_printf_i+0x144>
 801289e:	6923      	ldr	r3, [r4, #16]
 80128a0:	6861      	ldr	r1, [r4, #4]
 80128a2:	4299      	cmp	r1, r3
 80128a4:	bfde      	ittt	le
 80128a6:	2330      	movle	r3, #48	@ 0x30
 80128a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80128ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80128b0:	1b92      	subs	r2, r2, r6
 80128b2:	6122      	str	r2, [r4, #16]
 80128b4:	f8cd a000 	str.w	sl, [sp]
 80128b8:	464b      	mov	r3, r9
 80128ba:	aa03      	add	r2, sp, #12
 80128bc:	4621      	mov	r1, r4
 80128be:	4640      	mov	r0, r8
 80128c0:	f7ff fee6 	bl	8012690 <_printf_common>
 80128c4:	3001      	adds	r0, #1
 80128c6:	d14a      	bne.n	801295e <_printf_i+0x1f2>
 80128c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80128cc:	b004      	add	sp, #16
 80128ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128d2:	6823      	ldr	r3, [r4, #0]
 80128d4:	f043 0320 	orr.w	r3, r3, #32
 80128d8:	6023      	str	r3, [r4, #0]
 80128da:	4833      	ldr	r0, [pc, #204]	@ (80129a8 <_printf_i+0x23c>)
 80128dc:	2778      	movs	r7, #120	@ 0x78
 80128de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80128e2:	6823      	ldr	r3, [r4, #0]
 80128e4:	6831      	ldr	r1, [r6, #0]
 80128e6:	061f      	lsls	r7, r3, #24
 80128e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80128ec:	d402      	bmi.n	80128f4 <_printf_i+0x188>
 80128ee:	065f      	lsls	r7, r3, #25
 80128f0:	bf48      	it	mi
 80128f2:	b2ad      	uxthmi	r5, r5
 80128f4:	6031      	str	r1, [r6, #0]
 80128f6:	07d9      	lsls	r1, r3, #31
 80128f8:	bf44      	itt	mi
 80128fa:	f043 0320 	orrmi.w	r3, r3, #32
 80128fe:	6023      	strmi	r3, [r4, #0]
 8012900:	b11d      	cbz	r5, 801290a <_printf_i+0x19e>
 8012902:	2310      	movs	r3, #16
 8012904:	e7ac      	b.n	8012860 <_printf_i+0xf4>
 8012906:	4827      	ldr	r0, [pc, #156]	@ (80129a4 <_printf_i+0x238>)
 8012908:	e7e9      	b.n	80128de <_printf_i+0x172>
 801290a:	6823      	ldr	r3, [r4, #0]
 801290c:	f023 0320 	bic.w	r3, r3, #32
 8012910:	6023      	str	r3, [r4, #0]
 8012912:	e7f6      	b.n	8012902 <_printf_i+0x196>
 8012914:	4616      	mov	r6, r2
 8012916:	e7bd      	b.n	8012894 <_printf_i+0x128>
 8012918:	6833      	ldr	r3, [r6, #0]
 801291a:	6825      	ldr	r5, [r4, #0]
 801291c:	6961      	ldr	r1, [r4, #20]
 801291e:	1d18      	adds	r0, r3, #4
 8012920:	6030      	str	r0, [r6, #0]
 8012922:	062e      	lsls	r6, r5, #24
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	d501      	bpl.n	801292c <_printf_i+0x1c0>
 8012928:	6019      	str	r1, [r3, #0]
 801292a:	e002      	b.n	8012932 <_printf_i+0x1c6>
 801292c:	0668      	lsls	r0, r5, #25
 801292e:	d5fb      	bpl.n	8012928 <_printf_i+0x1bc>
 8012930:	8019      	strh	r1, [r3, #0]
 8012932:	2300      	movs	r3, #0
 8012934:	6123      	str	r3, [r4, #16]
 8012936:	4616      	mov	r6, r2
 8012938:	e7bc      	b.n	80128b4 <_printf_i+0x148>
 801293a:	6833      	ldr	r3, [r6, #0]
 801293c:	1d1a      	adds	r2, r3, #4
 801293e:	6032      	str	r2, [r6, #0]
 8012940:	681e      	ldr	r6, [r3, #0]
 8012942:	6862      	ldr	r2, [r4, #4]
 8012944:	2100      	movs	r1, #0
 8012946:	4630      	mov	r0, r6
 8012948:	f7ed fc7a 	bl	8000240 <memchr>
 801294c:	b108      	cbz	r0, 8012952 <_printf_i+0x1e6>
 801294e:	1b80      	subs	r0, r0, r6
 8012950:	6060      	str	r0, [r4, #4]
 8012952:	6863      	ldr	r3, [r4, #4]
 8012954:	6123      	str	r3, [r4, #16]
 8012956:	2300      	movs	r3, #0
 8012958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801295c:	e7aa      	b.n	80128b4 <_printf_i+0x148>
 801295e:	6923      	ldr	r3, [r4, #16]
 8012960:	4632      	mov	r2, r6
 8012962:	4649      	mov	r1, r9
 8012964:	4640      	mov	r0, r8
 8012966:	47d0      	blx	sl
 8012968:	3001      	adds	r0, #1
 801296a:	d0ad      	beq.n	80128c8 <_printf_i+0x15c>
 801296c:	6823      	ldr	r3, [r4, #0]
 801296e:	079b      	lsls	r3, r3, #30
 8012970:	d413      	bmi.n	801299a <_printf_i+0x22e>
 8012972:	68e0      	ldr	r0, [r4, #12]
 8012974:	9b03      	ldr	r3, [sp, #12]
 8012976:	4298      	cmp	r0, r3
 8012978:	bfb8      	it	lt
 801297a:	4618      	movlt	r0, r3
 801297c:	e7a6      	b.n	80128cc <_printf_i+0x160>
 801297e:	2301      	movs	r3, #1
 8012980:	4632      	mov	r2, r6
 8012982:	4649      	mov	r1, r9
 8012984:	4640      	mov	r0, r8
 8012986:	47d0      	blx	sl
 8012988:	3001      	adds	r0, #1
 801298a:	d09d      	beq.n	80128c8 <_printf_i+0x15c>
 801298c:	3501      	adds	r5, #1
 801298e:	68e3      	ldr	r3, [r4, #12]
 8012990:	9903      	ldr	r1, [sp, #12]
 8012992:	1a5b      	subs	r3, r3, r1
 8012994:	42ab      	cmp	r3, r5
 8012996:	dcf2      	bgt.n	801297e <_printf_i+0x212>
 8012998:	e7eb      	b.n	8012972 <_printf_i+0x206>
 801299a:	2500      	movs	r5, #0
 801299c:	f104 0619 	add.w	r6, r4, #25
 80129a0:	e7f5      	b.n	801298e <_printf_i+0x222>
 80129a2:	bf00      	nop
 80129a4:	08014ef6 	.word	0x08014ef6
 80129a8:	08014f07 	.word	0x08014f07

080129ac <__sflush_r>:
 80129ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80129b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b4:	0716      	lsls	r6, r2, #28
 80129b6:	4605      	mov	r5, r0
 80129b8:	460c      	mov	r4, r1
 80129ba:	d454      	bmi.n	8012a66 <__sflush_r+0xba>
 80129bc:	684b      	ldr	r3, [r1, #4]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	dc02      	bgt.n	80129c8 <__sflush_r+0x1c>
 80129c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	dd48      	ble.n	8012a5a <__sflush_r+0xae>
 80129c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129ca:	2e00      	cmp	r6, #0
 80129cc:	d045      	beq.n	8012a5a <__sflush_r+0xae>
 80129ce:	2300      	movs	r3, #0
 80129d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80129d4:	682f      	ldr	r7, [r5, #0]
 80129d6:	6a21      	ldr	r1, [r4, #32]
 80129d8:	602b      	str	r3, [r5, #0]
 80129da:	d030      	beq.n	8012a3e <__sflush_r+0x92>
 80129dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80129de:	89a3      	ldrh	r3, [r4, #12]
 80129e0:	0759      	lsls	r1, r3, #29
 80129e2:	d505      	bpl.n	80129f0 <__sflush_r+0x44>
 80129e4:	6863      	ldr	r3, [r4, #4]
 80129e6:	1ad2      	subs	r2, r2, r3
 80129e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80129ea:	b10b      	cbz	r3, 80129f0 <__sflush_r+0x44>
 80129ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80129ee:	1ad2      	subs	r2, r2, r3
 80129f0:	2300      	movs	r3, #0
 80129f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129f4:	6a21      	ldr	r1, [r4, #32]
 80129f6:	4628      	mov	r0, r5
 80129f8:	47b0      	blx	r6
 80129fa:	1c43      	adds	r3, r0, #1
 80129fc:	89a3      	ldrh	r3, [r4, #12]
 80129fe:	d106      	bne.n	8012a0e <__sflush_r+0x62>
 8012a00:	6829      	ldr	r1, [r5, #0]
 8012a02:	291d      	cmp	r1, #29
 8012a04:	d82b      	bhi.n	8012a5e <__sflush_r+0xb2>
 8012a06:	4a2a      	ldr	r2, [pc, #168]	@ (8012ab0 <__sflush_r+0x104>)
 8012a08:	410a      	asrs	r2, r1
 8012a0a:	07d6      	lsls	r6, r2, #31
 8012a0c:	d427      	bmi.n	8012a5e <__sflush_r+0xb2>
 8012a0e:	2200      	movs	r2, #0
 8012a10:	6062      	str	r2, [r4, #4]
 8012a12:	04d9      	lsls	r1, r3, #19
 8012a14:	6922      	ldr	r2, [r4, #16]
 8012a16:	6022      	str	r2, [r4, #0]
 8012a18:	d504      	bpl.n	8012a24 <__sflush_r+0x78>
 8012a1a:	1c42      	adds	r2, r0, #1
 8012a1c:	d101      	bne.n	8012a22 <__sflush_r+0x76>
 8012a1e:	682b      	ldr	r3, [r5, #0]
 8012a20:	b903      	cbnz	r3, 8012a24 <__sflush_r+0x78>
 8012a22:	6560      	str	r0, [r4, #84]	@ 0x54
 8012a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a26:	602f      	str	r7, [r5, #0]
 8012a28:	b1b9      	cbz	r1, 8012a5a <__sflush_r+0xae>
 8012a2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a2e:	4299      	cmp	r1, r3
 8012a30:	d002      	beq.n	8012a38 <__sflush_r+0x8c>
 8012a32:	4628      	mov	r0, r5
 8012a34:	f7ff fbf6 	bl	8012224 <_free_r>
 8012a38:	2300      	movs	r3, #0
 8012a3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a3c:	e00d      	b.n	8012a5a <__sflush_r+0xae>
 8012a3e:	2301      	movs	r3, #1
 8012a40:	4628      	mov	r0, r5
 8012a42:	47b0      	blx	r6
 8012a44:	4602      	mov	r2, r0
 8012a46:	1c50      	adds	r0, r2, #1
 8012a48:	d1c9      	bne.n	80129de <__sflush_r+0x32>
 8012a4a:	682b      	ldr	r3, [r5, #0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d0c6      	beq.n	80129de <__sflush_r+0x32>
 8012a50:	2b1d      	cmp	r3, #29
 8012a52:	d001      	beq.n	8012a58 <__sflush_r+0xac>
 8012a54:	2b16      	cmp	r3, #22
 8012a56:	d11e      	bne.n	8012a96 <__sflush_r+0xea>
 8012a58:	602f      	str	r7, [r5, #0]
 8012a5a:	2000      	movs	r0, #0
 8012a5c:	e022      	b.n	8012aa4 <__sflush_r+0xf8>
 8012a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a62:	b21b      	sxth	r3, r3
 8012a64:	e01b      	b.n	8012a9e <__sflush_r+0xf2>
 8012a66:	690f      	ldr	r7, [r1, #16]
 8012a68:	2f00      	cmp	r7, #0
 8012a6a:	d0f6      	beq.n	8012a5a <__sflush_r+0xae>
 8012a6c:	0793      	lsls	r3, r2, #30
 8012a6e:	680e      	ldr	r6, [r1, #0]
 8012a70:	bf08      	it	eq
 8012a72:	694b      	ldreq	r3, [r1, #20]
 8012a74:	600f      	str	r7, [r1, #0]
 8012a76:	bf18      	it	ne
 8012a78:	2300      	movne	r3, #0
 8012a7a:	eba6 0807 	sub.w	r8, r6, r7
 8012a7e:	608b      	str	r3, [r1, #8]
 8012a80:	f1b8 0f00 	cmp.w	r8, #0
 8012a84:	dde9      	ble.n	8012a5a <__sflush_r+0xae>
 8012a86:	6a21      	ldr	r1, [r4, #32]
 8012a88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012a8a:	4643      	mov	r3, r8
 8012a8c:	463a      	mov	r2, r7
 8012a8e:	4628      	mov	r0, r5
 8012a90:	47b0      	blx	r6
 8012a92:	2800      	cmp	r0, #0
 8012a94:	dc08      	bgt.n	8012aa8 <__sflush_r+0xfc>
 8012a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a9e:	81a3      	strh	r3, [r4, #12]
 8012aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa8:	4407      	add	r7, r0
 8012aaa:	eba8 0800 	sub.w	r8, r8, r0
 8012aae:	e7e7      	b.n	8012a80 <__sflush_r+0xd4>
 8012ab0:	dfbffffe 	.word	0xdfbffffe

08012ab4 <_fflush_r>:
 8012ab4:	b538      	push	{r3, r4, r5, lr}
 8012ab6:	690b      	ldr	r3, [r1, #16]
 8012ab8:	4605      	mov	r5, r0
 8012aba:	460c      	mov	r4, r1
 8012abc:	b913      	cbnz	r3, 8012ac4 <_fflush_r+0x10>
 8012abe:	2500      	movs	r5, #0
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	bd38      	pop	{r3, r4, r5, pc}
 8012ac4:	b118      	cbz	r0, 8012ace <_fflush_r+0x1a>
 8012ac6:	6a03      	ldr	r3, [r0, #32]
 8012ac8:	b90b      	cbnz	r3, 8012ace <_fflush_r+0x1a>
 8012aca:	f7ff fa4d 	bl	8011f68 <__sinit>
 8012ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d0f3      	beq.n	8012abe <_fflush_r+0xa>
 8012ad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012ad8:	07d0      	lsls	r0, r2, #31
 8012ada:	d404      	bmi.n	8012ae6 <_fflush_r+0x32>
 8012adc:	0599      	lsls	r1, r3, #22
 8012ade:	d402      	bmi.n	8012ae6 <_fflush_r+0x32>
 8012ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ae2:	f7ff fb70 	bl	80121c6 <__retarget_lock_acquire_recursive>
 8012ae6:	4628      	mov	r0, r5
 8012ae8:	4621      	mov	r1, r4
 8012aea:	f7ff ff5f 	bl	80129ac <__sflush_r>
 8012aee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012af0:	07da      	lsls	r2, r3, #31
 8012af2:	4605      	mov	r5, r0
 8012af4:	d4e4      	bmi.n	8012ac0 <_fflush_r+0xc>
 8012af6:	89a3      	ldrh	r3, [r4, #12]
 8012af8:	059b      	lsls	r3, r3, #22
 8012afa:	d4e1      	bmi.n	8012ac0 <_fflush_r+0xc>
 8012afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012afe:	f7ff fb63 	bl	80121c8 <__retarget_lock_release_recursive>
 8012b02:	e7dd      	b.n	8012ac0 <_fflush_r+0xc>

08012b04 <__malloc_lock>:
 8012b04:	4801      	ldr	r0, [pc, #4]	@ (8012b0c <__malloc_lock+0x8>)
 8012b06:	f7ff bb5e 	b.w	80121c6 <__retarget_lock_acquire_recursive>
 8012b0a:	bf00      	nop
 8012b0c:	20006ba0 	.word	0x20006ba0

08012b10 <__malloc_unlock>:
 8012b10:	4801      	ldr	r0, [pc, #4]	@ (8012b18 <__malloc_unlock+0x8>)
 8012b12:	f7ff bb59 	b.w	80121c8 <__retarget_lock_release_recursive>
 8012b16:	bf00      	nop
 8012b18:	20006ba0 	.word	0x20006ba0

08012b1c <__sread>:
 8012b1c:	b510      	push	{r4, lr}
 8012b1e:	460c      	mov	r4, r1
 8012b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b24:	f000 f98a 	bl	8012e3c <_read_r>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	bfab      	itete	ge
 8012b2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8012b30:	181b      	addge	r3, r3, r0
 8012b32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012b36:	bfac      	ite	ge
 8012b38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012b3a:	81a3      	strhlt	r3, [r4, #12]
 8012b3c:	bd10      	pop	{r4, pc}

08012b3e <__swrite>:
 8012b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b42:	461f      	mov	r7, r3
 8012b44:	898b      	ldrh	r3, [r1, #12]
 8012b46:	05db      	lsls	r3, r3, #23
 8012b48:	4605      	mov	r5, r0
 8012b4a:	460c      	mov	r4, r1
 8012b4c:	4616      	mov	r6, r2
 8012b4e:	d505      	bpl.n	8012b5c <__swrite+0x1e>
 8012b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b54:	2302      	movs	r3, #2
 8012b56:	2200      	movs	r2, #0
 8012b58:	f000 f95e 	bl	8012e18 <_lseek_r>
 8012b5c:	89a3      	ldrh	r3, [r4, #12]
 8012b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012b66:	81a3      	strh	r3, [r4, #12]
 8012b68:	4632      	mov	r2, r6
 8012b6a:	463b      	mov	r3, r7
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b72:	f000 b985 	b.w	8012e80 <_write_r>

08012b76 <__sseek>:
 8012b76:	b510      	push	{r4, lr}
 8012b78:	460c      	mov	r4, r1
 8012b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b7e:	f000 f94b 	bl	8012e18 <_lseek_r>
 8012b82:	1c43      	adds	r3, r0, #1
 8012b84:	89a3      	ldrh	r3, [r4, #12]
 8012b86:	bf15      	itete	ne
 8012b88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012b8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012b8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012b92:	81a3      	strheq	r3, [r4, #12]
 8012b94:	bf18      	it	ne
 8012b96:	81a3      	strhne	r3, [r4, #12]
 8012b98:	bd10      	pop	{r4, pc}

08012b9a <__sclose>:
 8012b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b9e:	f000 b909 	b.w	8012db4 <_close_r>
	...

08012ba4 <fiprintf>:
 8012ba4:	b40e      	push	{r1, r2, r3}
 8012ba6:	b503      	push	{r0, r1, lr}
 8012ba8:	4601      	mov	r1, r0
 8012baa:	ab03      	add	r3, sp, #12
 8012bac:	4805      	ldr	r0, [pc, #20]	@ (8012bc4 <fiprintf+0x20>)
 8012bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bb2:	6800      	ldr	r0, [r0, #0]
 8012bb4:	9301      	str	r3, [sp, #4]
 8012bb6:	f7ff fba9 	bl	801230c <_vfiprintf_r>
 8012bba:	b002      	add	sp, #8
 8012bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bc0:	b003      	add	sp, #12
 8012bc2:	4770      	bx	lr
 8012bc4:	200000b0 	.word	0x200000b0

08012bc8 <__swbuf_r>:
 8012bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bca:	460e      	mov	r6, r1
 8012bcc:	4614      	mov	r4, r2
 8012bce:	4605      	mov	r5, r0
 8012bd0:	b118      	cbz	r0, 8012bda <__swbuf_r+0x12>
 8012bd2:	6a03      	ldr	r3, [r0, #32]
 8012bd4:	b90b      	cbnz	r3, 8012bda <__swbuf_r+0x12>
 8012bd6:	f7ff f9c7 	bl	8011f68 <__sinit>
 8012bda:	69a3      	ldr	r3, [r4, #24]
 8012bdc:	60a3      	str	r3, [r4, #8]
 8012bde:	89a3      	ldrh	r3, [r4, #12]
 8012be0:	071a      	lsls	r2, r3, #28
 8012be2:	d501      	bpl.n	8012be8 <__swbuf_r+0x20>
 8012be4:	6923      	ldr	r3, [r4, #16]
 8012be6:	b943      	cbnz	r3, 8012bfa <__swbuf_r+0x32>
 8012be8:	4621      	mov	r1, r4
 8012bea:	4628      	mov	r0, r5
 8012bec:	f000 f82a 	bl	8012c44 <__swsetup_r>
 8012bf0:	b118      	cbz	r0, 8012bfa <__swbuf_r+0x32>
 8012bf2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012bf6:	4638      	mov	r0, r7
 8012bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bfa:	6823      	ldr	r3, [r4, #0]
 8012bfc:	6922      	ldr	r2, [r4, #16]
 8012bfe:	1a98      	subs	r0, r3, r2
 8012c00:	6963      	ldr	r3, [r4, #20]
 8012c02:	b2f6      	uxtb	r6, r6
 8012c04:	4283      	cmp	r3, r0
 8012c06:	4637      	mov	r7, r6
 8012c08:	dc05      	bgt.n	8012c16 <__swbuf_r+0x4e>
 8012c0a:	4621      	mov	r1, r4
 8012c0c:	4628      	mov	r0, r5
 8012c0e:	f7ff ff51 	bl	8012ab4 <_fflush_r>
 8012c12:	2800      	cmp	r0, #0
 8012c14:	d1ed      	bne.n	8012bf2 <__swbuf_r+0x2a>
 8012c16:	68a3      	ldr	r3, [r4, #8]
 8012c18:	3b01      	subs	r3, #1
 8012c1a:	60a3      	str	r3, [r4, #8]
 8012c1c:	6823      	ldr	r3, [r4, #0]
 8012c1e:	1c5a      	adds	r2, r3, #1
 8012c20:	6022      	str	r2, [r4, #0]
 8012c22:	701e      	strb	r6, [r3, #0]
 8012c24:	6962      	ldr	r2, [r4, #20]
 8012c26:	1c43      	adds	r3, r0, #1
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d004      	beq.n	8012c36 <__swbuf_r+0x6e>
 8012c2c:	89a3      	ldrh	r3, [r4, #12]
 8012c2e:	07db      	lsls	r3, r3, #31
 8012c30:	d5e1      	bpl.n	8012bf6 <__swbuf_r+0x2e>
 8012c32:	2e0a      	cmp	r6, #10
 8012c34:	d1df      	bne.n	8012bf6 <__swbuf_r+0x2e>
 8012c36:	4621      	mov	r1, r4
 8012c38:	4628      	mov	r0, r5
 8012c3a:	f7ff ff3b 	bl	8012ab4 <_fflush_r>
 8012c3e:	2800      	cmp	r0, #0
 8012c40:	d0d9      	beq.n	8012bf6 <__swbuf_r+0x2e>
 8012c42:	e7d6      	b.n	8012bf2 <__swbuf_r+0x2a>

08012c44 <__swsetup_r>:
 8012c44:	b538      	push	{r3, r4, r5, lr}
 8012c46:	4b29      	ldr	r3, [pc, #164]	@ (8012cec <__swsetup_r+0xa8>)
 8012c48:	4605      	mov	r5, r0
 8012c4a:	6818      	ldr	r0, [r3, #0]
 8012c4c:	460c      	mov	r4, r1
 8012c4e:	b118      	cbz	r0, 8012c58 <__swsetup_r+0x14>
 8012c50:	6a03      	ldr	r3, [r0, #32]
 8012c52:	b90b      	cbnz	r3, 8012c58 <__swsetup_r+0x14>
 8012c54:	f7ff f988 	bl	8011f68 <__sinit>
 8012c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c5c:	0719      	lsls	r1, r3, #28
 8012c5e:	d422      	bmi.n	8012ca6 <__swsetup_r+0x62>
 8012c60:	06da      	lsls	r2, r3, #27
 8012c62:	d407      	bmi.n	8012c74 <__swsetup_r+0x30>
 8012c64:	2209      	movs	r2, #9
 8012c66:	602a      	str	r2, [r5, #0]
 8012c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c6c:	81a3      	strh	r3, [r4, #12]
 8012c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c72:	e033      	b.n	8012cdc <__swsetup_r+0x98>
 8012c74:	0758      	lsls	r0, r3, #29
 8012c76:	d512      	bpl.n	8012c9e <__swsetup_r+0x5a>
 8012c78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c7a:	b141      	cbz	r1, 8012c8e <__swsetup_r+0x4a>
 8012c7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c80:	4299      	cmp	r1, r3
 8012c82:	d002      	beq.n	8012c8a <__swsetup_r+0x46>
 8012c84:	4628      	mov	r0, r5
 8012c86:	f7ff facd 	bl	8012224 <_free_r>
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c8e:	89a3      	ldrh	r3, [r4, #12]
 8012c90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012c94:	81a3      	strh	r3, [r4, #12]
 8012c96:	2300      	movs	r3, #0
 8012c98:	6063      	str	r3, [r4, #4]
 8012c9a:	6923      	ldr	r3, [r4, #16]
 8012c9c:	6023      	str	r3, [r4, #0]
 8012c9e:	89a3      	ldrh	r3, [r4, #12]
 8012ca0:	f043 0308 	orr.w	r3, r3, #8
 8012ca4:	81a3      	strh	r3, [r4, #12]
 8012ca6:	6923      	ldr	r3, [r4, #16]
 8012ca8:	b94b      	cbnz	r3, 8012cbe <__swsetup_r+0x7a>
 8012caa:	89a3      	ldrh	r3, [r4, #12]
 8012cac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012cb4:	d003      	beq.n	8012cbe <__swsetup_r+0x7a>
 8012cb6:	4621      	mov	r1, r4
 8012cb8:	4628      	mov	r0, r5
 8012cba:	f000 f83f 	bl	8012d3c <__smakebuf_r>
 8012cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cc2:	f013 0201 	ands.w	r2, r3, #1
 8012cc6:	d00a      	beq.n	8012cde <__swsetup_r+0x9a>
 8012cc8:	2200      	movs	r2, #0
 8012cca:	60a2      	str	r2, [r4, #8]
 8012ccc:	6962      	ldr	r2, [r4, #20]
 8012cce:	4252      	negs	r2, r2
 8012cd0:	61a2      	str	r2, [r4, #24]
 8012cd2:	6922      	ldr	r2, [r4, #16]
 8012cd4:	b942      	cbnz	r2, 8012ce8 <__swsetup_r+0xa4>
 8012cd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012cda:	d1c5      	bne.n	8012c68 <__swsetup_r+0x24>
 8012cdc:	bd38      	pop	{r3, r4, r5, pc}
 8012cde:	0799      	lsls	r1, r3, #30
 8012ce0:	bf58      	it	pl
 8012ce2:	6962      	ldrpl	r2, [r4, #20]
 8012ce4:	60a2      	str	r2, [r4, #8]
 8012ce6:	e7f4      	b.n	8012cd2 <__swsetup_r+0x8e>
 8012ce8:	2000      	movs	r0, #0
 8012cea:	e7f7      	b.n	8012cdc <__swsetup_r+0x98>
 8012cec:	200000b0 	.word	0x200000b0

08012cf0 <__swhatbuf_r>:
 8012cf0:	b570      	push	{r4, r5, r6, lr}
 8012cf2:	460c      	mov	r4, r1
 8012cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cf8:	2900      	cmp	r1, #0
 8012cfa:	b096      	sub	sp, #88	@ 0x58
 8012cfc:	4615      	mov	r5, r2
 8012cfe:	461e      	mov	r6, r3
 8012d00:	da0d      	bge.n	8012d1e <__swhatbuf_r+0x2e>
 8012d02:	89a3      	ldrh	r3, [r4, #12]
 8012d04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012d08:	f04f 0100 	mov.w	r1, #0
 8012d0c:	bf14      	ite	ne
 8012d0e:	2340      	movne	r3, #64	@ 0x40
 8012d10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012d14:	2000      	movs	r0, #0
 8012d16:	6031      	str	r1, [r6, #0]
 8012d18:	602b      	str	r3, [r5, #0]
 8012d1a:	b016      	add	sp, #88	@ 0x58
 8012d1c:	bd70      	pop	{r4, r5, r6, pc}
 8012d1e:	466a      	mov	r2, sp
 8012d20:	f000 f858 	bl	8012dd4 <_fstat_r>
 8012d24:	2800      	cmp	r0, #0
 8012d26:	dbec      	blt.n	8012d02 <__swhatbuf_r+0x12>
 8012d28:	9901      	ldr	r1, [sp, #4]
 8012d2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012d2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012d32:	4259      	negs	r1, r3
 8012d34:	4159      	adcs	r1, r3
 8012d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d3a:	e7eb      	b.n	8012d14 <__swhatbuf_r+0x24>

08012d3c <__smakebuf_r>:
 8012d3c:	898b      	ldrh	r3, [r1, #12]
 8012d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d40:	079d      	lsls	r5, r3, #30
 8012d42:	4606      	mov	r6, r0
 8012d44:	460c      	mov	r4, r1
 8012d46:	d507      	bpl.n	8012d58 <__smakebuf_r+0x1c>
 8012d48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012d4c:	6023      	str	r3, [r4, #0]
 8012d4e:	6123      	str	r3, [r4, #16]
 8012d50:	2301      	movs	r3, #1
 8012d52:	6163      	str	r3, [r4, #20]
 8012d54:	b003      	add	sp, #12
 8012d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d58:	ab01      	add	r3, sp, #4
 8012d5a:	466a      	mov	r2, sp
 8012d5c:	f7ff ffc8 	bl	8012cf0 <__swhatbuf_r>
 8012d60:	9f00      	ldr	r7, [sp, #0]
 8012d62:	4605      	mov	r5, r0
 8012d64:	4639      	mov	r1, r7
 8012d66:	4630      	mov	r0, r6
 8012d68:	f7ff fc12 	bl	8012590 <_malloc_r>
 8012d6c:	b948      	cbnz	r0, 8012d82 <__smakebuf_r+0x46>
 8012d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d72:	059a      	lsls	r2, r3, #22
 8012d74:	d4ee      	bmi.n	8012d54 <__smakebuf_r+0x18>
 8012d76:	f023 0303 	bic.w	r3, r3, #3
 8012d7a:	f043 0302 	orr.w	r3, r3, #2
 8012d7e:	81a3      	strh	r3, [r4, #12]
 8012d80:	e7e2      	b.n	8012d48 <__smakebuf_r+0xc>
 8012d82:	89a3      	ldrh	r3, [r4, #12]
 8012d84:	6020      	str	r0, [r4, #0]
 8012d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d8a:	81a3      	strh	r3, [r4, #12]
 8012d8c:	9b01      	ldr	r3, [sp, #4]
 8012d8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012d92:	b15b      	cbz	r3, 8012dac <__smakebuf_r+0x70>
 8012d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d98:	4630      	mov	r0, r6
 8012d9a:	f000 f82d 	bl	8012df8 <_isatty_r>
 8012d9e:	b128      	cbz	r0, 8012dac <__smakebuf_r+0x70>
 8012da0:	89a3      	ldrh	r3, [r4, #12]
 8012da2:	f023 0303 	bic.w	r3, r3, #3
 8012da6:	f043 0301 	orr.w	r3, r3, #1
 8012daa:	81a3      	strh	r3, [r4, #12]
 8012dac:	89a3      	ldrh	r3, [r4, #12]
 8012dae:	431d      	orrs	r5, r3
 8012db0:	81a5      	strh	r5, [r4, #12]
 8012db2:	e7cf      	b.n	8012d54 <__smakebuf_r+0x18>

08012db4 <_close_r>:
 8012db4:	b538      	push	{r3, r4, r5, lr}
 8012db6:	4d06      	ldr	r5, [pc, #24]	@ (8012dd0 <_close_r+0x1c>)
 8012db8:	2300      	movs	r3, #0
 8012dba:	4604      	mov	r4, r0
 8012dbc:	4608      	mov	r0, r1
 8012dbe:	602b      	str	r3, [r5, #0]
 8012dc0:	f7ef fee6 	bl	8002b90 <_close>
 8012dc4:	1c43      	adds	r3, r0, #1
 8012dc6:	d102      	bne.n	8012dce <_close_r+0x1a>
 8012dc8:	682b      	ldr	r3, [r5, #0]
 8012dca:	b103      	cbz	r3, 8012dce <_close_r+0x1a>
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	bd38      	pop	{r3, r4, r5, pc}
 8012dd0:	20006b9c 	.word	0x20006b9c

08012dd4 <_fstat_r>:
 8012dd4:	b538      	push	{r3, r4, r5, lr}
 8012dd6:	4d07      	ldr	r5, [pc, #28]	@ (8012df4 <_fstat_r+0x20>)
 8012dd8:	2300      	movs	r3, #0
 8012dda:	4604      	mov	r4, r0
 8012ddc:	4608      	mov	r0, r1
 8012dde:	4611      	mov	r1, r2
 8012de0:	602b      	str	r3, [r5, #0]
 8012de2:	f7ef fee1 	bl	8002ba8 <_fstat>
 8012de6:	1c43      	adds	r3, r0, #1
 8012de8:	d102      	bne.n	8012df0 <_fstat_r+0x1c>
 8012dea:	682b      	ldr	r3, [r5, #0]
 8012dec:	b103      	cbz	r3, 8012df0 <_fstat_r+0x1c>
 8012dee:	6023      	str	r3, [r4, #0]
 8012df0:	bd38      	pop	{r3, r4, r5, pc}
 8012df2:	bf00      	nop
 8012df4:	20006b9c 	.word	0x20006b9c

08012df8 <_isatty_r>:
 8012df8:	b538      	push	{r3, r4, r5, lr}
 8012dfa:	4d06      	ldr	r5, [pc, #24]	@ (8012e14 <_isatty_r+0x1c>)
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	4604      	mov	r4, r0
 8012e00:	4608      	mov	r0, r1
 8012e02:	602b      	str	r3, [r5, #0]
 8012e04:	f7ef fee0 	bl	8002bc8 <_isatty>
 8012e08:	1c43      	adds	r3, r0, #1
 8012e0a:	d102      	bne.n	8012e12 <_isatty_r+0x1a>
 8012e0c:	682b      	ldr	r3, [r5, #0]
 8012e0e:	b103      	cbz	r3, 8012e12 <_isatty_r+0x1a>
 8012e10:	6023      	str	r3, [r4, #0]
 8012e12:	bd38      	pop	{r3, r4, r5, pc}
 8012e14:	20006b9c 	.word	0x20006b9c

08012e18 <_lseek_r>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4d07      	ldr	r5, [pc, #28]	@ (8012e38 <_lseek_r+0x20>)
 8012e1c:	4604      	mov	r4, r0
 8012e1e:	4608      	mov	r0, r1
 8012e20:	4611      	mov	r1, r2
 8012e22:	2200      	movs	r2, #0
 8012e24:	602a      	str	r2, [r5, #0]
 8012e26:	461a      	mov	r2, r3
 8012e28:	f7ef fed9 	bl	8002bde <_lseek>
 8012e2c:	1c43      	adds	r3, r0, #1
 8012e2e:	d102      	bne.n	8012e36 <_lseek_r+0x1e>
 8012e30:	682b      	ldr	r3, [r5, #0]
 8012e32:	b103      	cbz	r3, 8012e36 <_lseek_r+0x1e>
 8012e34:	6023      	str	r3, [r4, #0]
 8012e36:	bd38      	pop	{r3, r4, r5, pc}
 8012e38:	20006b9c 	.word	0x20006b9c

08012e3c <_read_r>:
 8012e3c:	b538      	push	{r3, r4, r5, lr}
 8012e3e:	4d07      	ldr	r5, [pc, #28]	@ (8012e5c <_read_r+0x20>)
 8012e40:	4604      	mov	r4, r0
 8012e42:	4608      	mov	r0, r1
 8012e44:	4611      	mov	r1, r2
 8012e46:	2200      	movs	r2, #0
 8012e48:	602a      	str	r2, [r5, #0]
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	f7ef fe67 	bl	8002b1e <_read>
 8012e50:	1c43      	adds	r3, r0, #1
 8012e52:	d102      	bne.n	8012e5a <_read_r+0x1e>
 8012e54:	682b      	ldr	r3, [r5, #0]
 8012e56:	b103      	cbz	r3, 8012e5a <_read_r+0x1e>
 8012e58:	6023      	str	r3, [r4, #0]
 8012e5a:	bd38      	pop	{r3, r4, r5, pc}
 8012e5c:	20006b9c 	.word	0x20006b9c

08012e60 <_sbrk_r>:
 8012e60:	b538      	push	{r3, r4, r5, lr}
 8012e62:	4d06      	ldr	r5, [pc, #24]	@ (8012e7c <_sbrk_r+0x1c>)
 8012e64:	2300      	movs	r3, #0
 8012e66:	4604      	mov	r4, r0
 8012e68:	4608      	mov	r0, r1
 8012e6a:	602b      	str	r3, [r5, #0]
 8012e6c:	f7ef fec4 	bl	8002bf8 <_sbrk>
 8012e70:	1c43      	adds	r3, r0, #1
 8012e72:	d102      	bne.n	8012e7a <_sbrk_r+0x1a>
 8012e74:	682b      	ldr	r3, [r5, #0]
 8012e76:	b103      	cbz	r3, 8012e7a <_sbrk_r+0x1a>
 8012e78:	6023      	str	r3, [r4, #0]
 8012e7a:	bd38      	pop	{r3, r4, r5, pc}
 8012e7c:	20006b9c 	.word	0x20006b9c

08012e80 <_write_r>:
 8012e80:	b538      	push	{r3, r4, r5, lr}
 8012e82:	4d07      	ldr	r5, [pc, #28]	@ (8012ea0 <_write_r+0x20>)
 8012e84:	4604      	mov	r4, r0
 8012e86:	4608      	mov	r0, r1
 8012e88:	4611      	mov	r1, r2
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	602a      	str	r2, [r5, #0]
 8012e8e:	461a      	mov	r2, r3
 8012e90:	f7ef fe62 	bl	8002b58 <_write>
 8012e94:	1c43      	adds	r3, r0, #1
 8012e96:	d102      	bne.n	8012e9e <_write_r+0x1e>
 8012e98:	682b      	ldr	r3, [r5, #0]
 8012e9a:	b103      	cbz	r3, 8012e9e <_write_r+0x1e>
 8012e9c:	6023      	str	r3, [r4, #0]
 8012e9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ea0:	20006b9c 	.word	0x20006b9c

08012ea4 <abort>:
 8012ea4:	b508      	push	{r3, lr}
 8012ea6:	2006      	movs	r0, #6
 8012ea8:	f000 f82c 	bl	8012f04 <raise>
 8012eac:	2001      	movs	r0, #1
 8012eae:	f7ef fe2b 	bl	8002b08 <_exit>

08012eb2 <_raise_r>:
 8012eb2:	291f      	cmp	r1, #31
 8012eb4:	b538      	push	{r3, r4, r5, lr}
 8012eb6:	4605      	mov	r5, r0
 8012eb8:	460c      	mov	r4, r1
 8012eba:	d904      	bls.n	8012ec6 <_raise_r+0x14>
 8012ebc:	2316      	movs	r3, #22
 8012ebe:	6003      	str	r3, [r0, #0]
 8012ec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ec4:	bd38      	pop	{r3, r4, r5, pc}
 8012ec6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012ec8:	b112      	cbz	r2, 8012ed0 <_raise_r+0x1e>
 8012eca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ece:	b94b      	cbnz	r3, 8012ee4 <_raise_r+0x32>
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f000 f831 	bl	8012f38 <_getpid_r>
 8012ed6:	4622      	mov	r2, r4
 8012ed8:	4601      	mov	r1, r0
 8012eda:	4628      	mov	r0, r5
 8012edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ee0:	f000 b818 	b.w	8012f14 <_kill_r>
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d00a      	beq.n	8012efe <_raise_r+0x4c>
 8012ee8:	1c59      	adds	r1, r3, #1
 8012eea:	d103      	bne.n	8012ef4 <_raise_r+0x42>
 8012eec:	2316      	movs	r3, #22
 8012eee:	6003      	str	r3, [r0, #0]
 8012ef0:	2001      	movs	r0, #1
 8012ef2:	e7e7      	b.n	8012ec4 <_raise_r+0x12>
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012efa:	4620      	mov	r0, r4
 8012efc:	4798      	blx	r3
 8012efe:	2000      	movs	r0, #0
 8012f00:	e7e0      	b.n	8012ec4 <_raise_r+0x12>
	...

08012f04 <raise>:
 8012f04:	4b02      	ldr	r3, [pc, #8]	@ (8012f10 <raise+0xc>)
 8012f06:	4601      	mov	r1, r0
 8012f08:	6818      	ldr	r0, [r3, #0]
 8012f0a:	f7ff bfd2 	b.w	8012eb2 <_raise_r>
 8012f0e:	bf00      	nop
 8012f10:	200000b0 	.word	0x200000b0

08012f14 <_kill_r>:
 8012f14:	b538      	push	{r3, r4, r5, lr}
 8012f16:	4d07      	ldr	r5, [pc, #28]	@ (8012f34 <_kill_r+0x20>)
 8012f18:	2300      	movs	r3, #0
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	4608      	mov	r0, r1
 8012f1e:	4611      	mov	r1, r2
 8012f20:	602b      	str	r3, [r5, #0]
 8012f22:	f7ef fde1 	bl	8002ae8 <_kill>
 8012f26:	1c43      	adds	r3, r0, #1
 8012f28:	d102      	bne.n	8012f30 <_kill_r+0x1c>
 8012f2a:	682b      	ldr	r3, [r5, #0]
 8012f2c:	b103      	cbz	r3, 8012f30 <_kill_r+0x1c>
 8012f2e:	6023      	str	r3, [r4, #0]
 8012f30:	bd38      	pop	{r3, r4, r5, pc}
 8012f32:	bf00      	nop
 8012f34:	20006b9c 	.word	0x20006b9c

08012f38 <_getpid_r>:
 8012f38:	f7ef bdce 	b.w	8002ad8 <_getpid>

08012f3c <_init>:
 8012f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f3e:	bf00      	nop
 8012f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f42:	bc08      	pop	{r3}
 8012f44:	469e      	mov	lr, r3
 8012f46:	4770      	bx	lr

08012f48 <_fini>:
 8012f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f4a:	bf00      	nop
 8012f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f4e:	bc08      	pop	{r3}
 8012f50:	469e      	mov	lr, r3
 8012f52:	4770      	bx	lr
