
STM_Lab18_AudioSystem1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a84  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f14  08012c88  08012c88  00022c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b9c  08014b9c  00159437  2**0
                  CONTENTS
  4 .ARM          00000008  08014b9c  08014b9c  00024b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014ba4  08014ba4  00159437  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014ba4  08014ba4  00024ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014bac  08014bac  00024bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08014bb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006aa8  20000100  08014cb0  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ba8  08014cb0  00036ba8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00159437  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 00119437  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .comment      00000043  00000000  00000000  00159465  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037032  00000000  00000000  001594a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007b47  00000000  00000000  001904da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b28  00000000  00000000  00198028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002150  00000000  00000000  0019ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003dcdc  00000000  00000000  0019cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003bebe  00000000  00000000  001da97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00144b39  00000000  00000000  0021683a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bd68  00000000  00000000  0035b374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  003670dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000100 	.word	0x20000100
 800021c:	00000000 	.word	0x00000000
 8000220:	08012c6c 	.word	0x08012c6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000104 	.word	0x20000104
 800023c:	08012c6c 	.word	0x08012c6c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <UpdateObjects>:
uint16_t previousTimep = 0;


//Coeff update funtion

void UpdateObjects(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0


	 myTremoloL.setDepth(coeffOne); //Interestign effect if you mod Depth of only one side. :)
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <UpdateObjects+0x48>)
 80005e2:	edd3 7a00 	vldr	s15, [r3]
 80005e6:	eeb0 0a67 	vmov.f32	s0, s15
 80005ea:	480f      	ldr	r0, [pc, #60]	; (8000628 <UpdateObjects+0x4c>)
 80005ec:	f000 f961 	bl	80008b2 <_ZN9TREMBlock8setDepthEf>
	 myTremoloR.setDepth(coeffOne);
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <UpdateObjects+0x48>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	eeb0 0a67 	vmov.f32	s0, s15
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <UpdateObjects+0x50>)
 80005fc:	f000 f959 	bl	80008b2 <_ZN9TREMBlock8setDepthEf>

	 myTremoloL.setRate(coeffTwo);
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <UpdateObjects+0x54>)
 8000602:	edd3 7a00 	vldr	s15, [r3]
 8000606:	eeb0 0a67 	vmov.f32	s0, s15
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <UpdateObjects+0x4c>)
 800060c:	f000 f942 	bl	8000894 <_ZN9TREMBlock7setRateEf>
	 myTremoloR.setRate(coeffTwo);
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <UpdateObjects+0x54>)
 8000612:	edd3 7a00 	vldr	s15, [r3]
 8000616:	eeb0 0a67 	vmov.f32	s0, s15
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <UpdateObjects+0x50>)
 800061c:	f000 f93a 	bl	8000894 <_ZN9TREMBlock7setRateEf>



}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000004 	.word	0x20000004
 8000628:	2000011c 	.word	0x2000011c
 800062c:	20000138 	.word	0x20000138
 8000630:	20000008 	.word	0x20000008

08000634 <AudioProcess>:

//Main CPP based audio processing loop

void AudioProcess(int16_t *pbuffer1, int16_t *pbuffer2, uint16_t BlockSize){
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	4613      	mov	r3, r2
 8000640:	80fb      	strh	r3, [r7, #6]
	 */

    // Tremolo


	for (uint16_t i = 0; i < BlockSize; i+=4){ //hop over right bytes because we will process in twos
 8000642:	2300      	movs	r3, #0
 8000644:	83fb      	strh	r3, [r7, #30]
 8000646:	e052      	b.n	80006ee <AudioProcess+0xba>


		float audio_in, audio_out; //working reg
    	audio_in  = INT16_TO_FLOAT * pbuffer2[i];
 8000648:	8bfb      	ldrh	r3, [r7, #30]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4413      	add	r3, r2
 8000650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000654:	ee07 3a90 	vmov	s15, r3
 8000658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000700 <AudioProcess+0xcc>
 8000660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000664:	edc7 7a06 	vstr	s15, [r7, #24]
    	audio_out = myTremoloL.process(audio_in);
 8000668:	ed97 0a06 	vldr	s0, [r7, #24]
 800066c:	4825      	ldr	r0, [pc, #148]	; (8000704 <AudioProcess+0xd0>)
 800066e:	f000 f897 	bl	80007a0 <_ZN9TREMBlock7processEf>
 8000672:	ed87 0a05 	vstr	s0, [r7, #20]

    	pbuffer1[i] = (int16_t)(audio_out*32768.0f); //convert back
 8000676:	edd7 7a05 	vldr	s15, [r7, #20]
 800067a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000708 <AudioProcess+0xd4>
 800067e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000682:	8bfb      	ldrh	r3, [r7, #30]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4413      	add	r3, r2
 800068a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800068e:	ee17 2a90 	vmov	r2, s15
 8000692:	b212      	sxth	r2, r2
 8000694:	801a      	strh	r2, [r3, #0]

    	//This gives right

    	audio_in  = INT16_TO_FLOAT * pbuffer2[i+2];
 8000696:	8bfb      	ldrh	r3, [r7, #30]
 8000698:	3302      	adds	r3, #2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a4:	ee07 3a90 	vmov	s15, r3
 80006a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000700 <AudioProcess+0xcc>
 80006b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b4:	edc7 7a06 	vstr	s15, [r7, #24]
    	audio_out = myTremoloR.process(audio_in);
 80006b8:	ed97 0a06 	vldr	s0, [r7, #24]
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <AudioProcess+0xd8>)
 80006be:	f000 f86f 	bl	80007a0 <_ZN9TREMBlock7processEf>
 80006c2:	ed87 0a05 	vstr	s0, [r7, #20]

    	pbuffer1[i+2] = (int16_t)(audio_out*32768.0f); //convert back
 80006c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80006ca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000708 <AudioProcess+0xd4>
 80006ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d2:	8bfb      	ldrh	r3, [r7, #30]
 80006d4:	3302      	adds	r3, #2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006e0:	ee17 2a90 	vmov	r2, s15
 80006e4:	b212      	sxth	r2, r2
 80006e6:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < BlockSize; i+=4){ //hop over right bytes because we will process in twos
 80006e8:	8bfb      	ldrh	r3, [r7, #30]
 80006ea:	3304      	adds	r3, #4
 80006ec:	83fb      	strh	r3, [r7, #30]
 80006ee:	8bfa      	ldrh	r2, [r7, #30]
 80006f0:	88fb      	ldrh	r3, [r7, #6]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3a8      	bcc.n	8000648 <AudioProcess+0x14>
    }


}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	38000000 	.word	0x38000000
 8000704:	2000011c 	.word	0x2000011c
 8000708:	47000000 	.word	0x47000000
 800070c:	20000138 	.word	0x20000138

08000710 <_Z41__static_initialization_and_destruction_0ii>:
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d10a      	bne.n	8000736 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000726:	4293      	cmp	r3, r2
 8000728:	d105      	bne.n	8000736 <_Z41__static_initialization_and_destruction_0ii+0x26>
TREMBlock myTremoloL; //
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800072c:	f000 f814 	bl	8000758 <_ZN9TREMBlockC1Ev>
TREMBlock myTremoloR; //
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000732:	f000 f811 	bl	8000758 <_ZN9TREMBlockC1Ev>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000011c 	.word	0x2000011c
 8000744:	20000138 	.word	0x20000138

08000748 <_GLOBAL__sub_I_myTremoloL>:
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
 800074c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ffdd 	bl	8000710 <_Z41__static_initialization_and_destruction_0ii>
 8000756:	bd80      	pop	{r7, pc}

08000758 <_ZN9TREMBlockC1Ev>:

#include "BasicTremolo.hpp"

#include <cmath>

TREMBlock::TREMBlock()
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <_ZN9TREMBlockC1Ev+0x3c>)
 8000774:	611a      	str	r2, [r3, #16]
  {
    depth = 100.0; //50% depth
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <_ZN9TREMBlockC1Ev+0x40>)
 800077a:	601a      	str	r2, [r3, #0]
    rate = 1.0;   //1Hz
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000782:	605a      	str	r2, [r3, #4]

}
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	37aec33e 	.word	0x37aec33e
 8000798:	42c80000 	.word	0x42c80000
 800079c:	00000000 	.word	0x00000000

080007a0 <_ZN9TREMBlock7processEf>:



//inside class definition
float TREMBlock::process(float val){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	ed2d 8b02 	vpush	{d8}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	ed87 0a00 	vstr	s0, [r7]

	LFOdepth = depth/200.0; //so if depth is 0..100, then will go from 0..0.5 depending on UI, this could be removed
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	ed93 7a00 	vldr	s14, [r3]
 80007b6:	eddf 6a36 	vldr	s13, [pc, #216]	; 8000890 <_ZN9TREMBlock7processEf+0xf0>
 80007ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	edc3 7a05 	vstr	s15, [r3, #20]
    levOffset = 1.0-LFOdepth;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80007ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80007ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	edc3 7a02 	vstr	s15, [r3, #8]
    LFOval = LFOdepth*sin(2*M_PI*rate*LFOstep)+levOffset;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	edd3 7a05 	vldr	s15, [r3, #20]
 80007de:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80007e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ec:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000888 <_ZN9TREMBlock7processEf+0xe8>
 80007f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80007fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000802:	eeb0 0b47 	vmov.f64	d0, d7
 8000806:	f010 fc63 	bl	80110d0 <sin>
 800080a:	eeb0 7b40 	vmov.f64	d7, d0
 800080e:	ee28 6b07 	vmul.f64	d6, d8, d7
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	edd3 7a02 	vldr	s15, [r3, #8]
 8000818:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800081c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000820:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	edc3 7a06 	vstr	s15, [r3, #24]
    LFOstep=(LFOstep+Tau);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	edd3 7a04 	vldr	s15, [r3, #16]
 8000836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	edc3 7a03 	vstr	s15, [r3, #12]
    if(LFOstep>1)LFOstep=0;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	edd3 7a03 	vldr	s15, [r3, #12]
 8000846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800084a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800084e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000852:	dd03      	ble.n	800085c <_ZN9TREMBlock7processEf+0xbc>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
    float processedSample = LFOval*val;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000862:	ed97 7a00 	vldr	s14, [r7]
 8000866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800086a:	edc7 7a03 	vstr	s15, [r7, #12]

    return processedSample;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	ee07 3a90 	vmov	s15, r3

}
 8000874:	eeb0 0a67 	vmov.f32	s0, s15
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	ecbd 8b02 	vpop	{d8}
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	f3af 8000 	nop.w
 8000888:	54442d18 	.word	0x54442d18
 800088c:	401921fb 	.word	0x401921fb
 8000890:	43480000 	.word	0x43480000

08000894 <_ZN9TREMBlock7setRateEf>:

void TREMBlock::setRate(float TargetRate){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	ed87 0a00 	vstr	s0, [r7]
	rate = TargetRate;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	605a      	str	r2, [r3, #4]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <_ZN9TREMBlock8setDepthEf>:


void TREMBlock::setDepth(float TargetDepth){
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	ed87 0a00 	vstr	s0, [r7]
	 depth = TargetDepth;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	601a      	str	r2, [r3, #0]
 }
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_DFSDM1_Init+0x68>)
 80008d6:	4a19      	ldr	r2, [pc, #100]	; (800093c <MX_DFSDM1_Init+0x6c>)
 80008d8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_DFSDM1_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_DFSDM1_Init+0x68>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_DFSDM1_Init+0x68>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_DFSDM1_Init+0x68>)
 80008ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_DFSDM1_Init+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_DFSDM1_Init+0x68>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_DFSDM1_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_DFSDM1_Init+0x68>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_DFSDM1_Init+0x68>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_DFSDM1_Init+0x68>)
 8000914:	2201      	movs	r2, #1
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_DFSDM1_Init+0x68>)
 800091a:	2200      	movs	r2, #0
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_DFSDM1_Init+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_DFSDM1_Init+0x68>)
 8000926:	f006 fc25 	bl	8007174 <HAL_DFSDM_ChannelInit>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000930:	f001 fdd8 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000154 	.word	0x20000154
 800093c:	40017400 	.word	0x40017400

08000940 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ae      	sub	sp, #184	; 0xb8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2290      	movs	r2, #144	; 0x90
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f011 fabf 	bl	8011ee4 <memset>
  if(DFSDM1_Init == 0)
 8000966:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d163      	bne.n	8000a36 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800096e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000972:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4618      	mov	r0, r3
 8000980:	f00b fca6 	bl	800c2d0 <HAL_RCCEx_PeriphCLKConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800098a:	f001 fdab 	bl	80024e4 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a2c      	ldr	r2, [pc, #176]	; (8000a44 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <HAL_DFSDM_ChannelMspInit+0x104>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <HAL_DFSDM_ChannelMspInit+0x104>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 80009d6:	f640 0308 	movw	r3, #2056	; 0x808
 80009da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80009f0:	2303      	movs	r3, #3
 80009f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4812      	ldr	r0, [pc, #72]	; (8000a48 <HAL_DFSDM_ChannelMspInit+0x108>)
 80009fe:	f008 fda3 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000a02:	2308      	movs	r3, #8
 8000a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4809      	ldr	r0, [pc, #36]	; (8000a4c <HAL_DFSDM_ChannelMspInit+0x10c>)
 8000a28:	f008 fd8e 	bl	8009548 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000a34:	6013      	str	r3, [r2, #0]
  }
}
 8000a36:	bf00      	nop
 8000a38:	37b8      	adds	r7, #184	; 0xb8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000018c 	.word	0x2000018c
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a56:	4a19      	ldr	r2, [pc, #100]	; (8000abc <MX_DMA2D_Init+0x6c>)
 8000a58:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000a92:	f007 f851 	bl	8007b38 <HAL_DMA2D_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000a9c:	f001 fd22 	bl	80024e4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_DMA2D_Init+0x68>)
 8000aa4:	f007 fac6 	bl	8008034 <HAL_DMA2D_ConfigLayer>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000aae:	f001 fd19 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000190 	.word	0x20000190
 8000abc:	4002b000 	.word	0x4002b000

08000ac0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <HAL_DMA2D_MspInit+0x44>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d113      	bne.n	8000afa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_DMA2D_MspInit+0x48>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <HAL_DMA2D_MspInit+0x48>)
 8000ad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_DMA2D_MspInit+0x48>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2105      	movs	r1, #5
 8000aee:	205a      	movs	r0, #90	; 0x5a
 8000af0:	f006 fb08 	bl	8007104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000af4:	205a      	movs	r0, #90	; 0x5a
 8000af6:	f006 fb21 	bl	800713c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	4002b000 	.word	0x4002b000
 8000b08:	40023800 	.word	0x40023800

08000b0c <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0aa      	sub	sp, #168	; 0xa8
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b22:	2224      	movs	r2, #36	; 0x24
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f011 f9dc 	bl	8011ee4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
 8000b3c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	2234      	movs	r2, #52	; 0x34
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f011 f9cc 	bl	8011ee4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	222c      	movs	r2, #44	; 0x2c
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f011 f9c6 	bl	8011ee4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000b58:	4b64      	ldr	r3, [pc, #400]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000b5a:	4a65      	ldr	r2, [pc, #404]	; (8000cf0 <MX_DSIHOST_DSI_Init+0x1e4>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b5e:	4b63      	ldr	r3, [pc, #396]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000b64:	4b61      	ldr	r3, [pc, #388]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000b6a:	4b60      	ldr	r3, [pc, #384]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000b70:	2314      	movs	r3, #20
 8000b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4858      	ldr	r0, [pc, #352]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000b8a:	f007 fbd5 	bl	8008338 <HAL_DSI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000b94:	f001 fca6 	bl	80024e4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000bca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4846      	ldr	r0, [pc, #280]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000bd2:	f008 facd 	bl	8009170 <HAL_DSI_ConfigHostTimeouts>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000bdc:	f001 fc82 	bl	80024e4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000be0:	231c      	movs	r3, #28
 8000be2:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000be4:	2321      	movs	r3, #33	; 0x21
 8000be6:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000be8:	230f      	movs	r3, #15
 8000bea:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000bec:	2319      	movs	r3, #25
 8000bee:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000bf8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	483b      	ldr	r0, [pc, #236]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c00:	f008 fa4c 	bl	800909c <HAL_DSI_ConfigPhyTimer>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000c0a:	f001 fc6b 	bl	80024e4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000c0e:	2104      	movs	r1, #4
 8000c10:	4836      	ldr	r0, [pc, #216]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c12:	f008 fa1b 	bl	800904c <HAL_DSI_ConfigFlowControl>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000c1c:	f001 fc62 	bl	80024e4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c20:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c24:	4831      	ldr	r0, [pc, #196]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c26:	f008 fc61 	bl	80094ec <HAL_DSI_SetLowPowerRXFilter>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000c30:	f001 fc58 	bl	80024e4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000c34:	2100      	movs	r1, #0
 8000c36:	482d      	ldr	r0, [pc, #180]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c38:	f007 fd0e 	bl	8008658 <HAL_DSI_ConfigErrorMonitor>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000c42:	f001 fc4f 	bl	80024e4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481a      	ldr	r0, [pc, #104]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000c82:	f008 f985 	bl	8008f90 <HAL_DSI_ConfigCommand>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8000c8c:	f001 fc2a 	bl	80024e4 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000c94:	2305      	movs	r3, #5
 8000c96:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 8000c98:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c9c:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480a      	ldr	r0, [pc, #40]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000cc4:	f008 f88a 	bl	8008ddc <HAL_DSI_ConfigAdaptedCommandMode>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8000cce:	f001 fc09 	bl	80024e4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_DSIHOST_DSI_Init+0x1e0>)
 8000cd6:	f007 fe58 	bl	800898a <HAL_DSI_SetGenericVCID>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8000ce0:	f001 fc00 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	37a8      	adds	r7, #168	; 0xa8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001e8 	.word	0x200001e8
 8000cf0:	40016c00 	.word	0x40016c00

08000cf4 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_DSI_MspInit+0x8c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12f      	bne.n	8000d76 <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_DSI_MspInit+0x90>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <HAL_DSI_MspInit+0x90>)
 8000d1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_DSI_MspInit+0x90>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_DSI_MspInit+0x90>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <HAL_DSI_MspInit+0x90>)
 8000d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_DSI_MspInit+0x90>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8000d46:	2304      	movs	r3, #4
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000d56:	230d      	movs	r3, #13
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <HAL_DSI_MspInit+0x94>)
 8000d62:	f008 fbf1 	bl	8009548 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2105      	movs	r1, #5
 8000d6a:	2062      	movs	r0, #98	; 0x62
 8000d6c:	f006 f9ca 	bl	8007104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000d70:	2062      	movs	r0, #98	; 0x62
 8000d72:	f006 f9e3 	bl	800713c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40016c00 	.word	0x40016c00
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40022400 	.word	0x40022400

08000d8c <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_DSI_MspDeInit+0x34>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10c      	bne.n	8000db8 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_DSI_MspDeInit+0x38>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_DSI_MspDeInit+0x38>)
 8000da4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 8000daa:	2104      	movs	r1, #4
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <HAL_DSI_MspDeInit+0x3c>)
 8000dae:	f008 fd77 	bl	80098a0 <HAL_GPIO_DeInit>

    /* DSI interrupt Deinit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 8000db2:	2062      	movs	r0, #98	; 0x62
 8000db4:	f006 f9d0 	bl	8007158 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40016c00 	.word	0x40016c00
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40022400 	.word	0x40022400

08000dcc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_FMC_Init+0x94>)
 8000de6:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <MX_FMC_Init+0x98>)
 8000de8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_FMC_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_FMC_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_FMC_Init+0x94>)
 8000df8:	2204      	movs	r2, #4
 8000dfa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_FMC_Init+0x94>)
 8000dfe:	2220      	movs	r2, #32
 8000e00:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e04:	2240      	movs	r2, #64	; 0x40
 8000e06:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e0a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000e0e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000e28:	2310      	movs	r3, #16
 8000e2a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000e30:	2310      	movs	r3, #16
 8000e32:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000e34:	2310      	movs	r3, #16
 8000e36:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000e40:	2310      	movs	r3, #16
 8000e42:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_FMC_Init+0x94>)
 8000e4a:	f00c fd18 	bl	800d87e <HAL_SDRAM_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 8000e54:	f001 fb46 	bl	80024e4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000204 	.word	0x20000204
 8000e64:	a0000140 	.word	0xa0000140

08000e68 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <HAL_FMC_MspInit+0x104>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d16f      	bne.n	8000f64 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000e84:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <HAL_FMC_MspInit+0x104>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <HAL_FMC_MspInit+0x108>)
 8000e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e8e:	4a38      	ldr	r2, [pc, #224]	; (8000f70 <HAL_FMC_MspInit+0x108>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6393      	str	r3, [r2, #56]	; 0x38
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <HAL_FMC_MspInit+0x108>)
 8000e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000ea2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ea6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482d      	ldr	r0, [pc, #180]	; (8000f74 <HAL_FMC_MspInit+0x10c>)
 8000ebe:	f008 fb43 	bl	8009548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8000ec2:	f248 1337 	movw	r3, #33079	; 0x8137
 8000ec6:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4826      	ldr	r0, [pc, #152]	; (8000f78 <HAL_FMC_MspInit+0x110>)
 8000ede:	f008 fb33 	bl	8009548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000ee2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ee6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	481f      	ldr	r0, [pc, #124]	; (8000f7c <HAL_FMC_MspInit+0x114>)
 8000efe:	f008 fb23 	bl	8009548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000f02:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000f06:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f14:	230c      	movs	r3, #12
 8000f16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4818      	ldr	r0, [pc, #96]	; (8000f80 <HAL_FMC_MspInit+0x118>)
 8000f1e:	f008 fb13 	bl	8009548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000f22:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f26:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f34:	230c      	movs	r3, #12
 8000f36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4811      	ldr	r0, [pc, #68]	; (8000f84 <HAL_FMC_MspInit+0x11c>)
 8000f3e:	f008 fb03 	bl	8009548 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8000f42:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000f46:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f54:	230c      	movs	r3, #12
 8000f56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480a      	ldr	r0, [pc, #40]	; (8000f88 <HAL_FMC_MspInit+0x120>)
 8000f5e:	f008 faf3 	bl	8009548 <HAL_GPIO_Init>
 8000f62:	e000      	b.n	8000f66 <HAL_FMC_MspInit+0xfe>
    return;
 8000f64:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000238 	.word	0x20000238
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40021800 	.word	0x40021800
 8000f7c:	40020c00 	.word	0x40020c00
 8000f80:	40022000 	.word	0x40022000
 8000f84:	40021400 	.word	0x40021400
 8000f88:	40021c00 	.word	0x40021c00

08000f8c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f94:	f7ff ff68 	bl	8000e68 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <vApplicationGetIdleTaskMemory+0x2c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <vApplicationGetIdleTaskMemory+0x30>)
 8000fb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000024c 	.word	0x2000024c
 8000fd0:	200002ec 	.word	0x200002ec

08000fd4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b09a      	sub	sp, #104	; 0x68
 8000fd8:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of audioQueue */
  osMessageQDef(audioQueue, 16, uint8_t);
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <MX_FREERTOS_Init+0x9c>)
 8000fdc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  audioQueueHandle = osMessageCreate(osMessageQ(audioQueue), NULL);
 8000fe6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00d fe36 	bl	800ec5e <osMessageCreate>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <MX_FREERTOS_Init+0xa0>)
 8000ff6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of audioTask */
  osThreadDef(audioTask, StartAudioTask, osPriorityHigh, 0, 128);
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_FREERTOS_Init+0xa4>)
 8000ffa:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ffe:	461d      	mov	r5, r3
 8001000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001004:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001008:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  audioTaskHandle = osThreadCreate(osThread(audioTask), NULL);
 800100c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f00d fdc3 	bl	800eb9e <osThreadCreate>
 8001018:	4603      	mov	r3, r0
 800101a:	4a18      	ldr	r2, [pc, #96]	; (800107c <MX_FREERTOS_Init+0xa8>)
 800101c:	6013      	str	r3, [r2, #0]

  /* definition and creation of auxTask */
  osThreadDef(auxTask, auxTaskStart, osPriorityIdle, 0, 128);
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_FREERTOS_Init+0xac>)
 8001020:	f107 0420 	add.w	r4, r7, #32
 8001024:	461d      	mov	r5, r3
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  auxTaskHandle = osThreadCreate(osThread(auxTask), NULL);
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00d fdb0 	bl	800eb9e <osThreadCreate>
 800103e:	4603      	mov	r3, r0
 8001040:	4a10      	ldr	r2, [pc, #64]	; (8001084 <MX_FREERTOS_Init+0xb0>)
 8001042:	6013      	str	r3, [r2, #0]

  /* definition and creation of myFlashAliveTas */
  osThreadDef(myFlashAliveTas, StartFlashAliveTask, osPriorityIdle, 0, 128);
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_FREERTOS_Init+0xb4>)
 8001046:	1d3c      	adds	r4, r7, #4
 8001048:	461d      	mov	r5, r3
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myFlashAliveTasHandle = osThreadCreate(osThread(myFlashAliveTas), NULL);
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00d fd9f 	bl	800eb9e <osThreadCreate>
 8001060:	4603      	mov	r3, r0
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <MX_FREERTOS_Init+0xb8>)
 8001064:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001066:	bf00      	nop
 8001068:	3768      	adds	r7, #104	; 0x68
 800106a:	46bd      	mov	sp, r7
 800106c:	bdb0      	pop	{r4, r5, r7, pc}
 800106e:	bf00      	nop
 8001070:	08012c88 	.word	0x08012c88
 8001074:	20000248 	.word	0x20000248
 8001078:	08012ca4 	.word	0x08012ca4
 800107c:	2000023c 	.word	0x2000023c
 8001080:	08012cc8 	.word	0x08012cc8
 8001084:	20000240 	.word	0x20000240
 8001088:	08012cf4 	.word	0x08012cf4
 800108c:	20000244 	.word	0x20000244

08001090 <StartAudioTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAudioTask */
void StartAudioTask(void const * argument)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioTask */

  /* Infinite loop */
  for(;;)
  {
	BufferHandling();
 8001098:	f000 f8f8 	bl	800128c <BufferHandling>
    osDelay(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f00d fdca 	bl	800ec36 <osDelay>
	BufferHandling();
 80010a2:	e7f9      	b.n	8001098 <StartAudioTask+0x8>

080010a4 <auxTaskStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_auxTaskStart */
void auxTaskStart(void const * argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOJ, ARD_D4_Pin); //Signify the task is running
      //We can read things and based on wha we read, change Globals
	  ts_status = BSP_TS_GetState(&TS_State);
 80010ac:	482f      	ldr	r0, [pc, #188]	; (800116c <auxTaskStart+0xc8>)
 80010ae:	f005 fde7 	bl	8006c80 <BSP_TS_GetState>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <auxTaskStart+0xcc>)
 80010b8:	601a      	str	r2, [r3, #0]
      if(TS_State.touchDetected){
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <auxTaskStart+0xc8>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d04f      	beq.n	8001162 <auxTaskStart+0xbe>

		  //Due to the capacitive nature, sometimes spurious touches
		  //are detected..so watch this with traps.

		  /* Get X and Y position of the first touch post calibrated */
		  uint16_t x1 = TS_State.touchX[0];
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <auxTaskStart+0xc8>)
 80010c4:	885b      	ldrh	r3, [r3, #2]
 80010c6:	81fb      	strh	r3, [r7, #14]
		  uint16_t y1 = TS_State.touchY[0];
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <auxTaskStart+0xc8>)
 80010ca:	88db      	ldrh	r3, [r3, #6]
 80010cc:	81bb      	strh	r3, [r7, #12]

		  //Need to check these values in case of spurious values
		  //limit with a mod instruction for example
		  x1 = x1 % 800;
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	4a28      	ldr	r2, [pc, #160]	; (8001174 <auxTaskStart+0xd0>)
 80010d2:	fba2 1203 	umull	r1, r2, r2, r3
 80010d6:	0a12      	lsrs	r2, r2, #8
 80010d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80010dc:	fb01 f202 	mul.w	r2, r1, r2
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	81fb      	strh	r3, [r7, #14]
		  y1 = y1 % 480;
 80010e4:	89ba      	ldrh	r2, [r7, #12]
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <auxTaskStart+0xd4>)
 80010e8:	fba3 1302 	umull	r1, r3, r3, r2
 80010ec:	0a19      	lsrs	r1, r3, #8
 80010ee:	460b      	mov	r3, r1
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	1a5b      	subs	r3, r3, r1
 80010f4:	015b      	lsls	r3, r3, #5
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	81bb      	strh	r3, [r7, #12]

		  coeffOne = (float)(480-y1)*coeffOne_inc;
 80010fa:	89bb      	ldrh	r3, [r7, #12]
 80010fc:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <auxTaskStart+0xd8>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <auxTaskStart+0xdc>)
 8001114:	edc3 7a00 	vstr	s15, [r3]
		  coeffTwo = (float)(800-x1)*coeffTwo_inc;
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <auxTaskStart+0xe0>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <auxTaskStart+0xe4>)
 8001132:	edc3 7a00 	vstr	s15, [r3]

		  //For the Tremolo, interesting effects, 1000 and 2 for below. :)
		  coeffOne = coeffOne * 200; // test mod depth 0..200
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <auxTaskStart+0xdc>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800118c <auxTaskStart+0xe8>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <auxTaskStart+0xdc>)
 8001146:	edc3 7a00 	vstr	s15, [r3]
		  coeffTwo = coeffTwo * 20;  // test rate 0..200
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <auxTaskStart+0xe4>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <auxTaskStart+0xe4>)
 800115a:	edc3 7a00 	vstr	s15, [r3]



		  //Check we're still in the audio thread here ..use the LEDS as we're back in main..
		  UpdateObjects(); //This allows it to be called separately now..and also only call if a control has changed
 800115e:	f7ff fa3d 	bl	80005dc <UpdateObjects>

      }

      //BSP_LCD_FillRect(100, 200, 10, 100);

      osDelay(10); //this will slow the scan time of the TS
 8001162:	200a      	movs	r0, #10
 8001164:	f00d fd67 	bl	800ec36 <osDelay>
	  ts_status = BSP_TS_GetState(&TS_State);
 8001168:	e7a0      	b.n	80010ac <auxTaskStart+0x8>
 800116a:	bf00      	nop
 800116c:	200025a0 	.word	0x200025a0
 8001170:	200025ac 	.word	0x200025ac
 8001174:	51eb851f 	.word	0x51eb851f
 8001178:	88888889 	.word	0x88888889
 800117c:	2000000c 	.word	0x2000000c
 8001180:	20000004 	.word	0x20000004
 8001184:	20000010 	.word	0x20000010
 8001188:	20000008 	.word	0x20000008
 800118c:	43480000 	.word	0x43480000

08001190 <StartFlashAliveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashAliveTask */
void StartFlashAliveTask(void const * argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashAliveTask */
  /* Infinite loop */


	HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2108      	movs	r1, #8
 800119c:	4827      	ldr	r0, [pc, #156]	; (800123c <StartFlashAliveTask+0xac>)
 800119e:	f008 fca3 	bl	8009ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, ARD_D6_Pin, GPIO_PIN_SET );
 80011a2:	2201      	movs	r2, #1
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	4826      	ldr	r0, [pc, #152]	; (8001240 <StartFlashAliveTask+0xb0>)
 80011a8:	f008 fc9e 	bl	8009ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ARD_D5_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	4824      	ldr	r0, [pc, #144]	; (8001244 <StartFlashAliveTask+0xb4>)
 80011b4:	f008 fc98 	bl	8009ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, ARD_D4_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2101      	movs	r1, #1
 80011bc:	481f      	ldr	r0, [pc, #124]	; (800123c <StartFlashAliveTask+0xac>)
 80011be:	f008 fc93 	bl	8009ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, ARD_D3_Pin,  GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2140      	movs	r1, #64	; 0x40
 80011c6:	481e      	ldr	r0, [pc, #120]	; (8001240 <StartFlashAliveTask+0xb0>)
 80011c8:	f008 fc8e 	bl	8009ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, ARD_D2_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2102      	movs	r1, #2
 80011d0:	481a      	ldr	r0, [pc, #104]	; (800123c <StartFlashAliveTask+0xac>)
 80011d2:	f008 fc89 	bl	8009ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ARD_D1_Pin,  GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	481a      	ldr	r0, [pc, #104]	; (8001244 <StartFlashAliveTask+0xb4>)
 80011dc:	f008 fc84 	bl	8009ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ARD_D0_Pin,  GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	4817      	ldr	r0, [pc, #92]	; (8001244 <StartFlashAliveTask+0xb4>)
 80011e6:	f008 fc7f 	bl	8009ae8 <HAL_GPIO_WritePin>

	for(;;)
	{
		BSP_LED_Toggle(LED_GREEN);//Flash on main board
 80011ea:	2001      	movs	r0, #1
 80011ec:	f003 fc00 	bl	80049f0 <BSP_LED_Toggle>
		//BSP_LCD_FillRect(350, 200, 100, 100);

		//Basic Audio Monitor..

		//flash all the other leds..
		HAL_GPIO_TogglePin(GPIOJ, ARD_D7_Pin);
 80011f0:	2108      	movs	r1, #8
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <StartFlashAliveTask+0xac>)
 80011f4:	f008 fc91 	bl	8009b1a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOF, ARD_D6_Pin);
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	4811      	ldr	r0, [pc, #68]	; (8001240 <StartFlashAliveTask+0xb0>)
 80011fc:	f008 fc8d 	bl	8009b1a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, ARD_D5_Pin);
 8001200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <StartFlashAliveTask+0xb4>)
 8001206:	f008 fc88 	bl	8009b1a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOJ, ARD_D4_Pin);
 800120a:	2101      	movs	r1, #1
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <StartFlashAliveTask+0xac>)
 800120e:	f008 fc84 	bl	8009b1a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOF, ARD_D3_Pin);
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <StartFlashAliveTask+0xb0>)
 8001216:	f008 fc80 	bl	8009b1a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOJ, ARD_D2_Pin);
 800121a:	2102      	movs	r1, #2
 800121c:	4807      	ldr	r0, [pc, #28]	; (800123c <StartFlashAliveTask+0xac>)
 800121e:	f008 fc7c 	bl	8009b1a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, ARD_D1_Pin);
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	4807      	ldr	r0, [pc, #28]	; (8001244 <StartFlashAliveTask+0xb4>)
 8001226:	f008 fc78 	bl	8009b1a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, ARD_D0_Pin);
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <StartFlashAliveTask+0xb4>)
 800122e:	f008 fc74 	bl	8009b1a <HAL_GPIO_TogglePin>

		osDelay(100);
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f00d fcff 	bl	800ec36 <osDelay>
		BSP_LED_Toggle(LED_GREEN);//Flash on main board
 8001238:	e7d7      	b.n	80011ea <StartFlashAliveTask+0x5a>
 800123a:	bf00      	nop
 800123c:	40022400 	.word	0x40022400
 8001240:	40021400 	.word	0x40021400
 8001244:	40020800 	.word	0x40020800

08001248 <CopyBuffer>:
   * Will get called at half and full buffer point so..can copy the contents into
   * L & R buffer then process so long as the copy is quick enough..
   *
   */
 void CopyBuffer(int16_t *pbuffer1, int16_t *pbuffer2, uint16_t BlockSize)
  {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]
     //Lets clear the entire destination playback DMA buffer here..
 	 //We're just clearing  because if we operate only on the left or right
 	 //the  data from  the last block will still be there..
	 //If we're operating on both, this can be removed

 	 for (uint32_t i = 0; i < BlockSize; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e008      	b.n	800126e <CopyBuffer+0x26>
 	 {
 		 pbuffer1[i] = 0; //needs  to  be careful as these are still int16_t buffers when we do maths
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	2200      	movs	r2, #0
 8001266:	801a      	strh	r2, [r3, #0]
 	 for (uint32_t i = 0; i < BlockSize; i++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	429a      	cmp	r2, r3
 8001274:	d3f2      	bcc.n	800125c <CopyBuffer+0x14>
 	 * circular buffer, block size, and the
 	 * current output pointer to Playback Buffer, the latter
 	 * being a flip flop between Playback[0] and Playback[size/2]
 	 */

 	 AudioProcess( pbuffer1, pbuffer2, BlockSize);
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	461a      	mov	r2, r3
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff f9d9 	bl	8000634 <AudioProcess>





} //Copy Buffer function
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <BufferHandling>:



void BufferHandling(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

     /* 1st or 2nd half of the record buffer ready for being copied to the Playback buffer */

	osEvent retvalue  = osMessageGet( audioQueueHandle, 1000 );
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <BufferHandling+0x64>)
 8001294:	6819      	ldr	r1, [r3, #0]
 8001296:	463b      	mov	r3, r7
 8001298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129c:	4618      	mov	r0, r3
 800129e:	f00d fd47 	bl	800ed30 <osMessageGet>
	uint16_t buffer_state = retvalue.value.v;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	81fb      	strh	r3, [r7, #14]

    switch(buffer_state){
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d00f      	beq.n	80012cc <BufferHandling+0x40>
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	dc17      	bgt.n	80012e0 <BufferHandling+0x54>
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d018      	beq.n	80012e6 <BufferHandling+0x5a>
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d113      	bne.n	80012e0 <BufferHandling+0x54>
    	case BUFFER_OFFSET_HALF:{
    		//HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin, GPIO_PIN_SET); //Indicate rate of half filling buffer
    		//Ready to copy first block of audio samples to output buffer
        	CopyBuffer(&PlaybackBuffer[0],
 80012b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012bc:	490d      	ldr	r1, [pc, #52]	; (80012f4 <BufferHandling+0x68>)
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <BufferHandling+0x6c>)
 80012c0:	f7ff ffc2 	bl	8001248 <CopyBuffer>
        	&RecordBuffer[0],
        	RECORD_BUFFER_SIZE / 2);
        	audio_rec_buffer_state = BUFFER_OFFSET_NONE;  //Reset
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <BufferHandling+0x70>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
        	//HAL_GPIO_TogglePin(GPIOC, ARD_D5_Pin);
        	//HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin, GPIO_PIN_RESET); //Indicate rate of half filling buffer
        	break;
 80012ca:	e00d      	b.n	80012e8 <BufferHandling+0x5c>
        	}
    	case BUFFER_OFFSET_FULL:{
    		//Ready to copy next block of audio samples to output buffer
    		 CopyBuffer(&PlaybackBuffer[RECORD_BUFFER_SIZE / 2],
 80012cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d0:	490b      	ldr	r1, [pc, #44]	; (8001300 <BufferHandling+0x74>)
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <BufferHandling+0x78>)
 80012d4:	f7ff ffb8 	bl	8001248 <CopyBuffer>
        	 &RecordBuffer[RECORD_BUFFER_SIZE / 2],
        	 RECORD_BUFFER_SIZE / 2);
        	 audio_rec_buffer_state = BUFFER_OFFSET_NONE; //Reset
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <BufferHandling+0x70>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
        	 //HAL_GPIO_TogglePin(GPIOC, ARD_D5_Pin);
        	 break;
 80012de:	e003      	b.n	80012e8 <BufferHandling+0x5c>
        	 //Allow subtask like  scan of TS proc
        	 break;
        	 }
        default : {
        	//printf("Error on audio_rec_buffer_state switch\r\n");
        	Error_Handler();
 80012e0:	f001 f900 	bl	80024e4 <Error_Handler>
        	break;
 80012e4:	e000      	b.n	80012e8 <BufferHandling+0x5c>
        	 break;
 80012e6:	bf00      	nop
        	}
    	} //End of switch
} // end AUDIO_PROCESS function
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000248 	.word	0x20000248
 80012f4:	20000598 	.word	0x20000598
 80012f8:	20001598 	.word	0x20001598
 80012fc:	20002598 	.word	0x20002598
 8001300:	20000d98 	.word	0x20000d98
 8001304:	20001d98 	.word	0x20001d98

08001308 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
//These are the important call back functions, declared as weak in the discovery_audio.h/.c
    //So we can override them as needed
    //As they're in main, we will need to make sure they then can see and can send to the FreeRTOS listener
    //thread
    void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
    {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
        //audio_tx_buffer_state = 1;
        //Everything is driven by the receive but we need to have
        //this callback
    }
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <BSP_AUDIO_IN_TransferComplete_CallBack>:
      * @brief Manages the DMA Transfer complete interrupt.
      * @param None
      * @retval None
      */
    void BSP_AUDIO_IN_TransferComplete_CallBack(void)
    {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
       audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20>)
 800131e:	2202      	movs	r2, #2
 8001320:	601a      	str	r2, [r3, #0]
       osMessagePut(audioQueueHandle, audio_rec_buffer_state, 1000); //Send 1
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <BSP_AUDIO_IN_TransferComplete_CallBack+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20>)
 8001328:	6811      	ldr	r1, [r2, #0]
 800132a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132e:	4618      	mov	r0, r3
 8001330:	f00d fcbe 	bl	800ecb0 <osMessagePut>
    }
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20002598 	.word	0x20002598
 800133c:	20000248 	.word	0x20000248

08001340 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
      * @brief  Manages the DMA Half Transfer complete interrupt.
      * @param  None
      * @retval None
      */
    void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
    {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
        audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
        osMessagePut(audioQueueHandle, audio_rec_buffer_state, 1000); //Send 1
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20>)
 8001350:	6811      	ldr	r1, [r2, #0]
 8001352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001356:	4618      	mov	r0, r3
 8001358:	f00d fcaa 	bl	800ecb0 <osMessagePut>
    }
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20002598 	.word	0x20002598
 8001364:	20000248 	.word	0x20000248

08001368 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b090      	sub	sp, #64	; 0x40
 800136c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137e:	4bad      	ldr	r3, [pc, #692]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4aac      	ldr	r2, [pc, #688]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4baa      	ldr	r3, [pc, #680]	; (8001634 <MX_GPIO_Init+0x2cc>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001396:	4ba7      	ldr	r3, [pc, #668]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4aa6      	ldr	r2, [pc, #664]	; (8001634 <MX_GPIO_Init+0x2cc>)
 800139c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4ba4      	ldr	r3, [pc, #656]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4ba1      	ldr	r3, [pc, #644]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4aa0      	ldr	r2, [pc, #640]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b9e      	ldr	r3, [pc, #632]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
 80013c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	4b9b      	ldr	r3, [pc, #620]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a9a      	ldr	r2, [pc, #616]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b98      	ldr	r3, [pc, #608]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b95      	ldr	r3, [pc, #596]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a94      	ldr	r2, [pc, #592]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b92      	ldr	r3, [pc, #584]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b8f      	ldr	r3, [pc, #572]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a8e      	ldr	r2, [pc, #568]	; (8001634 <MX_GPIO_Init+0x2cc>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800140e:	4b89      	ldr	r3, [pc, #548]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a88      	ldr	r2, [pc, #544]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b86      	ldr	r3, [pc, #536]	; (8001634 <MX_GPIO_Init+0x2cc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001426:	4b83      	ldr	r3, [pc, #524]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a82      	ldr	r2, [pc, #520]	; (8001634 <MX_GPIO_Init+0x2cc>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b80      	ldr	r3, [pc, #512]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800143e:	4b7d      	ldr	r3, [pc, #500]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a7c      	ldr	r2, [pc, #496]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b7a      	ldr	r3, [pc, #488]	; (8001634 <MX_GPIO_Init+0x2cc>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001456:	4b77      	ldr	r3, [pc, #476]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a76      	ldr	r2, [pc, #472]	; (8001634 <MX_GPIO_Init+0x2cc>)
 800145c:	f043 0320 	orr.w	r3, r3, #32
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b74      	ldr	r3, [pc, #464]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	4b71      	ldr	r3, [pc, #452]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a70      	ldr	r2, [pc, #448]	; (8001634 <MX_GPIO_Init+0x2cc>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <MX_GPIO_Init+0x2cc>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ARD_D5_Pin|ARD_D0_Pin|ARD_D1_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800148c:	486a      	ldr	r0, [pc, #424]	; (8001638 <MX_GPIO_Init+0x2d0>)
 800148e:	f008 fb2b 	bl	8009ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ARD_D6_Pin|ARD_D3_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	21c0      	movs	r1, #192	; 0xc0
 8001496:	4869      	ldr	r0, [pc, #420]	; (800163c <MX_GPIO_Init+0x2d4>)
 8001498:	f008 fb26 	bl	8009ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	210b      	movs	r1, #11
 80014a0:	4867      	ldr	r0, [pc, #412]	; (8001640 <MX_GPIO_Init+0x2d8>)
 80014a2:	f008 fb21 	bl	8009ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80014a6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b8:	230b      	movs	r3, #11
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c0:	4619      	mov	r1, r3
 80014c2:	4860      	ldr	r0, [pc, #384]	; (8001644 <MX_GPIO_Init+0x2dc>)
 80014c4:	f008 f840 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80014c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ce:	2312      	movs	r3, #18
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014da:	2304      	movs	r3, #4
 80014dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e2:	4619      	mov	r1, r3
 80014e4:	4858      	ldr	r0, [pc, #352]	; (8001648 <MX_GPIO_Init+0x2e0>)
 80014e6:	f008 f82f 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80014ea:	f643 4323 	movw	r3, #15395	; 0x3c23
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014fc:	230a      	movs	r3, #10
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001504:	4619      	mov	r1, r3
 8001506:	4850      	ldr	r0, [pc, #320]	; (8001648 <MX_GPIO_Init+0x2e0>)
 8001508:	f008 f81e 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 800150c:	2318      	movs	r3, #24
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800151c:	230a      	movs	r3, #10
 800151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001524:	4619      	mov	r1, r3
 8001526:	4848      	ldr	r0, [pc, #288]	; (8001648 <MX_GPIO_Init+0x2e0>)
 8001528:	f008 f80e 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 800152c:	23c0      	movs	r3, #192	; 0xc0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800153c:	230b      	movs	r3, #11
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001544:	4619      	mov	r1, r3
 8001546:	4841      	ldr	r0, [pc, #260]	; (800164c <MX_GPIO_Init+0x2e4>)
 8001548:	f007 fffe 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800155e:	2308      	movs	r3, #8
 8001560:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001566:	4619      	mov	r1, r3
 8001568:	4833      	ldr	r0, [pc, #204]	; (8001638 <MX_GPIO_Init+0x2d0>)
 800156a:	f007 ffed 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_Pin;
 800156e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001574:	2312      	movs	r3, #18
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8001580:	2304      	movs	r3, #4
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001588:	4619      	mov	r1, r3
 800158a:	4831      	ldr	r0, [pc, #196]	; (8001650 <MX_GPIO_Init+0x2e8>)
 800158c:	f007 ffdc 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001594:	2312      	movs	r3, #18
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80015a0:	230b      	movs	r3, #11
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a8:	4619      	mov	r1, r3
 80015aa:	4827      	ldr	r0, [pc, #156]	; (8001648 <MX_GPIO_Init+0x2e0>)
 80015ac:	f007 ffcc 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin
 80015b0:	f24f 0330 	movw	r3, #61488	; 0xf030
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D8_Pin|LD_USER2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c2:	4619      	mov	r1, r3
 80015c4:	481e      	ldr	r0, [pc, #120]	; (8001640 <MX_GPIO_Init+0x2d8>)
 80015c6:	f007 ffbf 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 80015ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015dc:	2305      	movs	r3, #5
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e4:	4619      	mov	r1, r3
 80015e6:	481a      	ldr	r0, [pc, #104]	; (8001650 <MX_GPIO_Init+0x2e8>)
 80015e8:	f007 ffae 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 80015ec:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fe:	4619      	mov	r1, r3
 8001600:	4814      	ldr	r0, [pc, #80]	; (8001654 <MX_GPIO_Init+0x2ec>)
 8001602:	f007 ffa1 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8001606:	23f8      	movs	r3, #248	; 0xf8
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001616:	4619      	mov	r1, r3
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <MX_GPIO_Init+0x2f0>)
 800161a:	f007 ff95 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 800161e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001630:	2307      	movs	r3, #7
 8001632:	e013      	b.n	800165c <MX_GPIO_Init+0x2f4>
 8001634:	40023800 	.word	0x40023800
 8001638:	40020800 	.word	0x40020800
 800163c:	40021400 	.word	0x40021400
 8001640:	40022400 	.word	0x40022400
 8001644:	40021800 	.word	0x40021800
 8001648:	40020400 	.word	0x40020400
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40020000 	.word	0x40020000
 8001654:	40022000 	.word	0x40022000
 8001658:	40022800 	.word	0x40022800
 800165c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001662:	4619      	mov	r1, r3
 8001664:	48b6      	ldr	r0, [pc, #728]	; (8001940 <MX_GPIO_Init+0x5d8>)
 8001666:	f007 ff6f 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 800166a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800167c:	230b      	movs	r3, #11
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001684:	4619      	mov	r1, r3
 8001686:	48ae      	ldr	r0, [pc, #696]	; (8001940 <MX_GPIO_Init+0x5d8>)
 8001688:	f007 ff5e 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 800168c:	2330      	movs	r3, #48	; 0x30
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169c:	4619      	mov	r1, r3
 800169e:	48a9      	ldr	r0, [pc, #676]	; (8001944 <MX_GPIO_Init+0x5dc>)
 80016a0:	f007 ff52 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80016a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016b6:	2305      	movs	r3, #5
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016be:	4619      	mov	r1, r3
 80016c0:	48a1      	ldr	r0, [pc, #644]	; (8001948 <MX_GPIO_Init+0x5e0>)
 80016c2:	f007 ff41 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 80016c6:	2304      	movs	r3, #4
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80016d6:	2308      	movs	r3, #8
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016de:	4619      	mov	r1, r3
 80016e0:	4898      	ldr	r0, [pc, #608]	; (8001944 <MX_GPIO_Init+0x5dc>)
 80016e2:	f007 ff31 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80016e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016f8:	230a      	movs	r3, #10
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001700:	4619      	mov	r1, r3
 8001702:	4892      	ldr	r0, [pc, #584]	; (800194c <MX_GPIO_Init+0x5e4>)
 8001704:	f007 ff20 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8001708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800171a:	2300      	movs	r3, #0
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001722:	4619      	mov	r1, r3
 8001724:	4888      	ldr	r0, [pc, #544]	; (8001948 <MX_GPIO_Init+0x5e0>)
 8001726:	f007 ff0f 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800172a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001730:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173e:	4619      	mov	r1, r3
 8001740:	4882      	ldr	r0, [pc, #520]	; (800194c <MX_GPIO_Init+0x5e4>)
 8001742:	f007 ff01 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin|ARD_D0_Pin|ARD_D1_Pin;
 8001746:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175c:	4619      	mov	r1, r3
 800175e:	487c      	ldr	r0, [pc, #496]	; (8001950 <MX_GPIO_Init+0x5e8>)
 8001760:	f007 fef2 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001764:	2310      	movs	r3, #16
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001774:	230a      	movs	r3, #10
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177c:	4619      	mov	r1, r3
 800177e:	4875      	ldr	r0, [pc, #468]	; (8001954 <MX_GPIO_Init+0x5ec>)
 8001780:	f007 fee2 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001784:	2348      	movs	r3, #72	; 0x48
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001794:	4619      	mov	r1, r3
 8001796:	486a      	ldr	r0, [pc, #424]	; (8001940 <MX_GPIO_Init+0x5d8>)
 8001798:	f007 fed6 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D3_Pin;
 800179c:	23c0      	movs	r3, #192	; 0xc0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b0:	4619      	mov	r1, r3
 80017b2:	4869      	ldr	r0, [pc, #420]	; (8001958 <MX_GPIO_Init+0x5f0>)
 80017b4:	f007 fec8 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80017b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017be:	2303      	movs	r3, #3
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ca:	4619      	mov	r1, r3
 80017cc:	4862      	ldr	r0, [pc, #392]	; (8001958 <MX_GPIO_Init+0x5f0>)
 80017ce:	f007 febb 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017e2:	230a      	movs	r3, #10
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ea:	4619      	mov	r1, r3
 80017ec:	4858      	ldr	r0, [pc, #352]	; (8001950 <MX_GPIO_Init+0x5e8>)
 80017ee:	f007 feab 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017f2:	2332      	movs	r3, #50	; 0x32
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001802:	230b      	movs	r3, #11
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180a:	4619      	mov	r1, r3
 800180c:	4850      	ldr	r0, [pc, #320]	; (8001950 <MX_GPIO_Init+0x5e8>)
 800180e:	f007 fe9b 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001812:	2304      	movs	r3, #4
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001816:	2303      	movs	r3, #3
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001822:	4619      	mov	r1, r3
 8001824:	484a      	ldr	r0, [pc, #296]	; (8001950 <MX_GPIO_Init+0x5e8>)
 8001826:	f007 fe8f 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 800182a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001830:	2312      	movs	r3, #18
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800183c:	2304      	movs	r3, #4
 800183e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001844:	4619      	mov	r1, r3
 8001846:	483f      	ldr	r0, [pc, #252]	; (8001944 <MX_GPIO_Init+0x5dc>)
 8001848:	f007 fe7e 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800184c:	2386      	movs	r3, #134	; 0x86
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800185c:	230b      	movs	r3, #11
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001864:	4619      	mov	r1, r3
 8001866:	4838      	ldr	r0, [pc, #224]	; (8001948 <MX_GPIO_Init+0x5e0>)
 8001868:	f007 fe6e 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 800186c:	2301      	movs	r3, #1
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001870:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187e:	4619      	mov	r1, r3
 8001880:	4831      	ldr	r0, [pc, #196]	; (8001948 <MX_GPIO_Init+0x5e0>)
 8001882:	f007 fe61 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001886:	2350      	movs	r3, #80	; 0x50
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188a:	2303      	movs	r3, #3
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001896:	4619      	mov	r1, r3
 8001898:	482b      	ldr	r0, [pc, #172]	; (8001948 <MX_GPIO_Init+0x5e0>)
 800189a:	f007 fe55 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
 800189e:	230b      	movs	r3, #11
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b2:	4619      	mov	r1, r3
 80018b4:	4829      	ldr	r0, [pc, #164]	; (800195c <MX_GPIO_Init+0x5f4>)
 80018b6:	f007 fe47 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 80018ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80018cc:	230a      	movs	r3, #10
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d4:	4619      	mov	r1, r3
 80018d6:	481b      	ldr	r0, [pc, #108]	; (8001944 <MX_GPIO_Init+0x5dc>)
 80018d8:	f007 fe36 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|ARD_D9_Pin;
 80018dc:	23c0      	movs	r3, #192	; 0xc0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	4619      	mov	r1, r3
 80018ee:	4819      	ldr	r0, [pc, #100]	; (8001954 <MX_GPIO_Init+0x5ec>)
 80018f0:	f007 fe2a 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80018f4:	2328      	movs	r3, #40	; 0x28
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001904:	230a      	movs	r3, #10
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190c:	4619      	mov	r1, r3
 800190e:	480e      	ldr	r0, [pc, #56]	; (8001948 <MX_GPIO_Init+0x5e0>)
 8001910:	f007 fe1a 	bl	8009548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001914:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001926:	2305      	movs	r3, #5
 8001928:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	4619      	mov	r1, r3
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <MX_GPIO_Init+0x5f8>)
 8001932:	f007 fe09 	bl	8009548 <HAL_GPIO_Init>

}
 8001936:	bf00      	nop
 8001938:	3740      	adds	r7, #64	; 0x40
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021800 	.word	0x40021800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40020000 	.word	0x40020000
 800194c:	40022000 	.word	0x40022000
 8001950:	40020800 	.word	0x40020800
 8001954:	40021c00 	.word	0x40021c00
 8001958:	40021400 	.word	0x40021400
 800195c:	40022400 	.word	0x40022400
 8001960:	40020400 	.word	0x40020400

08001964 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b09a      	sub	sp, #104	; 0x68
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800196a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800196e:	2234      	movs	r2, #52	; 0x34
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f010 fab6 	bl	8011ee4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001978:	463b      	mov	r3, r7
 800197a:	2234      	movs	r2, #52	; 0x34
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f010 fab0 	bl	8011ee4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001984:	4b4e      	ldr	r3, [pc, #312]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 8001986:	4a4f      	ldr	r2, [pc, #316]	; (8001ac4 <MX_LTDC_Init+0x160>)
 8001988:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800198a:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001996:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800199c:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80019a2:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80019a8:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 80019ae:	4b44      	ldr	r3, [pc, #272]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 801;
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019bc:	f240 3221 	movw	r2, #801	; 0x321
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019c4:	f240 12e1 	movw	r2, #481	; 0x1e1
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 802;
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019cc:	f240 3222 	movw	r2, #802	; 0x322
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80019ea:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80019f2:	4833      	ldr	r0, [pc, #204]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 80019f4:	f008 fe56 	bl	800a6a4 <HAL_LTDC_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80019fe:	f000 fd71 	bl	80024e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a12:	2300      	movs	r3, #0
 8001a14:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a22:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a24:	2305      	movs	r3, #5
 8001a26:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481c      	ldr	r0, [pc, #112]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 8001a50:	f008 ffb0 	bl	800a9b4 <HAL_LTDC_ConfigLayer>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001a5a:	f000 fd43 	bl	80024e4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a80:	2305      	movs	r3, #5
 8001a82:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_LTDC_Init+0x15c>)
 8001aaa:	f008 ff83 	bl	800a9b4 <HAL_LTDC_ConfigLayer>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001ab4:	f000 fd16 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3768      	adds	r7, #104	; 0x68
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200004ec 	.word	0x200004ec
 8001ac4:	40016800 	.word	0x40016800

08001ac8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  if(ltdcHandle->Instance==LTDC)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_LTDC_MspInit+0x44>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d113      	bne.n	8001b02 <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_LTDC_MspInit+0x48>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <HAL_LTDC_MspInit+0x48>)
 8001ae0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_LTDC_MspInit+0x48>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	2058      	movs	r0, #88	; 0x58
 8001af8:	f005 fb04 	bl	8007104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001afc:	2058      	movs	r0, #88	; 0x58
 8001afe:	f005 fb1d 	bl	800713c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40016800 	.word	0x40016800
 8001b10:	40023800 	.word	0x40023800

08001b14 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b18:	f3bf 8f4f 	dsb	sy
}
 8001b1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b1e:	f3bf 8f6f 	isb	sy
}
 8001b22:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <SCB_EnableICache+0x48>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2c:	f3bf 8f4f 	dsb	sy
}
 8001b30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b32:	f3bf 8f6f 	isb	sy
}
 8001b36:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <SCB_EnableICache+0x48>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <SCB_EnableICache+0x48>)
 8001b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b42:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b44:	f3bf 8f4f 	dsb	sy
}
 8001b48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b4a:	f3bf 8f6f 	isb	sy
}
 8001b4e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001b66:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <SCB_EnableDCache+0x84>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001b6e:	f3bf 8f4f 	dsb	sy
}
 8001b72:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <SCB_EnableDCache+0x84>)
 8001b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b7a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	0b5b      	lsrs	r3, r3, #13
 8001b80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b84:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001b98:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b9e:	4911      	ldr	r1, [pc, #68]	; (8001be4 <SCB_EnableDCache+0x84>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	60ba      	str	r2, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ef      	bne.n	8001b90 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1e5a      	subs	r2, r3, #1
 8001bb4:	60fa      	str	r2, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1e5      	bne.n	8001b86 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bba:	f3bf 8f4f 	dsb	sy
}
 8001bbe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <SCB_EnableDCache+0x84>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <SCB_EnableDCache+0x84>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <OnError_Handler>:
  * @brief  On Error Handler on condition TRUE.
  * @param  condition : Can be TRUE or FALSE
  * @retval None
  */
void OnError_Handler(uint32_t condition)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(condition)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <OnError_Handler+0x16>
  {
    BSP_LED_On(LED1);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f002 fee0 	bl	80049bc <BSP_LED_On>
    while(1) { ; } /* Blocking on error */
 8001bfc:	e7fe      	b.n	8001bfc <OnError_Handler+0x14>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001c0e:	f7ff ff81 	bl	8001b14 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001c12:	f7ff ffa5 	bl	8001b60 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c16:	f005 f947 	bl	8006ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1a:	f000 f8d9 	bl	8001dd0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c1e:	f000 f947 	bl	8001eb0 <PeriphCommonClock_Config>
  //PeripheralInit(); //THIS IS  AUTOGEN BUT UART IS NOT INCLUDED!!?

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c22:	f7ff fba1 	bl	8001368 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001c26:	f7fe fe53 	bl	80008d0 <MX_DFSDM1_Init>
  MX_SAI1_Init();
 8001c2a:	f000 fd75 	bl	8002718 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8001c2e:	f000 ffd7 	bl	8002be0 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8001c32:	f7ff fe97 	bl	8001964 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001c36:	f7fe ff0b 	bl	8000a50 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8001c3a:	f7fe ff67 	bl	8000b0c <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8001c3e:	f7ff f8c5 	bl	8000dcc <MX_FMC_Init>
  MX_QUADSPI_Init();
 8001c42:	f000 fc5b 	bl	80024fc <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f002 fe88 	bl	800495c <BSP_LED_Init>
  BSP_LED_On(LED_GREEN);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f002 feb5 	bl	80049bc <BSP_LED_On>
  //This could potentially? be used to flip the display buffer to create animations..possibly


  //ITM_SendChar ('x');

  printf("Connected to STM32F769I-Discovery USART 1\r\n");
 8001c52:	4854      	ldr	r0, [pc, #336]	; (8001da4 <main+0x19c>)
 8001c54:	f010 f93e 	bl	8011ed4 <puts>
  printf("\r\n");
 8001c58:	4853      	ldr	r0, [pc, #332]	; (8001da8 <main+0x1a0>)
 8001c5a:	f010 f93b 	bl	8011ed4 <puts>


  // Enable access to the qspi flash chip in memory mapped mode

  uint8_t bsp_status = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	71fb      	strb	r3, [r7, #7]
  bsp_status = BSP_QSPI_Init();
 8001c62:	f004 f8e7 	bl	8005e34 <BSP_QSPI_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(bsp_status != QSPI_OK);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ffb6 	bl	8001be8 <OnError_Handler>
  bsp_status = BSP_QSPI_EnableMemoryMappedMode();
 8001c7c:	f004 f94a 	bl	8005f14 <BSP_QSPI_EnableMemoryMappedMode>
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(bsp_status != QSPI_OK);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf14      	ite	ne
 8001c8a:	2301      	movne	r3, #1
 8001c8c:	2300      	moveq	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ffa9 	bl	8001be8 <OnError_Handler>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001c96:	205c      	movs	r0, #92	; 0x5c
 8001c98:	f005 fa5e 	bl	8007158 <HAL_NVIC_DisableIRQ>

  // Enable the LCD
  uint8_t  lcd_status = LCD_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71bb      	strb	r3, [r7, #6]
  lcd_status = BSP_LCD_Init();
 8001ca0:	f003 fa4a 	bl	8005138 <BSP_LCD_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71bb      	strb	r3, [r7, #6]
  OnError_Handler(lcd_status != LCD_OK);
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff97 	bl	8001be8 <OnError_Handler>

  //All these functions send to use draw immediate which is no good for animation
  //Need to use the lower level commands to do this and switch buffer on LCD blanking reload

  //Set Brightness
  BSP_LCD_SetBrightness(100); //0 - 100 Max
 8001cba:	2064      	movs	r0, #100	; 0x64
 8001cbc:	f003 fea4 	bl	8005a08 <BSP_LCD_SetBrightness>

  // Get the LCD Width and Height
  LCD_X_Size = BSP_LCD_GetXSize();
 8001cc0:	f003 fbbe 	bl	8005440 <BSP_LCD_GetXSize>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4a39      	ldr	r2, [pc, #228]	; (8001dac <main+0x1a4>)
 8001cc8:	6013      	str	r3, [r2, #0]
  LCD_Y_Size = BSP_LCD_GetYSize();
 8001cca:	f003 fbc5 	bl	8005458 <BSP_LCD_GetYSize>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a37      	ldr	r2, [pc, #220]	; (8001db0 <main+0x1a8>)
 8001cd2:	6013      	str	r3, [r2, #0]


  // Configure the LCD layers with their framebuffers in SRAM
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001cd4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f003 fbc9 	bl	8005470 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS + (800*480*4));
 8001cde:	4935      	ldr	r1, [pc, #212]	; (8001db4 <main+0x1ac>)
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f003 fbc5 	bl	8005470 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_TRANSPARENT); //This ensures both layers are visible when overlaid?
 8001ce6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8001cea:	2001      	movs	r0, #1
 8001cec:	f003 fc30 	bl	8005550 <BSP_LCD_SetColorKeying>

  // Draw the image on layer 0
  //This sets the 'internal active layer variable that is used by the drawign routines

  BSP_LCD_SelectLayer(0); //Selects 0 as active  layer index ..all draws will go to zero..
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f003 fc1d 	bl	8005530 <BSP_LCD_SelectLayer>



  //This bitmap is defined in image_xxx.h and placed during programming in the EEPROM accessed using the QuadSPI
  // Need to ensure its flashed into the QSPI 64M external before running.
  BSP_LCD_DrawBitmap(0, 0, webb_first_f769idisco);
 8001cf6:	4a30      	ldr	r2, [pc, #192]	; (8001db8 <main+0x1b0>)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f003 fdd2 	bl	80058a4 <BSP_LCD_DrawBitmap>
  //CheckForUserInput(); //wait...

  //We need to try to write to the background (not active layer) then switch to that layer..
 // Draw text on layer one and use transparency to make the background image visible

  BSP_LCD_SelectLayer(1); //Makes 1 the active layer
 8001d00:	2001      	movs	r0, #1
 8001d02:	f003 fc15 	bl	8005530 <BSP_LCD_SelectLayer>

  //BSP_LCD_DrawBitmap(0, 0, webb_first_f769idisco);

  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT); //So we can see the Layer 0 underneath ..important otherwise layer is overlaid with keying.
 8001d06:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001d0a:	f003 fc97 	bl	800563c <BSP_LCD_Clear>

  BSP_LCD_SetBackColor(LCD_COLOR_TRANSPARENT); //ditto
 8001d0e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001d12:	f003 fc49 	bl	80055a8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d1a:	f003 fc2d 	bl	8005578 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font24);
 8001d1e:	4827      	ldr	r0, [pc, #156]	; (8001dbc <main+0x1b4>)
 8001d20:	f003 fc5c 	bl	80055dc <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0,LINE(2) , (uint8_t *)"Running Demo 1.0", CENTER_MODE);
 8001d24:	f003 fc74 	bl	8005610 <BSP_LCD_GetFont>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	88db      	ldrh	r3, [r3, #6]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	b299      	uxth	r1, r3
 8001d30:	2301      	movs	r3, #1
 8001d32:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <main+0x1b8>)
 8001d34:	2000      	movs	r0, #0
 8001d36:	f003 fced 	bl	8005714 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0,LINE(3) , (uint8_t *)"Audio with Basic Tremolo Effect", CENTER_MODE);
 8001d3a:	f003 fc69 	bl	8005610 <BSP_LCD_GetFont>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	88db      	ldrh	r3, [r3, #6]
 8001d42:	461a      	mov	r2, r3
 8001d44:	0052      	lsls	r2, r2, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	b299      	uxth	r1, r3
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <main+0x1bc>)
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f003 fce0 	bl	8005714 <BSP_LCD_DisplayStringAt>

  //BSP_LCD_SelectLayer(1); //Makes 1 the active layer for the box drawing..


  //Will need to move to threads...perhaps?
  ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001d54:	f003 fb74 	bl	8005440 <BSP_LCD_GetXSize>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	b29c      	uxth	r4, r3
 8001d5c:	f003 fb7c 	bl	8005458 <BSP_LCD_GetYSize>
 8001d60:	4603      	mov	r3, r0
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4619      	mov	r1, r3
 8001d66:	4620      	mov	r0, r4
 8001d68:	f004 ff2a 	bl	8006bc0 <BSP_TS_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <main+0x1c0>)
 8001d72:	601a      	str	r2, [r3, #0]
  //Could do with calibration..


  if(ts_status == TS_OK)
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <main+0x1c0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <main+0x17a>
  {
	  /* Display touch screen active debug */
      printf("Touch screen is go!\r\n");
 8001d7c:	4813      	ldr	r0, [pc, #76]	; (8001dcc <main+0x1c4>)
 8001d7e:	f010 f8a9 	bl	8011ed4 <puts>
  }
  OnError_Handler(ts_status != TS_OK);
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <main+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	bf14      	ite	ne
 8001d8a:	2301      	movne	r3, #1
 8001d8c:	2300      	moveq	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff29 	bl	8001be8 <OnError_Handler>



  // Setup
  AUDIO_SETUP();
 8001d96:	f000 fb33 	bl	8002400 <AUDIO_SETUP>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d9a:	f7ff f91b 	bl	8000fd4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d9e:	f00c fef7 	bl	800eb90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <main+0x19a>
 8001da4:	08012d10 	.word	0x08012d10
 8001da8:	08012d3c 	.word	0x08012d3c
 8001dac:	200025b0 	.word	0x200025b0
 8001db0:	200025b4 	.word	0x200025b4
 8001db4:	c0177000 	.word	0xc0177000
 8001db8:	90000000 	.word	0x90000000
 8001dbc:	20000084 	.word	0x20000084
 8001dc0:	08012d40 	.word	0x08012d40
 8001dc4:	08012d54 	.word	0x08012d54
 8001dc8:	200025ac 	.word	0x200025ac
 8001dcc:	08012d74 	.word	0x08012d74

08001dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b094      	sub	sp, #80	; 0x50
 8001dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	2234      	movs	r2, #52	; 0x34
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f010 f880 	bl	8011ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <SystemClock_Config+0xd8>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <SystemClock_Config+0xd8>)
 8001dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <SystemClock_Config+0xd8>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <SystemClock_Config+0xdc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <SystemClock_Config+0xdc>)
 8001e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <SystemClock_Config+0xdc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e38:	2319      	movs	r3, #25
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e3c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001e40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e42:	2302      	movs	r3, #2
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e46:	2304      	movs	r3, #4
 8001e48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4618      	mov	r0, r3
 8001e54:	f009 fd76 	bl	800b944 <HAL_RCC_OscConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001e5e:	f000 fb41 	bl	80024e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e62:	f009 f84d 	bl	800af00 <HAL_PWREx_EnableOverDrive>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001e6c:	f000 fb3a 	bl	80024e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e70:	230f      	movs	r3, #15
 8001e72:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e74:	2302      	movs	r3, #2
 8001e76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e88:	f107 0308 	add.w	r3, r7, #8
 8001e8c:	2107      	movs	r1, #7
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00a f806 	bl	800bea0 <HAL_RCC_ClockConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001e9a:	f000 fb23 	bl	80024e4 <Error_Handler>
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3750      	adds	r7, #80	; 0x50
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000

08001eb0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0a4      	sub	sp, #144	; 0x90
 8001eb4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	2290      	movs	r2, #144	; 0x90
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f010 f811 	bl	8011ee4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI1;
 8001ec2:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8001ec6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ec8:	23c0      	movs	r3, #192	; 0xc0
 8001eca:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f00a f9f2 	bl	800c2d0 <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 8001ef2:	f000 faf7 	bl	80024e4 <Error_Handler>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3790      	adds	r7, #144	; 0x90
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <__io_putchar>:
       * @brief  Retargets the C library printf function to the USART.
       * @param  None
       * @retval None
       */
     PUTCHAR_PROTOTYPE
     {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
       /* Place your implementation of fputc here */
       /* e.g. write a character to the USART2 and Loop until the end of transmission */
       HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001f08:	1d39      	adds	r1, r7, #4
 8001f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4803      	ldr	r0, [pc, #12]	; (8001f20 <__io_putchar+0x20>)
 8001f12:	f00c f873 	bl	800dffc <HAL_UART_Transmit>
       //ITM_SendChar (ch);

       return ch;
 8001f16:	687b      	ldr	r3, [r7, #4]
     }
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000273c 	.word	0x2000273c

08001f24 <HAL_DSI_EndOfRefreshCallback>:
     /* ISR Handlers */

     // USE_HAL_DSI_REGISTER_CALLBACKS ??Where is this  defined..

     void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
     {
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
       (void)hdsi;
       if(pend_buffer >= 0)
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_DSI_EndOfRefreshCallback+0x2c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db07      	blt.n	8001f44 <HAL_DSI_EndOfRefreshCallback+0x20>
         //LTDC_LAYER(&hltdc_discovery, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
         //__HAL_LTDC_RELOAD_CONFIG(&hltdc_discovery);
         /* Enable DSI Wrapper */
         //__HAL_DSI_WRAPPER_ENABLE(&hdsi_discovery);

         front_buffer = pend_buffer;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_DSI_EndOfRefreshCallback+0x2c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <HAL_DSI_EndOfRefreshCallback+0x30>)
 8001f3a:	6013      	str	r3, [r2, #0]
         pend_buffer = -1;
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <HAL_DSI_EndOfRefreshCallback+0x2c>)
 8001f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f42:	601a      	str	r2, [r3, #0]
       }
     }
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000594 	.word	0x20000594

08001f58 <HAL_LTDC_ReloadEventCallback>:



     //override of callback
     void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc){
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    	 //bufferNumber++;
    	 //Plot here?
    	 //BSP_LCD_FillRect(350, 200, 100, 100);
     }
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <DMA2_Stream4_IRQHandler>:


     void DMA2_Stream4_IRQHandler(void)
     {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
      HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <DMA2_Stream4_IRQHandler+0x14>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	4618      	mov	r0, r3
 8001f76:	f005 fb75 	bl	8007664 <HAL_DMA_IRQHandler>
     }
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200028ac 	.word	0x200028ac

08001f84 <DMA2_Stream1_IRQHandler>:

     void DMA2_Stream1_IRQHandler(void)
     {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
      HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <DMA2_Stream1_IRQHandler+0x14>)
 8001f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f005 fb69 	bl	8007664 <HAL_DMA_IRQHandler>
     }
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20002828 	.word	0x20002828

08001f9c <BSP_AUDIO_IN_Error_CallBack>:
       * @brief  Audio IN Error callback function.
       * @param  None
       * @retval None
       */
     void BSP_AUDIO_IN_Error_CallBack(void)
     {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
         /* This function is called when an Interrupt due to transfer error on or peripheral
            error occurs. */
         /* Display message on the LCD screen */
         //BSP_LCD_SetBackColor(LCD_COLOR_RED);
         //BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
    	  printf("BSP_AUDIO_IN_Error_CallBack\r\n");
 8001fa0:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <BSP_AUDIO_IN_Error_CallBack+0x1c>)
 8001fa2:	f00f ff97 	bl	8011ed4 <puts>

         /* Stop the program with an infinite loop */


         while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001fa6:	bf00      	nop
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f002 fd3b 	bl	8004a24 <BSP_PB_GetState>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
         {
             return;
 8001fb2:	bf00      	nop
         }


         /* could also generate a system reset to recover from the error */
         /* .... */
     }
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	08012d94 	.word	0x08012d94

08001fbc <SAIx_In_Init>:
  * @param  pBuffer: Pointer to the buffer
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
     void SAIx_In_Init(uint32_t AudioFreq)
     {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
         /* Initialize SAI1 block A in MASTER TX */
         /* Initialize the haudio_out_sai Instance parameter */
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001fc4:	4b62      	ldr	r3, [pc, #392]	; (8002150 <SAIx_In_Init+0x194>)
 8001fc6:	4a63      	ldr	r2, [pc, #396]	; (8002154 <SAIx_In_Init+0x198>)
 8001fc8:	601a      	str	r2, [r3, #0]

         /* Disable SAI peripheral to allow access to SAI internal registers */
         __HAL_SAI_DISABLE(&haudio_out_sai);
 8001fca:	4b61      	ldr	r3, [pc, #388]	; (8002150 <SAIx_In_Init+0x194>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <SAIx_In_Init+0x194>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fd8:	601a      	str	r2, [r3, #0]

         /* Configure SAI_Block_x */
         haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8001fda:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <SAIx_In_Init+0x194>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24
         haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001fe0:	4a5b      	ldr	r2, [pc, #364]	; (8002150 <SAIx_In_Init+0x194>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	61d3      	str	r3, [r2, #28]
         haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 8001fe6:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <SAIx_In_Init+0x194>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
         haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8001fec:	4b58      	ldr	r3, [pc, #352]	; (8002150 <SAIx_In_Init+0x194>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
         haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8001ff2:	4b57      	ldr	r3, [pc, #348]	; (8002150 <SAIx_In_Init+0x194>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
         haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 8001ff8:	4b55      	ldr	r3, [pc, #340]	; (8002150 <SAIx_In_Init+0x194>)
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
         haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8001ffe:	4b54      	ldr	r3, [pc, #336]	; (8002150 <SAIx_In_Init+0x194>)
 8002000:	2200      	movs	r2, #0
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
         haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002004:	4b52      	ldr	r3, [pc, #328]	; (8002150 <SAIx_In_Init+0x194>)
 8002006:	2200      	movs	r2, #0
 8002008:	63da      	str	r2, [r3, #60]	; 0x3c
         haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 800200a:	4b51      	ldr	r3, [pc, #324]	; (8002150 <SAIx_In_Init+0x194>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
         haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8002010:	4b4f      	ldr	r3, [pc, #316]	; (8002150 <SAIx_In_Init+0x194>)
 8002012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002016:	611a      	str	r2, [r3, #16]
         haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8002018:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <SAIx_In_Init+0x194>)
 800201a:	2201      	movs	r2, #1
 800201c:	619a      	str	r2, [r3, #24]
         haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800201e:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <SAIx_In_Init+0x194>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
         haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8002024:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <SAIx_In_Init+0x194>)
 8002026:	2200      	movs	r2, #0
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
         haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800202a:	4b49      	ldr	r3, [pc, #292]	; (8002150 <SAIx_In_Init+0x194>)
 800202c:	2200      	movs	r2, #0
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
         haudio_out_sai.Init.Mckdiv         = 0;
 8002030:	4b47      	ldr	r3, [pc, #284]	; (8002150 <SAIx_In_Init+0x194>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]

         /* Configure SAI_Block_x Frame */
         haudio_out_sai.FrameInit.FrameLength       = 64;
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <SAIx_In_Init+0x194>)
 8002038:	2240      	movs	r2, #64	; 0x40
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
         haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800203c:	4b44      	ldr	r3, [pc, #272]	; (8002150 <SAIx_In_Init+0x194>)
 800203e:	2220      	movs	r2, #32
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
         haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8002042:	4b43      	ldr	r3, [pc, #268]	; (8002150 <SAIx_In_Init+0x194>)
 8002044:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002048:	649a      	str	r2, [r3, #72]	; 0x48
         haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <SAIx_In_Init+0x194>)
 800204c:	2200      	movs	r2, #0
 800204e:	64da      	str	r2, [r3, #76]	; 0x4c
         haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002050:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <SAIx_In_Init+0x194>)
 8002052:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002056:	651a      	str	r2, [r3, #80]	; 0x50

         /* Configure SAI Block_x Slot */
         haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002058:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <SAIx_In_Init+0x194>)
 800205a:	2200      	movs	r2, #0
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
         haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800205e:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <SAIx_In_Init+0x194>)
 8002060:	2200      	movs	r2, #0
 8002062:	659a      	str	r2, [r3, #88]	; 0x58
         haudio_out_sai.SlotInit.SlotNumber     = 4;
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <SAIx_In_Init+0x194>)
 8002066:	2204      	movs	r2, #4
 8002068:	65da      	str	r2, [r3, #92]	; 0x5c
         haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <SAIx_In_Init+0x194>)
 800206c:	220f      	movs	r2, #15
 800206e:	661a      	str	r2, [r3, #96]	; 0x60

         HAL_SAI_Init(&haudio_out_sai);
 8002070:	4837      	ldr	r0, [pc, #220]	; (8002150 <SAIx_In_Init+0x194>)
 8002072:	f00a ffe7 	bl	800d044 <HAL_SAI_Init>



         /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <SAIx_In_Init+0x19c>)
 8002078:	4a38      	ldr	r2, [pc, #224]	; (800215c <SAIx_In_Init+0x1a0>)
 800207a:	601a      	str	r2, [r3, #0]

         /* Disable SAI peripheral to allow access to SAI internal registers */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <SAIx_In_Init+0x19c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b35      	ldr	r3, [pc, #212]	; (8002158 <SAIx_In_Init+0x19c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800208a:	601a      	str	r2, [r3, #0]

         /* Configure SAI_Block_x */
         haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <SAIx_In_Init+0x19c>)
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
         haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002092:	4a31      	ldr	r2, [pc, #196]	; (8002158 <SAIx_In_Init+0x19c>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	61d3      	str	r3, [r2, #28]
         haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <SAIx_In_Init+0x19c>)
 800209a:	2203      	movs	r2, #3
 800209c:	605a      	str	r2, [r3, #4]
         haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <SAIx_In_Init+0x19c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
         haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 80020a4:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <SAIx_In_Init+0x19c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
         haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <SAIx_In_Init+0x19c>)
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	635a      	str	r2, [r3, #52]	; 0x34
         haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <SAIx_In_Init+0x19c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
         haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <SAIx_In_Init+0x19c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	63da      	str	r2, [r3, #60]	; 0x3c
         haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <SAIx_In_Init+0x19c>)
 80020be:	2201      	movs	r2, #1
 80020c0:	609a      	str	r2, [r3, #8]
         haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 80020c2:	4b25      	ldr	r3, [pc, #148]	; (8002158 <SAIx_In_Init+0x19c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
         haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <SAIx_In_Init+0x19c>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	619a      	str	r2, [r3, #24]
         haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <SAIx_In_Init+0x19c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
         haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80020d4:	4b20      	ldr	r3, [pc, #128]	; (8002158 <SAIx_In_Init+0x19c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
         haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <SAIx_In_Init+0x19c>)
 80020dc:	2210      	movs	r2, #16
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
         haudio_in_sai.Init.Mckdiv         = 0;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <SAIx_In_Init+0x19c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	621a      	str	r2, [r3, #32]

         /* Configure SAI_Block_x Frame */
         haudio_in_sai.FrameInit.FrameLength       = 64;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <SAIx_In_Init+0x19c>)
 80020e8:	2240      	movs	r2, #64	; 0x40
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
         haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <SAIx_In_Init+0x19c>)
 80020ee:	2220      	movs	r2, #32
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
         haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <SAIx_In_Init+0x19c>)
 80020f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020f8:	649a      	str	r2, [r3, #72]	; 0x48
         haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <SAIx_In_Init+0x19c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	64da      	str	r2, [r3, #76]	; 0x4c
         haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <SAIx_In_Init+0x19c>)
 8002102:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002106:	651a      	str	r2, [r3, #80]	; 0x50

         /* Configure SAI Block_x Slot */
         haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <SAIx_In_Init+0x19c>)
 800210a:	2200      	movs	r2, #0
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
         haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <SAIx_In_Init+0x19c>)
 8002110:	2200      	movs	r2, #0
 8002112:	659a      	str	r2, [r3, #88]	; 0x58
         haudio_in_sai.SlotInit.SlotNumber     = 4;
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <SAIx_In_Init+0x19c>)
 8002116:	2204      	movs	r2, #4
 8002118:	65da      	str	r2, [r3, #92]	; 0x5c
         haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <SAIx_In_Init+0x19c>)
 800211c:	220f      	movs	r2, #15
 800211e:	661a      	str	r2, [r3, #96]	; 0x60

         HAL_SAI_Init(&haudio_in_sai);
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <SAIx_In_Init+0x19c>)
 8002122:	f00a ff8f 	bl	800d044 <HAL_SAI_Init>

         /* Enable SAI peripheral */
         __HAL_SAI_ENABLE(&haudio_in_sai);
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <SAIx_In_Init+0x19c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <SAIx_In_Init+0x19c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002134:	601a      	str	r2, [r3, #0]

         /* Enable SAI peripheral to generate MCLK */
         __HAL_SAI_ENABLE(&haudio_out_sai);
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SAIx_In_Init+0x194>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <SAIx_In_Init+0x194>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002144:	601a      	str	r2, [r3, #0]
     }
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20002828 	.word	0x20002828
 8002154:	40015804 	.word	0x40015804
 8002158:	200028ac 	.word	0x200028ac
 800215c:	40015824 	.word	0x40015824

08002160 <SAIx_In_DeInit>:
     /**
       * @brief  Deinitializes the output Audio Codec audio interface (SAI).
       * @retval None
       */
     void SAIx_In_DeInit(void)
     {
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <SAIx_In_DeInit+0x30>)
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <SAIx_In_DeInit+0x34>)
 8002168:	601a      	str	r2, [r3, #0]
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <SAIx_In_DeInit+0x38>)
 800216c:	4a0b      	ldr	r2, [pc, #44]	; (800219c <SAIx_In_DeInit+0x3c>)
 800216e:	601a      	str	r2, [r3, #0]
         /* Disable SAI peripheral */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <SAIx_In_DeInit+0x30>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <SAIx_In_DeInit+0x30>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800217e:	601a      	str	r2, [r3, #0]

         HAL_SAI_DeInit(&haudio_in_sai);
 8002180:	4803      	ldr	r0, [pc, #12]	; (8002190 <SAIx_In_DeInit+0x30>)
 8002182:	f00b f8dd 	bl	800d340 <HAL_SAI_DeInit>
         HAL_SAI_DeInit(&haudio_out_sai);
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <SAIx_In_DeInit+0x38>)
 8002188:	f00b f8da 	bl	800d340 <HAL_SAI_DeInit>
     }
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200028ac 	.word	0x200028ac
 8002194:	40015824 	.word	0x40015824
 8002198:	20002828 	.word	0x20002828
 800219c:	40015804 	.word	0x40015804

080021a0 <SAI_AUDIO_IN_MspInit>:
       * @brief  Initializes SAI Audio IN MSP.
       * @param  hsai: SAI handle
       * @retval None
       */
     void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
     {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
         static DMA_HandleTypeDef hdma_sai_rx;
         GPIO_InitTypeDef  gpio_init_structure;

         /* Enable SAI clock */
         AUDIO_IN_SAIx_CLK_ENABLE();
 80021aa:	4b50      	ldr	r3, [pc, #320]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 80021b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	69bb      	ldr	r3, [r7, #24]

         /* Enable SD GPIO clock */
         AUDIO_IN_SAIx_SD_ENABLE();
 80021c2:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a49      	ldr	r2, [pc, #292]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697b      	ldr	r3, [r7, #20]
         /* CODEC_SAI pin configuration: SD pin */
         gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80021da:	2308      	movs	r3, #8
 80021dc:	61fb      	str	r3, [r7, #28]
         gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	623b      	str	r3, [r7, #32]
         gpio_init_structure.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021e6:	2302      	movs	r3, #2
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
         gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 80021ea:	2306      	movs	r3, #6
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
         HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	4619      	mov	r1, r3
 80021f4:	483e      	ldr	r0, [pc, #248]	; (80022f0 <SAI_AUDIO_IN_MspInit+0x150>)
 80021f6:	f007 f9a7 	bl	8009548 <HAL_GPIO_Init>

         /* Enable Audio INT GPIO clock */
         AUDIO_IN_INT_GPIO_ENABLE();
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 8002200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
         /* Audio INT pin configuration: input */
         gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002216:	61fb      	str	r3, [r7, #28]
         gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
         gpio_init_structure.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002220:	2302      	movs	r3, #2
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
         HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	4619      	mov	r1, r3
 800222a:	4832      	ldr	r0, [pc, #200]	; (80022f4 <SAI_AUDIO_IN_MspInit+0x154>)
 800222c:	f007 f98c 	bl	8009548 <HAL_GPIO_Init>

         /* Enable the DMA clock */
         AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002230:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	4a2d      	ldr	r2, [pc, #180]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 8002236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800223a:	6313      	str	r3, [r2, #48]	; 0x30
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <SAI_AUDIO_IN_MspInit+0x14c>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]

         if (hsai->Instance == AUDIO_IN_SAIx)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <SAI_AUDIO_IN_MspInit+0x158>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d138      	bne.n	80022c4 <SAI_AUDIO_IN_MspInit+0x124>
         {
             /* Configure the hdma_sai_rx handle parameters */
             hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 8002254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002258:	605a      	str	r2, [r3, #4]
             hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800225a:	4b28      	ldr	r3, [pc, #160]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
             hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
             hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002266:	4b25      	ldr	r3, [pc, #148]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 8002268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800226c:	611a      	str	r2, [r3, #16]
             hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 8002270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002274:	615a      	str	r2, [r3, #20]
             hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 8002278:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227c:	619a      	str	r2, [r3, #24]
             hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 8002280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002284:	61da      	str	r2, [r3, #28]
             hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 8002288:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800228c:	621a      	str	r2, [r3, #32]
             hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 8002290:	2200      	movs	r2, #0
 8002292:	625a      	str	r2, [r3, #36]	; 0x24
             hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 8002296:	2203      	movs	r2, #3
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
             hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 800229c:	2200      	movs	r2, #0
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
             hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30

             hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 80022a8:	4a15      	ldr	r2, [pc, #84]	; (8002300 <SAI_AUDIO_IN_MspInit+0x160>)
 80022aa:	601a      	str	r2, [r3, #0]

             /* Associate the DMA handle */
             __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 80022b0:	671a      	str	r2, [r3, #112]	; 0x70
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6393      	str	r3, [r2, #56]	; 0x38

             /* Deinitialize the Stream for new transfer */
             HAL_DMA_DeInit(&hdma_sai_rx);
 80022b8:	4810      	ldr	r0, [pc, #64]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 80022ba:	f005 f915 	bl	80074e8 <HAL_DMA_DeInit>

             /* Configure the DMA Stream */
             HAL_DMA_Init(&hdma_sai_rx);
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <SAI_AUDIO_IN_MspInit+0x15c>)
 80022c0:	f005 f864 	bl	800738c <HAL_DMA_Init>
         }

         /* SAI DMA IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	210f      	movs	r1, #15
 80022c8:	203c      	movs	r0, #60	; 0x3c
 80022ca:	f004 ff1b 	bl	8007104 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80022ce:	203c      	movs	r0, #60	; 0x3c
 80022d0:	f004 ff34 	bl	800713c <HAL_NVIC_EnableIRQ>

         /* Audio INT IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	210f      	movs	r1, #15
 80022d8:	2028      	movs	r0, #40	; 0x28
 80022da:	f004 ff13 	bl	8007104 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80022de:	2028      	movs	r0, #40	; 0x28
 80022e0:	f004 ff2c 	bl	800713c <HAL_NVIC_EnableIRQ>
     }
 80022e4:	bf00      	nop
 80022e6:	3730      	adds	r7, #48	; 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40022400 	.word	0x40022400
 80022f8:	40015824 	.word	0x40015824
 80022fc:	200025b8 	.word	0x200025b8
 8002300:	40026470 	.word	0x40026470

08002304 <BSP_AUDIO_IN_OUT_Init>:



     uint8_t BSP_AUDIO_IN_OUT_Init(uint32_t AudioFreq)
     {
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
         uint8_t ret = AUDIO_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]

         /* Disable SAI */
         SAIx_In_DeInit();
 8002310:	f7ff ff26 	bl	8002160 <SAIx_In_DeInit>

         /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
         BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	481f      	ldr	r0, [pc, #124]	; (8002398 <BSP_AUDIO_IN_OUT_Init+0x94>)
 800231a:	f002 feb5 	bl	8005088 <BSP_AUDIO_OUT_ClockConfig>
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800231e:	4b1f      	ldr	r3, [pc, #124]	; (800239c <BSP_AUDIO_IN_OUT_Init+0x98>)
 8002320:	4a1f      	ldr	r2, [pc, #124]	; (80023a0 <BSP_AUDIO_IN_OUT_Init+0x9c>)
 8002322:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002324:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <BSP_AUDIO_IN_OUT_Init+0x94>)
 8002326:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <BSP_AUDIO_IN_OUT_Init+0xa0>)
 8002328:	601a      	str	r2, [r3, #0]
         if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800232a:	481b      	ldr	r0, [pc, #108]	; (8002398 <BSP_AUDIO_IN_OUT_Init+0x94>)
 800232c:	f00b f97c 	bl	800d628 <HAL_SAI_GetState>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d107      	bne.n	8002346 <BSP_AUDIO_IN_OUT_Init+0x42>
         {
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8002336:	2100      	movs	r1, #0
 8002338:	4818      	ldr	r0, [pc, #96]	; (800239c <BSP_AUDIO_IN_OUT_Init+0x98>)
 800233a:	f002 fe03 	bl	8004f44 <BSP_AUDIO_OUT_MspInit>
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 800233e:	2100      	movs	r1, #0
 8002340:	4815      	ldr	r0, [pc, #84]	; (8002398 <BSP_AUDIO_IN_OUT_Init+0x94>)
 8002342:	f7ff ff2d 	bl	80021a0 <SAI_AUDIO_IN_MspInit>
         }


         SAIx_In_Init(AudioFreq);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fe38 	bl	8001fbc <SAIx_In_Init>


         if ((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 800234c:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2034      	movs	r0, #52	; 0x34
 8002352:	4798      	blx	r3
 8002354:	4603      	mov	r3, r0
 8002356:	f648 1294 	movw	r2, #35220	; 0x8994
 800235a:	4293      	cmp	r3, r2
 800235c:	d109      	bne.n	8002372 <BSP_AUDIO_IN_OUT_Init+0x6e>
         {
             /* Reset the Codec Registers */
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	2034      	movs	r0, #52	; 0x34
 8002364:	4798      	blx	r3
             /* Initialize the audio driver structure */
             audio_drv = &wm8994_drv;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <BSP_AUDIO_IN_OUT_Init+0xa8>)
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 800236a:	601a      	str	r2, [r3, #0]
             ret = AUDIO_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e001      	b.n	8002376 <BSP_AUDIO_IN_OUT_Init+0x72>
         } else {
             ret = AUDIO_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
         }

         if (ret == AUDIO_OK)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d108      	bne.n	800238e <BSP_AUDIO_IN_OUT_Init+0x8a>
         {
             /* Initialize the codec internal registers */
        	 //INPUT_DEVICE_ANALOG_MIC is the LINE IN input
        	 //100 is MAX volume on the CODEC
        	 audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 65, AudioFreq);
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <BSP_AUDIO_IN_OUT_Init+0xa8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681c      	ldr	r4, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2241      	movs	r2, #65	; 0x41
 8002386:	f240 3102 	movw	r1, #770	; 0x302
 800238a:	2034      	movs	r0, #52	; 0x34
 800238c:	47a0      	blx	r4
             //audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
         }

         /* Return AUDIO_OK when all operations are correctly done */
         return ret;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
     }
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bd90      	pop	{r4, r7, pc}
 8002398:	200028ac 	.word	0x200028ac
 800239c:	20002828 	.word	0x20002828
 80023a0:	40015804 	.word	0x40015804
 80023a4:	40015824 	.word	0x40015824
 80023a8:	20000040 	.word	0x20000040
 80023ac:	2000259c 	.word	0x2000259c

080023b0 <_BSP_AUDIO_OUT_Play>:


      uint8_t _BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
     {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
         /* Call the audio Codec Play function */
    	 //This using the correct  size SF
         if (audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <_BSP_AUDIO_OUT_Play+0x48>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	b292      	uxth	r2, r2
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	2034      	movs	r0, #52	; 0x34
 80023c8:	4798      	blx	r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <_BSP_AUDIO_OUT_Play+0x24>
         {
             return AUDIO_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00c      	b.n	80023ee <_BSP_AUDIO_OUT_Play+0x3e>

        	 //Buffer gets cast to a BYTE pointer, so this only transmits half the buffer
        	 //contents, i.e double buffer.


        	 if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <_BSP_AUDIO_OUT_Play+0x4c>)
 80023de:	f00a ffe5 	bl	800d3ac <HAL_SAI_Transmit_DMA>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <_BSP_AUDIO_OUT_Play+0x3c>
                 return AUDIO_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <_BSP_AUDIO_OUT_Play+0x3e>
             return AUDIO_OK;
 80023ec:	2300      	movs	r3, #0
         }
     }
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000259c 	.word	0x2000259c
 80023fc:	20002828 	.word	0x20002828

08002400 <AUDIO_SETUP>:

      void AUDIO_SETUP(void)
           {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
    	       //This will all kick off the SAI and configure the CODEC.
    	       //Call back interrupts, handled in main.c will then communicate with the
    	       //audio listene task

               //Change Sampling rate here...
               if (BSP_AUDIO_IN_OUT_Init(BSP_AUDIO_FREQUENCY_48K) == AUDIO_OK)
 8002406:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800240a:	f7ff ff7b 	bl	8002304 <BSP_AUDIO_IN_OUT_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <AUDIO_SETUP+0x1c>
               {
              	 printf("Audio I/O initialization OK\r\n");
 8002414:	481e      	ldr	r0, [pc, #120]	; (8002490 <AUDIO_SETUP+0x90>)
 8002416:	f00f fd5d 	bl	8011ed4 <puts>
 800241a:	e004      	b.n	8002426 <AUDIO_SETUP+0x26>
               } else {
              	 printf("Audio I/O initialization failed.\r\n");
 800241c:	481d      	ldr	r0, [pc, #116]	; (8002494 <AUDIO_SETUP+0x94>)
 800241e:	f00f fd59 	bl	8011ed4 <puts>
              	 Error_Handler();
 8002422:	f000 f85f 	bl	80024e4 <Error_Handler>
               // Start Receiving audio into Record Buffer..
               // Audio Buffer is  defined as int16,
               // so this transfer will only begin to receive into half the buffer. Double buff
               //Not  the record buffer size is cast to uint8, so effectively this halfs the
               //bytes that re transferred per block
               HAL_StatusTypeDef res = HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)RecordBuffer, RECORD_BUFFER_SIZE);
 8002426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <AUDIO_SETUP+0x98>)
 800242c:	481b      	ldr	r0, [pc, #108]	; (800249c <AUDIO_SETUP+0x9c>)
 800242e:	f00b f86d 	bl	800d50c <HAL_SAI_Receive_DMA>
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
               if (HAL_OK == res)
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <AUDIO_SETUP+0x44>
               {
              	 printf("SAI receive begin OK\r\n");
 800243c:	4818      	ldr	r0, [pc, #96]	; (80024a0 <AUDIO_SETUP+0xa0>)
 800243e:	f00f fd49 	bl	8011ed4 <puts>
 8002442:	e006      	b.n	8002452 <AUDIO_SETUP+0x52>
               } else {
                   printf("SAI receive error: %d\r\n", res);
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	4619      	mov	r1, r3
 8002448:	4816      	ldr	r0, [pc, #88]	; (80024a4 <AUDIO_SETUP+0xa4>)
 800244a:	f00f fcdd 	bl	8011e08 <iprintf>
                   Error_Handler();
 800244e:	f000 f849 	bl	80024e4 <Error_Handler>
               }

               printf("Begin Playback buffer\r\n");
 8002452:	4815      	ldr	r0, [pc, #84]	; (80024a8 <AUDIO_SETUP+0xa8>)
 8002454:	f00f fd3e 	bl	8011ed4 <puts>

               /* Play the recorded buffer */
               if (_BSP_AUDIO_OUT_Play((uint16_t *) &PlaybackBuffer[0], RECORD_BUFFER_SIZE) == AUDIO_OK)
 8002458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800245c:	4813      	ldr	r0, [pc, #76]	; (80024ac <AUDIO_SETUP+0xac>)
 800245e:	f7ff ffa7 	bl	80023b0 <_BSP_AUDIO_OUT_Play>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d103      	bne.n	8002470 <AUDIO_SETUP+0x70>
               {
              	 printf("Audio output OK\r\n");
 8002468:	4811      	ldr	r0, [pc, #68]	; (80024b0 <AUDIO_SETUP+0xb0>)
 800246a:	f00f fd33 	bl	8011ed4 <puts>
 800246e:	e004      	b.n	800247a <AUDIO_SETUP+0x7a>
               } else {
              	 printf("Audio output error\r\n");
 8002470:	4810      	ldr	r0, [pc, #64]	; (80024b4 <AUDIO_SETUP+0xb4>)
 8002472:	f00f fd2f 	bl	8011ed4 <puts>
              	 Error_Handler();
 8002476:	f000 f835 	bl	80024e4 <Error_Handler>
           	 }
               printf("\r\n");
 800247a:	480f      	ldr	r0, [pc, #60]	; (80024b8 <AUDIO_SETUP+0xb8>)
 800247c:	f00f fd2a 	bl	8011ed4 <puts>

               audio_rec_buffer_state = BUFFER_OFFSET_NONE; //trap for kickoff
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <AUDIO_SETUP+0xbc>)
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]


      } // end AUDIO_SETUP function
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	08012db4 	.word	0x08012db4
 8002494:	08012dd4 	.word	0x08012dd4
 8002498:	20000598 	.word	0x20000598
 800249c:	200028ac 	.word	0x200028ac
 80024a0:	08012df8 	.word	0x08012df8
 80024a4:	08012e10 	.word	0x08012e10
 80024a8:	08012e28 	.word	0x08012e28
 80024ac:	20001598 	.word	0x20001598
 80024b0:	08012e40 	.word	0x08012e40
 80024b4:	08012e54 	.word	0x08012e54
 80024b8:	08012d3c 	.word	0x08012d3c
 80024bc:	20002598 	.word	0x20002598

080024c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024d2:	f004 fcf7 	bl	8006ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40001000 	.word	0x40001000

080024e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024e8:	b672      	cpsid	i
}
 80024ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  BSP_LED_Toggle(LED_RED);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f002 fa7f 	bl	80049f0 <BSP_LED_Toggle>
	  HAL_Delay(1000);
 80024f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f6:	f004 fd05 	bl	8006f04 <HAL_Delay>
	  BSP_LED_Toggle(LED_RED);
 80024fa:	e7f7      	b.n	80024ec <Error_Handler+0x8>

080024fc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <MX_QUADSPI_Init+0x50>)
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <MX_QUADSPI_Init+0x54>)
 8002504:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_QUADSPI_Init+0x50>)
 8002508:	2201      	movs	r2, #1
 800250a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MX_QUADSPI_Init+0x50>)
 800250e:	2210      	movs	r2, #16
 8002510:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_QUADSPI_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_QUADSPI_Init+0x50>)
 800251a:	2201      	movs	r2, #1
 800251c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <MX_QUADSPI_Init+0x50>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_QUADSPI_Init+0x50>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <MX_QUADSPI_Init+0x50>)
 800252c:	2200      	movs	r2, #0
 800252e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_QUADSPI_Init+0x50>)
 8002532:	2200      	movs	r2, #0
 8002534:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_QUADSPI_Init+0x50>)
 8002538:	f008 fd32 	bl	800afa0 <HAL_QSPI_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002542:	f7ff ffcf 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20002618 	.word	0x20002618
 8002550:	a0001000 	.word	0xa0001000

08002554 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08c      	sub	sp, #48	; 0x30
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a4a      	ldr	r2, [pc, #296]	; (800269c <HAL_QSPI_MspInit+0x148>)
 8002572:	4293      	cmp	r3, r2
 8002574:	f040 808e 	bne.w	8002694 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002578:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	4a48      	ldr	r2, [pc, #288]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 800257e:	f043 0302 	orr.w	r3, r3, #2
 8002582:	6393      	str	r3, [r2, #56]	; 0x38
 8002584:	4b46      	ldr	r3, [pc, #280]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	4a42      	ldr	r2, [pc, #264]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 8002596:	f043 0310 	orr.w	r3, r3, #16
 800259a:	6313      	str	r3, [r2, #48]	; 0x30
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a8:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	4a3c      	ldr	r2, [pc, #240]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	6313      	str	r3, [r2, #48]	; 0x30
 80025b4:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4a36      	ldr	r2, [pc, #216]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6313      	str	r3, [r2, #48]	; 0x30
 80025cc:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d8:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	4a30      	ldr	r2, [pc, #192]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	6313      	str	r3, [r2, #48]	; 0x30
 80025e4:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <HAL_QSPI_MspInit+0x14c>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80025f0:	2304      	movs	r3, #4
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002600:	2309      	movs	r3, #9
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 031c 	add.w	r3, r7, #28
 8002608:	4619      	mov	r1, r3
 800260a:	4826      	ldr	r0, [pc, #152]	; (80026a4 <HAL_QSPI_MspInit+0x150>)
 800260c:	f006 ff9c 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002610:	2340      	movs	r3, #64	; 0x40
 8002612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002620:	230a      	movs	r3, #10
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4619      	mov	r1, r3
 800262a:	481f      	ldr	r0, [pc, #124]	; (80026a8 <HAL_QSPI_MspInit+0x154>)
 800262c:	f006 ff8c 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8002630:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002642:	2309      	movs	r3, #9
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	4619      	mov	r1, r3
 800264c:	4817      	ldr	r0, [pc, #92]	; (80026ac <HAL_QSPI_MspInit+0x158>)
 800264e:	f006 ff7b 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002652:	2304      	movs	r3, #4
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002662:	2309      	movs	r3, #9
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	480e      	ldr	r0, [pc, #56]	; (80026a8 <HAL_QSPI_MspInit+0x154>)
 800266e:	f006 ff6b 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8002672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002684:	2309      	movs	r3, #9
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4619      	mov	r1, r3
 800268e:	4808      	ldr	r0, [pc, #32]	; (80026b0 <HAL_QSPI_MspInit+0x15c>)
 8002690:	f006 ff5a 	bl	8009548 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002694:	bf00      	nop
 8002696:	3730      	adds	r7, #48	; 0x30
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	a0001000 	.word	0xa0001000
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020c00 	.word	0x40020c00

080026b4 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <HAL_QSPI_MspDeInit+0x4c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d117      	bne.n	80026f6 <HAL_QSPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <HAL_QSPI_MspDeInit+0x50>)
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <HAL_QSPI_MspDeInit+0x50>)
 80026cc:	f023 0302 	bic.w	r3, r3, #2
 80026d0:	6393      	str	r3, [r2, #56]	; 0x38
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 80026d2:	2104      	movs	r1, #4
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <HAL_QSPI_MspDeInit+0x54>)
 80026d6:	f007 f8e3 	bl	80098a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 80026da:	2144      	movs	r1, #68	; 0x44
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <HAL_QSPI_MspDeInit+0x58>)
 80026de:	f007 f8df 	bl	80098a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, QSPI_D1_Pin|QSPI_D0_Pin);
 80026e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80026e6:	480a      	ldr	r0, [pc, #40]	; (8002710 <HAL_QSPI_MspDeInit+0x5c>)
 80026e8:	f007 f8da 	bl	80098a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_D3_GPIO_Port, QSPI_D3_Pin);
 80026ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026f0:	4808      	ldr	r0, [pc, #32]	; (8002714 <HAL_QSPI_MspDeInit+0x60>)
 80026f2:	f007 f8d5 	bl	80098a0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	a0001000 	.word	0xa0001000
 8002704:	40023800 	.word	0x40023800
 8002708:	40021000 	.word	0x40021000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00

08002718 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <MX_SAI1_Init+0xa8>)
 800271e:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <MX_SAI1_Init+0xac>)
 8002720:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <MX_SAI1_Init+0xa8>)
 800272a:	2200      	movs	r2, #0
 800272c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002730:	2240      	movs	r2, #64	; 0x40
 8002732:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002736:	2200      	movs	r2, #0
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <MX_SAI1_Init+0xa8>)
 800273c:	2200      	movs	r2, #0
 800273e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002740:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <MX_SAI1_Init+0xa8>)
 800274e:	2200      	movs	r2, #0
 8002750:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <MX_SAI1_Init+0xa8>)
 800275a:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <MX_SAI1_Init+0xb0>)
 800275c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002766:	2200      	movs	r2, #0
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_SAI1_Init+0xa8>)
 800276c:	2200      	movs	r2, #0
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002772:	2200      	movs	r2, #0
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002778:	2208      	movs	r2, #8
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <MX_SAI1_Init+0xa8>)
 800277e:	2201      	movs	r2, #1
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002784:	2200      	movs	r2, #0
 8002786:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <MX_SAI1_Init+0xa8>)
 800278a:	2200      	movs	r2, #0
 800278c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002790:	2200      	movs	r2, #0
 8002792:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <MX_SAI1_Init+0xa8>)
 8002796:	2200      	movs	r2, #0
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <MX_SAI1_Init+0xa8>)
 800279c:	2200      	movs	r2, #0
 800279e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <MX_SAI1_Init+0xa8>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_SAI1_Init+0xa8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80027ac:	4804      	ldr	r0, [pc, #16]	; (80027c0 <MX_SAI1_Init+0xa8>)
 80027ae:	f00a fc49 	bl	800d044 <HAL_SAI_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80027b8:	f7ff fe94 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20002664 	.word	0x20002664
 80027c4:	40015804 	.word	0x40015804
 80027c8:	0002ee00 	.word	0x0002ee00

080027cc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_SAI_MspInit+0x84>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d134      	bne.n	8002848 <HAL_SAI_MspInit+0x7c>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_SAI_MspInit+0x88>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10b      	bne.n	80027fe <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_SAI_MspInit+0x8c>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <HAL_SAI_MspInit+0x8c>)
 80027ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f0:	6453      	str	r3, [r2, #68]	; 0x44
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_SAI_MspInit+0x8c>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_SAI_MspInit+0x88>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a13      	ldr	r2, [pc, #76]	; (8002854 <HAL_SAI_MspInit+0x88>)
 8002806:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8002808:	2378      	movs	r3, #120	; 0x78
 800280a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002818:	2306      	movs	r3, #6
 800281a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	4619      	mov	r1, r3
 8002822:	480e      	ldr	r0, [pc, #56]	; (800285c <HAL_SAI_MspInit+0x90>)
 8002824:	f006 fe90 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002838:	2306      	movs	r3, #6
 800283a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	4619      	mov	r1, r3
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <HAL_SAI_MspInit+0x94>)
 8002844:	f006 fe80 	bl	8009548 <HAL_GPIO_Init>

    }
}
 8002848:	bf00      	nop
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40015804 	.word	0x40015804
 8002854:	200026e8 	.word	0x200026e8
 8002858:	40023800 	.word	0x40023800
 800285c:	40021000 	.word	0x40021000
 8002860:	40021800 	.word	0x40021800

08002864 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_SAI_MspDeInit+0x48>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d116      	bne.n	80028a4 <HAL_SAI_MspDeInit+0x40>
    {
    SAI1_client --;
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_SAI_MspDeInit+0x4c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3b01      	subs	r3, #1
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <HAL_SAI_MspDeInit+0x4c>)
 800287e:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_SAI_MspDeInit+0x4c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_SAI_MspDeInit+0x50>)
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_SAI_MspDeInit+0x50>)
 800288e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002892:	6453      	str	r3, [r2, #68]	; 0x44
    PE3     ------> SAI1_SD_B
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    HAL_GPIO_DeInit(GPIOE, SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin);
 8002894:	2178      	movs	r1, #120	; 0x78
 8002896:	4808      	ldr	r0, [pc, #32]	; (80028b8 <HAL_SAI_MspDeInit+0x54>)
 8002898:	f007 f802 	bl	80098a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SAI1_MCLKA_GPIO_Port, SAI1_MCLKA_Pin);
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	4807      	ldr	r0, [pc, #28]	; (80028bc <HAL_SAI_MspDeInit+0x58>)
 80028a0:	f006 fffe 	bl	80098a0 <HAL_GPIO_DeInit>

    }
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40015804 	.word	0x40015804
 80028b0:	200026e8 	.word	0x200026e8
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40021800 	.word	0x40021800

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_MspInit+0x5c>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_MspInit+0x5c>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_MspInit+0x5c>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_MspInit+0x5c>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a0e      	ldr	r2, [pc, #56]	; (800291c <HAL_MspInit+0x5c>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_MspInit+0x5c>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	210f      	movs	r1, #15
 80028fa:	f06f 0001 	mvn.w	r0, #1
 80028fe:	f004 fc01 	bl	8007104 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2105      	movs	r1, #5
 8002906:	2005      	movs	r0, #5
 8002908:	f004 fbfc 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800290c:	2005      	movs	r0, #5
 800290e:	f004 fc15 	bl	800713c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08e      	sub	sp, #56	; 0x38
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002930:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <HAL_InitTick+0xe0>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <HAL_InitTick+0xe0>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6413      	str	r3, [r2, #64]	; 0x40
 800293c:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_InitTick+0xe0>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002948:	f107 0210 	add.w	r2, r7, #16
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f009 fc8a 	bl	800c26c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002962:	f009 fc5b 	bl	800c21c <HAL_RCC_GetPCLK1Freq>
 8002966:	6378      	str	r0, [r7, #52]	; 0x34
 8002968:	e004      	b.n	8002974 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800296a:	f009 fc57 	bl	800c21c <HAL_RCC_GetPCLK1Freq>
 800296e:	4603      	mov	r3, r0
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002976:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <HAL_InitTick+0xe4>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	0c9b      	lsrs	r3, r3, #18
 800297e:	3b01      	subs	r3, #1
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_InitTick+0xe8>)
 8002984:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <HAL_InitTick+0xec>)
 8002986:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <HAL_InitTick+0xe8>)
 800298a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800298e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002990:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_InitTick+0xe8>)
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002996:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_InitTick+0xe8>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_InitTick+0xe8>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a2:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_InitTick+0xe8>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80029a8:	4817      	ldr	r0, [pc, #92]	; (8002a08 <HAL_InitTick+0xe8>)
 80029aa:	f00a fff9 	bl	800d9a0 <HAL_TIM_Base_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80029b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11b      	bne.n	80029f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80029bc:	4812      	ldr	r0, [pc, #72]	; (8002a08 <HAL_InitTick+0xe8>)
 80029be:	f00b f851 	bl	800da64 <HAL_TIM_Base_Start_IT>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80029c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029d0:	2036      	movs	r0, #54	; 0x36
 80029d2:	f004 fbb3 	bl	800713c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d808      	bhi.n	80029ee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	2036      	movs	r0, #54	; 0x36
 80029e2:	f004 fb8f 	bl	8007104 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_InitTick+0xf0>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	e002      	b.n	80029f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80029f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3738      	adds	r7, #56	; 0x38
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	431bde83 	.word	0x431bde83
 8002a08:	200026ec 	.word	0x200026ec
 8002a0c:	40001000 	.word	0x40001000
 8002a10:	20000098 	.word	0x20000098

08002a14 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <TIM6_DAC_IRQHandler+0x10>)
 8002a2a:	f00b f893 	bl	800db54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200026ec 	.word	0x200026ec

08002a38 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <LTDC_IRQHandler+0x10>)
 8002a3e:	f007 ff01 	bl	800a844 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200004ec 	.word	0x200004ec

08002a4c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <DMA2D_IRQHandler+0x10>)
 8002a52:	f005 f9df 	bl	8007e14 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000190 	.word	0x20000190

08002a60 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <DSI_IRQHandler+0x10>)
 8002a66:	f005 feb3 	bl	80087d0 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200001e8 	.word	0x200001e8

08002a74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e00a      	b.n	8002a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a86:	f3af 8000 	nop.w
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	60ba      	str	r2, [r7, #8]
 8002a92:	b2ca      	uxtb	r2, r1
 8002a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	dbf0      	blt.n	8002a86 <_read+0x12>
  }

  return len;
 8002aa4:	687b      	ldr	r3, [r7, #4]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e009      	b.n	8002ad4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	60ba      	str	r2, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fa19 	bl	8001f00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	dbf1      	blt.n	8002ac0 <_write+0x12>
  }
  return len;
 8002adc:	687b      	ldr	r3, [r7, #4]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_close>:

int _close(int file)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b0e:	605a      	str	r2, [r3, #4]
  return 0;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <_isatty>:

int _isatty(int file)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b26:	2301      	movs	r3, #1
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <_sbrk+0x5c>)
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <_sbrk+0x60>)
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <_sbrk+0x64>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <_sbrk+0x68>)
 8002b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <_sbrk+0x64>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d207      	bcs.n	8002b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b80:	f00f fa0e 	bl	8011fa0 <__errno>
 8002b84:	4603      	mov	r3, r0
 8002b86:	220c      	movs	r2, #12
 8002b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b8e:	e009      	b.n	8002ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <_sbrk+0x64>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <_sbrk+0x64>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <_sbrk+0x64>)
 8002ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20080000 	.word	0x20080000
 8002bb0:	00000400 	.word	0x00000400
 8002bb4:	20002738 	.word	0x20002738
 8002bb8:	20006ba8 	.word	0x20006ba8

08002bbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <SystemInit+0x20>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <SystemInit+0x20>)
 8002bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <MX_USART1_UART_Init+0x5c>)
 8002be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c06:	220c      	movs	r2, #12
 8002c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c24:	f00b f99c 	bl	800df60 <HAL_UART_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c2e:	f7ff fc59 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000273c 	.word	0x2000273c
 8002c3c:	40011000 	.word	0x40011000

08002c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b0ae      	sub	sp, #184	; 0xb8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2290      	movs	r2, #144	; 0x90
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f00f f93f 	bl	8011ee4 <memset>
  if(uartHandle->Instance==USART1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <HAL_UART_MspInit+0xdc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d151      	bne.n	8002d14 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c70:	2340      	movs	r3, #64	; 0x40
 8002c72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c74:	2300      	movs	r3, #0
 8002c76:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f009 fb27 	bl	800c2d0 <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c88:	f7ff fc2c 	bl	80024e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_UART_MspInit+0xe0>)
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <HAL_UART_MspInit+0xe0>)
 8002c92:	f043 0310 	orr.w	r3, r3, #16
 8002c96:	6453      	str	r3, [r2, #68]	; 0x44
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_UART_MspInit+0xe0>)
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_UART_MspInit+0xe0>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_UART_MspInit+0xe0>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_UART_MspInit+0xe0>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002cdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4810      	ldr	r0, [pc, #64]	; (8002d24 <HAL_UART_MspInit+0xe4>)
 8002ce4:	f006 fc30 	bl	8009548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d02:	2307      	movs	r3, #7
 8002d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4805      	ldr	r0, [pc, #20]	; (8002d24 <HAL_UART_MspInit+0xe4>)
 8002d10:	f006 fc1a 	bl	8009548 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d14:	bf00      	nop
 8002d16:	37b8      	adds	r7, #184	; 0xb8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40020000 	.word	0x40020000

08002d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d2c:	480d      	ldr	r0, [pc, #52]	; (8002d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d2e:	490e      	ldr	r1, [pc, #56]	; (8002d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d34:	e002      	b.n	8002d3c <LoopCopyDataInit>

08002d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3a:	3304      	adds	r3, #4

08002d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d40:	d3f9      	bcc.n	8002d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d44:	4c0b      	ldr	r4, [pc, #44]	; (8002d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d48:	e001      	b.n	8002d4e <LoopFillZerobss>

08002d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d4c:	3204      	adds	r2, #4

08002d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d50:	d3fb      	bcc.n	8002d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d52:	f7ff ff33 	bl	8002bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d56:	f00f f929 	bl	8011fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d5a:	f7fe ff55 	bl	8001c08 <main>
  bx  lr    
 8002d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d68:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002d6c:	08014bb0 	.word	0x08014bb0
  ldr r2, =_sbss
 8002d70:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002d74:	20006ba8 	.word	0x20006ba8

08002d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d78:	e7fe      	b.n	8002d78 <ADC_IRQHandler>
	...

08002d7c <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f90d 	bl	8002fa8 <ft6x06_GetInstance>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2bff      	cmp	r3, #255	; 0xff
 8002d96:	d10e      	bne.n	8002db6 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f000 f905 	bl	8002fa8 <ft6x06_GetInstance>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8002da2:	7bbb      	ldrb	r3, [r7, #14]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d806      	bhi.n	8002db6 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8002da8:	7bbb      	ldrb	r3, [r7, #14]
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	b2d1      	uxtb	r1, r2
 8002dae:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <ft6x06_Init+0x44>)
 8002db0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8002db2:	f002 f825 	bl	8004e00 <TS_IO_Init>
    }
  }
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200027c4 	.word	0x200027c4

08002dc4 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8002de4:	f002 f80c 	bl	8004e00 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	21a8      	movs	r1, #168	; 0xa8
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 f82a 	bl	8004e48 <TS_IO_Read>
 8002df4:	4603      	mov	r3, r0
 8002df6:	b29b      	uxth	r3, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f8bc 	bl	8002f8a <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 f88d 	bl	8002f34 <ft6x06_TS_DisableIT>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2102      	movs	r1, #2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 f805 	bl	8004e48 <TS_IO_Read>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <ft6x06_TS_DetectTouch+0x50>)
 8002e60:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <ft6x06_TS_DetectTouch+0x50>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	b2db      	uxtb	r3, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	200027c8 	.word	0x200027c8

08002e78 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002e8a:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <ft6x06_TS_GetXY+0x90>)
 8002e8c:	789a      	ldrb	r2, [r3, #2]
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <ft6x06_TS_GetXY+0x90>)
 8002e90:	785b      	ldrb	r3, [r3, #1]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d234      	bcs.n	8002f00 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8002e96:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <ft6x06_TS_GetXY+0x90>)
 8002e98:	789b      	ldrb	r3, [r3, #2]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <ft6x06_TS_GetXY+0x2c>
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d003      	beq.n	8002eaa <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8002ea2:	e005      	b.n	8002eb0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ea8:	e002      	b.n	8002eb0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8002eaa:	2309      	movs	r3, #9
 8002eac:	75fb      	strb	r3, [r7, #23]
      break;
 8002eae:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8002eb0:	89fb      	ldrh	r3, [r7, #14]
 8002eb2:	b2d8      	uxtb	r0, r3
 8002eb4:	f107 0210 	add.w	r2, r7, #16
 8002eb8:	7df9      	ldrb	r1, [r7, #23]
 8002eba:	2304      	movs	r3, #4
 8002ebc:	f001 ffe2 	bl	8004e84 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8002ec0:	7c3b      	ldrb	r3, [r7, #16]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002eca:	b21a      	sxth	r2, r3
 8002ecc:	7c7b      	ldrb	r3, [r7, #17]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8002eda:	7cbb      	ldrb	r3, [r7, #18]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	b21b      	sxth	r3, r3
 8002ee0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ee4:	b21a      	sxth	r2, r3
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	4313      	orrs	r3, r2
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <ft6x06_TS_GetXY+0x90>)
 8002ef6:	789b      	ldrb	r3, [r3, #2]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <ft6x06_TS_GetXY+0x90>)
 8002efe:	709a      	strb	r2, [r3, #2]
  }
}
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200027c8 	.word	0x200027c8

08002f0c <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	21a4      	movs	r1, #164	; 0xa4
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 ff74 	bl	8004e14 <TS_IO_Write>
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	21a4      	movs	r1, #164	; 0xa4
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 ff60 	bl	8004e14 <TS_IO_Write>
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8002f98:	68fb      	ldr	r3, [r7, #12]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
 8002fba:	e00b      	b.n	8002fd4 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <ft6x06_GetInstance+0x40>)
 8002fc0:	5cd3      	ldrb	r3, [r2, r3]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d101      	bne.n	8002fce <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	e006      	b.n	8002fdc <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d9f0      	bls.n	8002fbc <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002fda:	23ff      	movs	r3, #255	; 0xff
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	200027c4 	.word	0x200027c4

08002fec <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b0b2      	sub	sp, #200	; 0xc8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 8002ff6:	2078      	movs	r0, #120	; 0x78
 8002ff8:	f001 ff62 	bl	8004ec0 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8002ffc:	4ac8      	ldr	r2, [pc, #800]	; (8003320 <NT35510_Init+0x334>)
 8002ffe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003006:	6018      	str	r0, [r3, #0]
 8003008:	3304      	adds	r3, #4
 800300a:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 800300c:	4bc5      	ldr	r3, [pc, #788]	; (8003324 <NT35510_Init+0x338>)
 800300e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8003012:	4bc5      	ldr	r3, [pc, #788]	; (8003328 <NT35510_Init+0x33c>)
 8003014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8003018:	4bc4      	ldr	r3, [pc, #784]	; (800332c <NT35510_Init+0x340>)
 800301a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 800301e:	4bc4      	ldr	r3, [pc, #784]	; (8003330 <NT35510_Init+0x344>)
 8003020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8003024:	4bc3      	ldr	r3, [pc, #780]	; (8003334 <NT35510_Init+0x348>)
 8003026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800302a:	4bc3      	ldr	r3, [pc, #780]	; (8003338 <NT35510_Init+0x34c>)
 800302c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8003030:	f240 13bf 	movw	r3, #447	; 0x1bf
 8003034:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8003038:	4bc0      	ldr	r3, [pc, #768]	; (800333c <NT35510_Init+0x350>)
 800303a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800303e:	4bc0      	ldr	r3, [pc, #768]	; (8003340 <NT35510_Init+0x354>)
 8003040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 8003044:	4bbf      	ldr	r3, [pc, #764]	; (8003344 <NT35510_Init+0x358>)
 8003046:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 800304a:	4bbf      	ldr	r3, [pc, #764]	; (8003348 <NT35510_Init+0x35c>)
 800304c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8003050:	4bbe      	ldr	r3, [pc, #760]	; (800334c <NT35510_Init+0x360>)
 8003052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 8003056:	4bbe      	ldr	r3, [pc, #760]	; (8003350 <NT35510_Init+0x364>)
 8003058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 800305c:	4abd      	ldr	r2, [pc, #756]	; (8003354 <NT35510_Init+0x368>)
 800305e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	4611      	mov	r1, r2
 8003066:	8019      	strh	r1, [r3, #0]
 8003068:	3302      	adds	r3, #2
 800306a:	0c12      	lsrs	r2, r2, #16
 800306c:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 800306e:	4aba      	ldr	r2, [pc, #744]	; (8003358 <NT35510_Init+0x36c>)
 8003070:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003078:	6018      	str	r0, [r3, #0]
 800307a:	3304      	adds	r3, #4
 800307c:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 800307e:	4ab7      	ldr	r2, [pc, #732]	; (800335c <NT35510_Init+0x370>)
 8003080:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	4611      	mov	r1, r2
 8003088:	8019      	strh	r1, [r3, #0]
 800308a:	3302      	adds	r3, #2
 800308c:	0c12      	lsrs	r2, r2, #16
 800308e:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8003090:	f240 33b6 	movw	r3, #950	; 0x3b6
 8003094:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8003098:	f245 13b5 	movw	r3, #20917	; 0x51b5
 800309c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 80030a0:	4aaf      	ldr	r2, [pc, #700]	; (8003360 <NT35510_Init+0x374>)
 80030a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	4611      	mov	r1, r2
 80030aa:	8019      	strh	r1, [r3, #0]
 80030ac:	3302      	adds	r3, #2
 80030ae:	0c12      	lsrs	r2, r2, #16
 80030b0:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 80030b2:	4aac      	ldr	r2, [pc, #688]	; (8003364 <NT35510_Init+0x378>)
 80030b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030bc:	6018      	str	r0, [r3, #0]
 80030be:	3304      	adds	r3, #4
 80030c0:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 80030c2:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 80030c6:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 80030c8:	4ba7      	ldr	r3, [pc, #668]	; (8003368 <NT35510_Init+0x37c>)
 80030ca:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 80030cc:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80030d0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80030d4:	2336      	movs	r3, #54	; 0x36
 80030d6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80030da:	4aa4      	ldr	r2, [pc, #656]	; (800336c <NT35510_Init+0x380>)
 80030dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030e4:	6018      	str	r0, [r3, #0]
 80030e6:	3304      	adds	r3, #4
 80030e8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80030ea:	4aa1      	ldr	r2, [pc, #644]	; (8003370 <NT35510_Init+0x384>)
 80030ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030f4:	6018      	str	r0, [r3, #0]
 80030f6:	3304      	adds	r3, #4
 80030f8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80030fa:	f246 0336 	movw	r3, #24630	; 0x6036
 80030fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8003102:	4a9c      	ldr	r2, [pc, #624]	; (8003374 <NT35510_Init+0x388>)
 8003104:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800310c:	6018      	str	r0, [r3, #0]
 800310e:	3304      	adds	r3, #4
 8003110:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8003112:	4a99      	ldr	r2, [pc, #612]	; (8003378 <NT35510_Init+0x38c>)
 8003114:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800311c:	6018      	str	r0, [r3, #0]
 800311e:	3304      	adds	r3, #4
 8003120:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8003122:	2335      	movs	r3, #53	; 0x35
 8003124:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8003126:	2311      	movs	r3, #17
 8003128:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 800312a:	2329      	movs	r3, #41	; 0x29
 800312c:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 800312e:	f647 7351 	movw	r3, #32593	; 0x7f51
 8003132:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8003134:	f642 4353 	movw	r3, #11347	; 0x2c53
 8003138:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 800313a:	f240 2355 	movw	r3, #597	; 0x255
 800313e:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8003140:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8003144:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8003146:	232c      	movs	r3, #44	; 0x2c
 8003148:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 800314a:	f245 533a 	movw	r3, #21818	; 0x553a
 800314e:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8003150:	f247 733a 	movw	r3, #30522	; 0x773a
 8003154:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8003156:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800315a:	4619      	mov	r1, r3
 800315c:	2005      	movs	r0, #5
 800315e:	f002 fc73 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8003162:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003166:	4619      	mov	r1, r3
 8003168:	2003      	movs	r0, #3
 800316a:	f002 fc6d 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 800316e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003172:	4619      	mov	r1, r3
 8003174:	2003      	movs	r0, #3
 8003176:	f002 fc67 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 800317a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800317e:	4619      	mov	r1, r3
 8003180:	2003      	movs	r0, #3
 8003182:	f002 fc61 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8003186:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800318a:	4619      	mov	r1, r3
 800318c:	2003      	movs	r0, #3
 800318e:	f002 fc5b 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8003192:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003196:	4619      	mov	r1, r3
 8003198:	2003      	movs	r0, #3
 800319a:	f002 fc55 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 800319e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80031a2:	4619      	mov	r1, r3
 80031a4:	2003      	movs	r0, #3
 80031a6:	f002 fc4f 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 80031aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80031ae:	4619      	mov	r1, r3
 80031b0:	2001      	movs	r0, #1
 80031b2:	f002 fc49 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 80031b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80031ba:	4619      	mov	r1, r3
 80031bc:	2003      	movs	r0, #3
 80031be:	f002 fc43 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 80031c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031c6:	4619      	mov	r1, r3
 80031c8:	2003      	movs	r0, #3
 80031ca:	f002 fc3d 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 80031ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031d2:	4619      	mov	r1, r3
 80031d4:	2003      	movs	r0, #3
 80031d6:	f002 fc37 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 80031da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031de:	4619      	mov	r1, r3
 80031e0:	2003      	movs	r0, #3
 80031e2:	f002 fc31 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 80031e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031ea:	4619      	mov	r1, r3
 80031ec:	2003      	movs	r0, #3
 80031ee:	f002 fc2b 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 80031f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80031f6:	4619      	mov	r1, r3
 80031f8:	2003      	movs	r0, #3
 80031fa:	f002 fc25 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 80031fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003202:	4619      	mov	r1, r3
 8003204:	2002      	movs	r0, #2
 8003206:	f002 fc1f 	bl	8005a48 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 800320a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800320e:	4619      	mov	r1, r3
 8003210:	2005      	movs	r0, #5
 8003212:	f002 fc19 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 8003216:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800321a:	4619      	mov	r1, r3
 800321c:	2002      	movs	r0, #2
 800321e:	f002 fc13 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 8003222:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003226:	4619      	mov	r1, r3
 8003228:	2001      	movs	r0, #1
 800322a:	f002 fc0d 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 800322e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003232:	4619      	mov	r1, r3
 8003234:	2001      	movs	r0, #1
 8003236:	f002 fc07 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 800323a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800323e:	4619      	mov	r1, r3
 8003240:	2002      	movs	r0, #2
 8003242:	f002 fc01 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 8003246:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800324a:	4619      	mov	r1, r3
 800324c:	2004      	movs	r0, #4
 800324e:	f002 fbfb 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8003252:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003256:	4619      	mov	r1, r3
 8003258:	2003      	movs	r0, #3
 800325a:	f002 fbf5 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 800325e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003262:	4619      	mov	r1, r3
 8003264:	2003      	movs	r0, #3
 8003266:	f002 fbef 	bl	8005a48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 800326a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800326e:	4619      	mov	r1, r3
 8003270:	2001      	movs	r0, #1
 8003272:	f002 fbe9 	bl	8005a48 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8003276:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800327a:	4619      	mov	r1, r3
 800327c:	2000      	movs	r0, #0
 800327e:	f002 fbe3 	bl	8005a48 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8003282:	f107 030c 	add.w	r3, r7, #12
 8003286:	4619      	mov	r1, r3
 8003288:	2000      	movs	r0, #0
 800328a:	f002 fbdd 	bl	8005a48 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 800328e:	20c8      	movs	r0, #200	; 0xc8
 8003290:	f001 fe16 	bl	8004ec0 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d112      	bne.n	80032c0 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 800329a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800329e:	4619      	mov	r1, r3
 80032a0:	2001      	movs	r0, #1
 80032a2:	f002 fbd1 	bl	8005a48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 80032a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032aa:	4619      	mov	r1, r3
 80032ac:	2004      	movs	r0, #4
 80032ae:	f002 fbcb 	bl	8005a48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 80032b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032b6:	4619      	mov	r1, r3
 80032b8:	2004      	movs	r0, #4
 80032ba:	f002 fbc5 	bl	8005a48 <DSI_IO_WriteCmd>
 80032be:	e011      	b.n	80032e4 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 80032c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032c4:	4619      	mov	r1, r3
 80032c6:	2001      	movs	r0, #1
 80032c8:	f002 fbbe 	bl	8005a48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 80032cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032d0:	4619      	mov	r1, r3
 80032d2:	2004      	movs	r0, #4
 80032d4:	f002 fbb8 	bl	8005a48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 80032d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032dc:	4619      	mov	r1, r3
 80032de:	2004      	movs	r0, #4
 80032e0:	f002 fbb2 	bl	8005a48 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 80032e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032e8:	4619      	mov	r1, r3
 80032ea:	2000      	movs	r0, #0
 80032ec:	f002 fbac 	bl	8005a48 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 80032f0:	2078      	movs	r0, #120	; 0x78
 80032f2:	f001 fde5 	bl	8004ec0 <NT35510_IO_Delay>

  switch(ColorCoding)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <NT35510_Init+0x324>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d13c      	bne.n	800337c <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	4619      	mov	r1, r3
 8003308:	2001      	movs	r0, #1
 800330a:	f002 fb9d 	bl	8005a48 <DSI_IO_WriteCmd>
      break;
 800330e:	e03c      	b.n	800338a <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8003310:	f107 030c 	add.w	r3, r7, #12
 8003314:	4619      	mov	r1, r3
 8003316:	2001      	movs	r0, #1
 8003318:	f002 fb96 	bl	8005a48 <DSI_IO_WriteCmd>
      break;
 800331c:	e035      	b.n	800338a <NT35510_Init+0x39e>
 800331e:	bf00      	nop
 8003320:	08012e68 	.word	0x08012e68
 8003324:	b0030303 	.word	0xb0030303
 8003328:	b6464646 	.word	0xb6464646
 800332c:	b1030303 	.word	0xb1030303
 8003330:	b7363636 	.word	0xb7363636
 8003334:	b2020000 	.word	0xb2020000
 8003338:	b8262626 	.word	0xb8262626
 800333c:	b3090909 	.word	0xb3090909
 8003340:	b9363636 	.word	0xb9363636
 8003344:	b5080808 	.word	0xb5080808
 8003348:	ba262626 	.word	0xba262626
 800334c:	bc008000 	.word	0xbc008000
 8003350:	bd008000 	.word	0xbd008000
 8003354:	08012e70 	.word	0x08012e70
 8003358:	08012e74 	.word	0x08012e74
 800335c:	08012e7c 	.word	0x08012e7c
 8003360:	08012e80 	.word	0x08012e80
 8003364:	08012e84 	.word	0x08012e84
 8003368:	cc000003 	.word	0xcc000003
 800336c:	08012e8c 	.word	0x08012e8c
 8003370:	08012e94 	.word	0x08012e94
 8003374:	08012e9c 	.word	0x08012e9c
 8003378:	08012ea4 	.word	0x08012ea4
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	4619      	mov	r1, r3
 8003382:	2001      	movs	r0, #1
 8003384:	f002 fb60 	bl	8005a48 <DSI_IO_WriteCmd>
      break;
 8003388:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800338a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338e:	4619      	mov	r1, r3
 8003390:	2001      	movs	r0, #1
 8003392:	f002 fb59 	bl	8005a48 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8003396:	f107 0320 	add.w	r3, r7, #32
 800339a:	4619      	mov	r1, r3
 800339c:	2001      	movs	r0, #1
 800339e:	f002 fb53 	bl	8005a48 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	2001      	movs	r0, #1
 80033aa:	f002 fb4d 	bl	8005a48 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 80033ae:	f107 0318 	add.w	r3, r7, #24
 80033b2:	4619      	mov	r1, r3
 80033b4:	2001      	movs	r0, #1
 80033b6:	f002 fb47 	bl	8005a48 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 80033ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033be:	4619      	mov	r1, r3
 80033c0:	2000      	movs	r0, #0
 80033c2:	f002 fb41 	bl	8005a48 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 80033c6:	f107 0314 	add.w	r3, r7, #20
 80033ca:	4619      	mov	r1, r3
 80033cc:	2000      	movs	r0, #0
 80033ce:	f002 fb3b 	bl	8005a48 <DSI_IO_WriteCmd>

  return 0;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	37c8      	adds	r7, #200	; 0xc8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	4603      	mov	r3, r0
 80033e6:	81fb      	strh	r3, [r7, #14]
 80033e8:	460b      	mov	r3, r1
 80033ea:	81bb      	strh	r3, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80033f4:	89bb      	ldrh	r3, [r7, #12]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80033fa:	89bb      	ldrh	r3, [r7, #12]
 80033fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003400:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003406:	f001 fc87 	bl	8004d18 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800340a:	89fb      	ldrh	r3, [r7, #14]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2203      	movs	r2, #3
 8003410:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fa89 	bl	800492c <CODEC_IO_Write>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8003424:	89fb      	ldrh	r3, [r7, #14]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2200      	movs	r2, #0
 800342a:	f640 0117 	movw	r1, #2071	; 0x817
 800342e:	4618      	mov	r0, r3
 8003430:	f001 fa7c 	bl	800492c <CODEC_IO_Write>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800343e:	89fb      	ldrh	r3, [r7, #14]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2200      	movs	r2, #0
 8003444:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003448:	4618      	mov	r0, r3
 800344a:	f001 fa6f 	bl	800492c <CODEC_IO_Write>
 800344e:	4603      	mov	r3, r0
 8003450:	461a      	mov	r2, r3
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8003458:	89fb      	ldrh	r3, [r7, #14]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	226c      	movs	r2, #108	; 0x6c
 800345e:	2139      	movs	r1, #57	; 0x39
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fa63 	bl	800492c <CODEC_IO_Write>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8003470:	8afb      	ldrh	r3, [r7, #22]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00c      	beq.n	8003490 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8003476:	89fb      	ldrh	r3, [r7, #14]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2213      	movs	r2, #19
 800347c:	2101      	movs	r1, #1
 800347e:	4618      	mov	r0, r3
 8003480:	f001 fa54 	bl	800492c <CODEC_IO_Write>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e00b      	b.n	80034a8 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8003490:	89fb      	ldrh	r3, [r7, #14]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2203      	movs	r2, #3
 8003496:	2101      	movs	r1, #1
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fa47 	bl	800492c <CODEC_IO_Write>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80034a8:	2032      	movs	r0, #50	; 0x32
 80034aa:	f001 fc9d 	bl	8004de8 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80034ae:	8b3b      	ldrh	r3, [r7, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 815f 	beq.w	8003774 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80034b6:	4bae      	ldr	r3, [pc, #696]	; (8003770 <wm8994_Init+0x394>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
    switch (output_device)
 80034bc:	8b3b      	ldrh	r3, [r7, #24]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	f000 808c 	beq.w	80035dc <wm8994_Init+0x200>
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	f300 8111 	bgt.w	80036ec <wm8994_Init+0x310>
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d002      	beq.n	80034d4 <wm8994_Init+0xf8>
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d042      	beq.n	8003558 <wm8994_Init+0x17c>
 80034d2:	e10b      	b.n	80036ec <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80034d4:	89fb      	ldrh	r3, [r7, #14]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f640 420c 	movw	r2, #3084	; 0xc0c
 80034dc:	2105      	movs	r1, #5
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fa24 	bl	800492c <CODEC_IO_Write>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	4413      	add	r3, r2
 80034ec:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80034ee:	89fb      	ldrh	r3, [r7, #14]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2200      	movs	r2, #0
 80034f4:	f240 6101 	movw	r1, #1537	; 0x601
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 fa17 	bl	800492c <CODEC_IO_Write>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	4413      	add	r3, r2
 8003506:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2200      	movs	r2, #0
 800350e:	f240 6102 	movw	r1, #1538	; 0x602
 8003512:	4618      	mov	r0, r3
 8003514:	f001 fa0a 	bl	800492c <CODEC_IO_Write>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2202      	movs	r2, #2
 8003528:	f240 6104 	movw	r1, #1540	; 0x604
 800352c:	4618      	mov	r0, r3
 800352e:	f001 f9fd 	bl	800492c <CODEC_IO_Write>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800353c:	89fb      	ldrh	r3, [r7, #14]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2202      	movs	r2, #2
 8003542:	f240 6105 	movw	r1, #1541	; 0x605
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f9f0 	bl	800492c <CODEC_IO_Write>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	61fb      	str	r3, [r7, #28]
      break;
 8003556:	e110      	b.n	800377a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f240 3203 	movw	r2, #771	; 0x303
 8003560:	2105      	movs	r1, #5
 8003562:	4618      	mov	r0, r3
 8003564:	f001 f9e2 	bl	800492c <CODEC_IO_Write>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003572:	89fb      	ldrh	r3, [r7, #14]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2201      	movs	r2, #1
 8003578:	f240 6101 	movw	r1, #1537	; 0x601
 800357c:	4618      	mov	r0, r3
 800357e:	f001 f9d5 	bl	800492c <CODEC_IO_Write>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800358c:	89fb      	ldrh	r3, [r7, #14]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2201      	movs	r2, #1
 8003592:	f240 6102 	movw	r1, #1538	; 0x602
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f9c8 	bl	800492c <CODEC_IO_Write>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80035a6:	89fb      	ldrh	r3, [r7, #14]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2200      	movs	r2, #0
 80035ac:	f240 6104 	movw	r1, #1540	; 0x604
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 f9bb 	bl	800492c <CODEC_IO_Write>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80035c0:	89fb      	ldrh	r3, [r7, #14]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2200      	movs	r2, #0
 80035c6:	f240 6105 	movw	r1, #1541	; 0x605
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 f9ae 	bl	800492c <CODEC_IO_Write>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	61fb      	str	r3, [r7, #28]
      break;
 80035da:	e0ce      	b.n	800377a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80035dc:	8afb      	ldrh	r3, [r7, #22]
 80035de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e2:	d141      	bne.n	8003668 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80035e4:	89fb      	ldrh	r3, [r7, #14]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80035ec:	2105      	movs	r1, #5
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 f99c 	bl	800492c <CODEC_IO_Write>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4413      	add	r3, r2
 80035fc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80035fe:	89fb      	ldrh	r3, [r7, #14]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2203      	movs	r2, #3
 8003604:	f240 6101 	movw	r1, #1537	; 0x601
 8003608:	4618      	mov	r0, r3
 800360a:	f001 f98f 	bl	800492c <CODEC_IO_Write>
 800360e:	4603      	mov	r3, r0
 8003610:	461a      	mov	r2, r3
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8003618:	89fb      	ldrh	r3, [r7, #14]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2203      	movs	r2, #3
 800361e:	f240 6102 	movw	r1, #1538	; 0x602
 8003622:	4618      	mov	r0, r3
 8003624:	f001 f982 	bl	800492c <CODEC_IO_Write>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2203      	movs	r2, #3
 8003638:	f240 6104 	movw	r1, #1540	; 0x604
 800363c:	4618      	mov	r0, r3
 800363e:	f001 f975 	bl	800492c <CODEC_IO_Write>
 8003642:	4603      	mov	r3, r0
 8003644:	461a      	mov	r2, r3
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800364c:	89fb      	ldrh	r3, [r7, #14]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2203      	movs	r2, #3
 8003652:	f240 6105 	movw	r1, #1541	; 0x605
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f968 	bl	800492c <CODEC_IO_Write>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8003666:	e088      	b.n	800377a <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003668:	89fb      	ldrh	r3, [r7, #14]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003670:	2105      	movs	r1, #5
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f95a 	bl	800492c <CODEC_IO_Write>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003682:	89fb      	ldrh	r3, [r7, #14]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2201      	movs	r2, #1
 8003688:	f240 6101 	movw	r1, #1537	; 0x601
 800368c:	4618      	mov	r0, r3
 800368e:	f001 f94d 	bl	800492c <CODEC_IO_Write>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800369c:	89fb      	ldrh	r3, [r7, #14]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2201      	movs	r2, #1
 80036a2:	f240 6102 	movw	r1, #1538	; 0x602
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 f940 	bl	800492c <CODEC_IO_Write>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80036b6:	89fb      	ldrh	r3, [r7, #14]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2202      	movs	r2, #2
 80036bc:	f240 6104 	movw	r1, #1540	; 0x604
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 f933 	bl	800492c <CODEC_IO_Write>
 80036c6:	4603      	mov	r3, r0
 80036c8:	461a      	mov	r2, r3
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80036d0:	89fb      	ldrh	r3, [r7, #14]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2202      	movs	r2, #2
 80036d6:	f240 6105 	movw	r1, #1541	; 0x605
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 f926 	bl	800492c <CODEC_IO_Write>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	61fb      	str	r3, [r7, #28]
      break;
 80036ea:	e046      	b.n	800377a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80036ec:	89fb      	ldrh	r3, [r7, #14]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f240 3203 	movw	r2, #771	; 0x303
 80036f4:	2105      	movs	r1, #5
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 f918 	bl	800492c <CODEC_IO_Write>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003706:	89fb      	ldrh	r3, [r7, #14]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2201      	movs	r2, #1
 800370c:	f240 6101 	movw	r1, #1537	; 0x601
 8003710:	4618      	mov	r0, r3
 8003712:	f001 f90b 	bl	800492c <CODEC_IO_Write>
 8003716:	4603      	mov	r3, r0
 8003718:	461a      	mov	r2, r3
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003720:	89fb      	ldrh	r3, [r7, #14]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2201      	movs	r2, #1
 8003726:	f240 6102 	movw	r1, #1538	; 0x602
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f8fe 	bl	800492c <CODEC_IO_Write>
 8003730:	4603      	mov	r3, r0
 8003732:	461a      	mov	r2, r3
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800373a:	89fb      	ldrh	r3, [r7, #14]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2200      	movs	r2, #0
 8003740:	f240 6104 	movw	r1, #1540	; 0x604
 8003744:	4618      	mov	r0, r3
 8003746:	f001 f8f1 	bl	800492c <CODEC_IO_Write>
 800374a:	4603      	mov	r3, r0
 800374c:	461a      	mov	r2, r3
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003754:	89fb      	ldrh	r3, [r7, #14]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2200      	movs	r2, #0
 800375a:	f240 6105 	movw	r1, #1541	; 0x605
 800375e:	4618      	mov	r0, r3
 8003760:	f001 f8e4 	bl	800492c <CODEC_IO_Write>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	61fb      	str	r3, [r7, #28]
      break;
 800376e:	e004      	b.n	800377a <wm8994_Init+0x39e>
 8003770:	200027cc 	.word	0x200027cc
    }
  }
  else
  {
    outputEnabled = 0;
 8003774:	4b99      	ldr	r3, [pc, #612]	; (80039dc <wm8994_Init+0x600>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800377a:	8afb      	ldrh	r3, [r7, #22]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 81ab 	beq.w	8003ad8 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8003782:	4b97      	ldr	r3, [pc, #604]	; (80039e0 <wm8994_Init+0x604>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8003788:	8afb      	ldrh	r3, [r7, #22]
 800378a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378e:	f000 8129 	beq.w	80039e4 <wm8994_Init+0x608>
 8003792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003796:	f300 819b 	bgt.w	8003ad0 <wm8994_Init+0x6f4>
 800379a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379e:	d05a      	beq.n	8003856 <wm8994_Init+0x47a>
 80037a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037a4:	f300 8194 	bgt.w	8003ad0 <wm8994_Init+0x6f4>
 80037a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ac:	f000 80c6 	beq.w	800393c <wm8994_Init+0x560>
 80037b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b4:	f040 818c 	bne.w	8003ad0 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80037b8:	89fb      	ldrh	r3, [r7, #14]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80037c0:	2104      	movs	r1, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 f8b2 	bl	800492c <CODEC_IO_Write>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80037d2:	89fb      	ldrh	r3, [r7, #14]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	22db      	movs	r2, #219	; 0xdb
 80037d8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 f8a5 	bl	800492c <CODEC_IO_Write>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80037ec:	89fb      	ldrh	r3, [r7, #14]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 f898 	bl	800492c <CODEC_IO_Write>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8003806:	89fb      	ldrh	r3, [r7, #14]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2202      	movs	r2, #2
 800380c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003810:	4618      	mov	r0, r3
 8003812:	f001 f88b 	bl	800492c <CODEC_IO_Write>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003820:	89fb      	ldrh	r3, [r7, #14]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2202      	movs	r2, #2
 8003826:	f240 6109 	movw	r1, #1545	; 0x609
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f87e 	bl	800492c <CODEC_IO_Write>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800383a:	89fb      	ldrh	r3, [r7, #14]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	220e      	movs	r2, #14
 8003840:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f871 	bl	800492c <CODEC_IO_Write>
 800384a:	4603      	mov	r3, r0
 800384c:	461a      	mov	r2, r3
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	61fb      	str	r3, [r7, #28]
      break;
 8003854:	e143      	b.n	8003ade <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8003856:	89fb      	ldrh	r3, [r7, #14]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2211      	movs	r2, #17
 800385c:	2128      	movs	r1, #40	; 0x28
 800385e:	4618      	mov	r0, r3
 8003860:	f001 f864 	bl	800492c <CODEC_IO_Write>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 800386e:	89fb      	ldrh	r3, [r7, #14]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2220      	movs	r2, #32
 8003874:	2129      	movs	r1, #41	; 0x29
 8003876:	4618      	mov	r0, r3
 8003878:	f001 f858 	bl	800492c <CODEC_IO_Write>
 800387c:	4603      	mov	r3, r0
 800387e:	461a      	mov	r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2220      	movs	r2, #32
 800388c:	212a      	movs	r1, #42	; 0x2a
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f84c 	bl	800492c <CODEC_IO_Write>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	4413      	add	r3, r2
 800389c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800389e:	89fb      	ldrh	r3, [r7, #14]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f240 3203 	movw	r2, #771	; 0x303
 80038a6:	2104      	movs	r1, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 f83f 	bl	800492c <CODEC_IO_Write>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461a      	mov	r2, r3
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	4413      	add	r3, r2
 80038b6:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	22db      	movs	r2, #219	; 0xdb
 80038be:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 f832 	bl	800492c <CODEC_IO_Write>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461a      	mov	r2, r3
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f246 3250 	movw	r2, #25424	; 0x6350
 80038da:	2102      	movs	r1, #2
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 f825 	bl	800492c <CODEC_IO_Write>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80038ec:	89fb      	ldrh	r3, [r7, #14]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2202      	movs	r2, #2
 80038f2:	f240 6106 	movw	r1, #1542	; 0x606
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f818 	bl	800492c <CODEC_IO_Write>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003906:	89fb      	ldrh	r3, [r7, #14]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2202      	movs	r2, #2
 800390c:	f240 6107 	movw	r1, #1543	; 0x607
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f80b 	bl	800492c <CODEC_IO_Write>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003920:	89fb      	ldrh	r3, [r7, #14]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	220d      	movs	r2, #13
 8003926:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fffe 	bl	800492c <CODEC_IO_Write>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	61fb      	str	r3, [r7, #28]
      break;
 800393a:	e0d0      	b.n	8003ade <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800393c:	89fb      	ldrh	r3, [r7, #14]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003944:	2104      	movs	r1, #4
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fff0 	bl	800492c <CODEC_IO_Write>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003956:	89fb      	ldrh	r3, [r7, #14]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	22db      	movs	r2, #219	; 0xdb
 800395c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003960:	4618      	mov	r0, r3
 8003962:	f000 ffe3 	bl	800492c <CODEC_IO_Write>
 8003966:	4603      	mov	r3, r0
 8003968:	461a      	mov	r2, r3
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003970:	89fb      	ldrh	r3, [r7, #14]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f246 3250 	movw	r2, #25424	; 0x6350
 8003978:	2102      	movs	r1, #2
 800397a:	4618      	mov	r0, r3
 800397c:	f000 ffd6 	bl	800492c <CODEC_IO_Write>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800398a:	89fb      	ldrh	r3, [r7, #14]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2202      	movs	r2, #2
 8003990:	f240 6106 	movw	r1, #1542	; 0x606
 8003994:	4618      	mov	r0, r3
 8003996:	f000 ffc9 	bl	800492c <CODEC_IO_Write>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80039a4:	89fb      	ldrh	r3, [r7, #14]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2202      	movs	r2, #2
 80039aa:	f240 6107 	movw	r1, #1543	; 0x607
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 ffbc 	bl	800492c <CODEC_IO_Write>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80039be:	89fb      	ldrh	r3, [r7, #14]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	220d      	movs	r2, #13
 80039c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 ffaf 	bl	800492c <CODEC_IO_Write>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
      break; 
 80039d8:	e081      	b.n	8003ade <wm8994_Init+0x702>
 80039da:	bf00      	nop
 80039dc:	200027cc 	.word	0x200027cc
 80039e0:	200027d0 	.word	0x200027d0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80039e4:	89fb      	ldrh	r3, [r7, #14]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f640 723c 	movw	r2, #3900	; 0xf3c
 80039ec:	2104      	movs	r1, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 ff9c 	bl	800492c <CODEC_IO_Write>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80039fe:	89fb      	ldrh	r3, [r7, #14]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	22db      	movs	r2, #219	; 0xdb
 8003a04:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 ff8f 	bl	800492c <CODEC_IO_Write>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003a18:	89fb      	ldrh	r3, [r7, #14]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	22db      	movs	r2, #219	; 0xdb
 8003a1e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 ff82 	bl	800492c <CODEC_IO_Write>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8003a32:	89fb      	ldrh	r3, [r7, #14]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 ff75 	bl	800492c <CODEC_IO_Write>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003a4c:	89fb      	ldrh	r3, [r7, #14]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2202      	movs	r2, #2
 8003a52:	f240 6106 	movw	r1, #1542	; 0x606
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 ff68 	bl	800492c <CODEC_IO_Write>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003a66:	89fb      	ldrh	r3, [r7, #14]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f240 6107 	movw	r1, #1543	; 0x607
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 ff5b 	bl	800492c <CODEC_IO_Write>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8003a80:	89fb      	ldrh	r3, [r7, #14]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2202      	movs	r2, #2
 8003a86:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 ff4e 	bl	800492c <CODEC_IO_Write>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003a9a:	89fb      	ldrh	r3, [r7, #14]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f240 6109 	movw	r1, #1545	; 0x609
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 ff41 	bl	800492c <CODEC_IO_Write>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003ab4:	89fb      	ldrh	r3, [r7, #14]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	220d      	movs	r2, #13
 8003aba:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 ff34 	bl	800492c <CODEC_IO_Write>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	61fb      	str	r3, [r7, #28]
      break;    
 8003ace:	e006      	b.n	8003ade <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
      break;
 8003ad6:	e002      	b.n	8003ade <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8003ad8:	4bb1      	ldr	r3, [pc, #708]	; (8003da0 <wm8994_Init+0x9c4>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4ab0      	ldr	r2, [pc, #704]	; (8003da4 <wm8994_Init+0x9c8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d079      	beq.n	8003bda <wm8994_Init+0x7fe>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4aae      	ldr	r2, [pc, #696]	; (8003da4 <wm8994_Init+0x9c8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f200 80ad 	bhi.w	8003c4a <wm8994_Init+0x86e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d061      	beq.n	8003bbe <wm8994_Init+0x7e2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003b00:	4293      	cmp	r3, r2
 8003b02:	f200 80a2 	bhi.w	8003c4a <wm8994_Init+0x86e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f000 808e 	beq.w	8003c2e <wm8994_Init+0x852>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	f200 8096 	bhi.w	8003c4a <wm8994_Init+0x86e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003b24:	d03d      	beq.n	8003ba2 <wm8994_Init+0x7c6>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003b2c:	f200 808d 	bhi.w	8003c4a <wm8994_Init+0x86e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f245 6222 	movw	r2, #22050	; 0x5622
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d06b      	beq.n	8003c12 <wm8994_Init+0x836>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f245 6222 	movw	r2, #22050	; 0x5622
 8003b40:	4293      	cmp	r3, r2
 8003b42:	f200 8082 	bhi.w	8003c4a <wm8994_Init+0x86e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003b4c:	d01b      	beq.n	8003b86 <wm8994_Init+0x7aa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003b54:	d879      	bhi.n	8003c4a <wm8994_Init+0x86e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003b5c:	d005      	beq.n	8003b6a <wm8994_Init+0x78e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d046      	beq.n	8003bf6 <wm8994_Init+0x81a>
 8003b68:	e06f      	b.n	8003c4a <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003b6a:	89fb      	ldrh	r3, [r7, #14]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2203      	movs	r2, #3
 8003b70:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fed9 	bl	800492c <CODEC_IO_Write>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	61fb      	str	r3, [r7, #28]
    break;
 8003b84:	e06f      	b.n	8003c66 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003b86:	89fb      	ldrh	r3, [r7, #14]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2233      	movs	r2, #51	; 0x33
 8003b8c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fecb 	bl	800492c <CODEC_IO_Write>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61fb      	str	r3, [r7, #28]
    break;
 8003ba0:	e061      	b.n	8003c66 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003ba2:	89fb      	ldrh	r3, [r7, #14]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2263      	movs	r2, #99	; 0x63
 8003ba8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 febd 	bl	800492c <CODEC_IO_Write>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	61fb      	str	r3, [r7, #28]
    break;
 8003bbc:	e053      	b.n	8003c66 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003bbe:	89fb      	ldrh	r3, [r7, #14]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2283      	movs	r2, #131	; 0x83
 8003bc4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 feaf 	bl	800492c <CODEC_IO_Write>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]
    break;
 8003bd8:	e045      	b.n	8003c66 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	22a3      	movs	r2, #163	; 0xa3
 8003be0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fea1 	bl	800492c <CODEC_IO_Write>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	61fb      	str	r3, [r7, #28]
    break;
 8003bf4:	e037      	b.n	8003c66 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003bf6:	89fb      	ldrh	r3, [r7, #14]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2213      	movs	r2, #19
 8003bfc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fe93 	bl	800492c <CODEC_IO_Write>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	61fb      	str	r3, [r7, #28]
    break;
 8003c10:	e029      	b.n	8003c66 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003c12:	89fb      	ldrh	r3, [r7, #14]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2243      	movs	r2, #67	; 0x43
 8003c18:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fe85 	bl	800492c <CODEC_IO_Write>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	61fb      	str	r3, [r7, #28]
    break;
 8003c2c:	e01b      	b.n	8003c66 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2273      	movs	r2, #115	; 0x73
 8003c34:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fe77 	bl	800492c <CODEC_IO_Write>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	61fb      	str	r3, [r7, #28]
    break; 
 8003c48:	e00d      	b.n	8003c66 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2283      	movs	r2, #131	; 0x83
 8003c50:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fe69 	bl	800492c <CODEC_IO_Write>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	4413      	add	r3, r2
 8003c62:	61fb      	str	r3, [r7, #28]
    break; 
 8003c64:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003c66:	8afb      	ldrh	r3, [r7, #22]
 8003c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6c:	d10e      	bne.n	8003c8c <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8003c6e:	89fb      	ldrh	r3, [r7, #14]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f244 0218 	movw	r2, #16408	; 0x4018
 8003c76:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fe56 	bl	800492c <CODEC_IO_Write>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	e00d      	b.n	8003ca8 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8003c8c:	89fb      	ldrh	r3, [r7, #14]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f244 0210 	movw	r2, #16400	; 0x4010
 8003c94:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fe47 	bl	800492c <CODEC_IO_Write>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8003ca8:	89fb      	ldrh	r3, [r7, #14]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	f240 3102 	movw	r1, #770	; 0x302
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fe3a 	bl	800492c <CODEC_IO_Write>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8003cc2:	89fb      	ldrh	r3, [r7, #14]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	220a      	movs	r2, #10
 8003cc8:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fe2d 	bl	800492c <CODEC_IO_Write>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8003cdc:	89fb      	ldrh	r3, [r7, #14]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fe20 	bl	800492c <CODEC_IO_Write>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8003cf6:	8b3b      	ldrh	r3, [r7, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8123 	beq.w	8003f44 <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003d06:	2103      	movs	r1, #3
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fe0f 	bl	800492c <CODEC_IO_Write>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8003d18:	89fb      	ldrh	r3, [r7, #14]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2122      	movs	r1, #34	; 0x22
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fe03 	bl	800492c <CODEC_IO_Write>
 8003d26:	4603      	mov	r3, r0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2200      	movs	r2, #0
 8003d36:	2123      	movs	r1, #35	; 0x23
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fdf7 	bl	800492c <CODEC_IO_Write>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	461a      	mov	r2, r3
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8003d48:	89fb      	ldrh	r3, [r7, #14]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003d50:	2136      	movs	r1, #54	; 0x36
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fdea 	bl	800492c <CODEC_IO_Write>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f243 0203 	movw	r2, #12291	; 0x3003
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fddd 	bl	800492c <CODEC_IO_Write>
 8003d72:	4603      	mov	r3, r0
 8003d74:	461a      	mov	r2, r3
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003d7c:	8afb      	ldrh	r3, [r7, #22]
 8003d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d82:	d111      	bne.n	8003da8 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8003d84:	89fb      	ldrh	r3, [r7, #14]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f240 2205 	movw	r2, #517	; 0x205
 8003d8c:	2151      	movs	r1, #81	; 0x51
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fdcc 	bl	800492c <CODEC_IO_Write>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	e00f      	b.n	8003dc0 <wm8994_Init+0x9e4>
 8003da0:	200027d0 	.word	0x200027d0
 8003da4:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8003da8:	89fb      	ldrh	r3, [r7, #14]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2205      	movs	r2, #5
 8003dae:	2151      	movs	r1, #81	; 0x51
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fdbb 	bl	800492c <CODEC_IO_Write>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8003dc0:	8b7b      	ldrh	r3, [r7, #26]
 8003dc2:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8003dc6:	f043 0303 	orr.w	r3, r3, #3
 8003dca:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003dcc:	89fb      	ldrh	r3, [r7, #14]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	8b7a      	ldrh	r2, [r7, #26]
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fda9 	bl	800492c <CODEC_IO_Write>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	461a      	mov	r2, r3
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4413      	add	r3, r2
 8003de2:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8003de4:	89fb      	ldrh	r3, [r7, #14]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2222      	movs	r2, #34	; 0x22
 8003dea:	2160      	movs	r1, #96	; 0x60
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fd9d 	bl	800492c <CODEC_IO_Write>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8003dfc:	89fb      	ldrh	r3, [r7, #14]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f649 7225 	movw	r2, #40741	; 0x9f25
 8003e04:	214c      	movs	r1, #76	; 0x4c
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fd90 	bl	800492c <CODEC_IO_Write>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8003e16:	200f      	movs	r0, #15
 8003e18:	f000 ffe6 	bl	8004de8 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8003e1c:	89fb      	ldrh	r3, [r7, #14]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2201      	movs	r2, #1
 8003e22:	212d      	movs	r1, #45	; 0x2d
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fd81 	bl	800492c <CODEC_IO_Write>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8003e34:	89fb      	ldrh	r3, [r7, #14]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2201      	movs	r2, #1
 8003e3a:	212e      	movs	r1, #46	; 0x2e
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fd75 	bl	800492c <CODEC_IO_Write>
 8003e42:	4603      	mov	r3, r0
 8003e44:	461a      	mov	r2, r3
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8003e4c:	89fb      	ldrh	r3, [r7, #14]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f44f 724c 	mov.w	r2, #816	; 0x330
 8003e54:	2103      	movs	r1, #3
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fd68 	bl	800492c <CODEC_IO_Write>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8003e66:	89fb      	ldrh	r3, [r7, #14]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2233      	movs	r2, #51	; 0x33
 8003e6c:	2154      	movs	r1, #84	; 0x54
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fd5c 	bl	800492c <CODEC_IO_Write>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8003e7e:	20fa      	movs	r0, #250	; 0xfa
 8003e80:	f000 ffb2 	bl	8004de8 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8003e84:	89fb      	ldrh	r3, [r7, #14]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	22ee      	movs	r2, #238	; 0xee
 8003e8a:	2160      	movs	r1, #96	; 0x60
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fd4d 	bl	800492c <CODEC_IO_Write>
 8003e92:	4603      	mov	r3, r0
 8003e94:	461a      	mov	r2, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003e9c:	89fb      	ldrh	r3, [r7, #14]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	22c0      	movs	r2, #192	; 0xc0
 8003ea2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fd40 	bl	800492c <CODEC_IO_Write>
 8003eac:	4603      	mov	r3, r0
 8003eae:	461a      	mov	r2, r3
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8003eb6:	89fb      	ldrh	r3, [r7, #14]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	22c0      	movs	r2, #192	; 0xc0
 8003ebc:	f240 6111 	movw	r1, #1553	; 0x611
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fd33 	bl	800492c <CODEC_IO_Write>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8003ed0:	89fb      	ldrh	r3, [r7, #14]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fd26 	bl	800492c <CODEC_IO_Write>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003eea:	89fb      	ldrh	r3, [r7, #14]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	22c0      	movs	r2, #192	; 0xc0
 8003ef0:	f240 6112 	movw	r1, #1554	; 0x612
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fd19 	bl	800492c <CODEC_IO_Write>
 8003efa:	4603      	mov	r3, r0
 8003efc:	461a      	mov	r2, r3
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003f04:	89fb      	ldrh	r3, [r7, #14]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	22c0      	movs	r2, #192	; 0xc0
 8003f0a:	f240 6113 	movw	r1, #1555	; 0x613
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fd0c 	bl	800492c <CODEC_IO_Write>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461a      	mov	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8003f1e:	89fb      	ldrh	r3, [r7, #14]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2200      	movs	r2, #0
 8003f24:	f240 4122 	movw	r1, #1058	; 0x422
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fcff 	bl	800492c <CODEC_IO_Write>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	461a      	mov	r2, r3
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003f38:	7afa      	ldrb	r2, [r7, #11]
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f984 	bl	800424c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8003f44:	8afb      	ldrh	r3, [r7, #22]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a6 	beq.w	8004098 <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003f4c:	8afb      	ldrh	r3, [r7, #22]
 8003f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f52:	d003      	beq.n	8003f5c <wm8994_Init+0xb80>
 8003f54:	8afb      	ldrh	r3, [r7, #22]
 8003f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5a:	d12b      	bne.n	8003fb4 <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003f5c:	8b7b      	ldrh	r3, [r7, #26]
 8003f5e:	f043 0313 	orr.w	r3, r3, #19
 8003f62:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003f64:	89fb      	ldrh	r3, [r7, #14]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	8b7a      	ldrh	r2, [r7, #26]
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fcdd 	bl	800492c <CODEC_IO_Write>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003f7c:	89fb      	ldrh	r3, [r7, #14]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2202      	movs	r2, #2
 8003f82:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fcd0 	bl	800492c <CODEC_IO_Write>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8003f96:	89fb      	ldrh	r3, [r7, #14]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f9e:	f240 4111 	movw	r1, #1041	; 0x411
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fcc2 	bl	800492c <CODEC_IO_Write>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	461a      	mov	r2, r3
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4413      	add	r3, r2
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e06b      	b.n	800408c <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003fb4:	8afb      	ldrh	r3, [r7, #22]
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d139      	bne.n	8004030 <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003fbc:	8b7b      	ldrh	r3, [r7, #26]
 8003fbe:	f043 0313 	orr.w	r3, r3, #19
 8003fc2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003fc4:	89fb      	ldrh	r3, [r7, #14]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	8b7a      	ldrh	r2, [r7, #26]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fcad 	bl	800492c <CODEC_IO_Write>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003fdc:	89fb      	ldrh	r3, [r7, #14]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fca0 	bl	800492c <CODEC_IO_Write>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003ff6:	89fb      	ldrh	r3, [r7, #14]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003ffe:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fc92 	bl	800492c <CODEC_IO_Write>
 8004008:	4603      	mov	r3, r0
 800400a:	461a      	mov	r2, r3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8004012:	89fb      	ldrh	r3, [r7, #14]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800401a:	f240 4111 	movw	r1, #1041	; 0x411
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fc84 	bl	800492c <CODEC_IO_Write>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e02d      	b.n	800408c <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8004030:	8afb      	ldrh	r3, [r7, #22]
 8004032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004036:	d003      	beq.n	8004040 <wm8994_Init+0xc64>
 8004038:	8afb      	ldrh	r3, [r7, #22]
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d125      	bne.n	800408c <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8004040:	89fb      	ldrh	r3, [r7, #14]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	220b      	movs	r2, #11
 8004046:	2118      	movs	r1, #24
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fc6f 	bl	800492c <CODEC_IO_Write>
 800404e:	4603      	mov	r3, r0
 8004050:	461a      	mov	r2, r3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8004058:	89fb      	ldrh	r3, [r7, #14]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	220b      	movs	r2, #11
 800405e:	211a      	movs	r1, #26
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fc63 	bl	800492c <CODEC_IO_Write>
 8004066:	4603      	mov	r3, r0
 8004068:	461a      	mov	r2, r3
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004070:	89fb      	ldrh	r3, [r7, #14]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004078:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fc55 	bl	800492c <CODEC_IO_Write>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800408c:	7afa      	ldrb	r2, [r7, #11]
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f8da 	bl	800424c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8004098:	69fb      	ldr	r3, [r7, #28]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop

080040a4 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80040a8:	f000 fe40 	bl	8004d2c <AUDIO_IO_DeInit>
}
 80040ac:	bf00      	nop
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80040ba:	f000 fe2d 	bl	8004d18 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fe63 	bl	8004d90 <AUDIO_IO_Read>
 80040ca:	4603      	mov	r3, r0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	80fb      	strh	r3, [r7, #6]
 80040e0:	4613      	mov	r3, r2
 80040e2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f9d1 	bl	8004494 <wm8994_SetMute>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80040fa:	68fb      	ldr	r3, [r7, #12]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f9bc 	bl	8004494 <wm8994_SetMute>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2201      	movs	r2, #1
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fbfd 	bl	800492c <CODEC_IO_Write>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800413c:	68fb      	ldr	r3, [r7, #12]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	4603      	mov	r3, r0
 800414e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f99b 	bl	8004494 <wm8994_SetMute>
 800415e:	4602      	mov	r2, r0
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004180:	4b31      	ldr	r3, [pc, #196]	; (8004248 <wm8994_Stop+0xd8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d05a      	beq.n	800423e <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	2101      	movs	r1, #1
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f981 	bl	8004494 <wm8994_SetMute>
 8004192:	4602      	mov	r2, r0
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d04e      	beq.n	800423e <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fbbd 	bl	800492c <CODEC_IO_Write>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c4:	f240 4122 	movw	r1, #1058	; 0x422
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fbaf 	bl	800492c <CODEC_IO_Write>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461a      	mov	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4413      	add	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2200      	movs	r2, #0
 80041de:	212d      	movs	r1, #45	; 0x2d
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fba3 	bl	800492c <CODEC_IO_Write>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2200      	movs	r2, #0
 80041f6:	212e      	movs	r1, #46	; 0x2e
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fb97 	bl	800492c <CODEC_IO_Write>
 80041fe:	4603      	mov	r3, r0
 8004200:	461a      	mov	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2200      	movs	r2, #0
 800420e:	2105      	movs	r1, #5
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fb8b 	bl	800492c <CODEC_IO_Write>
 8004216:	4603      	mov	r3, r0
 8004218:	461a      	mov	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2200      	movs	r2, #0
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fb7f 	bl	800492c <CODEC_IO_Write>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4413      	add	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <wm8994_Stop+0xd8>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800423e:	68fb      	ldr	r3, [r7, #12]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	200027cc 	.word	0x200027cc

0800424c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	460a      	mov	r2, r1
 8004256:	80fb      	strh	r3, [r7, #6]
 8004258:	4613      	mov	r3, r2
 800425a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004260:	797b      	ldrb	r3, [r7, #5]
 8004262:	2b64      	cmp	r3, #100	; 0x64
 8004264:	d80b      	bhi.n	800427e <wm8994_SetVolume+0x32>
 8004266:	797a      	ldrb	r2, [r7, #5]
 8004268:	4613      	mov	r3, r2
 800426a:	019b      	lsls	r3, r3, #6
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	4a86      	ldr	r2, [pc, #536]	; (8004488 <wm8994_SetVolume+0x23c>)
 8004270:	fb82 1203 	smull	r1, r2, r2, r3
 8004274:	1152      	asrs	r2, r2, #5
 8004276:	17db      	asrs	r3, r3, #31
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e000      	b.n	8004280 <wm8994_SetVolume+0x34>
 800427e:	2364      	movs	r3, #100	; 0x64
 8004280:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004282:	4b82      	ldr	r3, [pc, #520]	; (800448c <wm8994_SetVolume+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 809b 	beq.w	80043c2 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 800428c:	7afb      	ldrb	r3, [r7, #11]
 800428e:	2b3e      	cmp	r3, #62	; 0x3e
 8004290:	d93d      	bls.n	800430e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f8fc 	bl	8004494 <wm8994_SetMute>
 800429c:	4602      	mov	r2, r0
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f240 127f 	movw	r2, #383	; 0x17f
 80042ac:	211c      	movs	r1, #28
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fb3c 	bl	800492c <CODEC_IO_Write>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f240 127f 	movw	r2, #383	; 0x17f
 80042c6:	211d      	movs	r1, #29
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fb2f 	bl	800492c <CODEC_IO_Write>
 80042ce:	4603      	mov	r3, r0
 80042d0:	461a      	mov	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f240 127f 	movw	r2, #383	; 0x17f
 80042e0:	2126      	movs	r1, #38	; 0x26
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fb22 	bl	800492c <CODEC_IO_Write>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f240 127f 	movw	r2, #383	; 0x17f
 80042fa:	2127      	movs	r1, #39	; 0x27
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fb15 	bl	800492c <CODEC_IO_Write>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4413      	add	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e059      	b.n	80043c2 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800430e:	797b      	ldrb	r3, [r7, #5]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f8bb 	bl	8004494 <wm8994_SetMute>
 800431e:	4602      	mov	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e04c      	b.n	80043c2 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f000 f8b1 	bl	8004494 <wm8994_SetMute>
 8004332:	4602      	mov	r2, r0
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	b2d8      	uxtb	r0, r3
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	b21b      	sxth	r3, r3
 8004342:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004346:	b21b      	sxth	r3, r3
 8004348:	b29b      	uxth	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	211c      	movs	r1, #28
 800434e:	f000 faed 	bl	800492c <CODEC_IO_Write>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	b2d8      	uxtb	r0, r3
 8004360:	7afb      	ldrb	r3, [r7, #11]
 8004362:	b21b      	sxth	r3, r3
 8004364:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004368:	b21b      	sxth	r3, r3
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	211d      	movs	r1, #29
 8004370:	f000 fadc 	bl	800492c <CODEC_IO_Write>
 8004374:	4603      	mov	r3, r0
 8004376:	461a      	mov	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	b2d8      	uxtb	r0, r3
 8004382:	7afb      	ldrb	r3, [r7, #11]
 8004384:	b21b      	sxth	r3, r3
 8004386:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800438a:	b21b      	sxth	r3, r3
 800438c:	b29b      	uxth	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	2126      	movs	r1, #38	; 0x26
 8004392:	f000 facb 	bl	800492c <CODEC_IO_Write>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	b2d8      	uxtb	r0, r3
 80043a4:	7afb      	ldrb	r3, [r7, #11]
 80043a6:	b21b      	sxth	r3, r3
 80043a8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80043ac:	b21b      	sxth	r3, r3
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	2127      	movs	r1, #39	; 0x27
 80043b4:	f000 faba 	bl	800492c <CODEC_IO_Write>
 80043b8:	4603      	mov	r3, r0
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80043c2:	4b33      	ldr	r3, [pc, #204]	; (8004490 <wm8994_SetVolume+0x244>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d059      	beq.n	800447e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80043ca:	797b      	ldrb	r3, [r7, #5]
 80043cc:	2b63      	cmp	r3, #99	; 0x63
 80043ce:	d80c      	bhi.n	80043ea <wm8994_SetVolume+0x19e>
 80043d0:	797a      	ldrb	r2, [r7, #5]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <wm8994_SetVolume+0x23c>)
 80043dc:	fb82 1203 	smull	r1, r2, r2, r3
 80043e0:	1152      	asrs	r2, r2, #5
 80043e2:	17db      	asrs	r3, r3, #31
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	e000      	b.n	80043ec <wm8994_SetVolume+0x1a0>
 80043ea:	23ef      	movs	r3, #239	; 0xef
 80043ec:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	b2d8      	uxtb	r0, r3
 80043f2:	7afb      	ldrb	r3, [r7, #11]
 80043f4:	b21b      	sxth	r3, r3
 80043f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fa:	b21b      	sxth	r3, r3
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004404:	f000 fa92 	bl	800492c <CODEC_IO_Write>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	b2d8      	uxtb	r0, r3
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	b21b      	sxth	r3, r3
 800441a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441e:	b21b      	sxth	r3, r3
 8004420:	b29b      	uxth	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	f240 4101 	movw	r1, #1025	; 0x401
 8004428:	f000 fa80 	bl	800492c <CODEC_IO_Write>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	b2d8      	uxtb	r0, r3
 800443a:	7afb      	ldrb	r3, [r7, #11]
 800443c:	b21b      	sxth	r3, r3
 800443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004442:	b21b      	sxth	r3, r3
 8004444:	b29b      	uxth	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	f240 4104 	movw	r1, #1028	; 0x404
 800444c:	f000 fa6e 	bl	800492c <CODEC_IO_Write>
 8004450:	4603      	mov	r3, r0
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	b2d8      	uxtb	r0, r3
 800445e:	7afb      	ldrb	r3, [r7, #11]
 8004460:	b21b      	sxth	r3, r3
 8004462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004466:	b21b      	sxth	r3, r3
 8004468:	b29b      	uxth	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	f240 4105 	movw	r1, #1029	; 0x405
 8004470:	f000 fa5c 	bl	800492c <CODEC_IO_Write>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800447e:	68fb      	ldr	r3, [r7, #12]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	51eb851f 	.word	0x51eb851f
 800448c:	200027cc 	.word	0x200027cc
 8004490:	200027d0 	.word	0x200027d0

08004494 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	6039      	str	r1, [r7, #0]
 800449e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80044a4:	4b21      	ldr	r3, [pc, #132]	; (800452c <wm8994_SetMute+0x98>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d039      	beq.n	8004520 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d11c      	bne.n	80044ec <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ba:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fa34 	bl	800492c <CODEC_IO_Write>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d6:	f240 4122 	movw	r1, #1058	; 0x422
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fa26 	bl	800492c <CODEC_IO_Write>
 80044e0:	4603      	mov	r3, r0
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e019      	b.n	8004520 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2200      	movs	r2, #0
 80044f2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fa18 	bl	800492c <CODEC_IO_Write>
 80044fc:	4603      	mov	r3, r0
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2200      	movs	r2, #0
 800450c:	f240 4122 	movw	r1, #1058	; 0x422
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fa0b 	bl	800492c <CODEC_IO_Write>
 8004516:	4603      	mov	r3, r0
 8004518:	461a      	mov	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8004520:	68fb      	ldr	r3, [r7, #12]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200027cc 	.word	0x200027cc

08004530 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	460a      	mov	r2, r1
 800453a:	80fb      	strh	r3, [r7, #6]
 800453c:	4613      	mov	r3, r2
 800453e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8004544:	797b      	ldrb	r3, [r7, #5]
 8004546:	2b03      	cmp	r3, #3
 8004548:	f000 808c 	beq.w	8004664 <wm8994_SetOutputMode+0x134>
 800454c:	2b03      	cmp	r3, #3
 800454e:	f300 80cb 	bgt.w	80046e8 <wm8994_SetOutputMode+0x1b8>
 8004552:	2b01      	cmp	r3, #1
 8004554:	d002      	beq.n	800455c <wm8994_SetOutputMode+0x2c>
 8004556:	2b02      	cmp	r3, #2
 8004558:	d042      	beq.n	80045e0 <wm8994_SetOutputMode+0xb0>
 800455a:	e0c5      	b.n	80046e8 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004564:	2105      	movs	r1, #5
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f9e0 	bl	800492c <CODEC_IO_Write>
 800456c:	4603      	mov	r3, r0
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2200      	movs	r2, #0
 800457c:	f240 6101 	movw	r1, #1537	; 0x601
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f9d3 	bl	800492c <CODEC_IO_Write>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2200      	movs	r2, #0
 8004596:	f240 6102 	movw	r1, #1538	; 0x602
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f9c6 	bl	800492c <CODEC_IO_Write>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2202      	movs	r2, #2
 80045b0:	f240 6104 	movw	r1, #1540	; 0x604
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f9b9 	bl	800492c <CODEC_IO_Write>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2202      	movs	r2, #2
 80045ca:	f240 6105 	movw	r1, #1541	; 0x605
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f9ac 	bl	800492c <CODEC_IO_Write>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
    break;
 80045de:	e0c5      	b.n	800476c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f240 3203 	movw	r2, #771	; 0x303
 80045e8:	2105      	movs	r1, #5
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f99e 	bl	800492c <CODEC_IO_Write>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2201      	movs	r2, #1
 8004600:	f240 6101 	movw	r1, #1537	; 0x601
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f991 	bl	800492c <CODEC_IO_Write>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2201      	movs	r2, #1
 800461a:	f240 6102 	movw	r1, #1538	; 0x602
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f984 	bl	800492c <CODEC_IO_Write>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2200      	movs	r2, #0
 8004634:	f240 6104 	movw	r1, #1540	; 0x604
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f977 	bl	800492c <CODEC_IO_Write>
 800463e:	4603      	mov	r3, r0
 8004640:	461a      	mov	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2200      	movs	r2, #0
 800464e:	f240 6105 	movw	r1, #1541	; 0x605
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f96a 	bl	800492c <CODEC_IO_Write>
 8004658:	4603      	mov	r3, r0
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
    break;
 8004662:	e083      	b.n	800476c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f640 720f 	movw	r2, #3855	; 0xf0f
 800466c:	2105      	movs	r1, #5
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f95c 	bl	800492c <CODEC_IO_Write>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2201      	movs	r2, #1
 8004684:	f240 6101 	movw	r1, #1537	; 0x601
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f94f 	bl	800492c <CODEC_IO_Write>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2201      	movs	r2, #1
 800469e:	f240 6102 	movw	r1, #1538	; 0x602
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f942 	bl	800492c <CODEC_IO_Write>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2202      	movs	r2, #2
 80046b8:	f240 6104 	movw	r1, #1540	; 0x604
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f935 	bl	800492c <CODEC_IO_Write>
 80046c2:	4603      	mov	r3, r0
 80046c4:	461a      	mov	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2202      	movs	r2, #2
 80046d2:	f240 6105 	movw	r1, #1541	; 0x605
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f928 	bl	800492c <CODEC_IO_Write>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
    break;
 80046e6:	e041      	b.n	800476c <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f240 3203 	movw	r2, #771	; 0x303
 80046f0:	2105      	movs	r1, #5
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f91a 	bl	800492c <CODEC_IO_Write>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2201      	movs	r2, #1
 8004708:	f240 6101 	movw	r1, #1537	; 0x601
 800470c:	4618      	mov	r0, r3
 800470e:	f000 f90d 	bl	800492c <CODEC_IO_Write>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2201      	movs	r2, #1
 8004722:	f240 6102 	movw	r1, #1538	; 0x602
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f900 	bl	800492c <CODEC_IO_Write>
 800472c:	4603      	mov	r3, r0
 800472e:	461a      	mov	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2200      	movs	r2, #0
 800473c:	f240 6104 	movw	r1, #1540	; 0x604
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f8f3 	bl	800492c <CODEC_IO_Write>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2200      	movs	r2, #0
 8004756:	f240 6105 	movw	r1, #1541	; 0x605
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f8e6 	bl	800492c <CODEC_IO_Write>
 8004760:	4603      	mov	r3, r0
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
    break;    
 800476a:	bf00      	nop
  }  
  return counter;
 800476c:	68fb      	ldr	r3, [r7, #12]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4a57      	ldr	r2, [pc, #348]	; (80048e8 <wm8994_SetFrequency+0x170>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d05f      	beq.n	8004850 <wm8994_SetFrequency+0xd8>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4a55      	ldr	r2, [pc, #340]	; (80048e8 <wm8994_SetFrequency+0x170>)
 8004794:	4293      	cmp	r3, r2
 8004796:	f200 8093 	bhi.w	80048c0 <wm8994_SetFrequency+0x148>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d047      	beq.n	8004834 <wm8994_SetFrequency+0xbc>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80047aa:	4293      	cmp	r3, r2
 80047ac:	f200 8088 	bhi.w	80048c0 <wm8994_SetFrequency+0x148>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d074      	beq.n	80048a4 <wm8994_SetFrequency+0x12c>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f64a 4244 	movw	r2, #44100	; 0xac44
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d87d      	bhi.n	80048c0 <wm8994_SetFrequency+0x148>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f245 6222 	movw	r2, #22050	; 0x5622
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d05c      	beq.n	8004888 <wm8994_SetFrequency+0x110>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f245 6222 	movw	r2, #22050	; 0x5622
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d873      	bhi.n	80048c0 <wm8994_SetFrequency+0x148>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80047de:	d01b      	beq.n	8004818 <wm8994_SetFrequency+0xa0>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80047e6:	d86b      	bhi.n	80048c0 <wm8994_SetFrequency+0x148>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80047ee:	d005      	beq.n	80047fc <wm8994_SetFrequency+0x84>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f642 3211 	movw	r2, #11025	; 0x2b11
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d038      	beq.n	800486c <wm8994_SetFrequency+0xf4>
 80047fa:	e061      	b.n	80048c0 <wm8994_SetFrequency+0x148>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2203      	movs	r2, #3
 8004802:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f890 	bl	800492c <CODEC_IO_Write>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
    break;
 8004816:	e061      	b.n	80048dc <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2233      	movs	r2, #51	; 0x33
 800481e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f882 	bl	800492c <CODEC_IO_Write>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
    break;
 8004832:	e053      	b.n	80048dc <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2283      	movs	r2, #131	; 0x83
 800483a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f874 	bl	800492c <CODEC_IO_Write>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
    break;
 800484e:	e045      	b.n	80048dc <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	22a3      	movs	r2, #163	; 0xa3
 8004856:	f44f 7104 	mov.w	r1, #528	; 0x210
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f866 	bl	800492c <CODEC_IO_Write>
 8004860:	4603      	mov	r3, r0
 8004862:	461a      	mov	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
    break;
 800486a:	e037      	b.n	80048dc <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2213      	movs	r2, #19
 8004872:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f858 	bl	800492c <CODEC_IO_Write>
 800487c:	4603      	mov	r3, r0
 800487e:	461a      	mov	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
    break;
 8004886:	e029      	b.n	80048dc <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2243      	movs	r2, #67	; 0x43
 800488e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f84a 	bl	800492c <CODEC_IO_Write>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
    break;
 80048a2:	e01b      	b.n	80048dc <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2273      	movs	r2, #115	; 0x73
 80048aa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f83c 	bl	800492c <CODEC_IO_Write>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
    break; 
 80048be:	e00d      	b.n	80048dc <wm8994_SetFrequency+0x164>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2283      	movs	r2, #131	; 0x83
 80048c6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f82e 	bl	800492c <CODEC_IO_Write>
 80048d0:	4603      	mov	r3, r0
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    break; 
 80048da:	bf00      	nop
  }
  return counter;
 80048dc:	68fb      	ldr	r3, [r7, #12]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	00017700 	.word	0x00017700

080048ec <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2200      	movs	r2, #0
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f812 	bl	800492c <CODEC_IO_Write>
 8004908:	4603      	mov	r3, r0
 800490a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <wm8994_Reset+0x38>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <wm8994_Reset+0x3c>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

  return counter;
 8004918:	68fb      	ldr	r3, [r7, #12]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	200027cc 	.word	0x200027cc
 8004928:	200027d0 	.word	0x200027d0

0800492c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
 8004936:	460b      	mov	r3, r1
 8004938:	80bb      	strh	r3, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8004942:	887a      	ldrh	r2, [r7, #2]
 8004944:	88b9      	ldrh	r1, [r7, #4]
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f9f7 	bl	8004d3c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	b2db      	uxtb	r3, r3
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <BSP_LED_Init+0x54>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <BSP_LED_Init+0x54>)
 800496c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004970:	6313      	str	r3, [r2, #48]	; 0x30
 8004972:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <BSP_LED_Init+0x54>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <BSP_LED_Init+0x58>)
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004988:	2301      	movs	r3, #1
 800498a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004990:	2303      	movs	r3, #3
 8004992:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	4a08      	ldr	r2, [pc, #32]	; (80049b8 <BSP_LED_Init+0x5c>)
 8004998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499c:	f107 020c 	add.w	r2, r7, #12
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f004 fdd0 	bl	8009548 <HAL_GPIO_Init>

}
 80049a8:	bf00      	nop
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40023800 	.word	0x40023800
 80049b4:	20000070 	.word	0x20000070
 80049b8:	20000078 	.word	0x20000078

080049bc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <BSP_LED_On+0x2c>)
 80049ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	4a06      	ldr	r2, [pc, #24]	; (80049ec <BSP_LED_On+0x30>)
 80049d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2201      	movs	r2, #1
 80049da:	4619      	mov	r1, r3
 80049dc:	f005 f884 	bl	8009ae8 <HAL_GPIO_WritePin>
}
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000078 	.word	0x20000078
 80049ec:	20000070 	.word	0x20000070

080049f0 <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <BSP_LED_Toggle+0x2c>)
 80049fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	4906      	ldr	r1, [pc, #24]	; (8004a20 <BSP_LED_Toggle+0x30>)
 8004a06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f005 f883 	bl	8009b1a <HAL_GPIO_TogglePin>
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20000078 	.word	0x20000078
 8004a20:	20000070 	.word	0x20000070

08004a24 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	4a06      	ldr	r2, [pc, #24]	; (8004a4c <BSP_PB_GetState+0x28>)
 8004a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a36:	2201      	movs	r2, #1
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f005 f83c 	bl	8009ab8 <HAL_GPIO_ReadPin>
 8004a40:	4603      	mov	r3, r0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000080 	.word	0x20000080

08004a50 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08c      	sub	sp, #48	; 0x30
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a58      	ldr	r2, [pc, #352]	; (8004bbc <I2Cx_MspInit+0x16c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d15b      	bne.n	8004b18 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8004a60:	4b57      	ldr	r3, [pc, #348]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	4a56      	ldr	r2, [pc, #344]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004a66:	f043 0308 	orr.w	r3, r3, #8
 8004a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6c:	4b54      	ldr	r3, [pc, #336]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8004a78:	4b51      	ldr	r3, [pc, #324]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	4a50      	ldr	r2, [pc, #320]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004a7e:	f043 0302 	orr.w	r3, r3, #2
 8004a82:	6313      	str	r3, [r2, #48]	; 0x30
 8004a84:	4b4e      	ldr	r3, [pc, #312]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004a96:	2312      	movs	r3, #18
 8004a98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8004aa2:	2304      	movs	r3, #4
 8004aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8004aa6:	f107 031c 	add.w	r3, r7, #28
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4845      	ldr	r0, [pc, #276]	; (8004bc4 <I2Cx_MspInit+0x174>)
 8004aae:	f004 fd4b 	bl	8009548 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8004ab6:	230b      	movs	r3, #11
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8004aba:	f107 031c 	add.w	r3, r7, #28
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4841      	ldr	r0, [pc, #260]	; (8004bc8 <I2Cx_MspInit+0x178>)
 8004ac2:	f004 fd41 	bl	8009548 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	4a3d      	ldr	r2, [pc, #244]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004ade:	4b38      	ldr	r3, [pc, #224]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	4a37      	ldr	r2, [pc, #220]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004ae4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae8:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8004aea:	4b35      	ldr	r3, [pc, #212]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	4a34      	ldr	r2, [pc, #208]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af4:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004af6:	2200      	movs	r2, #0
 8004af8:	210f      	movs	r1, #15
 8004afa:	205f      	movs	r0, #95	; 0x5f
 8004afc:	f002 fb02 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004b00:	205f      	movs	r0, #95	; 0x5f
 8004b02:	f002 fb1b 	bl	800713c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004b06:	2200      	movs	r2, #0
 8004b08:	210f      	movs	r1, #15
 8004b0a:	2060      	movs	r0, #96	; 0x60
 8004b0c:	f002 fafa 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8004b10:	2060      	movs	r0, #96	; 0x60
 8004b12:	f002 fb13 	bl	800713c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004b16:	e04d      	b.n	8004bb4 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004b18:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1c:	4a28      	ldr	r2, [pc, #160]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b1e:	f043 0302 	orr.w	r3, r3, #2
 8004b22:	6313      	str	r3, [r2, #48]	; 0x30
 8004b24:	4b26      	ldr	r3, [pc, #152]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b34:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004b36:	2312      	movs	r3, #18
 8004b38:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004b42:	2304      	movs	r3, #4
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004b46:	f107 031c 	add.w	r3, r7, #28
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	481e      	ldr	r0, [pc, #120]	; (8004bc8 <I2Cx_MspInit+0x178>)
 8004b4e:	f004 fcfb 	bl	8009548 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004b58:	f107 031c 	add.w	r3, r7, #28
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	481a      	ldr	r0, [pc, #104]	; (8004bc8 <I2Cx_MspInit+0x178>)
 8004b60:	f004 fcf2 	bl	8009548 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004b64:	4b16      	ldr	r3, [pc, #88]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b70:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004b7c:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	4a0f      	ldr	r2, [pc, #60]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b86:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	4a0c      	ldr	r2, [pc, #48]	; (8004bc0 <I2Cx_MspInit+0x170>)
 8004b8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b92:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004b94:	2200      	movs	r2, #0
 8004b96:	210f      	movs	r1, #15
 8004b98:	201f      	movs	r0, #31
 8004b9a:	f002 fab3 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004b9e:	201f      	movs	r0, #31
 8004ba0:	f002 facc 	bl	800713c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	210f      	movs	r1, #15
 8004ba8:	2020      	movs	r0, #32
 8004baa:	f002 faab 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004bae:	2020      	movs	r0, #32
 8004bb0:	f002 fac4 	bl	800713c <HAL_NVIC_EnableIRQ>
}
 8004bb4:	bf00      	nop
 8004bb6:	3730      	adds	r7, #48	; 0x30
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	200027d4 	.word	0x200027d4
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40020c00 	.word	0x40020c00
 8004bc8:	40020400 	.word	0x40020400

08004bcc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f005 fabd 	bl	800a154 <HAL_I2C_GetState>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d125      	bne.n	8004c2c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <I2Cx_Init+0x68>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d103      	bne.n	8004bf0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <I2Cx_Init+0x6c>)
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e002      	b.n	8004bf6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <I2Cx_Init+0x70>)
 8004bf4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <I2Cx_Init+0x74>)
 8004bfa:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff ff15 	bl	8004a50 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f004 ff92 	bl	8009b50 <HAL_I2C_Init>
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200027d4 	.word	0x200027d4
 8004c38:	40006000 	.word	0x40006000
 8004c3c:	40005400 	.word	0x40005400
 8004c40:	40912732 	.word	0x40912732

08004c44 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af04      	add	r7, sp, #16
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4611      	mov	r1, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	72fb      	strb	r3, [r7, #11]
 8004c56:	460b      	mov	r3, r1
 8004c58:	813b      	strh	r3, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004c62:	7afb      	ldrb	r3, [r7, #11]
 8004c64:	b299      	uxth	r1, r3
 8004c66:	88f8      	ldrh	r0, [r7, #6]
 8004c68:	893a      	ldrh	r2, [r7, #8]
 8004c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c6e:	9302      	str	r3, [sp, #8]
 8004c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4603      	mov	r3, r0
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f005 f950 	bl	8009f20 <HAL_I2C_Mem_Read>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d004      	beq.n	8004c94 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8004c8a:	7afb      	ldrb	r3, [r7, #11]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f832 	bl	8004cf8 <I2Cx_Error>
  }
  return status;
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08a      	sub	sp, #40	; 0x28
 8004ca2:	af04      	add	r7, sp, #16
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	4608      	mov	r0, r1
 8004ca8:	4611      	mov	r1, r2
 8004caa:	461a      	mov	r2, r3
 8004cac:	4603      	mov	r3, r0
 8004cae:	72fb      	strb	r3, [r7, #11]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	813b      	strh	r3, [r7, #8]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
 8004cbe:	b299      	uxth	r1, r3
 8004cc0:	88f8      	ldrh	r0, [r7, #6]
 8004cc2:	893a      	ldrh	r2, [r7, #8]
 8004cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc8:	9302      	str	r3, [sp, #8]
 8004cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f005 f80f 	bl	8009cf8 <HAL_I2C_Mem_Write>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004ce4:	7afb      	ldrb	r3, [r7, #11]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f805 	bl	8004cf8 <I2Cx_Error>
  }
  return status;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f004 ffb3 	bl	8009c70 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff ff5e 	bl	8004bcc <I2Cx_Init>
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004d1c:	4802      	ldr	r0, [pc, #8]	; (8004d28 <AUDIO_IO_Init+0x10>)
 8004d1e:	f7ff ff55 	bl	8004bcc <I2Cx_Init>
}
 8004d22:	bf00      	nop
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	200027d4 	.word	0x200027d4

08004d2c <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0

}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
 8004d46:	460b      	mov	r3, r1
 8004d48:	80bb      	strh	r3, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8004d4e:	887b      	ldrh	r3, [r7, #2]
 8004d50:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004d52:	89fb      	ldrh	r3, [r7, #14]
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004d5a:	89fb      	ldrh	r3, [r7, #14]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	b21a      	sxth	r2, r3
 8004d62:	887b      	ldrh	r3, [r7, #2]
 8004d64:	b21b      	sxth	r3, r3
 8004d66:	4313      	orrs	r3, r2
 8004d68:	b21b      	sxth	r3, r3
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004d6e:	88ba      	ldrh	r2, [r7, #4]
 8004d70:	79f9      	ldrb	r1, [r7, #7]
 8004d72:	2302      	movs	r3, #2
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	1cbb      	adds	r3, r7, #2
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	4803      	ldr	r0, [pc, #12]	; (8004d8c <AUDIO_IO_Write+0x50>)
 8004d7e:	f7ff ff8e 	bl	8004c9e <I2Cx_WriteMultiple>
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	200027d4 	.word	0x200027d4

08004d90 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	4603      	mov	r3, r0
 8004d98:	460a      	mov	r2, r1
 8004d9a:	71fb      	strb	r3, [r7, #7]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	81bb      	strh	r3, [r7, #12]
 8004da4:	2300      	movs	r3, #0
 8004da6:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004da8:	88ba      	ldrh	r2, [r7, #4]
 8004daa:	79f9      	ldrb	r1, [r7, #7]
 8004dac:	2302      	movs	r3, #2
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2302      	movs	r3, #2
 8004db8:	480a      	ldr	r0, [pc, #40]	; (8004de4 <AUDIO_IO_Read+0x54>)
 8004dba:	f7ff ff43 	bl	8004c44 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004dbe:	89bb      	ldrh	r3, [r7, #12]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004dc4:	89bb      	ldrh	r3, [r7, #12]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	b21a      	sxth	r2, r3
 8004dcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	b21b      	sxth	r3, r3
 8004dd4:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8004dd6:	89fb      	ldrh	r3, [r7, #14]
 8004dd8:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8004dda:	89bb      	ldrh	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	200027d4 	.word	0x200027d4

08004de8 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f002 f887 	bl	8006f04 <HAL_Delay>
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <TS_IO_Init+0x10>)
 8004e06:	f7ff fee1 	bl	8004bcc <I2Cx_Init>
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	200027d4 	.word	0x200027d4

08004e14 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	71fb      	strb	r3, [r7, #7]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	71bb      	strb	r3, [r7, #6]
 8004e22:	4613      	mov	r3, r2
 8004e24:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004e26:	79bb      	ldrb	r3, [r7, #6]
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	79f9      	ldrb	r1, [r7, #7]
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	1d7b      	adds	r3, r7, #5
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	2301      	movs	r3, #1
 8004e36:	4803      	ldr	r0, [pc, #12]	; (8004e44 <TS_IO_Write+0x30>)
 8004e38:	f7ff ff31 	bl	8004c9e <I2Cx_WriteMultiple>
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200027d4 	.word	0x200027d4

08004e48 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	4603      	mov	r3, r0
 8004e50:	460a      	mov	r2, r1
 8004e52:	71fb      	strb	r3, [r7, #7]
 8004e54:	4613      	mov	r3, r2
 8004e56:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004e5c:	79bb      	ldrb	r3, [r7, #6]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	79f9      	ldrb	r1, [r7, #7]
 8004e62:	2301      	movs	r3, #1
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	f107 030f 	add.w	r3, r7, #15
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4804      	ldr	r0, [pc, #16]	; (8004e80 <TS_IO_Read+0x38>)
 8004e70:	f7ff fee8 	bl	8004c44 <I2Cx_ReadMultiple>

  return read_value;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	200027d4 	.word	0x200027d4

08004e84 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	603a      	str	r2, [r7, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
 8004e92:	460b      	mov	r3, r1
 8004e94:	71bb      	strb	r3, [r7, #6]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004e9a:	79bb      	ldrb	r3, [r7, #6]
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	79f9      	ldrb	r1, [r7, #7]
 8004ea0:	88bb      	ldrh	r3, [r7, #4]
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4804      	ldr	r0, [pc, #16]	; (8004ebc <TS_IO_ReadMultiple+0x38>)
 8004eac:	f7ff feca 	bl	8004c44 <I2Cx_ReadMultiple>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	b29b      	uxth	r3, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200027d4 	.word	0x200027d4

08004ec0 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f002 f81b 	bl	8006f04 <HAL_Delay>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8004ede:	f000 f823 	bl	8004f28 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8004ef2:	f7fc fa09 	bl	8001308 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a05      	ldr	r2, [pc, #20]	; (8004f24 <HAL_SAI_ErrorCallback+0x24>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d102      	bne.n	8004f18 <HAL_SAI_ErrorCallback+0x18>
  {
  BSP_AUDIO_OUT_Error_CallBack();
 8004f12:	f000 f810 	bl	8004f36 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack();
  }
}
 8004f16:	e001      	b.n	8004f1c <HAL_SAI_ErrorCallback+0x1c>
    BSP_AUDIO_IN_Error_CallBack();
 8004f18:	f7fd f840 	bl	8001f9c <BSP_AUDIO_IN_Error_CallBack>
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40015804 	.word	0x40015804

08004f28 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0
}
 8004f3a:	bf00      	nop
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08c      	sub	sp, #48	; 0x30
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8004f4e:	4b48      	ldr	r3, [pc, #288]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	4a47      	ldr	r2, [pc, #284]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004f54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f58:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5a:	4b45      	ldr	r3, [pc, #276]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	69bb      	ldr	r3, [r7, #24]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8004f66:	4b42      	ldr	r3, [pc, #264]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	4a41      	ldr	r2, [pc, #260]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f70:	6313      	str	r3, [r2, #48]	; 0x30
 8004f72:	4b3f      	ldr	r3, [pc, #252]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8004f7e:	4b3c      	ldr	r3, [pc, #240]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4a3b      	ldr	r2, [pc, #236]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004f84:	f043 0310 	orr.w	r3, r3, #16
 8004f88:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8a:	4b39      	ldr	r3, [pc, #228]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8004f96:	2370      	movs	r3, #112	; 0x70
 8004f98:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 8004fa6:	2306      	movs	r3, #6
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8004faa:	f107 031c 	add.w	r3, r7, #28
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4830      	ldr	r0, [pc, #192]	; (8005074 <BSP_AUDIO_OUT_MspInit+0x130>)
 8004fb2:	f004 fac9 	bl	8009548 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004fba:	f107 031c 	add.w	r3, r7, #28
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	482d      	ldr	r0, [pc, #180]	; (8005078 <BSP_AUDIO_OUT_MspInit+0x134>)
 8004fc2:	f004 fac1 	bl	8009548 <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004fc6:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	4a29      	ldr	r2, [pc, #164]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004fcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd2:	4b27      	ldr	r3, [pc, #156]	; (8005070 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
  
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a26      	ldr	r2, [pc, #152]	; (800507c <BSP_AUDIO_OUT_MspInit+0x138>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d137      	bne.n	8005058 <BSP_AUDIO_OUT_MspInit+0x114>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004fee:	4b24      	ldr	r3, [pc, #144]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8004ff0:	2240      	movs	r2, #64	; 0x40
 8004ff2:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004ff4:	4b22      	ldr	r3, [pc, #136]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004ffa:	4b21      	ldr	r3, [pc, #132]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8004ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005000:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005002:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005008:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800500a:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800500c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005010:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005018:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800501a:	4b19      	ldr	r3, [pc, #100]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800501c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005020:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8005022:	4b17      	ldr	r3, [pc, #92]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005024:	2204      	movs	r2, #4
 8005026:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005028:	4b15      	ldr	r3, [pc, #84]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800502a:	2203      	movs	r2, #3
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800502e:	4b14      	ldr	r3, [pc, #80]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005030:	2200      	movs	r2, #0
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005034:	4b12      	ldr	r3, [pc, #72]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800503a:	4b11      	ldr	r3, [pc, #68]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800503c:	4a11      	ldr	r2, [pc, #68]	; (8005084 <BSP_AUDIO_OUT_MspInit+0x140>)
 800503e:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a0f      	ldr	r2, [pc, #60]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005044:	66da      	str	r2, [r3, #108]	; 0x6c
 8005046:	4a0e      	ldr	r2, [pc, #56]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800504c:	480c      	ldr	r0, [pc, #48]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800504e:	f002 fa4b 	bl	80074e8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 8005052:	480b      	ldr	r0, [pc, #44]	; (8005080 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005054:	f002 f99a 	bl	800738c <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8005058:	2200      	movs	r2, #0
 800505a:	210e      	movs	r1, #14
 800505c:	2039      	movs	r0, #57	; 0x39
 800505e:	f002 f851 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8005062:	2039      	movs	r0, #57	; 0x39
 8005064:	f002 f86a 	bl	800713c <HAL_NVIC_EnableIRQ>
}
 8005068:	bf00      	nop
 800506a:	3730      	adds	r7, #48	; 0x30
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40023800 	.word	0x40023800
 8005074:	40021000 	.word	0x40021000
 8005078:	40021800 	.word	0x40021800
 800507c:	40015804 	.word	0x40015804
 8005080:	20002930 	.word	0x20002930
 8005084:	40026428 	.word	0x40026428

08005088 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8005088:	b580      	push	{r7, lr}
 800508a:	b0a8      	sub	sp, #160	; 0xa0
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005094:	f107 0310 	add.w	r3, r7, #16
 8005098:	4618      	mov	r0, r3
 800509a:	f007 fd41 	bl	800cb20 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <BSP_AUDIO_OUT_ClockConfig+0x34>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f245 6222 	movw	r2, #22050	; 0x5622
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <BSP_AUDIO_OUT_ClockConfig+0x34>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d112      	bne.n	80050e2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80050bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050c0:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 80050c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80050c8:	f240 13ad 	movw	r3, #429	; 0x1ad
 80050cc:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80050ce:	2302      	movs	r3, #2
 80050d0:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80050d2:	2313      	movs	r3, #19
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80050d6:	f107 0310 	add.w	r3, r7, #16
 80050da:	4618      	mov	r0, r3
 80050dc:	f007 f8f8 	bl	800c2d0 <HAL_RCCEx_PeriphCLKConfig>
 80050e0:	e012      	b.n	8005108 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* SAI clock config 
    PLLSAI_VCO: VCO_344M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz 
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */  
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80050e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050e6:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 80050e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 80050ee:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80050f2:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 80050f4:	2307      	movs	r3, #7
 80050f6:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 80050f8:	2301      	movs	r3, #1
 80050fa:	637b      	str	r3, [r7, #52]	; 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80050fc:	f107 0310 	add.w	r3, r7, #16
 8005100:	4618      	mov	r0, r3
 8005102:	f007 f8e5 	bl	800c2d0 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	37a0      	adds	r7, #160	; 0xa0
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8005118:	f7fc f912 	bl	8001340 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800512c:	f7fc f8f4 	bl	8001318 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800513c:	2001      	movs	r0, #1
 800513e:	f000 f803 	bl	8005148 <BSP_LCD_InitEx>
 8005142:	4603      	mov	r3, r0
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd80      	pop	{r7, pc}

08005148 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b090      	sub	sp, #64	; 0x40
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8005152:	f646 3325 	movw	r3, #27429	; 0x6b25
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8005160:	f000 f936 	bl	80053d0 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8005164:	f000 fc9a 	bl	8005a9c <LCD_IO_GetID>
 8005168:	4603      	mov	r3, r0
 800516a:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 800516c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800516e:	2b11      	cmp	r3, #17
 8005170:	d001      	beq.n	8005176 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8005172:	2301      	movs	r3, #1
 8005174:	e113      	b.n	800539e <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8005176:	f000 fc99 	bl	8005aac <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800517a:	4b8b      	ldr	r3, [pc, #556]	; (80053a8 <BSP_LCD_InitEx+0x260>)
 800517c:	4a8b      	ldr	r2, [pc, #556]	; (80053ac <BSP_LCD_InitEx+0x264>)
 800517e:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8005180:	4889      	ldr	r0, [pc, #548]	; (80053a8 <BSP_LCD_InitEx+0x260>)
 8005182:	f003 f9f5 	bl	8008570 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8005186:	2364      	movs	r3, #100	; 0x64
 8005188:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800518a:	2305      	movs	r3, #5
 800518c:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8005192:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005196:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005198:	4b83      	ldr	r3, [pc, #524]	; (80053a8 <BSP_LCD_InitEx+0x260>)
 800519a:	2201      	movs	r2, #1
 800519c:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	089b      	lsrs	r3, r3, #2
 80051a2:	4a83      	ldr	r2, [pc, #524]	; (80053b0 <BSP_LCD_InitEx+0x268>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	0a9b      	lsrs	r3, r3, #10
 80051aa:	4a7f      	ldr	r2, [pc, #508]	; (80053a8 <BSP_LCD_InitEx+0x260>)
 80051ac:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	4619      	mov	r1, r3
 80051b4:	487c      	ldr	r0, [pc, #496]	; (80053a8 <BSP_LCD_InitEx+0x260>)
 80051b6:	f003 f8bf 	bl	8008338 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d108      	bne.n	80051d2 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 80051c0:	4b7c      	ldr	r3, [pc, #496]	; (80053b4 <BSP_LCD_InitEx+0x26c>)
 80051c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80051c6:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80051c8:	4b7b      	ldr	r3, [pc, #492]	; (80053b8 <BSP_LCD_InitEx+0x270>)
 80051ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e007      	b.n	80051e2 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80051d2:	4b78      	ldr	r3, [pc, #480]	; (80053b4 <BSP_LCD_InitEx+0x26c>)
 80051d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80051d8:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80051da:	4b77      	ldr	r3, [pc, #476]	; (80053b8 <BSP_LCD_InitEx+0x270>)
 80051dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80051e0:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80051e2:	4b74      	ldr	r3, [pc, #464]	; (80053b4 <BSP_LCD_InitEx+0x26c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80051e8:	4b73      	ldr	r3, [pc, #460]	; (80053b8 <BSP_LCD_InitEx+0x270>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
#if defined (USE_STM32F769I_DISCO_REVB03)
  VSA  = NT35510_480X800_VSYNC;
 80051ee:	2378      	movs	r3, #120	; 0x78
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = NT35510_480X800_VBP;
 80051f2:	2396      	movs	r3, #150	; 0x96
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = NT35510_480X800_VFP;
 80051f6:	2396      	movs	r3, #150	; 0x96
 80051f8:	623b      	str	r3, [r7, #32]
  HSA  = NT35510_480X800_HSYNC;
 80051fa:	2302      	movs	r3, #2
 80051fc:	61fb      	str	r3, [r7, #28]
  HBP  = NT35510_480X800_HBP;
 80051fe:	2322      	movs	r3, #34	; 0x22
 8005200:	61bb      	str	r3, [r7, #24]
  HFP  = NT35510_480X800_HFP;  
 8005202:	2322      	movs	r3, #34	; 0x22
 8005204:	617b      	str	r3, [r7, #20]
  HSA  = OTM8009A_480X800_HSYNC;
  HBP  = OTM8009A_480X800_HBP;
  HFP  = OTM8009A_480X800_HFP;
#endif /* USE_STM32F769I_DISCO_REVB03 */

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8005206:	4b6d      	ldr	r3, [pc, #436]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 800520c:	4b6b      	ldr	r3, [pc, #428]	; (80053bc <BSP_LCD_InitEx+0x274>)
 800520e:	2205      	movs	r2, #5
 8005210:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8005212:	4b6a      	ldr	r3, [pc, #424]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005214:	2200      	movs	r2, #0
 8005216:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8005218:	4b68      	ldr	r3, [pc, #416]	; (80053bc <BSP_LCD_InitEx+0x274>)
 800521a:	2200      	movs	r2, #0
 800521c:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 800521e:	4b67      	ldr	r3, [pc, #412]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005220:	2200      	movs	r2, #0
 8005222:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8005224:	4b65      	ldr	r3, [pc, #404]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005226:	2202      	movs	r2, #2
 8005228:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800522a:	4b64      	ldr	r3, [pc, #400]	; (80053bc <BSP_LCD_InitEx+0x274>)
 800522c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005230:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8005232:	4b62      	ldr	r3, [pc, #392]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005234:	2200      	movs	r2, #0
 8005236:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8005238:	4a60      	ldr	r2, [pc, #384]	; (80053bc <BSP_LCD_InitEx+0x274>)
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005242:	fb03 f202 	mul.w	r2, r3, r2
 8005246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	4a5b      	ldr	r2, [pc, #364]	; (80053bc <BSP_LCD_InitEx+0x274>)
 800524e:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005254:	fb03 f202 	mul.w	r2, r3, r2
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	4a57      	ldr	r2, [pc, #348]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005260:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8005262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	441a      	add	r2, r3
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	441a      	add	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005272:	fb03 f202 	mul.w	r2, r3, r2
 8005276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	4a4f      	ldr	r2, [pc, #316]	; (80053bc <BSP_LCD_InitEx+0x274>)
 800527e:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8005280:	4a4e      	ldr	r2, [pc, #312]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8005286:	4a4d      	ldr	r2, [pc, #308]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 800528c:	4a4b      	ldr	r2, [pc, #300]	; (80053bc <BSP_LCD_InitEx+0x274>)
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8005292:	4a4a      	ldr	r2, [pc, #296]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8005298:	4b48      	ldr	r3, [pc, #288]	; (80053bc <BSP_LCD_InitEx+0x274>)
 800529a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800529e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80052a0:	4b46      	ldr	r3, [pc, #280]	; (80053bc <BSP_LCD_InitEx+0x274>)
 80052a2:	2210      	movs	r2, #16
 80052a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80052a6:	4b45      	ldr	r3, [pc, #276]	; (80053bc <BSP_LCD_InitEx+0x274>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80052ac:	4b43      	ldr	r3, [pc, #268]	; (80053bc <BSP_LCD_InitEx+0x274>)
 80052ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052b2:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80052b4:	4b41      	ldr	r3, [pc, #260]	; (80053bc <BSP_LCD_InitEx+0x274>)
 80052b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052ba:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80052bc:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <BSP_LCD_InitEx+0x274>)
 80052be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052c2:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80052c4:	4b3d      	ldr	r3, [pc, #244]	; (80053bc <BSP_LCD_InitEx+0x274>)
 80052c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80052cc:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <BSP_LCD_InitEx+0x274>)
 80052ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d2:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80052d4:	4b39      	ldr	r3, [pc, #228]	; (80053bc <BSP_LCD_InitEx+0x274>)
 80052d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80052dc:	4937      	ldr	r1, [pc, #220]	; (80053bc <BSP_LCD_InitEx+0x274>)
 80052de:	4832      	ldr	r0, [pc, #200]	; (80053a8 <BSP_LCD_InitEx+0x260>)
 80052e0:	f003 fb7c 	bl	80089dc <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	4a35      	ldr	r2, [pc, #212]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 80052ea:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4413      	add	r3, r2
 80052f2:	3b01      	subs	r3, #1
 80052f4:	4a32      	ldr	r2, [pc, #200]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 80052f6:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80052f8:	4b2e      	ldr	r3, [pc, #184]	; (80053b4 <BSP_LCD_InitEx+0x26c>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	441a      	add	r2, r3
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	4413      	add	r3, r2
 8005304:	3b01      	subs	r3, #1
 8005306:	4a2e      	ldr	r2, [pc, #184]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 8005308:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800530a:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <BSP_LCD_InitEx+0x26c>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	441a      	add	r2, r3
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	441a      	add	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	3b01      	subs	r3, #1
 800531c:	4a28      	ldr	r2, [pc, #160]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 800531e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8005320:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <BSP_LCD_InitEx+0x26c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 8005326:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8005328:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <BSP_LCD_InitEx+0x270>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a24      	ldr	r2, [pc, #144]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 800532e:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005330:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <BSP_LCD_InitEx+0x27c>)
 8005332:	2208      	movs	r2, #8
 8005334:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8005336:	4b23      	ldr	r3, [pc, #140]	; (80053c4 <BSP_LCD_InitEx+0x27c>)
 8005338:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800533c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800533e:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <BSP_LCD_InitEx+0x27c>)
 8005340:	2207      	movs	r2, #7
 8005342:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8005344:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <BSP_LCD_InitEx+0x27c>)
 8005346:	2200      	movs	r2, #0
 8005348:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800534a:	481e      	ldr	r0, [pc, #120]	; (80053c4 <BSP_LCD_InitEx+0x27c>)
 800534c:	f006 ffc0 	bl	800c2d0 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8005350:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8005358:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8005360:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005368:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 800536a:	2200      	movs	r2, #0
 800536c:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 800536e:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 8005370:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <BSP_LCD_InitEx+0x280>)
 8005372:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8005374:	4911      	ldr	r1, [pc, #68]	; (80053bc <BSP_LCD_InitEx+0x274>)
 8005376:	4812      	ldr	r0, [pc, #72]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 8005378:	f005 fd72 	bl	800ae60 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 800537c:	4810      	ldr	r0, [pc, #64]	; (80053c0 <BSP_LCD_InitEx+0x278>)
 800537e:	f005 f991 	bl	800a6a4 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8005382:	4809      	ldr	r0, [pc, #36]	; (80053a8 <BSP_LCD_InitEx+0x260>)
 8005384:	f003 ffbc 	bl	8009300 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8005388:	f001 fa62 	bl	8006850 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800538c:	480f      	ldr	r0, [pc, #60]	; (80053cc <BSP_LCD_InitEx+0x284>)
 800538e:	f000 f925 	bl	80055dc <BSP_LCD_SetFont>
/***********************NT35510 Initialization********************************/  
  
  /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
   * depending on configuration set in 'hdsivideo_handle'.
   */
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	4619      	mov	r1, r3
 8005396:	2000      	movs	r0, #0
 8005398:	f7fd fe28 	bl	8002fec <NT35510_Init>

/***********************End OTM8009A Initialization****************************/ 
#endif /* USE_STM32F769I_DISCO_REVB03 */


  return LCD_OK; 
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3740      	adds	r7, #64	; 0x40
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20002afc 	.word	0x20002afc
 80053ac:	40016c00 	.word	0x40016c00
 80053b0:	43215e57 	.word	0x43215e57
 80053b4:	2000008c 	.word	0x2000008c
 80053b8:	20000090 	.word	0x20000090
 80053bc:	20002990 	.word	0x20002990
 80053c0:	20002a54 	.word	0x20002a54
 80053c4:	20002b34 	.word	0x20002b34
 80053c8:	40016800 	.word	0x40016800
 80053cc:	20000084 	.word	0x20000084

080053d0 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80053d6:	4b18      	ldr	r3, [pc, #96]	; (8005438 <BSP_LCD_Reset+0x68>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <BSP_LCD_Reset+0x68>)
 80053dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053e0:	6313      	str	r3, [r2, #48]	; 0x30
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <BSP_LCD_Reset+0x68>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80053ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f2:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80053f4:	2301      	movs	r3, #1
 80053f6:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80053f8:	2301      	movs	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80053fc:	2303      	movs	r3, #3
 80053fe:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8005400:	1d3b      	adds	r3, r7, #4
 8005402:	4619      	mov	r1, r3
 8005404:	480d      	ldr	r0, [pc, #52]	; (800543c <BSP_LCD_Reset+0x6c>)
 8005406:	f004 f89f 	bl	8009548 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800540a:	2200      	movs	r2, #0
 800540c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005410:	480a      	ldr	r0, [pc, #40]	; (800543c <BSP_LCD_Reset+0x6c>)
 8005412:	f004 fb69 	bl	8009ae8 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8005416:	2014      	movs	r0, #20
 8005418:	f001 fd74 	bl	8006f04 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 800541c:	2201      	movs	r2, #1
 800541e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005422:	4806      	ldr	r0, [pc, #24]	; (800543c <BSP_LCD_Reset+0x6c>)
 8005424:	f004 fb60 	bl	8009ae8 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8005428:	200a      	movs	r0, #10
 800542a:	f001 fd6b 	bl	8006f04 <HAL_Delay>
}
 800542e:	bf00      	nop
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40023800 	.word	0x40023800
 800543c:	40022400 	.word	0x40022400

08005440 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <BSP_LCD_GetXSize+0x14>)
 8005446:	681b      	ldr	r3, [r3, #0]
}
 8005448:	4618      	mov	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	2000008c 	.word	0x2000008c

08005458 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 800545c:	4b03      	ldr	r3, [pc, #12]	; (800546c <BSP_LCD_GetYSize+0x14>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000090 	.word	0x20000090

08005470 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b090      	sub	sp, #64	; 0x40
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	6039      	str	r1, [r7, #0]
 800547a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8005480:	f7ff ffde 	bl	8005440 <BSP_LCD_GetXSize>
 8005484:	4603      	mov	r3, r0
 8005486:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800548c:	f7ff ffe4 	bl	8005458 <BSP_LCD_GetYSize>
 8005490:	4603      	mov	r3, r0
 8005492:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800549c:	23ff      	movs	r3, #255	; 0xff
 800549e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80054b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80054bc:	2307      	movs	r3, #7
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80054c0:	f7ff ffbe 	bl	8005440 <BSP_LCD_GetXSize>
 80054c4:	4603      	mov	r3, r0
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80054c8:	f7ff ffc6 	bl	8005458 <BSP_LCD_GetYSize>
 80054cc:	4603      	mov	r3, r0
 80054ce:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80054d0:	88fa      	ldrh	r2, [r7, #6]
 80054d2:	f107 030c 	add.w	r3, r7, #12
 80054d6:	4619      	mov	r1, r3
 80054d8:	4812      	ldr	r0, [pc, #72]	; (8005524 <BSP_LCD_LayerDefaultInit+0xb4>)
 80054da:	f005 fa6b 	bl	800a9b4 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80054de:	88fa      	ldrh	r2, [r7, #6]
 80054e0:	4911      	ldr	r1, [pc, #68]	; (8005528 <BSP_LCD_LayerDefaultInit+0xb8>)
 80054e2:	4613      	mov	r3, r2
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	3304      	adds	r3, #4
 80054ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054f2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	490c      	ldr	r1, [pc, #48]	; (8005528 <BSP_LCD_LayerDefaultInit+0xb8>)
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	3308      	adds	r3, #8
 8005504:	4a09      	ldr	r2, [pc, #36]	; (800552c <BSP_LCD_LayerDefaultInit+0xbc>)
 8005506:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	4907      	ldr	r1, [pc, #28]	; (8005528 <BSP_LCD_LayerDefaultInit+0xb8>)
 800550c:	4613      	mov	r3, r2
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800551a:	601a      	str	r2, [r3, #0]
}
 800551c:	bf00      	nop
 800551e:	3740      	adds	r7, #64	; 0x40
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20002a54 	.word	0x20002a54
 8005528:	20002b1c 	.word	0x20002b1c
 800552c:	20000084 	.word	0x20000084

08005530 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <BSP_LCD_SelectLayer+0x1c>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6013      	str	r3, [r2, #0]
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20002b18 	.word	0x20002b18

08005550 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color keying.
  * @param  LayerIndex: Layer foreground or background
  * @param  RGBValue: Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&(hltdc_discovery), RGBValue, LayerIndex);
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	4805      	ldr	r0, [pc, #20]	; (8005574 <BSP_LCD_SetColorKeying+0x24>)
 8005560:	f005 fa66 	bl	800aa30 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&(hltdc_discovery), LayerIndex);
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4803      	ldr	r0, [pc, #12]	; (8005574 <BSP_LCD_SetColorKeying+0x24>)
 8005568:	f005 faa6 	bl	800aab8 <HAL_LTDC_EnableColorKeying>
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20002a54 	.word	0x20002a54

08005578 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <BSP_LCD_SetTextColor+0x28>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4907      	ldr	r1, [pc, #28]	; (80055a4 <BSP_LCD_SetTextColor+0x2c>)
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	601a      	str	r2, [r3, #0]
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	20002b18 	.word	0x20002b18
 80055a4:	20002b1c 	.word	0x20002b1c

080055a8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <BSP_LCD_SetBackColor+0x2c>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4908      	ldr	r1, [pc, #32]	; (80055d8 <BSP_LCD_SetBackColor+0x30>)
 80055b6:	4613      	mov	r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3304      	adds	r3, #4
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20002b18 	.word	0x20002b18
 80055d8:	20002b1c 	.word	0x20002b1c

080055dc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <BSP_LCD_SetFont+0x2c>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	4908      	ldr	r1, [pc, #32]	; (800560c <BSP_LCD_SetFont+0x30>)
 80055ea:	4613      	mov	r3, r2
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	3308      	adds	r3, #8
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20002b18 	.word	0x20002b18
 800560c:	20002b1c 	.word	0x20002b1c

08005610 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8005614:	4b07      	ldr	r3, [pc, #28]	; (8005634 <BSP_LCD_GetFont+0x24>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4907      	ldr	r1, [pc, #28]	; (8005638 <BSP_LCD_GetFont+0x28>)
 800561a:	4613      	mov	r3, r2
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	3308      	adds	r3, #8
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20002b18 	.word	0x20002b18
 8005638:	20002b1c 	.word	0x20002b1c

0800563c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800563c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800563e:	b085      	sub	sp, #20
 8005640:	af02      	add	r7, sp, #8
 8005642:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005644:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <BSP_LCD_Clear+0x48>)
 8005646:	681c      	ldr	r4, [r3, #0]
 8005648:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <BSP_LCD_Clear+0x48>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a0e      	ldr	r2, [pc, #56]	; (8005688 <BSP_LCD_Clear+0x4c>)
 800564e:	2134      	movs	r1, #52	; 0x34
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	335c      	adds	r3, #92	; 0x5c
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461e      	mov	r6, r3
 800565c:	f7ff fef0 	bl	8005440 <BSP_LCD_GetXSize>
 8005660:	4605      	mov	r5, r0
 8005662:	f7ff fef9 	bl	8005458 <BSP_LCD_GetYSize>
 8005666:	4602      	mov	r2, r0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	2300      	movs	r3, #0
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	462a      	mov	r2, r5
 8005674:	4631      	mov	r1, r6
 8005676:	4620      	mov	r0, r4
 8005678:	f000 fb60 	bl	8005d3c <LL_FillBuffer>
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005684:	20002b18 	.word	0x20002b18
 8005688:	20002a54 	.word	0x20002a54

0800568c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	80fb      	strh	r3, [r7, #6]
 8005696:	460b      	mov	r3, r1
 8005698:	80bb      	strh	r3, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800569e:	4b1b      	ldr	r3, [pc, #108]	; (800570c <BSP_LCD_DisplayChar+0x80>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	491b      	ldr	r1, [pc, #108]	; (8005710 <BSP_LCD_DisplayChar+0x84>)
 80056a4:	4613      	mov	r3, r2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3308      	adds	r3, #8
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80056ba:	4b14      	ldr	r3, [pc, #80]	; (800570c <BSP_LCD_DisplayChar+0x80>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4c14      	ldr	r4, [pc, #80]	; (8005710 <BSP_LCD_DisplayChar+0x84>)
 80056c0:	4613      	mov	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4423      	add	r3, r4
 80056ca:	3308      	adds	r3, #8
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80056d0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80056d4:	4b0d      	ldr	r3, [pc, #52]	; (800570c <BSP_LCD_DisplayChar+0x80>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4c0d      	ldr	r4, [pc, #52]	; (8005710 <BSP_LCD_DisplayChar+0x84>)
 80056da:	4613      	mov	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4423      	add	r3, r4
 80056e4:	3308      	adds	r3, #8
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	889b      	ldrh	r3, [r3, #4]
 80056ea:	3307      	adds	r3, #7
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da00      	bge.n	80056f2 <BSP_LCD_DisplayChar+0x66>
 80056f0:	3307      	adds	r3, #7
 80056f2:	10db      	asrs	r3, r3, #3
 80056f4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80056f8:	18ca      	adds	r2, r1, r3
 80056fa:	88b9      	ldrh	r1, [r7, #4]
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fa64 	bl	8005bcc <DrawChar>
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bd90      	pop	{r4, r7, pc}
 800570c:	20002b18 	.word	0x20002b18
 8005710:	20002b1c 	.word	0x20002b1c

08005714 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8005714:	b5b0      	push	{r4, r5, r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	60ba      	str	r2, [r7, #8]
 800571c:	461a      	mov	r2, r3
 800571e:	4603      	mov	r3, r0
 8005720:	81fb      	strh	r3, [r7, #14]
 8005722:	460b      	mov	r3, r1
 8005724:	81bb      	strh	r3, [r7, #12]
 8005726:	4613      	mov	r3, r2
 8005728:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800572a:	2301      	movs	r3, #1
 800572c:	83fb      	strh	r3, [r7, #30]
 800572e:	2300      	movs	r3, #0
 8005730:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800573e:	e002      	b.n	8005746 <BSP_LCD_DisplayStringAt+0x32>
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	3301      	adds	r3, #1
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	617a      	str	r2, [r7, #20]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f6      	bne.n	8005740 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8005752:	f7ff fe75 	bl	8005440 <BSP_LCD_GetXSize>
 8005756:	4601      	mov	r1, r0
 8005758:	4b50      	ldr	r3, [pc, #320]	; (800589c <BSP_LCD_DisplayStringAt+0x188>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4850      	ldr	r0, [pc, #320]	; (80058a0 <BSP_LCD_DisplayStringAt+0x18c>)
 800575e:	4613      	mov	r3, r2
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4403      	add	r3, r0
 8005768:	3308      	adds	r3, #8
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	889b      	ldrh	r3, [r3, #4]
 800576e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005772:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	2b03      	cmp	r3, #3
 8005778:	d01c      	beq.n	80057b4 <BSP_LCD_DisplayStringAt+0xa0>
 800577a:	2b03      	cmp	r3, #3
 800577c:	dc33      	bgt.n	80057e6 <BSP_LCD_DisplayStringAt+0xd2>
 800577e:	2b01      	cmp	r3, #1
 8005780:	d002      	beq.n	8005788 <BSP_LCD_DisplayStringAt+0x74>
 8005782:	2b02      	cmp	r3, #2
 8005784:	d019      	beq.n	80057ba <BSP_LCD_DisplayStringAt+0xa6>
 8005786:	e02e      	b.n	80057e6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	1ad1      	subs	r1, r2, r3
 800578e:	4b43      	ldr	r3, [pc, #268]	; (800589c <BSP_LCD_DisplayStringAt+0x188>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4843      	ldr	r0, [pc, #268]	; (80058a0 <BSP_LCD_DisplayStringAt+0x18c>)
 8005794:	4613      	mov	r3, r2
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4403      	add	r3, r0
 800579e:	3308      	adds	r3, #8
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	889b      	ldrh	r3, [r3, #4]
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	89fb      	ldrh	r3, [r7, #14]
 80057ae:	4413      	add	r3, r2
 80057b0:	83fb      	strh	r3, [r7, #30]
      break;
 80057b2:	e01b      	b.n	80057ec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80057b4:	89fb      	ldrh	r3, [r7, #14]
 80057b6:	83fb      	strh	r3, [r7, #30]
      break;
 80057b8:	e018      	b.n	80057ec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	b299      	uxth	r1, r3
 80057c2:	4b36      	ldr	r3, [pc, #216]	; (800589c <BSP_LCD_DisplayStringAt+0x188>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4836      	ldr	r0, [pc, #216]	; (80058a0 <BSP_LCD_DisplayStringAt+0x18c>)
 80057c8:	4613      	mov	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4403      	add	r3, r0
 80057d2:	3308      	adds	r3, #8
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	889b      	ldrh	r3, [r3, #4]
 80057d8:	fb11 f303 	smulbb	r3, r1, r3
 80057dc:	b29a      	uxth	r2, r3
 80057de:	89fb      	ldrh	r3, [r7, #14]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	83fb      	strh	r3, [r7, #30]
      break;
 80057e4:	e002      	b.n	80057ec <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 80057e6:	89fb      	ldrh	r3, [r7, #14]
 80057e8:	83fb      	strh	r3, [r7, #30]
      break;
 80057ea:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80057ec:	8bfb      	ldrh	r3, [r7, #30]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <BSP_LCD_DisplayStringAt+0xe6>
 80057f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da1d      	bge.n	8005836 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 80057fa:	2301      	movs	r3, #1
 80057fc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80057fe:	e01a      	b.n	8005836 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	781a      	ldrb	r2, [r3, #0]
 8005804:	89b9      	ldrh	r1, [r7, #12]
 8005806:	8bfb      	ldrh	r3, [r7, #30]
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff ff3f 	bl	800568c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800580e:	4b23      	ldr	r3, [pc, #140]	; (800589c <BSP_LCD_DisplayStringAt+0x188>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4923      	ldr	r1, [pc, #140]	; (80058a0 <BSP_LCD_DisplayStringAt+0x18c>)
 8005814:	4613      	mov	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	3308      	adds	r3, #8
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	889a      	ldrh	r2, [r3, #4]
 8005824:	8bfb      	ldrh	r3, [r7, #30]
 8005826:	4413      	add	r3, r2
 8005828:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	3301      	adds	r3, #1
 800582e:	60bb      	str	r3, [r7, #8]
    i++;
 8005830:	8bbb      	ldrh	r3, [r7, #28]
 8005832:	3301      	adds	r3, #1
 8005834:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf14      	ite	ne
 800583e:	2301      	movne	r3, #1
 8005840:	2300      	moveq	r3, #0
 8005842:	b2dc      	uxtb	r4, r3
 8005844:	f7ff fdfc 	bl	8005440 <BSP_LCD_GetXSize>
 8005848:	8bb9      	ldrh	r1, [r7, #28]
 800584a:	4b14      	ldr	r3, [pc, #80]	; (800589c <BSP_LCD_DisplayStringAt+0x188>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4d14      	ldr	r5, [pc, #80]	; (80058a0 <BSP_LCD_DisplayStringAt+0x18c>)
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	442b      	add	r3, r5
 800585a:	3308      	adds	r3, #8
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	889b      	ldrh	r3, [r3, #4]
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	1ac3      	subs	r3, r0, r3
 8005866:	b299      	uxth	r1, r3
 8005868:	4b0c      	ldr	r3, [pc, #48]	; (800589c <BSP_LCD_DisplayStringAt+0x188>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	480c      	ldr	r0, [pc, #48]	; (80058a0 <BSP_LCD_DisplayStringAt+0x18c>)
 800586e:	4613      	mov	r3, r2
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4403      	add	r3, r0
 8005878:	3308      	adds	r3, #8
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	889b      	ldrh	r3, [r3, #4]
 800587e:	4299      	cmp	r1, r3
 8005880:	bf2c      	ite	cs
 8005882:	2301      	movcs	r3, #1
 8005884:	2300      	movcc	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	4023      	ands	r3, r4
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1b7      	bne.n	8005800 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bdb0      	pop	{r4, r5, r7, pc}
 800589a:	bf00      	nop
 800589c:	20002b18 	.word	0x20002b18
 80058a0:	20002b1c 	.word	0x20002b1c

080058a4 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b08b      	sub	sp, #44	; 0x2c
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	330a      	adds	r3, #10
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	330b      	adds	r3, #11
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	441a      	add	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	330c      	adds	r3, #12
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	041b      	lsls	r3, r3, #16
 80058de:	441a      	add	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	330d      	adds	r3, #13
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	4413      	add	r3, r2
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3312      	adds	r3, #18
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3313      	adds	r3, #19
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	441a      	add	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3314      	adds	r3, #20
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	041b      	lsls	r3, r3, #16
 8005906:	441a      	add	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3315      	adds	r3, #21
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	061b      	lsls	r3, r3, #24
 8005910:	4413      	add	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3316      	adds	r3, #22
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3317      	adds	r3, #23
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	441a      	add	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3318      	adds	r3, #24
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	041b      	lsls	r3, r3, #16
 800592e:	441a      	add	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3319      	adds	r3, #25
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	061b      	lsls	r3, r3, #24
 8005938:	4413      	add	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	331c      	adds	r3, #28
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	331d      	adds	r3, #29
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	4413      	add	r3, r2
 800594e:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8005950:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <BSP_LCD_DrawBitmap+0x15c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2b      	ldr	r2, [pc, #172]	; (8005a04 <BSP_LCD_DrawBitmap+0x160>)
 8005956:	2134      	movs	r1, #52	; 0x34
 8005958:	fb01 f303 	mul.w	r3, r1, r3
 800595c:	4413      	add	r3, r2
 800595e:	335c      	adds	r3, #92	; 0x5c
 8005960:	681c      	ldr	r4, [r3, #0]
 8005962:	f7ff fd6d 	bl	8005440 <BSP_LCD_GetXSize>
 8005966:	4602      	mov	r2, r0
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	fb03 f202 	mul.w	r2, r3, r2
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4423      	add	r3, r4
 8005976:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3b20      	subs	r3, #32
 800597c:	2b07      	cmp	r3, #7
 800597e:	d802      	bhi.n	8005986 <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]
 8005984:	e008      	b.n	8005998 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3b10      	subs	r3, #16
 800598a:	2b07      	cmp	r3, #7
 800598c:	d802      	bhi.n	8005994 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 800598e:	2302      	movs	r3, #2
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	e001      	b.n	8005998 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8005994:	2301      	movs	r3, #1
 8005996:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3b01      	subs	r3, #1
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	08d2      	lsrs	r2, r2, #3
 80059a6:	fb03 f202 	mul.w	r2, r3, r2
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	4413      	add	r3, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80059b4:	2300      	movs	r3, #0
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
 80059b8:	e018      	b.n	80059ec <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 80059ba:	6a39      	ldr	r1, [r7, #32]
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f9f3 	bl	8005dac <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 80059c6:	f7ff fd3b 	bl	8005440 <BSP_LCD_GetXSize>
 80059ca:	4603      	mov	r3, r0
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	6a3a      	ldr	r2, [r7, #32]
 80059d0:	4413      	add	r3, r2
 80059d2:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	08db      	lsrs	r3, r3, #3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	425b      	negs	r3, r3
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	4413      	add	r3, r2
 80059e4:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	3301      	adds	r3, #1
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
 80059ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d3e2      	bcc.n	80059ba <BSP_LCD_DrawBitmap+0x116>
  }
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	372c      	adds	r7, #44	; 0x2c
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd90      	pop	{r4, r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20002b18 	.word	0x20002b18
 8005a04:	20002a54 	.word	0x20002a54

08005a08 <BSP_LCD_SetBrightness>:
/**
  * @brief  Set the brightness value 
  * @param  BrightnessValue: [00: Min (black), 100 Max]
  */
void BSP_LCD_SetBrightness(uint8_t BrightnessValue)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
  {
    /* Send Display on DCS command to display */
    HAL_DSI_ShortWrite(&hdsi_discovery, 
                       LCD_OTM8009A_ID, 
                       DSI_DCS_SHORT_PKT_WRITE_P1, 
                       OTM8009A_CMD_WRDISBV, (uint16_t)(BrightnessValue * 255)/100);
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	0212      	lsls	r2, r2, #8
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	b29b      	uxth	r3, r3
    HAL_DSI_ShortWrite(&hdsi_discovery, 
 8005a1e:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <BSP_LCD_SetBrightness+0x38>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	2351      	movs	r3, #81	; 0x51
 8005a2c:	2215      	movs	r2, #21
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4804      	ldr	r0, [pc, #16]	; (8005a44 <BSP_LCD_SetBrightness+0x3c>)
 8005a32:	f003 fca1 	bl	8009378 <HAL_DSI_ShortWrite>
  }  
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	51eb851f 	.word	0x51eb851f
 8005a44:	20002afc 	.word	0x20002afc

08005a48 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d80d      	bhi.n	8005a74 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4613      	mov	r3, r2
 8005a68:	2215      	movs	r2, #21
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	480a      	ldr	r0, [pc, #40]	; (8005a98 <DSI_IO_WriteCmd+0x50>)
 8005a6e:	f003 fc83 	bl	8009378 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8005a72:	e00d      	b.n	8005a90 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	9200      	str	r2, [sp, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2239      	movs	r2, #57	; 0x39
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4803      	ldr	r0, [pc, #12]	; (8005a98 <DSI_IO_WriteCmd+0x50>)
 8005a8c:	f003 fc96 	bl	80093bc <HAL_DSI_LongWrite>
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20002afc 	.word	0x20002afc

08005a9c <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8005aa0:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005ab2:	4b32      	ldr	r3, [pc, #200]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab6:	4a31      	ldr	r2, [pc, #196]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005ab8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005abc:	6453      	str	r3, [r2, #68]	; 0x44
 8005abe:	4b2f      	ldr	r3, [pc, #188]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8005aca:	4b2c      	ldr	r3, [pc, #176]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	4a2b      	ldr	r2, [pc, #172]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ad4:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	4a28      	ldr	r2, [pc, #160]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005adc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ae0:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005ae2:	4b26      	ldr	r3, [pc, #152]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	4a25      	ldr	r2, [pc, #148]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005ae8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005aec:	6313      	str	r3, [r2, #48]	; 0x30
 8005aee:	4b23      	ldr	r3, [pc, #140]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8005afa:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b04:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8005b06:	4b1d      	ldr	r3, [pc, #116]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b10:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8005b12:	4b1a      	ldr	r3, [pc, #104]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b1e:	4b17      	ldr	r3, [pc, #92]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b26:	607b      	str	r3, [r7, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b34:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	4a10      	ldr	r2, [pc, #64]	; (8005b7c <BSP_LCD_MspInit+0xd0>)
 8005b3c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005b40:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8005b42:	2200      	movs	r2, #0
 8005b44:	2103      	movs	r1, #3
 8005b46:	2058      	movs	r0, #88	; 0x58
 8005b48:	f001 fadc 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005b4c:	2058      	movs	r0, #88	; 0x58
 8005b4e:	f001 faf5 	bl	800713c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2103      	movs	r1, #3
 8005b56:	205a      	movs	r0, #90	; 0x5a
 8005b58:	f001 fad4 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005b5c:	205a      	movs	r0, #90	; 0x5a
 8005b5e:	f001 faed 	bl	800713c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8005b62:	2200      	movs	r2, #0
 8005b64:	2103      	movs	r1, #3
 8005b66:	2062      	movs	r0, #98	; 0x62
 8005b68:	f001 facc 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8005b6c:	2062      	movs	r0, #98	; 0x62
 8005b6e:	f001 fae5 	bl	800713c <HAL_NVIC_EnableIRQ>
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40023800 	.word	0x40023800

08005b80 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005b80:	b5b0      	push	{r4, r5, r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	603a      	str	r2, [r7, #0]
 8005b8a:	80fb      	strh	r3, [r7, #6]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005b90:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <BSP_LCD_DrawPixel+0x44>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <BSP_LCD_DrawPixel+0x48>)
 8005b96:	2134      	movs	r1, #52	; 0x34
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	335c      	adds	r3, #92	; 0x5c
 8005ba0:	681c      	ldr	r4, [r3, #0]
 8005ba2:	88bd      	ldrh	r5, [r7, #4]
 8005ba4:	f7ff fc4c 	bl	8005440 <BSP_LCD_GetXSize>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	fb03 f205 	mul.w	r2, r3, r5
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4423      	add	r3, r4
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	6013      	str	r3, [r2, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8005bc4:	20002b18 	.word	0x20002b18
 8005bc8:	20002a54 	.word	0x20002a54

08005bcc <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	603a      	str	r2, [r7, #0]
 8005bd6:	80fb      	strh	r3, [r7, #6]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	2300      	movs	r3, #0
 8005be2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8005be4:	4b53      	ldr	r3, [pc, #332]	; (8005d34 <DrawChar+0x168>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4953      	ldr	r1, [pc, #332]	; (8005d38 <DrawChar+0x16c>)
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	88db      	ldrh	r3, [r3, #6]
 8005bfa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005bfc:	4b4d      	ldr	r3, [pc, #308]	; (8005d34 <DrawChar+0x168>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	494d      	ldr	r1, [pc, #308]	; (8005d38 <DrawChar+0x16c>)
 8005c02:	4613      	mov	r3, r2
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	889b      	ldrh	r3, [r3, #4]
 8005c12:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8005c14:	8a3b      	ldrh	r3, [r7, #16]
 8005c16:	3307      	adds	r3, #7
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	da00      	bge.n	8005c1e <DrawChar+0x52>
 8005c1c:	3307      	adds	r3, #7
 8005c1e:	10db      	asrs	r3, r3, #3
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	8a3b      	ldrh	r3, [r7, #16]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	e076      	b.n	8005d22 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005c34:	8a3b      	ldrh	r3, [r7, #16]
 8005c36:	3307      	adds	r3, #7
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	da00      	bge.n	8005c3e <DrawChar+0x72>
 8005c3c:	3307      	adds	r3, #7
 8005c3e:	10db      	asrs	r3, r3, #3
 8005c40:	461a      	mov	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	fb02 f303 	mul.w	r3, r2, r3
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8005c4e:	8a3b      	ldrh	r3, [r7, #16]
 8005c50:	3307      	adds	r3, #7
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da00      	bge.n	8005c58 <DrawChar+0x8c>
 8005c56:	3307      	adds	r3, #7
 8005c58:	10db      	asrs	r3, r3, #3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d002      	beq.n	8005c64 <DrawChar+0x98>
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d004      	beq.n	8005c6c <DrawChar+0xa0>
 8005c62:	e00c      	b.n	8005c7e <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	617b      	str	r3, [r7, #20]
      break;
 8005c6a:	e016      	b.n	8005c9a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	3201      	adds	r2, #1
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
      break;
 8005c7c:	e00d      	b.n	8005c9a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	041a      	lsls	r2, r3, #16
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	3301      	adds	r3, #1
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	3202      	adds	r2, #2
 8005c92:	7812      	ldrb	r2, [r2, #0]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
      break;
 8005c98:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e036      	b.n	8005d0e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8005ca0:	8a3a      	ldrh	r2, [r7, #16]
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	4413      	add	r3, r2
 8005caa:	3b01      	subs	r3, #1
 8005cac:	2201      	movs	r2, #1
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d012      	beq.n	8005ce2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	b298      	uxth	r0, r3
 8005cc6:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <DrawChar+0x168>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	491b      	ldr	r1, [pc, #108]	; (8005d38 <DrawChar+0x16c>)
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	88bb      	ldrh	r3, [r7, #4]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f7ff ff50 	bl	8005b80 <BSP_LCD_DrawPixel>
 8005ce0:	e012      	b.n	8005d08 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	4413      	add	r3, r2
 8005cea:	b298      	uxth	r0, r3
 8005cec:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <DrawChar+0x168>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4911      	ldr	r1, [pc, #68]	; (8005d38 <DrawChar+0x16c>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	88bb      	ldrh	r3, [r7, #4]
 8005d02:	4619      	mov	r1, r3
 8005d04:	f7ff ff3c 	bl	8005b80 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	8a3b      	ldrh	r3, [r7, #16]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d3c4      	bcc.n	8005ca0 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8005d16:	88bb      	ldrh	r3, [r7, #4]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	8a7b      	ldrh	r3, [r7, #18]
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d384      	bcc.n	8005c34 <DrawChar+0x68>
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20002b18 	.word	0x20002b18
 8005d38:	20002b1c 	.word	0x20002b1c

08005d3c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <LL_FillBuffer+0x68>)
 8005d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005d50:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <LL_FillBuffer+0x68>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8005d58:	4a12      	ldr	r2, [pc, #72]	; (8005da4 <LL_FillBuffer+0x68>)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <LL_FillBuffer+0x68>)
 8005d60:	4a11      	ldr	r2, [pc, #68]	; (8005da8 <LL_FillBuffer+0x6c>)
 8005d62:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8005d64:	480f      	ldr	r0, [pc, #60]	; (8005da4 <LL_FillBuffer+0x68>)
 8005d66:	f001 fee7 	bl	8007b38 <HAL_DMA2D_Init>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d115      	bne.n	8005d9c <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8005d70:	68f9      	ldr	r1, [r7, #12]
 8005d72:	480c      	ldr	r0, [pc, #48]	; (8005da4 <LL_FillBuffer+0x68>)
 8005d74:	f002 f95e 	bl	8008034 <HAL_DMA2D_ConfigLayer>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10e      	bne.n	8005d9c <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69f9      	ldr	r1, [r7, #28]
 8005d88:	4806      	ldr	r0, [pc, #24]	; (8005da4 <LL_FillBuffer+0x68>)
 8005d8a:	f001 ff2f 	bl	8007bec <HAL_DMA2D_Start>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8005d94:	210a      	movs	r1, #10
 8005d96:	4803      	ldr	r0, [pc, #12]	; (8005da4 <LL_FillBuffer+0x68>)
 8005d98:	f001 ff53 	bl	8007c42 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	200029fc 	.word	0x200029fc
 8005da8:	4002b000 	.word	0x4002b000

08005dac <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 8005dba:	4b1c      	ldr	r3, [pc, #112]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005dbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005dc0:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8005dc2:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 8005dc8:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005dce:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 8005dd4:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005dd6:	22ff      	movs	r2, #255	; 0xff
 8005dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 8005dda:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 8005de0:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38

  hdma2d_discovery.Instance = DMA2D;
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005de8:	4a11      	ldr	r2, [pc, #68]	; (8005e30 <LL_ConvertLineToARGB8888+0x84>)
 8005dea:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8005dec:	480f      	ldr	r0, [pc, #60]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005dee:	f001 fea3 	bl	8007b38 <HAL_DMA2D_Init>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d115      	bne.n	8005e24 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 8005df8:	2101      	movs	r1, #1
 8005dfa:	480c      	ldr	r0, [pc, #48]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005dfc:	f002 f91a 	bl	8008034 <HAL_DMA2D_ConfigLayer>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10e      	bne.n	8005e24 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4806      	ldr	r0, [pc, #24]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005e12:	f001 feeb 	bl	8007bec <HAL_DMA2D_Start>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d103      	bne.n	8005e24 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8005e1c:	210a      	movs	r1, #10
 8005e1e:	4803      	ldr	r0, [pc, #12]	; (8005e2c <LL_ConvertLineToARGB8888+0x80>)
 8005e20:	f001 ff0f 	bl	8007c42 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	200029fc 	.word	0x200029fc
 8005e30:	4002b000 	.word	0x4002b000

08005e34 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8005e3a:	4b34      	ldr	r3, [pc, #208]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e3c:	4a34      	ldr	r2, [pc, #208]	; (8005f10 <BSP_QSPI_Init+0xdc>)
 8005e3e:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8005e40:	4832      	ldr	r0, [pc, #200]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e42:	f005 f929 	bl	800b098 <HAL_QSPI_DeInit>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e059      	b.n	8005f04 <BSP_QSPI_Init+0xd0>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8005e50:	2100      	movs	r1, #0
 8005e52:	482e      	ldr	r0, [pc, #184]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e54:	f000 f890 	bl	8005f78 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8005e58:	4b2c      	ldr	r3, [pc, #176]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 8005e5e:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e60:	2210      	movs	r2, #16
 8005e62:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 8005e64:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e66:	2210      	movs	r2, #16
 8005e68:	60da      	str	r2, [r3, #12]
 8005e6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005e6e:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	fa93 f3a3 	rbit	r3, r3
 8005e76:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e78:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 8005e7a:	fab3 f383 	clz	r3, r3
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	461a      	mov	r2, r3
 8005e84:	4b21      	ldr	r3, [pc, #132]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e86:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 8005e88:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005e8e:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005e90:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8005e96:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8005e9c:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8005ea2:	481a      	ldr	r0, [pc, #104]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005ea4:	f005 f87c 	bl	800afa0 <HAL_QSPI_Init>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e028      	b.n	8005f04 <BSP_QSPI_Init+0xd0>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8005eb2:	4816      	ldr	r0, [pc, #88]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005eb4:	f000 f922 	bl	80060fc <QSPI_ResetMemory>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	e020      	b.n	8005f04 <BSP_QSPI_Init+0xd0>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 8005ec2:	4812      	ldr	r0, [pc, #72]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005ec4:	f000 fb39 	bl	800653a <QSPI_EnterMemory_QPI>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8005ece:	2304      	movs	r3, #4
 8005ed0:	e018      	b.n	8005f04 <BSP_QSPI_Init+0xd0>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 8005ed2:	480e      	ldr	r0, [pc, #56]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005ed4:	f000 fa3a 	bl	800634c <QSPI_EnterFourBytesAddress>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <BSP_QSPI_Init+0xae>
  {
    return QSPI_NOT_SUPPORTED;
 8005ede:	2304      	movs	r3, #4
 8005ee0:	e010      	b.n	8005f04 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8005ee2:	480a      	ldr	r0, [pc, #40]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005ee4:	f000 fa6d 	bl	80063c2 <QSPI_DummyCyclesCfg>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <BSP_QSPI_Init+0xbe>
  {
    return QSPI_NOT_SUPPORTED;
 8005eee:	2304      	movs	r3, #4
 8005ef0:	e008      	b.n	8005f04 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 8005ef2:	4806      	ldr	r0, [pc, #24]	; (8005f0c <BSP_QSPI_Init+0xd8>)
 8005ef4:	f000 fb6e 	bl	80065d4 <QSPI_OutDrvStrengthCfg>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <BSP_QSPI_Init+0xce>
  {
    return QSPI_NOT_SUPPORTED;
 8005efe:	2304      	movs	r3, #4
 8005f00:	e000      	b.n	8005f04 <BSP_QSPI_Init+0xd0>
  }
  
  return QSPI_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20002bc4 	.word	0x20002bc4
 8005f10:	a0001000 	.word	0xa0001000

08005f14 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b090      	sub	sp, #64	; 0x40
 8005f18:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f1e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8005f20:	23ec      	movs	r3, #236	; 0xec
 8005f22:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005f24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005f2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005f2e:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005f30:	2300      	movs	r3, #0
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005f34:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8005f3a:	230a      	movs	r3, #10
 8005f3c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005f42:	2300      	movs	r3, #0
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005f46:	2300      	movs	r3, #0
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005f52:	463a      	mov	r2, r7
 8005f54:	f107 0308 	add.w	r3, r7, #8
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4806      	ldr	r0, [pc, #24]	; (8005f74 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8005f5c:	f005 fac4 	bl	800b4e8 <HAL_QSPI_MemoryMapped>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3740      	adds	r7, #64	; 0x40
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20002bc4 	.word	0x20002bc4

08005f78 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08e      	sub	sp, #56	; 0x38
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005f82:	4b59      	ldr	r3, [pc, #356]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	4a58      	ldr	r2, [pc, #352]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005f88:	f043 0302 	orr.w	r3, r3, #2
 8005f8c:	6393      	str	r3, [r2, #56]	; 0x38
 8005f8e:	4b56      	ldr	r3, [pc, #344]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	623b      	str	r3, [r7, #32]
 8005f98:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8005f9a:	4b53      	ldr	r3, [pc, #332]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	4a52      	ldr	r2, [pc, #328]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fa0:	f043 0302 	orr.w	r3, r3, #2
 8005fa4:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8005fa6:	4b50      	ldr	r3, [pc, #320]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	4a4f      	ldr	r2, [pc, #316]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fac:	f023 0302 	bic.w	r3, r3, #2
 8005fb0:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8005fb2:	4b4d      	ldr	r3, [pc, #308]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	4a4c      	ldr	r2, [pc, #304]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fb8:	f043 0302 	orr.w	r3, r3, #2
 8005fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fbe:	4b4a      	ldr	r3, [pc, #296]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005fca:	4b47      	ldr	r3, [pc, #284]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4a46      	ldr	r2, [pc, #280]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fd0:	f043 0302 	orr.w	r3, r3, #2
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd6:	4b44      	ldr	r3, [pc, #272]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8005fe2:	4b41      	ldr	r3, [pc, #260]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	4a40      	ldr	r2, [pc, #256]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005fe8:	f043 0304 	orr.w	r3, r3, #4
 8005fec:	6313      	str	r3, [r2, #48]	; 0x30
 8005fee:	4b3e      	ldr	r3, [pc, #248]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8005ffa:	4b3b      	ldr	r3, [pc, #236]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	4a3a      	ldr	r2, [pc, #232]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8006000:	f043 0304 	orr.w	r3, r3, #4
 8006004:	6313      	str	r3, [r2, #48]	; 0x30
 8006006:	4b38      	ldr	r3, [pc, #224]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8006012:	4b35      	ldr	r3, [pc, #212]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	4a34      	ldr	r2, [pc, #208]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8006018:	f043 0310 	orr.w	r3, r3, #16
 800601c:	6313      	str	r3, [r2, #48]	; 0x30
 800601e:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 800602a:	4b2f      	ldr	r3, [pc, #188]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	4a2e      	ldr	r2, [pc, #184]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8006030:	f043 0308 	orr.w	r3, r3, #8
 8006034:	6313      	str	r3, [r2, #48]	; 0x30
 8006036:	4b2c      	ldr	r3, [pc, #176]	; (80060e8 <BSP_QSPI_MspInit+0x170>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8006042:	2340      	movs	r3, #64	; 0x40
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 8006046:	230a      	movs	r3, #10
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800604a:	2302      	movs	r3, #2
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800604e:	2301      	movs	r3, #1
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006052:	2302      	movs	r3, #2
 8006054:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8006056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800605a:	4619      	mov	r1, r3
 800605c:	4823      	ldr	r0, [pc, #140]	; (80060ec <BSP_QSPI_MspInit+0x174>)
 800605e:	f003 fa73 	bl	8009548 <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8006062:	2304      	movs	r3, #4
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 8006066:	2309      	movs	r3, #9
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800606a:	2300      	movs	r3, #0
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800606e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006072:	4619      	mov	r1, r3
 8006074:	481d      	ldr	r0, [pc, #116]	; (80060ec <BSP_QSPI_MspInit+0x174>)
 8006076:	f003 fa67 	bl	8009548 <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800607a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8006080:	2309      	movs	r3, #9
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8006084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006088:	4619      	mov	r1, r3
 800608a:	4819      	ldr	r0, [pc, #100]	; (80060f0 <BSP_QSPI_MspInit+0x178>)
 800608c:	f003 fa5c 	bl	8009548 <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8006090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 8006096:	2309      	movs	r3, #9
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800609a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800609e:	4619      	mov	r1, r3
 80060a0:	4813      	ldr	r0, [pc, #76]	; (80060f0 <BSP_QSPI_MspInit+0x178>)
 80060a2:	f003 fa51 	bl	8009548 <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 80060a6:	2304      	movs	r3, #4
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 80060aa:	2309      	movs	r3, #9
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80060ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060b2:	4619      	mov	r1, r3
 80060b4:	480f      	ldr	r0, [pc, #60]	; (80060f4 <BSP_QSPI_MspInit+0x17c>)
 80060b6:	f003 fa47 	bl	8009548 <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80060ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 80060c0:	2309      	movs	r3, #9
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80060c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060c8:	4619      	mov	r1, r3
 80060ca:	480b      	ldr	r0, [pc, #44]	; (80060f8 <BSP_QSPI_MspInit+0x180>)
 80060cc:	f003 fa3c 	bl	8009548 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80060d0:	2200      	movs	r2, #0
 80060d2:	210f      	movs	r1, #15
 80060d4:	205c      	movs	r0, #92	; 0x5c
 80060d6:	f001 f815 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80060da:	205c      	movs	r0, #92	; 0x5c
 80060dc:	f001 f82e 	bl	800713c <HAL_NVIC_EnableIRQ>
}
 80060e0:	bf00      	nop
 80060e2:	3738      	adds	r7, #56	; 0x38
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40020400 	.word	0x40020400
 80060f0:	40020800 	.word	0x40020800
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40020c00 	.word	0x40020c00

080060fc <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b098      	sub	sp, #96	; 0x60
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006104:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006108:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 800610a:	2366      	movs	r3, #102	; 0x66
 800610c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800610e:	2300      	movs	r3, #0
 8006110:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006112:	2300      	movs	r3, #0
 8006114:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8006116:	2300      	movs	r3, #0
 8006118:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800611e:	2300      	movs	r3, #0
 8006120:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006122:	2300      	movs	r3, #0
 8006124:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006126:	2300      	movs	r3, #0
 8006128:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800612a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800612e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f004 ffd3 	bl	800b0e0 <HAL_QSPI_Command>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0ff      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8006144:	2399      	movs	r3, #153	; 0x99
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800614c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f004 ffc4 	bl	800b0e0 <HAL_QSPI_Command>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e0f0      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006166:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8006168:	2366      	movs	r3, #102	; 0x66
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800616c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006170:	f241 3288 	movw	r2, #5000	; 0x1388
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f004 ffb2 	bl	800b0e0 <HAL_QSPI_Command>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e0de      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8006186:	2399      	movs	r3, #153	; 0x99
 8006188:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800618a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800618e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f004 ffa3 	bl	800b0e0 <HAL_QSPI_Command>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0cf      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 80061a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061a8:	f000 feac 	bl	8006f04 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 80061b0:	2301      	movs	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80061b4:	2300      	movs	r3, #0
 80061b6:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 80061b8:	2301      	movs	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 80061bc:	2310      	movs	r3, #16
 80061be:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80061c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80061c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061ca:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 80061cc:	2305      	movs	r3, #5
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 80061d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80061d6:	f107 0210 	add.w	r2, r7, #16
 80061da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80061de:	f241 3388 	movw	r3, #5000	; 0x1388
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f005 f909 	bl	800b3fa <HAL_QSPI_AutoPolling>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0a8      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80061f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061f6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80061f8:	2305      	movs	r3, #5
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80061fc:	2300      	movs	r3, #0
 80061fe:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006200:	2300      	movs	r3, #0
 8006202:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8006204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006208:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 800620e:	2301      	movs	r3, #1
 8006210:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006212:	2300      	movs	r3, #0
 8006214:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006216:	2300      	movs	r3, #0
 8006218:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800621a:	2300      	movs	r3, #0
 800621c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800621e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006222:	f241 3288 	movw	r2, #5000	; 0x1388
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f004 ff59 	bl	800b0e0 <HAL_QSPI_Command>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e085      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006238:	f107 030f 	add.w	r3, r7, #15
 800623c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f005 f83c 	bl	800b2c0 <HAL_QSPI_Receive>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e078      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006256:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8006258:	2306      	movs	r3, #6
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800625c:	2300      	movs	r3, #0
 800625e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006260:	2300      	movs	r3, #0
 8006262:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8006264:	2300      	movs	r3, #0
 8006266:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800626c:	2300      	movs	r3, #0
 800626e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006270:	2300      	movs	r3, #0
 8006272:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006274:	2300      	movs	r3, #0
 8006276:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800627c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f004 ff2c 	bl	800b0e0 <HAL_QSPI_Command>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e058      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8006292:	2302      	movs	r3, #2
 8006294:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 8006296:	2302      	movs	r3, #2
 8006298:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 800629e:	2301      	movs	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 80062a2:	2310      	movs	r3, #16
 80062a4:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80062a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80062ac:	2305      	movs	r3, #5
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80062b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062b6:	f107 0210 	add.w	r2, r7, #16
 80062ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80062be:	f241 3388 	movw	r3, #5000	; 0x1388
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f005 f899 	bl	800b3fa <HAL_QSPI_AutoPolling>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e038      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80062d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80062d8:	2301      	movs	r3, #1
 80062da:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80062dc:	2300      	movs	r3, #0
 80062de:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80062e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80062f6:	2300      	movs	r3, #0
 80062f8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80062fa:	2300      	movs	r3, #0
 80062fc:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006304:	b2db      	uxtb	r3, r3
 8006306:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800630c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f004 fee4 	bl	800b0e0 <HAL_QSPI_Command>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e010      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006322:	f107 030f 	add.w	r3, r7, #15
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f004 ff35 	bl	800b19c <HAL_QSPI_Transmit>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e003      	b.n	8006344 <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 800633c:	2028      	movs	r0, #40	; 0x28
 800633e:	f000 fde1 	bl	8006f04 <HAL_Delay>

  return QSPI_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3760      	adds	r7, #96	; 0x60
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b090      	sub	sp, #64	; 0x40
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006354:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006358:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 800635a:	23b7      	movs	r3, #183	; 0xb7
 800635c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800635e:	2300      	movs	r3, #0
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006362:	2300      	movs	r3, #0
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8006366:	2300      	movs	r3, #0
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800636e:	2300      	movs	r3, #0
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006372:	2300      	movs	r3, #0
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f9e6 	bl	800674c <QSPI_WriteEnable>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e017      	b.n	80063ba <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800638a:	f107 0308 	add.w	r3, r7, #8
 800638e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f004 fea3 	bl	800b0e0 <HAL_QSPI_Command>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e00a      	b.n	80063ba <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80063a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fa18 	bl	80067de <QSPI_AutoPollingMemReady>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3740      	adds	r7, #64	; 0x40
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b094      	sub	sp, #80	; 0x50
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80063ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80063d0:	2305      	movs	r3, #5
 80063d2:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80063d8:	2300      	movs	r3, #0
 80063da:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80063dc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80063e6:	2301      	movs	r3, #1
 80063e8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80063ee:	2300      	movs	r3, #0
 80063f0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80063f2:	2300      	movs	r3, #0
 80063f4:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063f6:	f107 0310 	add.w	r3, r7, #16
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f004 fe6d 	bl	800b0e0 <HAL_QSPI_Command>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e090      	b.n	8006532 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006410:	f107 030c 	add.w	r3, r7, #12
 8006414:	f241 3288 	movw	r2, #5000	; 0x1388
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f004 ff50 	bl	800b2c0 <HAL_QSPI_Receive>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e083      	b.n	8006532 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800642a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8006430:	2315      	movs	r3, #21
 8006432:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006434:	2300      	movs	r3, #0
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006438:	2300      	movs	r3, #0
 800643a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800643c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8006446:	2301      	movs	r3, #1
 8006448:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800644a:	2300      	movs	r3, #0
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800644e:	2300      	movs	r3, #0
 8006450:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006452:	2300      	movs	r3, #0
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006456:	f107 0310 	add.w	r3, r7, #16
 800645a:	f241 3288 	movw	r2, #5000	; 0x1388
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f004 fe3d 	bl	800b0e0 <HAL_QSPI_Command>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e060      	b.n	8006532 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006470:	f107 030c 	add.w	r3, r7, #12
 8006474:	3301      	adds	r3, #1
 8006476:	f241 3288 	movw	r2, #5000	; 0x1388
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f004 ff1f 	bl	800b2c0 <HAL_QSPI_Receive>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e052      	b.n	8006532 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f95d 	bl	800674c <QSPI_WriteEnable>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e04a      	b.n	8006532 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800649c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80064a2:	2301      	movs	r3, #1
 80064a4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80064ae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80064b8:	2302      	movs	r3, #2
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80064c0:	2300      	movs	r3, #0
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80064c4:	2300      	movs	r3, #0
 80064c6:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80064c8:	7b7b      	ldrb	r3, [r7, #13]
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064d0:	b25a      	sxtb	r2, r3
 80064d2:	23c0      	movs	r3, #192	; 0xc0
 80064d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d8:	fa93 f3a3 	rbit	r3, r3
 80064dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80064de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e0:	fab3 f383 	clz	r3, r3
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	4619      	mov	r1, r3
 80064e8:	2303      	movs	r3, #3
 80064ea:	408b      	lsls	r3, r1
 80064ec:	b25b      	sxtb	r3, r3
 80064ee:	4313      	orrs	r3, r2
 80064f0:	b25b      	sxtb	r3, r3
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80064f6:	f107 0310 	add.w	r3, r7, #16
 80064fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f004 fded 	bl	800b0e0 <HAL_QSPI_Command>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e010      	b.n	8006532 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006510:	f107 030c 	add.w	r3, r7, #12
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f004 fe3e 	bl	800b19c <HAL_QSPI_Transmit>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e003      	b.n	8006532 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 800652a:	2028      	movs	r0, #40	; 0x28
 800652c:	f000 fcea 	bl	8006f04 <HAL_Delay>
  
  return QSPI_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3750      	adds	r7, #80	; 0x50
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b096      	sub	sp, #88	; 0x58
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 8006542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006546:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 8006548:	2335      	movs	r3, #53	; 0x35
 800654a:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800654c:	2300      	movs	r3, #0
 800654e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006550:	2300      	movs	r3, #0
 8006552:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8006554:	2300      	movs	r3, #0
 8006556:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800655c:	2300      	movs	r3, #0
 800655e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006560:	2300      	movs	r3, #0
 8006562:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006564:	2300      	movs	r3, #0
 8006566:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006568:	f107 0320 	add.w	r3, r7, #32
 800656c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f004 fdb4 	bl	800b0e0 <HAL_QSPI_Command>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e023      	b.n	80065ca <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 8006582:	2340      	movs	r3, #64	; 0x40
 8006584:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8006586:	2341      	movs	r3, #65	; 0x41
 8006588:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800658e:	2301      	movs	r3, #1
 8006590:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8006592:	2310      	movs	r3, #16
 8006594:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800659a:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800659c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80065a0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80065a2:	2305      	movs	r3, #5
 80065a4:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80065a6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80065aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80065ac:	f107 0208 	add.w	r2, r7, #8
 80065b0:	f107 0120 	add.w	r1, r7, #32
 80065b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f004 ff1e 	bl	800b3fa <HAL_QSPI_AutoPolling>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3758      	adds	r7, #88	; 0x58
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b094      	sub	sp, #80	; 0x50
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80065dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80065e2:	2305      	movs	r3, #5
 80065e4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80065ee:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80065f8:	2301      	movs	r3, #1
 80065fa:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006600:	2300      	movs	r3, #0
 8006602:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006604:	2300      	movs	r3, #0
 8006606:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006608:	f107 0310 	add.w	r3, r7, #16
 800660c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f004 fd64 	bl	800b0e0 <HAL_QSPI_Command>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e08d      	b.n	800673e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006622:	f107 030c 	add.w	r3, r7, #12
 8006626:	f241 3288 	movw	r2, #5000	; 0x1388
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f004 fe47 	bl	800b2c0 <HAL_QSPI_Receive>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e080      	b.n	800673e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800663c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8006642:	2315      	movs	r3, #21
 8006644:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006646:	2300      	movs	r3, #0
 8006648:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800664a:	2300      	movs	r3, #0
 800664c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800664e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006652:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8006658:	2301      	movs	r3, #1
 800665a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800665c:	2300      	movs	r3, #0
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006660:	2300      	movs	r3, #0
 8006662:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006664:	2300      	movs	r3, #0
 8006666:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006668:	f107 0310 	add.w	r3, r7, #16
 800666c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f004 fd34 	bl	800b0e0 <HAL_QSPI_Command>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e05d      	b.n	800673e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006682:	f107 030c 	add.w	r3, r7, #12
 8006686:	3301      	adds	r3, #1
 8006688:	f241 3288 	movw	r2, #5000	; 0x1388
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f004 fe16 	bl	800b2c0 <HAL_QSPI_Receive>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e04f      	b.n	800673e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800669e:	482a      	ldr	r0, [pc, #168]	; (8006748 <QSPI_OutDrvStrengthCfg+0x174>)
 80066a0:	f000 f854 	bl	800674c <QSPI_WriteEnable>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e047      	b.n	800673e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80066ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80066b4:	2301      	movs	r3, #1
 80066b6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80066bc:	2300      	movs	r3, #0
 80066be:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80066c0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80066ca:	2302      	movs	r3, #2
 80066cc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80066d2:	2300      	movs	r3, #0
 80066d4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80066d6:	2300      	movs	r3, #0
 80066d8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80066da:	7b7b      	ldrb	r3, [r7, #13]
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	b25a      	sxtb	r2, r3
 80066e4:	2307      	movs	r3, #7
 80066e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ea:	fa93 f3a3 	rbit	r3, r3
 80066ee:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80066f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f2:	fab3 f383 	clz	r3, r3
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	4619      	mov	r1, r3
 80066fa:	2306      	movs	r3, #6
 80066fc:	408b      	lsls	r3, r1
 80066fe:	b25b      	sxtb	r3, r3
 8006700:	4313      	orrs	r3, r2
 8006702:	b25b      	sxtb	r3, r3
 8006704:	b2db      	uxtb	r3, r3
 8006706:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006708:	f107 0310 	add.w	r3, r7, #16
 800670c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f004 fce4 	bl	800b0e0 <HAL_QSPI_Command>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e00d      	b.n	800673e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006722:	f107 030c 	add.w	r3, r7, #12
 8006726:	f241 3288 	movw	r2, #5000	; 0x1388
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f004 fd35 	bl	800b19c <HAL_QSPI_Transmit>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3750      	adds	r7, #80	; 0x50
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20002bc4 	.word	0x20002bc4

0800674c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b096      	sub	sp, #88	; 0x58
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800675a:	2306      	movs	r3, #6
 800675c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800675e:	2300      	movs	r3, #0
 8006760:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006762:	2300      	movs	r3, #0
 8006764:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8006766:	2300      	movs	r3, #0
 8006768:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800676e:	2300      	movs	r3, #0
 8006770:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006772:	2300      	movs	r3, #0
 8006774:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006776:	2300      	movs	r3, #0
 8006778:	657b      	str	r3, [r7, #84]	; 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800677a:	f107 0320 	add.w	r3, r7, #32
 800677e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f004 fcab 	bl	800b0e0 <HAL_QSPI_Command>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e020      	b.n	80067d6 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8006794:	2302      	movs	r3, #2
 8006796:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 8006798:	2302      	movs	r3, #2
 800679a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800679c:	2300      	movs	r3, #0
 800679e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80067a0:	2301      	movs	r3, #1
 80067a2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80067a4:	2310      	movs	r3, #16
 80067a6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80067a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067ac:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80067ae:	2305      	movs	r3, #5
 80067b0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 80067b2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80067b6:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067b8:	f107 0208 	add.w	r2, r7, #8
 80067bc:	f107 0120 	add.w	r1, r7, #32
 80067c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f004 fe18 	bl	800b3fa <HAL_QSPI_AutoPolling>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e000      	b.n	80067d6 <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3758      	adds	r7, #88	; 0x58
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b096      	sub	sp, #88	; 0x58
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80067e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067ec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80067ee:	2305      	movs	r3, #5
 80067f0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80067fa:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80067fe:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006804:	2300      	movs	r3, #0
 8006806:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006808:	2300      	movs	r3, #0
 800680a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800680c:	2300      	movs	r3, #0
 800680e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 8006814:	2301      	movs	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800681c:	2301      	movs	r3, #1
 800681e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8006820:	2310      	movs	r3, #16
 8006822:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006824:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006828:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800682a:	f107 0208 	add.w	r2, r7, #8
 800682e:	f107 0120 	add.w	r1, r7, #32
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f004 fde0 	bl	800b3fa <HAL_QSPI_AutoPolling>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3758      	adds	r7, #88	; 0x58
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006854:	4b29      	ldr	r3, [pc, #164]	; (80068fc <BSP_SDRAM_Init+0xac>)
 8006856:	4a2a      	ldr	r2, [pc, #168]	; (8006900 <BSP_SDRAM_Init+0xb0>)
 8006858:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800685a:	4b2a      	ldr	r3, [pc, #168]	; (8006904 <BSP_SDRAM_Init+0xb4>)
 800685c:	2202      	movs	r2, #2
 800685e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006860:	4b28      	ldr	r3, [pc, #160]	; (8006904 <BSP_SDRAM_Init+0xb4>)
 8006862:	2207      	movs	r2, #7
 8006864:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006866:	4b27      	ldr	r3, [pc, #156]	; (8006904 <BSP_SDRAM_Init+0xb4>)
 8006868:	2204      	movs	r2, #4
 800686a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800686c:	4b25      	ldr	r3, [pc, #148]	; (8006904 <BSP_SDRAM_Init+0xb4>)
 800686e:	2207      	movs	r2, #7
 8006870:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8006872:	4b24      	ldr	r3, [pc, #144]	; (8006904 <BSP_SDRAM_Init+0xb4>)
 8006874:	2202      	movs	r2, #2
 8006876:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006878:	4b22      	ldr	r3, [pc, #136]	; (8006904 <BSP_SDRAM_Init+0xb4>)
 800687a:	2202      	movs	r2, #2
 800687c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800687e:	4b21      	ldr	r3, [pc, #132]	; (8006904 <BSP_SDRAM_Init+0xb4>)
 8006880:	2202      	movs	r2, #2
 8006882:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006884:	4b1d      	ldr	r3, [pc, #116]	; (80068fc <BSP_SDRAM_Init+0xac>)
 8006886:	2200      	movs	r2, #0
 8006888:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800688a:	4b1c      	ldr	r3, [pc, #112]	; (80068fc <BSP_SDRAM_Init+0xac>)
 800688c:	2200      	movs	r2, #0
 800688e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006890:	4b1a      	ldr	r3, [pc, #104]	; (80068fc <BSP_SDRAM_Init+0xac>)
 8006892:	2204      	movs	r2, #4
 8006894:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006896:	4b19      	ldr	r3, [pc, #100]	; (80068fc <BSP_SDRAM_Init+0xac>)
 8006898:	2220      	movs	r2, #32
 800689a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800689c:	4b17      	ldr	r3, [pc, #92]	; (80068fc <BSP_SDRAM_Init+0xac>)
 800689e:	2240      	movs	r2, #64	; 0x40
 80068a0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80068a2:	4b16      	ldr	r3, [pc, #88]	; (80068fc <BSP_SDRAM_Init+0xac>)
 80068a4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80068a8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80068aa:	4b14      	ldr	r3, [pc, #80]	; (80068fc <BSP_SDRAM_Init+0xac>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80068b0:	4b12      	ldr	r3, [pc, #72]	; (80068fc <BSP_SDRAM_Init+0xac>)
 80068b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068b6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80068b8:	4b10      	ldr	r3, [pc, #64]	; (80068fc <BSP_SDRAM_Init+0xac>)
 80068ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068be:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80068c0:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <BSP_SDRAM_Init+0xac>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80068c6:	2100      	movs	r1, #0
 80068c8:	480c      	ldr	r0, [pc, #48]	; (80068fc <BSP_SDRAM_Init+0xac>)
 80068ca:	f000 f87f 	bl	80069cc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80068ce:	490d      	ldr	r1, [pc, #52]	; (8006904 <BSP_SDRAM_Init+0xb4>)
 80068d0:	480a      	ldr	r0, [pc, #40]	; (80068fc <BSP_SDRAM_Init+0xac>)
 80068d2:	f006 ffd4 	bl	800d87e <HAL_SDRAM_Init>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <BSP_SDRAM_Init+0xb8>)
 80068de:	2201      	movs	r2, #1
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	e002      	b.n	80068ea <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80068e4:	4b08      	ldr	r3, [pc, #32]	; (8006908 <BSP_SDRAM_Init+0xb8>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80068ea:	f240 6003 	movw	r0, #1539	; 0x603
 80068ee:	f000 f80d 	bl	800690c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80068f2:	4b05      	ldr	r3, [pc, #20]	; (8006908 <BSP_SDRAM_Init+0xb8>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20002c10 	.word	0x20002c10
 8006900:	a0000140 	.word	0xa0000140
 8006904:	20002c44 	.word	0x20002c44
 8006908:	20000094 	.word	0x20000094

0800690c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006918:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800691e:	4b29      	ldr	r3, [pc, #164]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006920:	2210      	movs	r2, #16
 8006922:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006924:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006926:	2201      	movs	r2, #1
 8006928:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800692a:	4b26      	ldr	r3, [pc, #152]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800692c:	2200      	movs	r2, #0
 800692e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006934:	4923      	ldr	r1, [pc, #140]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006936:	4824      	ldr	r0, [pc, #144]	; (80069c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006938:	f006 ffd5 	bl	800d8e6 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800693c:	2001      	movs	r0, #1
 800693e:	f000 fae1 	bl	8006f04 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006942:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006944:	2202      	movs	r2, #2
 8006946:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006948:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800694a:	2210      	movs	r2, #16
 800694c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006950:	2201      	movs	r2, #1
 8006952:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006954:	4b1b      	ldr	r3, [pc, #108]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006956:	2200      	movs	r2, #0
 8006958:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800695a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800695e:	4919      	ldr	r1, [pc, #100]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006960:	4819      	ldr	r0, [pc, #100]	; (80069c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006962:	f006 ffc0 	bl	800d8e6 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006966:	4b17      	ldr	r3, [pc, #92]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006968:	2203      	movs	r2, #3
 800696a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800696c:	4b15      	ldr	r3, [pc, #84]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800696e:	2210      	movs	r2, #16
 8006970:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8006972:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006974:	2208      	movs	r2, #8
 8006976:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006978:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800697a:	2200      	movs	r2, #0
 800697c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800697e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006982:	4910      	ldr	r1, [pc, #64]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006984:	4810      	ldr	r0, [pc, #64]	; (80069c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006986:	f006 ffae 	bl	800d8e6 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800698a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800698e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006990:	4b0c      	ldr	r3, [pc, #48]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006992:	2204      	movs	r2, #4
 8006994:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006998:	2210      	movs	r2, #16
 800699a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800699e:	2201      	movs	r2, #1
 80069a0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4a07      	ldr	r2, [pc, #28]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069a6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80069a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069ac:	4905      	ldr	r1, [pc, #20]	; (80069c4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069ae:	4806      	ldr	r0, [pc, #24]	; (80069c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80069b0:	f006 ff99 	bl	800d8e6 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4804      	ldr	r0, [pc, #16]	; (80069c8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80069b8:	f006 ffca 	bl	800d950 <HAL_SDRAM_ProgramRefreshRate>
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20002c60 	.word	0x20002c60
 80069c8:	20002c10 	.word	0x20002c10

080069cc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b090      	sub	sp, #64	; 0x40
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80069d6:	4b71      	ldr	r3, [pc, #452]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	4a70      	ldr	r2, [pc, #448]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 80069dc:	f043 0301 	orr.w	r3, r3, #1
 80069e0:	6393      	str	r3, [r2, #56]	; 0x38
 80069e2:	4b6e      	ldr	r3, [pc, #440]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80069ee:	4b6b      	ldr	r3, [pc, #428]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	4a6a      	ldr	r2, [pc, #424]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 80069f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069f8:	6313      	str	r3, [r2, #48]	; 0x30
 80069fa:	4b68      	ldr	r3, [pc, #416]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a06:	4b65      	ldr	r3, [pc, #404]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	4a64      	ldr	r2, [pc, #400]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a0c:	f043 0308 	orr.w	r3, r3, #8
 8006a10:	6313      	str	r3, [r2, #48]	; 0x30
 8006a12:	4b62      	ldr	r3, [pc, #392]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	623b      	str	r3, [r7, #32]
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a1e:	4b5f      	ldr	r3, [pc, #380]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	4a5e      	ldr	r2, [pc, #376]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a24:	f043 0310 	orr.w	r3, r3, #16
 8006a28:	6313      	str	r3, [r2, #48]	; 0x30
 8006a2a:	4b5c      	ldr	r3, [pc, #368]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a36:	4b59      	ldr	r3, [pc, #356]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	4a58      	ldr	r2, [pc, #352]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a3c:	f043 0320 	orr.w	r3, r3, #32
 8006a40:	6313      	str	r3, [r2, #48]	; 0x30
 8006a42:	4b56      	ldr	r3, [pc, #344]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a4e:	4b53      	ldr	r3, [pc, #332]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	4a52      	ldr	r2, [pc, #328]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a58:	6313      	str	r3, [r2, #48]	; 0x30
 8006a5a:	4b50      	ldr	r3, [pc, #320]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a66:	4b4d      	ldr	r3, [pc, #308]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	4a4c      	ldr	r2, [pc, #304]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a70:	6313      	str	r3, [r2, #48]	; 0x30
 8006a72:	4b4a      	ldr	r3, [pc, #296]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006a7e:	4b47      	ldr	r3, [pc, #284]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	4a46      	ldr	r2, [pc, #280]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a88:	6313      	str	r3, [r2, #48]	; 0x30
 8006a8a:	4b44      	ldr	r3, [pc, #272]	; (8006b9c <BSP_SDRAM_MspInit+0x1d0>)
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a96:	2302      	movs	r3, #2
 8006a98:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006aa2:	230c      	movs	r3, #12
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006aa6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	483b      	ldr	r0, [pc, #236]	; (8006ba0 <BSP_SDRAM_MspInit+0x1d4>)
 8006ab4:	f002 fd48 	bl	8009548 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006ab8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4837      	ldr	r0, [pc, #220]	; (8006ba4 <BSP_SDRAM_MspInit+0x1d8>)
 8006ac6:	f002 fd3f 	bl	8009548 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006aca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4834      	ldr	r0, [pc, #208]	; (8006ba8 <BSP_SDRAM_MspInit+0x1dc>)
 8006ad8:	f002 fd36 	bl	8009548 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8006adc:	f248 1337 	movw	r3, #33079	; 0x8137
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4830      	ldr	r0, [pc, #192]	; (8006bac <BSP_SDRAM_MspInit+0x1e0>)
 8006aea:	f002 fd2d 	bl	8009548 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006aee:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006af8:	4619      	mov	r1, r3
 8006afa:	482d      	ldr	r0, [pc, #180]	; (8006bb0 <BSP_SDRAM_MspInit+0x1e4>)
 8006afc:	f002 fd24 	bl	8009548 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006b00:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8006b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4829      	ldr	r0, [pc, #164]	; (8006bb4 <BSP_SDRAM_MspInit+0x1e8>)
 8006b0e:	f002 fd1b 	bl	8009548 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006b12:	4b29      	ldr	r3, [pc, #164]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006b18:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b1a:	2280      	movs	r2, #128	; 0x80
 8006b1c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006b1e:	4b26      	ldr	r3, [pc, #152]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b24:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b2c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b2e:	4b22      	ldr	r3, [pc, #136]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b34:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006b36:	4b20      	ldr	r3, [pc, #128]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b3c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8006b3e:	4b1e      	ldr	r3, [pc, #120]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006b44:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b4a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8006b4c:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006b52:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b54:	2203      	movs	r2, #3
 8006b56:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006b58:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006b5e:	4b16      	ldr	r3, [pc, #88]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006b64:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b66:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <BSP_SDRAM_MspInit+0x1f0>)
 8006b68:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a12      	ldr	r2, [pc, #72]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b70:	4a11      	ldr	r2, [pc, #68]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8006b76:	4810      	ldr	r0, [pc, #64]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b78:	f000 fcb6 	bl	80074e8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8006b7c:	480e      	ldr	r0, [pc, #56]	; (8006bb8 <BSP_SDRAM_MspInit+0x1ec>)
 8006b7e:	f000 fc05 	bl	800738c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8006b82:	2200      	movs	r2, #0
 8006b84:	210f      	movs	r1, #15
 8006b86:	2038      	movs	r0, #56	; 0x38
 8006b88:	f000 fabc 	bl	8007104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006b8c:	2038      	movs	r0, #56	; 0x38
 8006b8e:	f000 fad5 	bl	800713c <HAL_NVIC_EnableIRQ>
}
 8006b92:	bf00      	nop
 8006b94:	3740      	adds	r7, #64	; 0x40
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	40020c00 	.word	0x40020c00
 8006ba4:	40021000 	.word	0x40021000
 8006ba8:	40021400 	.word	0x40021400
 8006bac:	40021800 	.word	0x40021800
 8006bb0:	40021c00 	.word	0x40021c00
 8006bb4:	40022000 	.word	0x40022000
 8006bb8:	20002c70 	.word	0x20002c70
 8006bbc:	40026410 	.word	0x40026410

08006bc0 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	460a      	mov	r2, r1
 8006bca:	80fb      	strh	r3, [r7, #6]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8006bd8:	4b25      	ldr	r3, [pc, #148]	; (8006c70 <BSP_TS_Init+0xb0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a25      	ldr	r2, [pc, #148]	; (8006c74 <BSP_TS_Init+0xb4>)
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	b292      	uxth	r2, r2
 8006be2:	4610      	mov	r0, r2
 8006be4:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8006be6:	4b22      	ldr	r3, [pc, #136]	; (8006c70 <BSP_TS_Init+0xb0>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2054      	movs	r0, #84	; 0x54
 8006bec:	4798      	blx	r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8006bf2:	7b7b      	ldrb	r3, [r7, #13]
 8006bf4:	2b11      	cmp	r3, #17
 8006bf6:	d009      	beq.n	8006c0c <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <BSP_TS_Init+0xb0>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2070      	movs	r0, #112	; 0x70
 8006bfe:	4798      	blx	r3
 8006c00:	4603      	mov	r3, r0
 8006c02:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8006c04:	4b1b      	ldr	r3, [pc, #108]	; (8006c74 <BSP_TS_Init+0xb4>)
 8006c06:	2270      	movs	r2, #112	; 0x70
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e002      	b.n	8006c12 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8006c0c:	4b19      	ldr	r3, [pc, #100]	; (8006c74 <BSP_TS_Init+0xb4>)
 8006c0e:	2254      	movs	r2, #84	; 0x54
 8006c10:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8006c12:	7b7b      	ldrb	r3, [r7, #13]
 8006c14:	2b11      	cmp	r3, #17
 8006c16:	d002      	beq.n	8006c1e <BSP_TS_Init+0x5e>
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b11      	cmp	r3, #17
 8006c1c:	d121      	bne.n	8006c62 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8006c1e:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <BSP_TS_Init+0xb8>)
 8006c20:	4a13      	ldr	r2, [pc, #76]	; (8006c70 <BSP_TS_Init+0xb0>)
 8006c22:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8006c24:	88fa      	ldrh	r2, [r7, #6]
 8006c26:	88bb      	ldrh	r3, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d203      	bcs.n	8006c34 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8006c2c:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <BSP_TS_Init+0xbc>)
 8006c2e:	2201      	movs	r2, #1
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8006c34:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <BSP_TS_Init+0xbc>)
 8006c36:	220c      	movs	r2, #12
 8006c38:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d112      	bne.n	8006c66 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8006c40:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <BSP_TS_Init+0xb8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	4a0b      	ldr	r2, [pc, #44]	; (8006c74 <BSP_TS_Init+0xb4>)
 8006c48:	7812      	ldrb	r2, [r2, #0]
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8006c50:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <BSP_TS_Init+0xb8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <BSP_TS_Init+0xb4>)
 8006c58:	7812      	ldrb	r2, [r2, #0]
 8006c5a:	b292      	uxth	r2, r2
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
    if(ts_status == TS_OK)
 8006c60:	e001      	b.n	8006c66 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8006c62:	2303      	movs	r3, #3
 8006c64:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	20000018 	.word	0x20000018
 8006c74:	20002cd5 	.word	0x20002cd5
 8006c78:	20002cd0 	.word	0x20002cd0
 8006c7c:	20002cd4 	.word	0x20002cd4

08006c80 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b089      	sub	sp, #36	; 0x24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8006c8c:	4b81      	ldr	r3, [pc, #516]	; (8006e94 <BSP_TS_GetState+0x214>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	4a81      	ldr	r2, [pc, #516]	; (8006e98 <BSP_TS_GetState+0x218>)
 8006c94:	7812      	ldrb	r2, [r2, #0]
 8006c96:	b292      	uxth	r2, r2
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80ee 	beq.w	8006e8a <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	e0e3      	b.n	8006e7c <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8006cb4:	4b77      	ldr	r3, [pc, #476]	; (8006e94 <BSP_TS_GetState+0x214>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	4a77      	ldr	r2, [pc, #476]	; (8006e98 <BSP_TS_GetState+0x218>)
 8006cbc:	7812      	ldrb	r2, [r2, #0]
 8006cbe:	b290      	uxth	r0, r2
 8006cc0:	f107 0110 	add.w	r1, r7, #16
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	0052      	lsls	r2, r2, #1
 8006cc8:	188c      	adds	r4, r1, r2
 8006cca:	f107 010c 	add.w	r1, r7, #12
 8006cce:	69fa      	ldr	r2, [r7, #28]
 8006cd0:	0052      	lsls	r2, r2, #1
 8006cd2:	440a      	add	r2, r1
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8006cd8:	4b70      	ldr	r3, [pc, #448]	; (8006e9c <BSP_TS_GetState+0x21c>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d019      	beq.n	8006d18 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	3320      	adds	r3, #32
 8006cea:	443b      	add	r3, r7
 8006cec:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006cf0:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	3320      	adds	r3, #32
 8006cf8:	443b      	add	r3, r7
 8006cfa:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	3320      	adds	r3, #32
 8006d04:	443b      	add	r3, r7
 8006d06:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	3320      	adds	r3, #32
 8006d10:	443b      	add	r3, r7
 8006d12:	8b3a      	ldrh	r2, [r7, #24]
 8006d14:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8006d18:	4b60      	ldr	r3, [pc, #384]	; (8006e9c <BSP_TS_GetState+0x21c>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00f      	beq.n	8006d44 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	3320      	adds	r3, #32
 8006d2a:	443b      	add	r3, r7
 8006d2c:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8006d30:	f240 331f 	movw	r3, #799	; 0x31f
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	3320      	adds	r3, #32
 8006d3e:	443b      	add	r3, r7
 8006d40:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8006d44:	4b55      	ldr	r3, [pc, #340]	; (8006e9c <BSP_TS_GetState+0x21c>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00f      	beq.n	8006d70 <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	3320      	adds	r3, #32
 8006d56:	443b      	add	r3, r7
 8006d58:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006d5c:	f240 13df 	movw	r3, #479	; 0x1df
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	3320      	adds	r3, #32
 8006d6a:	443b      	add	r3, r7
 8006d6c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	3320      	adds	r3, #32
 8006d76:	443b      	add	r3, r7
 8006d78:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4a48      	ldr	r2, [pc, #288]	; (8006ea0 <BSP_TS_GetState+0x220>)
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d86:	4299      	cmp	r1, r3
 8006d88:	d90d      	bls.n	8006da6 <BSP_TS_GetState+0x126>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	3320      	adds	r3, #32
 8006d90:	443b      	add	r3, r7
 8006d92:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8006d96:	4942      	ldr	r1, [pc, #264]	; (8006ea0 <BSP_TS_GetState+0x220>)
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	e00c      	b.n	8006dc0 <BSP_TS_GetState+0x140>
 8006da6:	4a3e      	ldr	r2, [pc, #248]	; (8006ea0 <BSP_TS_GetState+0x220>)
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	3320      	adds	r3, #32
 8006db6:	443b      	add	r3, r7
 8006db8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	3320      	adds	r3, #32
 8006dc8:	443b      	add	r3, r7
 8006dca:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4a34      	ldr	r2, [pc, #208]	; (8006ea4 <BSP_TS_GetState+0x224>)
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	d90d      	bls.n	8006df8 <BSP_TS_GetState+0x178>
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	3320      	adds	r3, #32
 8006de2:	443b      	add	r3, r7
 8006de4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006de8:	492e      	ldr	r1, [pc, #184]	; (8006ea4 <BSP_TS_GetState+0x224>)
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	e00c      	b.n	8006e12 <BSP_TS_GetState+0x192>
 8006df8:	4a2a      	ldr	r2, [pc, #168]	; (8006ea4 <BSP_TS_GetState+0x224>)
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	3320      	adds	r3, #32
 8006e08:	443b      	add	r3, r7
 8006e0a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8006e14:	8afa      	ldrh	r2, [r7, #22]
 8006e16:	8abb      	ldrh	r3, [r7, #20]
 8006e18:	4413      	add	r3, r2
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	dd15      	ble.n	8006e4a <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	3320      	adds	r3, #32
 8006e24:	443b      	add	r3, r7
 8006e26:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ea0 <BSP_TS_GetState+0x220>)
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	3320      	adds	r3, #32
 8006e3a:	443b      	add	r3, r7
 8006e3c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006e40:	4619      	mov	r1, r3
 8006e42:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <BSP_TS_GetState+0x224>)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8006e4a:	4a15      	ldr	r2, [pc, #84]	; (8006ea0 <BSP_TS_GetState+0x220>)
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e52:	b299      	uxth	r1, r3
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	4413      	add	r3, r2
 8006e5c:	460a      	mov	r2, r1
 8006e5e:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8006e60:	4a10      	ldr	r2, [pc, #64]	; (8006ea4 <BSP_TS_GetState+0x224>)
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e68:	b299      	uxth	r1, r3
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	4413      	add	r3, r2
 8006e72:	460a      	mov	r2, r1
 8006e74:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	61fb      	str	r3, [r7, #28]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4293      	cmp	r3, r2
 8006e86:	f4ff af15 	bcc.w	8006cb4 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8006e8a:	7efb      	ldrb	r3, [r7, #27]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3724      	adds	r7, #36	; 0x24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd90      	pop	{r4, r7, pc}
 8006e94:	20002cd0 	.word	0x20002cd0
 8006e98:	20002cd5 	.word	0x20002cd5
 8006e9c:	20002cd4 	.word	0x20002cd4
 8006ea0:	20002cd8 	.word	0x20002cd8
 8006ea4:	20002ce0 	.word	0x20002ce0

08006ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006eac:	2003      	movs	r0, #3
 8006eae:	f000 f91e 	bl	80070ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006eb2:	200f      	movs	r0, #15
 8006eb4:	f7fb fd34 	bl	8002920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006eb8:	f7fb fd02 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ec8:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <HAL_IncTick+0x20>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <HAL_IncTick+0x24>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	4a04      	ldr	r2, [pc, #16]	; (8006ee8 <HAL_IncTick+0x24>)
 8006ed6:	6013      	str	r3, [r2, #0]
}
 8006ed8:	bf00      	nop
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	2000009c 	.word	0x2000009c
 8006ee8:	20002ce8 	.word	0x20002ce8

08006eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  return uwTick;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <HAL_GetTick+0x14>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20002ce8 	.word	0x20002ce8

08006f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f0c:	f7ff ffee 	bl	8006eec <HAL_GetTick>
 8006f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f1c:	d005      	beq.n	8006f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <HAL_Delay+0x44>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f2a:	bf00      	nop
 8006f2c:	f7ff ffde 	bl	8006eec <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d8f7      	bhi.n	8006f2c <HAL_Delay+0x28>
  {
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	2000009c 	.word	0x2000009c

08006f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <__NVIC_SetPriorityGrouping+0x40>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f68:	4013      	ands	r3, r2
 8006f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <__NVIC_SetPriorityGrouping+0x44>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f7a:	4a04      	ldr	r2, [pc, #16]	; (8006f8c <__NVIC_SetPriorityGrouping+0x40>)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	60d3      	str	r3, [r2, #12]
}
 8006f80:	bf00      	nop
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	e000ed00 	.word	0xe000ed00
 8006f90:	05fa0000 	.word	0x05fa0000

08006f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <__NVIC_GetPriorityGrouping+0x18>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	0a1b      	lsrs	r3, r3, #8
 8006f9e:	f003 0307 	and.w	r3, r3, #7
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	e000ed00 	.word	0xe000ed00

08006fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	db0b      	blt.n	8006fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	f003 021f 	and.w	r2, r3, #31
 8006fc8:	4907      	ldr	r1, [pc, #28]	; (8006fe8 <__NVIC_EnableIRQ+0x38>)
 8006fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8006fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	e000e100 	.word	0xe000e100

08006fec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	db12      	blt.n	8007024 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	f003 021f 	and.w	r2, r3, #31
 8007004:	490a      	ldr	r1, [pc, #40]	; (8007030 <__NVIC_DisableIRQ+0x44>)
 8007006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	2001      	movs	r0, #1
 800700e:	fa00 f202 	lsl.w	r2, r0, r2
 8007012:	3320      	adds	r3, #32
 8007014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007018:	f3bf 8f4f 	dsb	sy
}
 800701c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800701e:	f3bf 8f6f 	isb	sy
}
 8007022:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	e000e100 	.word	0xe000e100

08007034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	6039      	str	r1, [r7, #0]
 800703e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007044:	2b00      	cmp	r3, #0
 8007046:	db0a      	blt.n	800705e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	490c      	ldr	r1, [pc, #48]	; (8007080 <__NVIC_SetPriority+0x4c>)
 800704e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007052:	0112      	lsls	r2, r2, #4
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	440b      	add	r3, r1
 8007058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800705c:	e00a      	b.n	8007074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	b2da      	uxtb	r2, r3
 8007062:	4908      	ldr	r1, [pc, #32]	; (8007084 <__NVIC_SetPriority+0x50>)
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	3b04      	subs	r3, #4
 800706c:	0112      	lsls	r2, r2, #4
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	440b      	add	r3, r1
 8007072:	761a      	strb	r2, [r3, #24]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	e000e100 	.word	0xe000e100
 8007084:	e000ed00 	.word	0xe000ed00

08007088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007088:	b480      	push	{r7}
 800708a:	b089      	sub	sp, #36	; 0x24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f1c3 0307 	rsb	r3, r3, #7
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	bf28      	it	cs
 80070a6:	2304      	movcs	r3, #4
 80070a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	3304      	adds	r3, #4
 80070ae:	2b06      	cmp	r3, #6
 80070b0:	d902      	bls.n	80070b8 <NVIC_EncodePriority+0x30>
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	3b03      	subs	r3, #3
 80070b6:	e000      	b.n	80070ba <NVIC_EncodePriority+0x32>
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	43da      	mvns	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	401a      	ands	r2, r3
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	fa01 f303 	lsl.w	r3, r1, r3
 80070da:	43d9      	mvns	r1, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070e0:	4313      	orrs	r3, r2
         );
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3724      	adds	r7, #36	; 0x24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ff28 	bl	8006f4c <__NVIC_SetPriorityGrouping>
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007116:	f7ff ff3d 	bl	8006f94 <__NVIC_GetPriorityGrouping>
 800711a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	6978      	ldr	r0, [r7, #20]
 8007122:	f7ff ffb1 	bl	8007088 <NVIC_EncodePriority>
 8007126:	4602      	mov	r2, r0
 8007128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712c:	4611      	mov	r1, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff ff80 	bl	8007034 <__NVIC_SetPriority>
}
 8007134:	bf00      	nop
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff ff30 	bl	8006fb0 <__NVIC_EnableIRQ>
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff ff40 	bl	8006fec <__NVIC_DisableIRQ>
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e0ac      	b.n	80072e0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f8b2 	bl	80072f4 <DFSDM_GetChannelFromInstance>
 8007190:	4603      	mov	r3, r0
 8007192:	4a55      	ldr	r2, [pc, #340]	; (80072e8 <HAL_DFSDM_ChannelInit+0x174>)
 8007194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e09f      	b.n	80072e0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7f9 fbcd 	bl	8000940 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80071a6:	4b51      	ldr	r3, [pc, #324]	; (80072ec <HAL_DFSDM_ChannelInit+0x178>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3301      	adds	r3, #1
 80071ac:	4a4f      	ldr	r2, [pc, #316]	; (80072ec <HAL_DFSDM_ChannelInit+0x178>)
 80071ae:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 80071b0:	4b4e      	ldr	r3, [pc, #312]	; (80072ec <HAL_DFSDM_ChannelInit+0x178>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d125      	bne.n	8007204 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80071b8:	4b4d      	ldr	r3, [pc, #308]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a4c      	ldr	r2, [pc, #304]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071c2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80071c4:	4b4a      	ldr	r3, [pc, #296]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	4948      	ldr	r1, [pc, #288]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80071d2:	4b47      	ldr	r3, [pc, #284]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a46      	ldr	r2, [pc, #280]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071d8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80071dc:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	791b      	ldrb	r3, [r3, #4]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d108      	bne.n	80071f8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 80071e6:	4b42      	ldr	r3, [pc, #264]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	493f      	ldr	r1, [pc, #252]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80071f8:	4b3d      	ldr	r3, [pc, #244]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a3c      	ldr	r2, [pc, #240]	; (80072f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80071fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007202:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8007212:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6819      	ldr	r1, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007222:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007228:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 020f 	bic.w	r2, r2, #15
 8007240:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6819      	ldr	r1, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8007268:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6899      	ldr	r1, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007278:	3b01      	subs	r3, #1
 800727a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f002 0207 	and.w	r2, r2, #7
 8007294:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6859      	ldr	r1, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072c0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f810 	bl	80072f4 <DFSDM_GetChannelFromInstance>
 80072d4:	4602      	mov	r2, r0
 80072d6:	4904      	ldr	r1, [pc, #16]	; (80072e8 <HAL_DFSDM_ChannelInit+0x174>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20002cf0 	.word	0x20002cf0
 80072ec:	20002cec 	.word	0x20002cec
 80072f0:	40017400 	.word	0x40017400

080072f4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1c      	ldr	r2, [pc, #112]	; (8007370 <DFSDM_GetChannelFromInstance+0x7c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d102      	bne.n	800730a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e02b      	b.n	8007362 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a19      	ldr	r2, [pc, #100]	; (8007374 <DFSDM_GetChannelFromInstance+0x80>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d102      	bne.n	8007318 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8007312:	2301      	movs	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e024      	b.n	8007362 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a17      	ldr	r2, [pc, #92]	; (8007378 <DFSDM_GetChannelFromInstance+0x84>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d102      	bne.n	8007326 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007320:	2302      	movs	r3, #2
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	e01d      	b.n	8007362 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a14      	ldr	r2, [pc, #80]	; (800737c <DFSDM_GetChannelFromInstance+0x88>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d102      	bne.n	8007334 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800732e:	2303      	movs	r3, #3
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e016      	b.n	8007362 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a12      	ldr	r2, [pc, #72]	; (8007380 <DFSDM_GetChannelFromInstance+0x8c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d102      	bne.n	8007342 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800733c:	2304      	movs	r3, #4
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e00f      	b.n	8007362 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a0f      	ldr	r2, [pc, #60]	; (8007384 <DFSDM_GetChannelFromInstance+0x90>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d102      	bne.n	8007350 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800734a:	2305      	movs	r3, #5
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e008      	b.n	8007362 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a0d      	ldr	r2, [pc, #52]	; (8007388 <DFSDM_GetChannelFromInstance+0x94>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d102      	bne.n	800735e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8007358:	2306      	movs	r3, #6
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e001      	b.n	8007362 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800735e:	2307      	movs	r3, #7
 8007360:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8007362:	68fb      	ldr	r3, [r7, #12]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40017400 	.word	0x40017400
 8007374:	40017420 	.word	0x40017420
 8007378:	40017440 	.word	0x40017440
 800737c:	40017460 	.word	0x40017460
 8007380:	40017480 	.word	0x40017480
 8007384:	400174a0 	.word	0x400174a0
 8007388:	400174c0 	.word	0x400174c0

0800738c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007398:	f7ff fda8 	bl	8006eec <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e099      	b.n	80074dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0201 	bic.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073c8:	e00f      	b.n	80073ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073ca:	f7ff fd8f 	bl	8006eec <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b05      	cmp	r3, #5
 80073d6:	d908      	bls.n	80073ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2203      	movs	r2, #3
 80073e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e078      	b.n	80074dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e8      	bne.n	80073ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4b38      	ldr	r3, [pc, #224]	; (80074e4 <HAL_DMA_Init+0x158>)
 8007404:	4013      	ands	r3, r2
 8007406:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007416:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800742e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	4313      	orrs	r3, r2
 800743a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	2b04      	cmp	r3, #4
 8007442:	d107      	bne.n	8007454 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	4313      	orrs	r3, r2
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f023 0307 	bic.w	r3, r3, #7
 800746a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	2b04      	cmp	r3, #4
 800747c:	d117      	bne.n	80074ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00e      	beq.n	80074ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fad5 	bl	8007a40 <DMA_CheckFifoParam>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2240      	movs	r2, #64	; 0x40
 80074a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80074aa:	2301      	movs	r3, #1
 80074ac:	e016      	b.n	80074dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa8c 	bl	80079d4 <DMA_CalcBaseAndBitshift>
 80074bc:	4603      	mov	r3, r0
 80074be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c4:	223f      	movs	r2, #63	; 0x3f
 80074c6:	409a      	lsls	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	e010803f 	.word	0xe010803f

080074e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e050      	b.n	800759c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d101      	bne.n	800750a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007506:	2302      	movs	r3, #2
 8007508:	e048      	b.n	800759c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0201 	bic.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2200      	movs	r2, #0
 8007530:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2221      	movs	r2, #33	; 0x21
 8007548:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa42 	bl	80079d4 <DMA_CalcBaseAndBitshift>
 8007550:	4603      	mov	r3, r0
 8007552:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007558:	223f      	movs	r2, #63	; 0x3f
 800755a:	409a      	lsls	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <HAL_DMA_Start_IT+0x26>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e048      	b.n	800765c <HAL_DMA_Start_IT+0xb8>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d137      	bne.n	800764e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2202      	movs	r2, #2
 80075e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 f9c0 	bl	8007978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fc:	223f      	movs	r2, #63	; 0x3f
 80075fe:	409a      	lsls	r2, r3
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0216 	orr.w	r2, r2, #22
 8007612:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695a      	ldr	r2, [r3, #20]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007622:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0208 	orr.w	r2, r2, #8
 800763a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e005      	b.n	800765a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007656:	2302      	movs	r3, #2
 8007658:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007670:	4b8e      	ldr	r3, [pc, #568]	; (80078ac <HAL_DMA_IRQHandler+0x248>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a8e      	ldr	r2, [pc, #568]	; (80078b0 <HAL_DMA_IRQHandler+0x24c>)
 8007676:	fba2 2303 	umull	r2, r3, r2, r3
 800767a:	0a9b      	lsrs	r3, r3, #10
 800767c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007682:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800768e:	2208      	movs	r2, #8
 8007690:	409a      	lsls	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4013      	ands	r3, r2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d01a      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d013      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 0204 	bic.w	r2, r2, #4
 80076b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076bc:	2208      	movs	r2, #8
 80076be:	409a      	lsls	r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c8:	f043 0201 	orr.w	r2, r3, #1
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d4:	2201      	movs	r2, #1
 80076d6:	409a      	lsls	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d012      	beq.n	8007706 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00b      	beq.n	8007706 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f2:	2201      	movs	r2, #1
 80076f4:	409a      	lsls	r2, r3
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	f043 0202 	orr.w	r2, r3, #2
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800770a:	2204      	movs	r2, #4
 800770c:	409a      	lsls	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4013      	ands	r3, r2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d012      	beq.n	800773c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007728:	2204      	movs	r2, #4
 800772a:	409a      	lsls	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007734:	f043 0204 	orr.w	r2, r3, #4
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007740:	2210      	movs	r2, #16
 8007742:	409a      	lsls	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4013      	ands	r3, r2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d043      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d03c      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775e:	2210      	movs	r2, #16
 8007760:	409a      	lsls	r2, r3
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d018      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d108      	bne.n	8007794 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d024      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	e01f      	b.n	80077d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01b      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	4798      	blx	r3
 80077a4:	e016      	b.n	80077d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d107      	bne.n	80077c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0208 	bic.w	r2, r2, #8
 80077c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d8:	2220      	movs	r2, #32
 80077da:	409a      	lsls	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 808f 	beq.w	8007904 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8087 	beq.w	8007904 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fa:	2220      	movs	r2, #32
 80077fc:	409a      	lsls	r2, r3
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b05      	cmp	r3, #5
 800780c:	d136      	bne.n	800787c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0216 	bic.w	r2, r2, #22
 800781c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	695a      	ldr	r2, [r3, #20]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800782c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <HAL_DMA_IRQHandler+0x1da>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0208 	bic.w	r2, r2, #8
 800784c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007852:	223f      	movs	r2, #63	; 0x3f
 8007854:	409a      	lsls	r2, r3
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786e:	2b00      	cmp	r3, #0
 8007870:	d07e      	beq.n	8007970 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
        }
        return;
 800787a:	e079      	b.n	8007970 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01d      	beq.n	80078c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10d      	bne.n	80078b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789c:	2b00      	cmp	r3, #0
 800789e:	d031      	beq.n	8007904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
 80078a8:	e02c      	b.n	8007904 <HAL_DMA_IRQHandler+0x2a0>
 80078aa:	bf00      	nop
 80078ac:	20000014 	.word	0x20000014
 80078b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d023      	beq.n	8007904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
 80078c4:	e01e      	b.n	8007904 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10f      	bne.n	80078f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0210 	bic.w	r2, r2, #16
 80078e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007908:	2b00      	cmp	r3, #0
 800790a:	d032      	beq.n	8007972 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d022      	beq.n	800795e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2205      	movs	r2, #5
 800791c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0201 	bic.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	3301      	adds	r3, #1
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	429a      	cmp	r2, r3
 800793a:	d307      	bcc.n	800794c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1f2      	bne.n	8007930 <HAL_DMA_IRQHandler+0x2cc>
 800794a:	e000      	b.n	800794e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800794c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	e000      	b.n	8007972 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007970:	bf00      	nop
    }
  }
}
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b40      	cmp	r3, #64	; 0x40
 80079a4:	d108      	bne.n	80079b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80079b6:	e007      	b.n	80079c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	60da      	str	r2, [r3, #12]
}
 80079c8:	bf00      	nop
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	3b10      	subs	r3, #16
 80079e4:	4a13      	ldr	r2, [pc, #76]	; (8007a34 <DMA_CalcBaseAndBitshift+0x60>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079ee:	4a12      	ldr	r2, [pc, #72]	; (8007a38 <DMA_CalcBaseAndBitshift+0x64>)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d908      	bls.n	8007a14 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <DMA_CalcBaseAndBitshift+0x68>)
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	1d1a      	adds	r2, r3, #4
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	659a      	str	r2, [r3, #88]	; 0x58
 8007a12:	e006      	b.n	8007a22 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4b08      	ldr	r3, [pc, #32]	; (8007a3c <DMA_CalcBaseAndBitshift+0x68>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	aaaaaaab 	.word	0xaaaaaaab
 8007a38:	08014984 	.word	0x08014984
 8007a3c:	fffffc00 	.word	0xfffffc00

08007a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d11f      	bne.n	8007a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d856      	bhi.n	8007b0e <DMA_CheckFifoParam+0xce>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <DMA_CheckFifoParam+0x28>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007a8b 	.word	0x08007a8b
 8007a70:	08007a79 	.word	0x08007a79
 8007a74:	08007b0f 	.word	0x08007b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d046      	beq.n	8007b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a88:	e043      	b.n	8007b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a92:	d140      	bne.n	8007b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a98:	e03d      	b.n	8007b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa2:	d121      	bne.n	8007ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d837      	bhi.n	8007b1a <DMA_CheckFifoParam+0xda>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <DMA_CheckFifoParam+0x70>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007ac7 	.word	0x08007ac7
 8007ab8:	08007ac1 	.word	0x08007ac1
 8007abc:	08007ad9 	.word	0x08007ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac4:	e030      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d025      	beq.n	8007b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ad6:	e022      	b.n	8007b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ae0:	d11f      	bne.n	8007b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007ae6:	e01c      	b.n	8007b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d903      	bls.n	8007af6 <DMA_CheckFifoParam+0xb6>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d003      	beq.n	8007afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007af4:	e018      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	73fb      	strb	r3, [r7, #15]
      break;
 8007afa:	e015      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0c:	e00b      	b.n	8007b26 <DMA_CheckFifoParam+0xe6>
      break;
 8007b0e:	bf00      	nop
 8007b10:	e00a      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b12:	bf00      	nop
 8007b14:	e008      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b16:	bf00      	nop
 8007b18:	e006      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e004      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e002      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <DMA_CheckFifoParam+0xe8>
      break;
 8007b26:	bf00      	nop
    }
  } 
  
  return status; 
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop

08007b38 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e049      	b.n	8007bde <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7f8 ffae 	bl	8000ac0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b88:	f023 0107 	bic.w	r1, r3, #7
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b9e:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <HAL_DMA2D_Init+0xb0>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	68d1      	ldr	r1, [r2, #12]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	430b      	orrs	r3, r1
 8007bac:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	051a      	lsls	r2, r3, #20
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	055b      	lsls	r3, r3, #21
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	ffffc000 	.word	0xffffc000

08007bec <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <HAL_DMA2D_Start+0x1c>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e018      	b.n	8007c3a <HAL_DMA2D_Start+0x4e>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 faa4 	bl	8008170 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 0201 	orr.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b086      	sub	sp, #24
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d056      	beq.n	8007d0c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c5e:	f7ff f945 	bl	8006eec <HAL_GetTick>
 8007c62:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007c64:	e04b      	b.n	8007cfe <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d023      	beq.n	8007cc0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d005      	beq.n	8007c8e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	f043 0202 	orr.w	r2, r3, #2
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9c:	f043 0201 	orr.w	r2, r3, #1
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2221      	movs	r2, #33	; 0x21
 8007caa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2204      	movs	r2, #4
 8007cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e0a5      	b.n	8007e0c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc6:	d01a      	beq.n	8007cfe <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cc8:	f7ff f910 	bl	8006eec <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d302      	bcc.n	8007cde <HAL_DMA2D_PollForTransfer+0x9c>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10f      	bne.n	8007cfe <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce2:	f043 0220 	orr.w	r2, r3, #32
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2203      	movs	r2, #3
 8007cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e086      	b.n	8007e0c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0ac      	beq.n	8007c66 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d061      	beq.n	8007df2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d2e:	f7ff f8dd 	bl	8006eec <HAL_GetTick>
 8007d32:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007d34:	e056      	b.n	8007de4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d02e      	beq.n	8007da6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f003 0308 	and.w	r3, r3, #8
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d56:	f043 0204 	orr.w	r2, r3, #4
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6c:	f043 0202 	orr.w	r2, r3, #2
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d82:	f043 0201 	orr.w	r2, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2229      	movs	r2, #41	; 0x29
 8007d90:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2204      	movs	r2, #4
 8007d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e032      	b.n	8007e0c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dac:	d01a      	beq.n	8007de4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007dae:	f7ff f89d 	bl	8006eec <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <HAL_DMA2D_PollForTransfer+0x182>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10f      	bne.n	8007de4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc8:	f043 0220 	orr.w	r2, r3, #32
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e013      	b.n	8007e0c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f003 0310 	and.w	r3, r3, #16
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0a1      	beq.n	8007d36 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2212      	movs	r2, #18
 8007df8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d026      	beq.n	8007e84 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d021      	beq.n	8007e84 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e4e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e54:	f043 0201 	orr.w	r2, r3, #1
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2201      	movs	r2, #1
 8007e62:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2204      	movs	r2, #4
 8007e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d026      	beq.n	8007edc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d021      	beq.n	8007edc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ea6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2220      	movs	r2, #32
 8007eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb4:	f043 0202 	orr.w	r2, r3, #2
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2204      	movs	r2, #4
 8007ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d026      	beq.n	8007f34 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d021      	beq.n	8007f34 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007efe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2208      	movs	r2, #8
 8007f06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0c:	f043 0204 	orr.w	r2, r3, #4
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2204      	movs	r2, #4
 8007f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d013      	beq.n	8007f66 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00e      	beq.n	8007f66 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f56:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f853 	bl	800800c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d024      	beq.n	8007fba <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d01f      	beq.n	8007fba <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f88:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0310 	and.w	r3, r3, #16
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01f      	beq.n	8008004 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01a      	beq.n	8008004 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fdc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2210      	movs	r2, #16
 8007fe4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f80e 	bl	8008020 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008004:	bf00      	nop
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_DMA2D_ConfigLayer+0x20>
 8008050:	2302      	movs	r3, #2
 8008052:	e084      	b.n	800815e <HAL_DMA2D_ConfigLayer+0x12a>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	4613      	mov	r3, r2
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	4413      	add	r3, r2
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	3320      	adds	r3, #32
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	4413      	add	r3, r2
 8008074:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	041b      	lsls	r3, r3, #16
 8008080:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008088:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008094:	4b35      	ldr	r3, [pc, #212]	; (800816c <HAL_DMA2D_ConfigLayer+0x138>)
 8008096:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2b0a      	cmp	r3, #10
 800809e:	d003      	beq.n	80080a8 <HAL_DMA2D_ConfigLayer+0x74>
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2b09      	cmp	r3, #9
 80080a6:	d107      	bne.n	80080b8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	e005      	b.n	80080c4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	061b      	lsls	r3, r3, #24
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d120      	bne.n	800810c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	43db      	mvns	r3, r3
 80080d4:	ea02 0103 	and.w	r1, r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	430a      	orrs	r2, r1
 80080e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2b0a      	cmp	r3, #10
 80080f2:	d003      	beq.n	80080fc <HAL_DMA2D_ConfigLayer+0xc8>
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	2b09      	cmp	r3, #9
 80080fa:	d127      	bne.n	800814c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008108:	629a      	str	r2, [r3, #40]	; 0x28
 800810a:	e01f      	b.n	800814c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69da      	ldr	r2, [r3, #28]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	43db      	mvns	r3, r3
 8008116:	ea02 0103 	and.w	r1, r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	430a      	orrs	r2, r1
 8008122:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	6812      	ldr	r2, [r2, #0]
 800812c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2b0a      	cmp	r3, #10
 8008134:	d003      	beq.n	800813e <HAL_DMA2D_ConfigLayer+0x10a>
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2b09      	cmp	r3, #9
 800813c:	d106      	bne.n	800814c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800814a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	ff33000f 	.word	0xff33000f

08008170 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008170:	b480      	push	{r7}
 8008172:	b08b      	sub	sp, #44	; 0x2c
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008184:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	041a      	lsls	r2, r3, #16
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	431a      	orrs	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081a8:	d174      	bne.n	8008294 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80081b0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081b8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80081c0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d108      	bne.n	80081e2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	431a      	orrs	r2, r3
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	4313      	orrs	r3, r2
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	627b      	str	r3, [r7, #36]	; 0x24
 80081e0:	e053      	b.n	800828a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d106      	bne.n	80081f8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	627b      	str	r3, [r7, #36]	; 0x24
 80081f6:	e048      	b.n	800828a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d111      	bne.n	8008224 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	0cdb      	lsrs	r3, r3, #19
 8008204:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	0a9b      	lsrs	r3, r3, #10
 800820a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	08db      	lsrs	r3, r3, #3
 8008210:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	02db      	lsls	r3, r3, #11
 800821a:	4313      	orrs	r3, r2
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
 8008222:	e032      	b.n	800828a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	2b03      	cmp	r3, #3
 800822a:	d117      	bne.n	800825c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	0fdb      	lsrs	r3, r3, #31
 8008230:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	0cdb      	lsrs	r3, r3, #19
 8008236:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	0adb      	lsrs	r3, r3, #11
 800823c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	08db      	lsrs	r3, r3, #3
 8008242:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	029b      	lsls	r3, r3, #10
 800824c:	431a      	orrs	r2, r3
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	03db      	lsls	r3, r3, #15
 8008252:	4313      	orrs	r3, r2
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
 800825a:	e016      	b.n	800828a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	0f1b      	lsrs	r3, r3, #28
 8008260:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	0d1b      	lsrs	r3, r3, #20
 8008266:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	0b1b      	lsrs	r3, r3, #12
 800826c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	091b      	lsrs	r3, r3, #4
 8008272:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	011a      	lsls	r2, r3, #4
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	431a      	orrs	r2, r3
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	031b      	lsls	r3, r3, #12
 8008282:	4313      	orrs	r3, r2
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008290:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008292:	e003      	b.n	800829c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	60da      	str	r2, [r3, #12]
}
 800829c:	bf00      	nop
 800829e:	372c      	adds	r7, #44	; 0x2c
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	019a      	lsls	r2, r3, #6
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	431a      	orrs	r2, r3
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	431a      	orrs	r2, r3
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	431a      	orrs	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80082e8:	f7fe fe00 	bl	8006eec <HAL_GetTick>
 80082ec:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80082ee:	e009      	b.n	8008304 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80082f0:	f7fe fdfc 	bl	8006eec <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082fe:	d901      	bls.n	8008304 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e015      	b.n	8008330 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0ee      	beq.n	80082f0 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	019a      	lsls	r2, r3, #6
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	431a      	orrs	r2, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	ea42 0103 	orr.w	r1, r2, r3
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	041a      	lsls	r2, r3, #16
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e109      	b.n	8008560 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7c5b      	ldrb	r3, [r3, #17]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7f8 fccc 	bl	8000cf4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2203      	movs	r2, #3
 8008360:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8008362:	2300      	movs	r3, #0
 8008364:	613b      	str	r3, [r7, #16]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008376:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800838a:	f7fe fdaf 	bl	8006eec <HAL_GetTick>
 800838e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008390:	e009      	b.n	80083a6 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008392:	f7fe fdab 	bl	8006eec <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083a0:	d901      	bls.n	80083a6 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e0dc      	b.n	8008560 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80083ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0ed      	beq.n	8008392 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	4b69      	ldr	r3, [pc, #420]	; (8008568 <HAL_DSI_Init+0x230>)
 80083c4:	400b      	ands	r3, r1
 80083c6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80083de:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80083e6:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80083f2:	2300      	movs	r3, #0
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800841a:	2001      	movs	r0, #1
 800841c:	f7fe fd72 	bl	8006f04 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8008420:	f7fe fd64 	bl	8006eec <HAL_GetTick>
 8008424:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008426:	e009      	b.n	800843c <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008428:	f7fe fd60 	bl	8006eec <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008436:	d901      	bls.n	800843c <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e091      	b.n	8008560 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008448:	2b00      	cmp	r3, #0
 800844a:	d0ed      	beq.n	8008428 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0206 	orr.w	r2, r2, #6
 800845c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0203 	bic.w	r2, r2, #3
 8008470:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	431a      	orrs	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0203 	bic.w	r2, r2, #3
 800849e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80084c6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6899      	ldr	r1, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <HAL_DSI_Init+0x1b0>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	e000      	b.n	80084ea <HAL_DSI_Init+0x1b2>
 80084e8:	2301      	movs	r3, #1
 80084ea:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	4a1f      	ldr	r2, [pc, #124]	; (800856c <HAL_DSI_Init+0x234>)
 80084f0:	fb03 f202 	mul.w	r2, r3, r2
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f003 0303 	and.w	r3, r3, #3
 80084fc:	409a      	lsls	r2, r3
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8008506:	fb01 f303 	mul.w	r3, r1, r3
 800850a:	fbb2 f3f3 	udiv	r3, r2, r3
 800850e:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008520:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	430a      	orrs	r2, r1
 8008534:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2200      	movs	r2, #0
 800853e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	fffc8603 	.word	0xfffc8603
 800856c:	003d0900 	.word	0x003d0900

08008570 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e066      	b.n	8008650 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2203      	movs	r2, #3
 8008586:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0208 	bic.w	r2, r2, #8
 800859c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80085b0:	2300      	movs	r3, #0
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0201 	bic.w	r2, r2, #1
 80085c2:	605a      	str	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	613b      	str	r3, [r7, #16]
 80085d0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0206 	bic.w	r2, r2, #6
 80085e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0201 	bic.w	r2, r2, #1
 80085fa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800860e:	2300      	movs	r3, #0
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008622:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800862e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008632:	60bb      	str	r3, [r7, #8]
 8008634:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7f8 fba8 	bl	8000d8c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	7c1b      	ldrb	r3, [r3, #16]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <HAL_DSI_ConfigErrorMonitor+0x16>
 800866a:	2302      	movs	r3, #2
 800866c:	e0aa      	b.n	80087c4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00a      	beq.n	80086ae <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086a8:	430b      	orrs	r3, r1
 80086aa:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80086c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	f003 0304 	and.w	r3, r3, #4
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d009      	beq.n	80086ea <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0201 	orr.w	r2, r2, #1
 80086e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d009      	beq.n	8008708 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0202 	orr.w	r2, r2, #2
 8008704:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f003 0310 	and.w	r3, r3, #16
 800870e:	2b00      	cmp	r3, #0
 8008710:	d009      	beq.n	8008726 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 020c 	orr.w	r2, r2, #12
 8008722:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	f003 0320 	and.w	r3, r3, #32
 800872c:	2b00      	cmp	r3, #0
 800872e:	d009      	beq.n	8008744 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f042 0210 	orr.w	r2, r2, #16
 8008740:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f042 0220 	orr.w	r2, r2, #32
 800875e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008768:	2b00      	cmp	r3, #0
 800876a:	d009      	beq.n	8008780 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800877c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008786:	2b00      	cmp	r3, #0
 8008788:	d009      	beq.n	800879e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800879a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d009      	beq.n	80087bc <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80087b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00f      	beq.n	8008808 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d007      	beq.n	8008808 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f8ad 	bl	8008962 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00f      	beq.n	8008838 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d007      	beq.n	8008838 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2202      	movs	r2, #2
 800882e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7f9 fb76 	bl	8001f24 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 808c 	beq.w	800895a <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800884a:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4013      	ands	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008862:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	4013      	ands	r3, r2
 8008870:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	b29b      	uxth	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	f043 0201 	orr.w	r2, r3, #1
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	f043 0202 	orr.w	r2, r3, #2
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d005      	beq.n	80088b2 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f043 0204 	orr.w	r2, r3, #4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	f043 0208 	orr.w	r2, r3, #8
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f003 030c 	and.w	r3, r3, #12
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d005      	beq.n	80088de <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	f043 0210 	orr.w	r2, r3, #16
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	f043 0220 	orr.w	r2, r3, #32
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f003 0320 	and.w	r3, r3, #32
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f80e 	bl	8008976 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800895a:	bf00      	nop
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7c1b      	ldrb	r3, [r3, #16]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_DSI_SetGenericVCID+0x16>
 800899c:	2302      	movs	r3, #2
 800899e:	e016      	b.n	80089ce <HAL_DSI_SetGenericVCID+0x44>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 0203 	bic.w	r2, r2, #3
 80089b4:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
	...

080089dc <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	7c1b      	ldrb	r3, [r3, #16]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <HAL_DSI_ConfigVideoMode+0x16>
 80089ee:	2302      	movs	r3, #2
 80089f0:	e1ee      	b.n	8008dd0 <HAL_DSI_ConfigVideoMode+0x3f4>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0201 	bic.w	r2, r2, #1
 8008a06:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0201 	bic.w	r2, r2, #1
 8008a18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0203 	bic.w	r2, r2, #3
 8008a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	4b8b      	ldr	r3, [pc, #556]	; (8008c78 <HAL_DSI_ConfigVideoMode+0x29c>)
 8008a4a:	400b      	ands	r3, r1
 8008a4c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4b84      	ldr	r3, [pc, #528]	; (8008c7c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8008a6c:	400b      	ands	r3, r1
 8008a6e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	695a      	ldr	r2, [r3, #20]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	4b7b      	ldr	r3, [pc, #492]	; (8008c7c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8008a8e:	400b      	ands	r3, r1
 8008a90:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	699a      	ldr	r2, [r3, #24]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0203 	bic.w	r2, r2, #3
 8008ab2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68d9      	ldr	r1, [r3, #12]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	695a      	ldr	r2, [r3, #20]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f022 0207 	bic.w	r2, r2, #7
 8008ad4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6959      	ldr	r1, [r3, #20]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	430a      	orrs	r2, r1
 8008af2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 020f 	bic.w	r2, r2, #15
 8008b02:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6919      	ldr	r1, [r3, #16]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 020e 	bic.w	r2, r2, #14
 8008b26:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	005a      	lsls	r2, r3, #1
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d110      	bne.n	8008b6c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	691a      	ldr	r2, [r3, #16]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b58:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6919      	ldr	r1, [r3, #16]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4b42      	ldr	r3, [pc, #264]	; (8008c80 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8008b78:	400b      	ands	r3, r1
 8008b7a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	4b39      	ldr	r3, [pc, #228]	; (8008c80 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8008b9a:	400b      	ands	r3, r1
 8008b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	4b32      	ldr	r3, [pc, #200]	; (8008c84 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8008bbc:	400b      	ands	r3, r1
 8008bbe:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	4b2a      	ldr	r3, [pc, #168]	; (8008c88 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8008bde:	400b      	ands	r3, r1
 8008be0:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b22      	ldr	r3, [pc, #136]	; (8008c88 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8008c00:	400b      	ands	r3, r1
 8008c02:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4b19      	ldr	r3, [pc, #100]	; (8008c88 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8008c22:	400b      	ands	r3, r1
 8008c24:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <HAL_DSI_ConfigVideoMode+0x29c>)
 8008c44:	400b      	ands	r3, r1
 8008c46:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c68:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c74:	e00a      	b.n	8008c8c <HAL_DSI_ConfigVideoMode+0x2b0>
 8008c76:	bf00      	nop
 8008c78:	ffffc000 	.word	0xffffc000
 8008c7c:	ffffe000 	.word	0xffffe000
 8008c80:	fffff000 	.word	0xfffff000
 8008c84:	ffff8000 	.word	0xffff8000
 8008c88:	fffffc00 	.word	0xfffffc00
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699a      	ldr	r2, [r3, #24]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8008ca2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6999      	ldr	r1, [r3, #24]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cae:	041a      	lsls	r2, r3, #16
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008cc6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6999      	ldr	r1, [r3, #24]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d92:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	7c1b      	ldrb	r3, [r3, #16]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8008dee:	2302      	movs	r3, #2
 8008df0:	e0c5      	b.n	8008f7e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0201 	orr.w	r2, r2, #1
 8008e06:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0201 	bic.w	r2, r2, #1
 8008e18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f042 0201 	orr.w	r2, r2, #1
 8008e2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0203 	bic.w	r2, r2, #3
 8008e3e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68d9      	ldr	r1, [r3, #12]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	695a      	ldr	r2, [r3, #20]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0207 	bic.w	r2, r2, #7
 8008e60:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6959      	ldr	r1, [r3, #20]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	69da      	ldr	r2, [r3, #28]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	431a      	orrs	r2, r3
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	691a      	ldr	r2, [r3, #16]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 020f 	bic.w	r2, r2, #15
 8008e8e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6919      	ldr	r1, [r3, #16]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 020e 	bic.w	r2, r2, #14
 8008eb2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	005a      	lsls	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	4b2c      	ldr	r3, [pc, #176]	; (8008f8c <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8008eda:	400b      	ands	r3, r1
 8008edc:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008f00:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	431a      	orrs	r2, r3
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8008f20:	431a      	orrs	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0201 	bic.w	r2, r2, #1
 8008f3a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f042 0201 	orr.w	r2, r2, #1
 8008f5e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0202 	orr.w	r2, r2, #2
 8008f72:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	ffff0000 	.word	0xffff0000

08008f90 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7c1b      	ldrb	r3, [r3, #16]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <HAL_DSI_ConfigCommand+0x16>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e049      	b.n	800903a <HAL_DSI_ConfigCommand+0xaa>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	4b24      	ldr	r3, [pc, #144]	; (8009048 <HAL_DSI_ConfigCommand+0xb8>)
 8008fb8:	400b      	ands	r3, r1
 8008fba:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8008fca:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8008fd0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8008fd6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8008fdc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8008fe2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8008fe8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8008fee:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8008ff4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8008ffa:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8009000:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8009006:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 0202 	bic.w	r2, r2, #2
 800901e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	fef080ff 	.word	0xfef080ff

0800904c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	7c1b      	ldrb	r3, [r3, #16]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d101      	bne.n	8009062 <HAL_DSI_ConfigFlowControl+0x16>
 800905e:	2302      	movs	r3, #2
 8009060:	e016      	b.n	8009090 <HAL_DSI_ConfigFlowControl+0x44>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 021f 	bic.w	r2, r2, #31
 8009076:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	7c1b      	ldrb	r3, [r3, #16]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d101      	bne.n	80090b2 <HAL_DSI_ConfigPhyTimer+0x16>
 80090ae:	2302      	movs	r3, #2
 80090b0:	e058      	b.n	8009164 <HAL_DSI_ConfigPhyTimer+0xc8>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4293      	cmp	r3, r2
 80090c2:	bf38      	it	cc
 80090c4:	4613      	movcc	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80090d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	041a      	lsls	r2, r3, #16
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	431a      	orrs	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8009106:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	691a      	ldr	r2, [r3, #16]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	041b      	lsls	r3, r3, #16
 800911c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009140:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	021a      	lsls	r2, r3, #8
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	7c1b      	ldrb	r3, [r3, #16]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <HAL_DSI_ConfigHostTimeouts+0x16>
 8009182:	2302      	movs	r3, #2
 8009184:	e0b4      	b.n	80092f0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800919a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6899      	ldr	r1, [r3, #8]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	021a      	lsls	r2, r3, #8
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	b292      	uxth	r2, r2
 80091bc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	041a      	lsls	r2, r3, #16
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	4b47      	ldr	r3, [pc, #284]	; (80092fc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80091de:	400b      	ands	r3, r1
 80091e0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	4b3f      	ldr	r3, [pc, #252]	; (80092fc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8009200:	400b      	ands	r3, r1
 8009202:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	430a      	orrs	r2, r1
 8009214:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b36      	ldr	r3, [pc, #216]	; (80092fc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8009224:	400b      	ands	r3, r1
 8009226:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	691a      	ldr	r2, [r3, #16]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	4b2b      	ldr	r3, [pc, #172]	; (80092fc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800924e:	400b      	ands	r3, r1
 8009250:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	695a      	ldr	r2, [r3, #20]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800927a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	699a      	ldr	r2, [r3, #24]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	4b16      	ldr	r3, [pc, #88]	; (80092fc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80092a2:	400b      	ands	r3, r1
 80092a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	69da      	ldr	r2, [r3, #28]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80092cc:	400b      	ands	r3, r1
 80092ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	6a1a      	ldr	r2, [r3, #32]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	ffff0000 	.word	0xffff0000

08009300 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	7c1b      	ldrb	r3, [r3, #16]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <HAL_DSI_Start+0x14>
 8009310:	2302      	movs	r3, #2
 8009312:	e02b      	b.n	800936c <HAL_DSI_Start+0x6c>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f042 0201 	orr.w	r2, r2, #1
 800932c:	605a      	str	r2, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800933c:	2300      	movs	r3, #0
 800933e:	60bb      	str	r3, [r7, #8]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f042 0208 	orr.w	r2, r2, #8
 8009350:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800935c:	f003 0308 	and.w	r3, r3, #8
 8009360:	60bb      	str	r3, [r7, #8]
 8009362:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af02      	add	r7, sp, #8
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	7c1b      	ldrb	r3, [r3, #16]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d101      	bne.n	8009392 <HAL_DSI_ShortWrite+0x1a>
 800938e:	2302      	movs	r3, #2
 8009390:	e010      	b.n	80093b4 <HAL_DSI_ShortWrite+0x3c>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	68b9      	ldr	r1, [r7, #8]
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7fe ff99 	bl	80082da <DSI_ShortWrite>
 80093a8:	4603      	mov	r3, r0
 80093aa:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	741a      	strb	r2, [r3, #16]

  return status;
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08c      	sub	sp, #48	; 0x30
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80093ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093cc:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	7c1b      	ldrb	r3, [r3, #16]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <HAL_DSI_LongWrite+0x1e>
 80093d6:	2302      	movs	r3, #2
 80093d8:	e084      	b.n	80094e4 <HAL_DSI_LongWrite+0x128>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80093e0:	f7fd fd84 	bl	8006eec <HAL_GetTick>
 80093e4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80093e6:	e00c      	b.n	8009402 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80093e8:	f7fd fd80 	bl	8006eec <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093f6:	d904      	bls.n	8009402 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e070      	b.n	80094e4 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0eb      	beq.n	80093e8 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2b03      	cmp	r3, #3
 8009418:	bf28      	it	cs
 800941a:	2303      	movcs	r3, #3
 800941c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800941e:	2300      	movs	r3, #0
 8009420:	623b      	str	r3, [r7, #32]
 8009422:	e00f      	b.n	8009444 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	4413      	add	r3, r2
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	3301      	adds	r3, #1
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	fa02 f303 	lsl.w	r3, r2, r3
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	4313      	orrs	r3, r2
 800943c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	3301      	adds	r3, #1
 8009442:	623b      	str	r3, [r7, #32]
 8009444:	6a3a      	ldr	r2, [r7, #32]
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	429a      	cmp	r2, r3
 800944a:	d3eb      	bcc.n	8009424 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	69fa      	ldr	r2, [r7, #28]
 8009452:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	4413      	add	r3, r2
 8009462:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8009464:	e028      	b.n	80094b8 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	2b04      	cmp	r3, #4
 800946a:	bf28      	it	cs
 800946c:	2304      	movcs	r3, #4
 800946e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009474:	2300      	movs	r3, #0
 8009476:	623b      	str	r3, [r7, #32]
 8009478:	e00e      	b.n	8009498 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	4413      	add	r3, r2
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	fa02 f303 	lsl.w	r3, r2, r3
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	4313      	orrs	r3, r2
 8009490:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	3301      	adds	r3, #1
 8009496:	623b      	str	r3, [r7, #32]
 8009498:	6a3a      	ldr	r2, [r7, #32]
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	429a      	cmp	r2, r3
 800949e:	d3ec      	bcc.n	800947a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	69fa      	ldr	r2, [r7, #28]
 80094a6:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80094a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	4413      	add	r3, r2
 80094b6:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1d3      	bne.n	8009466 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80094c6:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	4613      	mov	r3, r2
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	68b9      	ldr	r1, [r7, #8]
 80094d8:	f7fe fee6 	bl	80082a8 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3728      	adds	r7, #40	; 0x28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	7c1b      	ldrb	r3, [r3, #16]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80094fe:	2302      	movs	r3, #2
 8009500:	e01b      	b.n	800953a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8009518:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	065a      	lsls	r2, r3, #25
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
	...

08009548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009548:	b480      	push	{r7}
 800954a:	b089      	sub	sp, #36	; 0x24
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009552:	2300      	movs	r3, #0
 8009554:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800955a:	2300      	movs	r3, #0
 800955c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800955e:	2300      	movs	r3, #0
 8009560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009562:	2300      	movs	r3, #0
 8009564:	61fb      	str	r3, [r7, #28]
 8009566:	e175      	b.n	8009854 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009568:	2201      	movs	r2, #1
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	fa02 f303 	lsl.w	r3, r2, r3
 8009570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	4013      	ands	r3, r2
 800957a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	429a      	cmp	r2, r3
 8009582:	f040 8164 	bne.w	800984e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	f003 0303 	and.w	r3, r3, #3
 800958e:	2b01      	cmp	r3, #1
 8009590:	d005      	beq.n	800959e <HAL_GPIO_Init+0x56>
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	2b02      	cmp	r3, #2
 800959c:	d130      	bne.n	8009600 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	2203      	movs	r2, #3
 80095aa:	fa02 f303 	lsl.w	r3, r2, r3
 80095ae:	43db      	mvns	r3, r3
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	4013      	ands	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	68da      	ldr	r2, [r3, #12]
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	fa02 f303 	lsl.w	r3, r2, r3
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80095d4:	2201      	movs	r2, #1
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	fa02 f303 	lsl.w	r3, r2, r3
 80095dc:	43db      	mvns	r3, r3
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	4013      	ands	r3, r2
 80095e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	091b      	lsrs	r3, r3, #4
 80095ea:	f003 0201 	and.w	r2, r3, #1
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	fa02 f303 	lsl.w	r3, r2, r3
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	2b03      	cmp	r3, #3
 800960a:	d017      	beq.n	800963c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	2203      	movs	r2, #3
 8009618:	fa02 f303 	lsl.w	r3, r2, r3
 800961c:	43db      	mvns	r3, r3
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	4013      	ands	r3, r2
 8009622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	005b      	lsls	r3, r3, #1
 800962c:	fa02 f303 	lsl.w	r3, r2, r3
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	4313      	orrs	r3, r2
 8009634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f003 0303 	and.w	r3, r3, #3
 8009644:	2b02      	cmp	r3, #2
 8009646:	d123      	bne.n	8009690 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	08da      	lsrs	r2, r3, #3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3208      	adds	r2, #8
 8009650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	f003 0307 	and.w	r3, r3, #7
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	220f      	movs	r2, #15
 8009660:	fa02 f303 	lsl.w	r3, r2, r3
 8009664:	43db      	mvns	r3, r3
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	4013      	ands	r3, r2
 800966a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	f003 0307 	and.w	r3, r3, #7
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	fa02 f303 	lsl.w	r3, r2, r3
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	4313      	orrs	r3, r2
 8009680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	08da      	lsrs	r2, r3, #3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3208      	adds	r2, #8
 800968a:	69b9      	ldr	r1, [r7, #24]
 800968c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	2203      	movs	r2, #3
 800969c:	fa02 f303 	lsl.w	r3, r2, r3
 80096a0:	43db      	mvns	r3, r3
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	4013      	ands	r3, r2
 80096a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f003 0203 	and.w	r2, r3, #3
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	fa02 f303 	lsl.w	r3, r2, r3
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 80be 	beq.w	800984e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096d2:	4b66      	ldr	r3, [pc, #408]	; (800986c <HAL_GPIO_Init+0x324>)
 80096d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d6:	4a65      	ldr	r2, [pc, #404]	; (800986c <HAL_GPIO_Init+0x324>)
 80096d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096dc:	6453      	str	r3, [r2, #68]	; 0x44
 80096de:	4b63      	ldr	r3, [pc, #396]	; (800986c <HAL_GPIO_Init+0x324>)
 80096e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80096ea:	4a61      	ldr	r2, [pc, #388]	; (8009870 <HAL_GPIO_Init+0x328>)
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	089b      	lsrs	r3, r3, #2
 80096f0:	3302      	adds	r3, #2
 80096f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	f003 0303 	and.w	r3, r3, #3
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	220f      	movs	r2, #15
 8009702:	fa02 f303 	lsl.w	r3, r2, r3
 8009706:	43db      	mvns	r3, r3
 8009708:	69ba      	ldr	r2, [r7, #24]
 800970a:	4013      	ands	r3, r2
 800970c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a58      	ldr	r2, [pc, #352]	; (8009874 <HAL_GPIO_Init+0x32c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d037      	beq.n	8009786 <HAL_GPIO_Init+0x23e>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a57      	ldr	r2, [pc, #348]	; (8009878 <HAL_GPIO_Init+0x330>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d031      	beq.n	8009782 <HAL_GPIO_Init+0x23a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a56      	ldr	r2, [pc, #344]	; (800987c <HAL_GPIO_Init+0x334>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d02b      	beq.n	800977e <HAL_GPIO_Init+0x236>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a55      	ldr	r2, [pc, #340]	; (8009880 <HAL_GPIO_Init+0x338>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d025      	beq.n	800977a <HAL_GPIO_Init+0x232>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a54      	ldr	r2, [pc, #336]	; (8009884 <HAL_GPIO_Init+0x33c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d01f      	beq.n	8009776 <HAL_GPIO_Init+0x22e>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a53      	ldr	r2, [pc, #332]	; (8009888 <HAL_GPIO_Init+0x340>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d019      	beq.n	8009772 <HAL_GPIO_Init+0x22a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a52      	ldr	r2, [pc, #328]	; (800988c <HAL_GPIO_Init+0x344>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d013      	beq.n	800976e <HAL_GPIO_Init+0x226>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a51      	ldr	r2, [pc, #324]	; (8009890 <HAL_GPIO_Init+0x348>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d00d      	beq.n	800976a <HAL_GPIO_Init+0x222>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a50      	ldr	r2, [pc, #320]	; (8009894 <HAL_GPIO_Init+0x34c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d007      	beq.n	8009766 <HAL_GPIO_Init+0x21e>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a4f      	ldr	r2, [pc, #316]	; (8009898 <HAL_GPIO_Init+0x350>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d101      	bne.n	8009762 <HAL_GPIO_Init+0x21a>
 800975e:	2309      	movs	r3, #9
 8009760:	e012      	b.n	8009788 <HAL_GPIO_Init+0x240>
 8009762:	230a      	movs	r3, #10
 8009764:	e010      	b.n	8009788 <HAL_GPIO_Init+0x240>
 8009766:	2308      	movs	r3, #8
 8009768:	e00e      	b.n	8009788 <HAL_GPIO_Init+0x240>
 800976a:	2307      	movs	r3, #7
 800976c:	e00c      	b.n	8009788 <HAL_GPIO_Init+0x240>
 800976e:	2306      	movs	r3, #6
 8009770:	e00a      	b.n	8009788 <HAL_GPIO_Init+0x240>
 8009772:	2305      	movs	r3, #5
 8009774:	e008      	b.n	8009788 <HAL_GPIO_Init+0x240>
 8009776:	2304      	movs	r3, #4
 8009778:	e006      	b.n	8009788 <HAL_GPIO_Init+0x240>
 800977a:	2303      	movs	r3, #3
 800977c:	e004      	b.n	8009788 <HAL_GPIO_Init+0x240>
 800977e:	2302      	movs	r3, #2
 8009780:	e002      	b.n	8009788 <HAL_GPIO_Init+0x240>
 8009782:	2301      	movs	r3, #1
 8009784:	e000      	b.n	8009788 <HAL_GPIO_Init+0x240>
 8009786:	2300      	movs	r3, #0
 8009788:	69fa      	ldr	r2, [r7, #28]
 800978a:	f002 0203 	and.w	r2, r2, #3
 800978e:	0092      	lsls	r2, r2, #2
 8009790:	4093      	lsls	r3, r2
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	4313      	orrs	r3, r2
 8009796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009798:	4935      	ldr	r1, [pc, #212]	; (8009870 <HAL_GPIO_Init+0x328>)
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	089b      	lsrs	r3, r3, #2
 800979e:	3302      	adds	r3, #2
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80097a6:	4b3d      	ldr	r3, [pc, #244]	; (800989c <HAL_GPIO_Init+0x354>)
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	43db      	mvns	r3, r3
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	4013      	ands	r3, r2
 80097b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80097ca:	4a34      	ldr	r2, [pc, #208]	; (800989c <HAL_GPIO_Init+0x354>)
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80097d0:	4b32      	ldr	r3, [pc, #200]	; (800989c <HAL_GPIO_Init+0x354>)
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	43db      	mvns	r3, r3
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	4013      	ands	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80097ec:	69ba      	ldr	r2, [r7, #24]
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80097f4:	4a29      	ldr	r2, [pc, #164]	; (800989c <HAL_GPIO_Init+0x354>)
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80097fa:	4b28      	ldr	r3, [pc, #160]	; (800989c <HAL_GPIO_Init+0x354>)
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	43db      	mvns	r3, r3
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	4013      	ands	r3, r2
 8009808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	4313      	orrs	r3, r2
 800981c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800981e:	4a1f      	ldr	r2, [pc, #124]	; (800989c <HAL_GPIO_Init+0x354>)
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009824:	4b1d      	ldr	r3, [pc, #116]	; (800989c <HAL_GPIO_Init+0x354>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	43db      	mvns	r3, r3
 800982e:	69ba      	ldr	r2, [r7, #24]
 8009830:	4013      	ands	r3, r2
 8009832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009840:	69ba      	ldr	r2, [r7, #24]
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	4313      	orrs	r3, r2
 8009846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009848:	4a14      	ldr	r2, [pc, #80]	; (800989c <HAL_GPIO_Init+0x354>)
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	3301      	adds	r3, #1
 8009852:	61fb      	str	r3, [r7, #28]
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	2b0f      	cmp	r3, #15
 8009858:	f67f ae86 	bls.w	8009568 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800985c:	bf00      	nop
 800985e:	bf00      	nop
 8009860:	3724      	adds	r7, #36	; 0x24
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	40023800 	.word	0x40023800
 8009870:	40013800 	.word	0x40013800
 8009874:	40020000 	.word	0x40020000
 8009878:	40020400 	.word	0x40020400
 800987c:	40020800 	.word	0x40020800
 8009880:	40020c00 	.word	0x40020c00
 8009884:	40021000 	.word	0x40021000
 8009888:	40021400 	.word	0x40021400
 800988c:	40021800 	.word	0x40021800
 8009890:	40021c00 	.word	0x40021c00
 8009894:	40022000 	.word	0x40022000
 8009898:	40022400 	.word	0x40022400
 800989c:	40013c00 	.word	0x40013c00

080098a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80098aa:	2300      	movs	r3, #0
 80098ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80098ae:	2300      	movs	r3, #0
 80098b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80098b2:	2300      	movs	r3, #0
 80098b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e0d9      	b.n	8009a70 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80098bc:	2201      	movs	r2, #1
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	fa02 f303 	lsl.w	r3, r2, r3
 80098c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	4013      	ands	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	f040 80c9 	bne.w	8009a6a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80098d8:	4a6b      	ldr	r2, [pc, #428]	; (8009a88 <HAL_GPIO_DeInit+0x1e8>)
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	089b      	lsrs	r3, r3, #2
 80098de:	3302      	adds	r3, #2
 80098e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098e4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	220f      	movs	r2, #15
 80098f0:	fa02 f303 	lsl.w	r3, r2, r3
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	4013      	ands	r3, r2
 80098f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a63      	ldr	r2, [pc, #396]	; (8009a8c <HAL_GPIO_DeInit+0x1ec>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d037      	beq.n	8009972 <HAL_GPIO_DeInit+0xd2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a62      	ldr	r2, [pc, #392]	; (8009a90 <HAL_GPIO_DeInit+0x1f0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d031      	beq.n	800996e <HAL_GPIO_DeInit+0xce>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a61      	ldr	r2, [pc, #388]	; (8009a94 <HAL_GPIO_DeInit+0x1f4>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d02b      	beq.n	800996a <HAL_GPIO_DeInit+0xca>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a60      	ldr	r2, [pc, #384]	; (8009a98 <HAL_GPIO_DeInit+0x1f8>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d025      	beq.n	8009966 <HAL_GPIO_DeInit+0xc6>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a5f      	ldr	r2, [pc, #380]	; (8009a9c <HAL_GPIO_DeInit+0x1fc>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d01f      	beq.n	8009962 <HAL_GPIO_DeInit+0xc2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a5e      	ldr	r2, [pc, #376]	; (8009aa0 <HAL_GPIO_DeInit+0x200>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d019      	beq.n	800995e <HAL_GPIO_DeInit+0xbe>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a5d      	ldr	r2, [pc, #372]	; (8009aa4 <HAL_GPIO_DeInit+0x204>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d013      	beq.n	800995a <HAL_GPIO_DeInit+0xba>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a5c      	ldr	r2, [pc, #368]	; (8009aa8 <HAL_GPIO_DeInit+0x208>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00d      	beq.n	8009956 <HAL_GPIO_DeInit+0xb6>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a5b      	ldr	r2, [pc, #364]	; (8009aac <HAL_GPIO_DeInit+0x20c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d007      	beq.n	8009952 <HAL_GPIO_DeInit+0xb2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a5a      	ldr	r2, [pc, #360]	; (8009ab0 <HAL_GPIO_DeInit+0x210>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d101      	bne.n	800994e <HAL_GPIO_DeInit+0xae>
 800994a:	2309      	movs	r3, #9
 800994c:	e012      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 800994e:	230a      	movs	r3, #10
 8009950:	e010      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 8009952:	2308      	movs	r3, #8
 8009954:	e00e      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 8009956:	2307      	movs	r3, #7
 8009958:	e00c      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 800995a:	2306      	movs	r3, #6
 800995c:	e00a      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 800995e:	2305      	movs	r3, #5
 8009960:	e008      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 8009962:	2304      	movs	r3, #4
 8009964:	e006      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 8009966:	2303      	movs	r3, #3
 8009968:	e004      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 800996a:	2302      	movs	r3, #2
 800996c:	e002      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 800996e:	2301      	movs	r3, #1
 8009970:	e000      	b.n	8009974 <HAL_GPIO_DeInit+0xd4>
 8009972:	2300      	movs	r3, #0
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	f002 0203 	and.w	r2, r2, #3
 800997a:	0092      	lsls	r2, r2, #2
 800997c:	4093      	lsls	r3, r2
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	429a      	cmp	r2, r3
 8009982:	d132      	bne.n	80099ea <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009984:	4b4b      	ldr	r3, [pc, #300]	; (8009ab4 <HAL_GPIO_DeInit+0x214>)
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	43db      	mvns	r3, r3
 800998c:	4949      	ldr	r1, [pc, #292]	; (8009ab4 <HAL_GPIO_DeInit+0x214>)
 800998e:	4013      	ands	r3, r2
 8009990:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009992:	4b48      	ldr	r3, [pc, #288]	; (8009ab4 <HAL_GPIO_DeInit+0x214>)
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	43db      	mvns	r3, r3
 800999a:	4946      	ldr	r1, [pc, #280]	; (8009ab4 <HAL_GPIO_DeInit+0x214>)
 800999c:	4013      	ands	r3, r2
 800999e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80099a0:	4b44      	ldr	r3, [pc, #272]	; (8009ab4 <HAL_GPIO_DeInit+0x214>)
 80099a2:	68da      	ldr	r2, [r3, #12]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	43db      	mvns	r3, r3
 80099a8:	4942      	ldr	r1, [pc, #264]	; (8009ab4 <HAL_GPIO_DeInit+0x214>)
 80099aa:	4013      	ands	r3, r2
 80099ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80099ae:	4b41      	ldr	r3, [pc, #260]	; (8009ab4 <HAL_GPIO_DeInit+0x214>)
 80099b0:	689a      	ldr	r2, [r3, #8]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	43db      	mvns	r3, r3
 80099b6:	493f      	ldr	r1, [pc, #252]	; (8009ab4 <HAL_GPIO_DeInit+0x214>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	220f      	movs	r2, #15
 80099c6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80099cc:	4a2e      	ldr	r2, [pc, #184]	; (8009a88 <HAL_GPIO_DeInit+0x1e8>)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	089b      	lsrs	r3, r3, #2
 80099d2:	3302      	adds	r3, #2
 80099d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	43da      	mvns	r2, r3
 80099dc:	482a      	ldr	r0, [pc, #168]	; (8009a88 <HAL_GPIO_DeInit+0x1e8>)
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	089b      	lsrs	r3, r3, #2
 80099e2:	400a      	ands	r2, r1
 80099e4:	3302      	adds	r3, #2
 80099e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	2103      	movs	r1, #3
 80099f4:	fa01 f303 	lsl.w	r3, r1, r3
 80099f8:	43db      	mvns	r3, r3
 80099fa:	401a      	ands	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	08da      	lsrs	r2, r3, #3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3208      	adds	r2, #8
 8009a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f003 0307 	and.w	r3, r3, #7
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	220f      	movs	r2, #15
 8009a16:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1a:	43db      	mvns	r3, r3
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	08d2      	lsrs	r2, r2, #3
 8009a20:	4019      	ands	r1, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3208      	adds	r2, #8
 8009a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	005b      	lsls	r3, r3, #1
 8009a32:	2103      	movs	r1, #3
 8009a34:	fa01 f303 	lsl.w	r3, r1, r3
 8009a38:	43db      	mvns	r3, r3
 8009a3a:	401a      	ands	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	2101      	movs	r1, #1
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	fa01 f303 	lsl.w	r3, r1, r3
 8009a4c:	43db      	mvns	r3, r3
 8009a4e:	401a      	ands	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	2103      	movs	r1, #3
 8009a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a62:	43db      	mvns	r3, r3
 8009a64:	401a      	ands	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	2b0f      	cmp	r3, #15
 8009a74:	f67f af22 	bls.w	80098bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	371c      	adds	r7, #28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	40013800 	.word	0x40013800
 8009a8c:	40020000 	.word	0x40020000
 8009a90:	40020400 	.word	0x40020400
 8009a94:	40020800 	.word	0x40020800
 8009a98:	40020c00 	.word	0x40020c00
 8009a9c:	40021000 	.word	0x40021000
 8009aa0:	40021400 	.word	0x40021400
 8009aa4:	40021800 	.word	0x40021800
 8009aa8:	40021c00 	.word	0x40021c00
 8009aac:	40022000 	.word	0x40022000
 8009ab0:	40022400 	.word	0x40022400
 8009ab4:	40013c00 	.word	0x40013c00

08009ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	691a      	ldr	r2, [r3, #16]
 8009ac8:	887b      	ldrh	r3, [r7, #2]
 8009aca:	4013      	ands	r3, r2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	73fb      	strb	r3, [r7, #15]
 8009ad4:	e001      	b.n	8009ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	807b      	strh	r3, [r7, #2]
 8009af4:	4613      	mov	r3, r2
 8009af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009af8:	787b      	ldrb	r3, [r7, #1]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009afe:	887a      	ldrh	r2, [r7, #2]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009b04:	e003      	b.n	8009b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009b06:	887b      	ldrh	r3, [r7, #2]
 8009b08:	041a      	lsls	r2, r3, #16
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	619a      	str	r2, [r3, #24]
}
 8009b0e:	bf00      	nop
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b085      	sub	sp, #20
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	460b      	mov	r3, r1
 8009b24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009b2c:	887a      	ldrh	r2, [r7, #2]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4013      	ands	r3, r2
 8009b32:	041a      	lsls	r2, r3, #16
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	43d9      	mvns	r1, r3
 8009b38:	887b      	ldrh	r3, [r7, #2]
 8009b3a:	400b      	ands	r3, r1
 8009b3c:	431a      	orrs	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	619a      	str	r2, [r3, #24]
}
 8009b42:	bf00      	nop
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
	...

08009b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e07f      	b.n	8009c62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f8a9 	bl	8009cce <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2224      	movs	r2, #36	; 0x24
 8009b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 0201 	bic.w	r2, r2, #1
 8009b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009ba0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009bb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d107      	bne.n	8009bca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	689a      	ldr	r2, [r3, #8]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bc6:	609a      	str	r2, [r3, #8]
 8009bc8:	e006      	b.n	8009bd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009bd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d104      	bne.n	8009bea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009be8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6859      	ldr	r1, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	4b1d      	ldr	r3, [pc, #116]	; (8009c6c <HAL_I2C_Init+0x11c>)
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691a      	ldr	r2, [r3, #16]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	69d9      	ldr	r1, [r3, #28]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a1a      	ldr	r2, [r3, #32]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	430a      	orrs	r2, r1
 8009c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f042 0201 	orr.w	r2, r2, #1
 8009c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	02008000 	.word	0x02008000

08009c70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e021      	b.n	8009cc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2224      	movs	r2, #36	; 0x24
 8009c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0201 	bic.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f821 	bl	8009ce2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009cd6:	bf00      	nop
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	4608      	mov	r0, r1
 8009d02:	4611      	mov	r1, r2
 8009d04:	461a      	mov	r2, r3
 8009d06:	4603      	mov	r3, r0
 8009d08:	817b      	strh	r3, [r7, #10]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	813b      	strh	r3, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b20      	cmp	r3, #32
 8009d1c:	f040 80f9 	bne.w	8009f12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <HAL_I2C_Mem_Write+0x34>
 8009d26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d105      	bne.n	8009d38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e0ed      	b.n	8009f14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_I2C_Mem_Write+0x4e>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e0e6      	b.n	8009f14 <HAL_I2C_Mem_Write+0x21c>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009d4e:	f7fd f8cd 	bl	8006eec <HAL_GetTick>
 8009d52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2319      	movs	r3, #25
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 fad1 	bl	800a308 <I2C_WaitOnFlagUntilTimeout>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e0d1      	b.n	8009f14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2221      	movs	r2, #33	; 0x21
 8009d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2240      	movs	r2, #64	; 0x40
 8009d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6a3a      	ldr	r2, [r7, #32]
 8009d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d98:	88f8      	ldrh	r0, [r7, #6]
 8009d9a:	893a      	ldrh	r2, [r7, #8]
 8009d9c:	8979      	ldrh	r1, [r7, #10]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	4603      	mov	r3, r0
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 f9e1 	bl	800a170 <I2C_RequestMemoryWrite>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d005      	beq.n	8009dc0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e0a9      	b.n	8009f14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2bff      	cmp	r3, #255	; 0xff
 8009dc8:	d90e      	bls.n	8009de8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	22ff      	movs	r2, #255	; 0xff
 8009dce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	8979      	ldrh	r1, [r7, #10]
 8009dd8:	2300      	movs	r3, #0
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 fc2d 	bl	800a640 <I2C_TransferConfig>
 8009de6:	e00f      	b.n	8009e08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	8979      	ldrh	r1, [r7, #10]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 fc1c 	bl	800a640 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 fabb 	bl	800a388 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e07b      	b.n	8009f14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e20:	781a      	ldrb	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e44:	3b01      	subs	r3, #1
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d034      	beq.n	8009ec0 <HAL_I2C_Mem_Write+0x1c8>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d130      	bne.n	8009ec0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	2200      	movs	r2, #0
 8009e66:	2180      	movs	r1, #128	; 0x80
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 fa4d 	bl	800a308 <I2C_WaitOnFlagUntilTimeout>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d001      	beq.n	8009e78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e04d      	b.n	8009f14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	2bff      	cmp	r3, #255	; 0xff
 8009e80:	d90e      	bls.n	8009ea0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	22ff      	movs	r2, #255	; 0xff
 8009e86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	8979      	ldrh	r1, [r7, #10]
 8009e90:	2300      	movs	r3, #0
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fbd1 	bl	800a640 <I2C_TransferConfig>
 8009e9e:	e00f      	b.n	8009ec0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	8979      	ldrh	r1, [r7, #10]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 fbc0 	bl	800a640 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d19e      	bne.n	8009e08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 fa9a 	bl	800a408 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e01a      	b.n	8009f14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6859      	ldr	r1, [r3, #4]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <HAL_I2C_Mem_Write+0x224>)
 8009ef2:	400b      	ands	r3, r1
 8009ef4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e000      	b.n	8009f14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009f12:	2302      	movs	r3, #2
  }
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	fe00e800 	.word	0xfe00e800

08009f20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4603      	mov	r3, r0
 8009f30:	817b      	strh	r3, [r7, #10]
 8009f32:	460b      	mov	r3, r1
 8009f34:	813b      	strh	r3, [r7, #8]
 8009f36:	4613      	mov	r3, r2
 8009f38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	f040 80fd 	bne.w	800a142 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <HAL_I2C_Mem_Read+0x34>
 8009f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d105      	bne.n	8009f60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e0f1      	b.n	800a144 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d101      	bne.n	8009f6e <HAL_I2C_Mem_Read+0x4e>
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	e0ea      	b.n	800a144 <HAL_I2C_Mem_Read+0x224>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009f76:	f7fc ffb9 	bl	8006eec <HAL_GetTick>
 8009f7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	2319      	movs	r3, #25
 8009f82:	2201      	movs	r2, #1
 8009f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f9bd 	bl	800a308 <I2C_WaitOnFlagUntilTimeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e0d5      	b.n	800a144 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2222      	movs	r2, #34	; 0x22
 8009f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2240      	movs	r2, #64	; 0x40
 8009fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a3a      	ldr	r2, [r7, #32]
 8009fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009fc0:	88f8      	ldrh	r0, [r7, #6]
 8009fc2:	893a      	ldrh	r2, [r7, #8]
 8009fc4:	8979      	ldrh	r1, [r7, #10]
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4603      	mov	r3, r0
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 f921 	bl	800a218 <I2C_RequestMemoryRead>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e0ad      	b.n	800a144 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2bff      	cmp	r3, #255	; 0xff
 8009ff0:	d90e      	bls.n	800a010 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	8979      	ldrh	r1, [r7, #10]
 800a000:	4b52      	ldr	r3, [pc, #328]	; (800a14c <HAL_I2C_Mem_Read+0x22c>)
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fb19 	bl	800a640 <I2C_TransferConfig>
 800a00e:	e00f      	b.n	800a030 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a014:	b29a      	uxth	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	8979      	ldrh	r1, [r7, #10]
 800a022:	4b4a      	ldr	r3, [pc, #296]	; (800a14c <HAL_I2C_Mem_Read+0x22c>)
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fb08 	bl	800a640 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	2200      	movs	r2, #0
 800a038:	2104      	movs	r1, #4
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f000 f964 	bl	800a308 <I2C_WaitOnFlagUntilTimeout>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e07c      	b.n	800a144 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	b2d2      	uxtb	r2, r2
 800a056:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a066:	3b01      	subs	r3, #1
 800a068:	b29a      	uxth	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a072:	b29b      	uxth	r3, r3
 800a074:	3b01      	subs	r3, #1
 800a076:	b29a      	uxth	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a080:	b29b      	uxth	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d034      	beq.n	800a0f0 <HAL_I2C_Mem_Read+0x1d0>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d130      	bne.n	800a0f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	2200      	movs	r2, #0
 800a096:	2180      	movs	r1, #128	; 0x80
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f935 	bl	800a308 <I2C_WaitOnFlagUntilTimeout>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e04d      	b.n	800a144 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	2bff      	cmp	r3, #255	; 0xff
 800a0b0:	d90e      	bls.n	800a0d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	22ff      	movs	r2, #255	; 0xff
 800a0b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	8979      	ldrh	r1, [r7, #10]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 fab9 	bl	800a640 <I2C_TransferConfig>
 800a0ce:	e00f      	b.n	800a0f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	8979      	ldrh	r1, [r7, #10]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 faa8 	bl	800a640 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d19a      	bne.n	800a030 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 f982 	bl	800a408 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e01a      	b.n	800a144 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2220      	movs	r2, #32
 800a114:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6859      	ldr	r1, [r3, #4]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <HAL_I2C_Mem_Read+0x230>)
 800a122:	400b      	ands	r3, r1
 800a124:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2220      	movs	r2, #32
 800a12a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	e000      	b.n	800a144 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a142:	2302      	movs	r3, #2
  }
}
 800a144:	4618      	mov	r0, r3
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	80002400 	.word	0x80002400
 800a150:	fe00e800 	.word	0xfe00e800

0800a154 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a162:	b2db      	uxtb	r3, r3
}
 800a164:	4618      	mov	r0, r3
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	461a      	mov	r2, r3
 800a17e:	4603      	mov	r3, r0
 800a180:	817b      	strh	r3, [r7, #10]
 800a182:	460b      	mov	r3, r1
 800a184:	813b      	strh	r3, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a18a:	88fb      	ldrh	r3, [r7, #6]
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	8979      	ldrh	r1, [r7, #10]
 800a190:	4b20      	ldr	r3, [pc, #128]	; (800a214 <I2C_RequestMemoryWrite+0xa4>)
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 fa51 	bl	800a640 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a19e:	69fa      	ldr	r2, [r7, #28]
 800a1a0:	69b9      	ldr	r1, [r7, #24]
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 f8f0 	bl	800a388 <I2C_WaitOnTXISFlagUntilTimeout>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e02c      	b.n	800a20c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1b2:	88fb      	ldrh	r3, [r7, #6]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d105      	bne.n	800a1c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a1b8:	893b      	ldrh	r3, [r7, #8]
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	629a      	str	r2, [r3, #40]	; 0x28
 800a1c2:	e015      	b.n	800a1f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a1c4:	893b      	ldrh	r3, [r7, #8]
 800a1c6:	0a1b      	lsrs	r3, r3, #8
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1d2:	69fa      	ldr	r2, [r7, #28]
 800a1d4:	69b9      	ldr	r1, [r7, #24]
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 f8d6 	bl	800a388 <I2C_WaitOnTXISFlagUntilTimeout>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e012      	b.n	800a20c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a1e6:	893b      	ldrh	r3, [r7, #8]
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2180      	movs	r1, #128	; 0x80
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f000 f884 	bl	800a308 <I2C_WaitOnFlagUntilTimeout>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e000      	b.n	800a20c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	80002000 	.word	0x80002000

0800a218 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	4608      	mov	r0, r1
 800a222:	4611      	mov	r1, r2
 800a224:	461a      	mov	r2, r3
 800a226:	4603      	mov	r3, r0
 800a228:	817b      	strh	r3, [r7, #10]
 800a22a:	460b      	mov	r3, r1
 800a22c:	813b      	strh	r3, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	b2da      	uxtb	r2, r3
 800a236:	8979      	ldrh	r1, [r7, #10]
 800a238:	4b20      	ldr	r3, [pc, #128]	; (800a2bc <I2C_RequestMemoryRead+0xa4>)
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	2300      	movs	r3, #0
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 f9fe 	bl	800a640 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	69b9      	ldr	r1, [r7, #24]
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 f89d 	bl	800a388 <I2C_WaitOnTXISFlagUntilTimeout>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e02c      	b.n	800a2b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a258:	88fb      	ldrh	r3, [r7, #6]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d105      	bne.n	800a26a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a25e:	893b      	ldrh	r3, [r7, #8]
 800a260:	b2da      	uxtb	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	629a      	str	r2, [r3, #40]	; 0x28
 800a268:	e015      	b.n	800a296 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a26a:	893b      	ldrh	r3, [r7, #8]
 800a26c:	0a1b      	lsrs	r3, r3, #8
 800a26e:	b29b      	uxth	r3, r3
 800a270:	b2da      	uxtb	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	69b9      	ldr	r1, [r7, #24]
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f883 	bl	800a388 <I2C_WaitOnTXISFlagUntilTimeout>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e012      	b.n	800a2b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a28c:	893b      	ldrh	r3, [r7, #8]
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	2200      	movs	r2, #0
 800a29e:	2140      	movs	r1, #64	; 0x40
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 f831 	bl	800a308 <I2C_WaitOnFlagUntilTimeout>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e000      	b.n	800a2b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	80002000 	.word	0x80002000

0800a2c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d103      	bne.n	800a2de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d007      	beq.n	800a2fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	699a      	ldr	r2, [r3, #24]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0201 	orr.w	r2, r2, #1
 800a2fa:	619a      	str	r2, [r3, #24]
  }
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	4613      	mov	r3, r2
 800a316:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a318:	e022      	b.n	800a360 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a320:	d01e      	beq.n	800a360 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a322:	f7fc fde3 	bl	8006eec <HAL_GetTick>
 800a326:	4602      	mov	r2, r0
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d302      	bcc.n	800a338 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d113      	bne.n	800a360 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33c:	f043 0220 	orr.w	r2, r3, #32
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2220      	movs	r2, #32
 800a348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e00f      	b.n	800a380 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	699a      	ldr	r2, [r3, #24]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	4013      	ands	r3, r2
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	bf0c      	ite	eq
 800a370:	2301      	moveq	r3, #1
 800a372:	2300      	movne	r3, #0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d0cd      	beq.n	800a31a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a394:	e02c      	b.n	800a3f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 f870 	bl	800a480 <I2C_IsErrorOccurred>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e02a      	b.n	800a400 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3b0:	d01e      	beq.n	800a3f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3b2:	f7fc fd9b 	bl	8006eec <HAL_GetTick>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d302      	bcc.n	800a3c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d113      	bne.n	800a3f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3cc:	f043 0220 	orr.w	r2, r3, #32
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e007      	b.n	800a400 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d1cb      	bne.n	800a396 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a414:	e028      	b.n	800a468 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	68b9      	ldr	r1, [r7, #8]
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f000 f830 	bl	800a480 <I2C_IsErrorOccurred>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	e026      	b.n	800a478 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42a:	f7fc fd5f 	bl	8006eec <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	429a      	cmp	r2, r3
 800a438:	d302      	bcc.n	800a440 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d113      	bne.n	800a468 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a444:	f043 0220 	orr.w	r2, r3, #32
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2220      	movs	r2, #32
 800a450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e007      	b.n	800a478 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b20      	cmp	r3, #32
 800a474:	d1cf      	bne.n	800a416 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b08a      	sub	sp, #40	; 0x28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	f003 0310 	and.w	r3, r3, #16
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d068      	beq.n	800a57e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2210      	movs	r2, #16
 800a4b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a4b4:	e049      	b.n	800a54a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4bc:	d045      	beq.n	800a54a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a4be:	f7fc fd15 	bl	8006eec <HAL_GetTick>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d302      	bcc.n	800a4d4 <I2C_IsErrorOccurred+0x54>
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d13a      	bne.n	800a54a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4f6:	d121      	bne.n	800a53c <I2C_IsErrorOccurred+0xbc>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4fe:	d01d      	beq.n	800a53c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a500:	7cfb      	ldrb	r3, [r7, #19]
 800a502:	2b20      	cmp	r3, #32
 800a504:	d01a      	beq.n	800a53c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a514:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a516:	f7fc fce9 	bl	8006eec <HAL_GetTick>
 800a51a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a51c:	e00e      	b.n	800a53c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a51e:	f7fc fce5 	bl	8006eec <HAL_GetTick>
 800a522:	4602      	mov	r2, r0
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	2b19      	cmp	r3, #25
 800a52a:	d907      	bls.n	800a53c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800a52c:	6a3b      	ldr	r3, [r7, #32]
 800a52e:	f043 0320 	orr.w	r3, r3, #32
 800a532:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a53a:	e006      	b.n	800a54a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b20      	cmp	r3, #32
 800a548:	d1e9      	bne.n	800a51e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b20      	cmp	r3, #32
 800a556:	d003      	beq.n	800a560 <I2C_IsErrorOccurred+0xe0>
 800a558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0aa      	beq.n	800a4b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a564:	2b00      	cmp	r3, #0
 800a566:	d103      	bne.n	800a570 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2220      	movs	r2, #32
 800a56e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	f043 0304 	orr.w	r3, r3, #4
 800a576:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	699b      	ldr	r3, [r3, #24]
 800a584:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00b      	beq.n	800a5a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a590:	6a3b      	ldr	r3, [r7, #32]
 800a592:	f043 0301 	orr.w	r3, r3, #1
 800a596:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	f043 0308 	orr.w	r3, r3, #8
 800a5b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00b      	beq.n	800a5ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	f043 0302 	orr.w	r3, r3, #2
 800a5da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d01c      	beq.n	800a62e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f7ff fe63 	bl	800a2c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6859      	ldr	r1, [r3, #4]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <I2C_IsErrorOccurred+0x1bc>)
 800a606:	400b      	ands	r3, r1
 800a608:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	431a      	orrs	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2220      	movs	r2, #32
 800a61a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a62e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a632:	4618      	mov	r0, r3
 800a634:	3728      	adds	r7, #40	; 0x28
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	fe00e800 	.word	0xfe00e800

0800a640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a640:	b480      	push	{r7}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	607b      	str	r3, [r7, #4]
 800a64a:	460b      	mov	r3, r1
 800a64c:	817b      	strh	r3, [r7, #10]
 800a64e:	4613      	mov	r3, r2
 800a650:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a652:	897b      	ldrh	r3, [r7, #10]
 800a654:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a658:	7a7b      	ldrb	r3, [r7, #9]
 800a65a:	041b      	lsls	r3, r3, #16
 800a65c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a660:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	4313      	orrs	r3, r2
 800a66a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a66e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	0d5b      	lsrs	r3, r3, #21
 800a67a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a67e:	4b08      	ldr	r3, [pc, #32]	; (800a6a0 <I2C_TransferConfig+0x60>)
 800a680:	430b      	orrs	r3, r1
 800a682:	43db      	mvns	r3, r3
 800a684:	ea02 0103 	and.w	r1, r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	430a      	orrs	r2, r1
 800a690:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a692:	bf00      	nop
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	03ff63ff 	.word	0x03ff63ff

0800a6a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e0bf      	b.n	800a836 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d106      	bne.n	800a6d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7f7 f9fc 	bl	8001ac8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699a      	ldr	r2, [r3, #24]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a6e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6999      	ldr	r1, [r3, #24]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a6fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6899      	ldr	r1, [r3, #8]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	4b4a      	ldr	r3, [pc, #296]	; (800a840 <HAL_LTDC_Init+0x19c>)
 800a718:	400b      	ands	r3, r1
 800a71a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	695b      	ldr	r3, [r3, #20]
 800a720:	041b      	lsls	r3, r3, #16
 800a722:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6899      	ldr	r1, [r3, #8]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	699a      	ldr	r2, [r3, #24]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	431a      	orrs	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	430a      	orrs	r2, r1
 800a738:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68d9      	ldr	r1, [r3, #12]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	4b3e      	ldr	r3, [pc, #248]	; (800a840 <HAL_LTDC_Init+0x19c>)
 800a746:	400b      	ands	r3, r1
 800a748:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	041b      	lsls	r3, r3, #16
 800a750:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68d9      	ldr	r1, [r3, #12]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a1a      	ldr	r2, [r3, #32]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	430a      	orrs	r2, r1
 800a766:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6919      	ldr	r1, [r3, #16]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	4b33      	ldr	r3, [pc, #204]	; (800a840 <HAL_LTDC_Init+0x19c>)
 800a774:	400b      	ands	r3, r1
 800a776:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	041b      	lsls	r3, r3, #16
 800a77e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6919      	ldr	r1, [r3, #16]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	431a      	orrs	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6959      	ldr	r1, [r3, #20]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	4b27      	ldr	r3, [pc, #156]	; (800a840 <HAL_LTDC_Init+0x19c>)
 800a7a2:	400b      	ands	r3, r1
 800a7a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	041b      	lsls	r3, r3, #16
 800a7ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6959      	ldr	r1, [r3, #20]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	430a      	orrs	r2, r1
 800a7c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7ca:	021b      	lsls	r3, r3, #8
 800a7cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a7d4:	041b      	lsls	r3, r3, #16
 800a7d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a7e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a7fa:	431a      	orrs	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	430a      	orrs	r2, r1
 800a802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0206 	orr.w	r2, r2, #6
 800a812:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	699a      	ldr	r2, [r3, #24]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0201 	orr.w	r2, r2, #1
 800a822:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	f000f800 	.word	0xf000f800

0800a844 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a852:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f003 0304 	and.w	r3, r3, #4
 800a862:	2b00      	cmp	r3, #0
 800a864:	d023      	beq.n	800a8ae <HAL_LTDC_IRQHandler+0x6a>
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f003 0304 	and.w	r3, r3, #4
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d01e      	beq.n	800a8ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f022 0204 	bic.w	r2, r2, #4
 800a87e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2204      	movs	r2, #4
 800a886:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a88e:	f043 0201 	orr.w	r2, r3, #1
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2204      	movs	r2, #4
 800a89c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f86f 	bl	800a98c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d023      	beq.n	800a900 <HAL_LTDC_IRQHandler+0xbc>
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f003 0302 	and.w	r3, r3, #2
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d01e      	beq.n	800a900 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f022 0202 	bic.w	r2, r2, #2
 800a8d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8e0:	f043 0202 	orr.w	r2, r3, #2
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2204      	movs	r2, #4
 800a8ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f846 	bl	800a98c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d01b      	beq.n	800a942 <HAL_LTDC_IRQHandler+0xfe>
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	2b00      	cmp	r3, #0
 800a912:	d016      	beq.n	800a942 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 0201 	bic.w	r2, r2, #1
 800a922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2201      	movs	r2, #1
 800a92a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f82f 	bl	800a9a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f003 0308 	and.w	r3, r3, #8
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d01b      	beq.n	800a984 <HAL_LTDC_IRQHandler+0x140>
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	f003 0308 	and.w	r3, r3, #8
 800a952:	2b00      	cmp	r3, #0
 800a954:	d016      	beq.n	800a984 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f022 0208 	bic.w	r2, r2, #8
 800a964:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2208      	movs	r2, #8
 800a96c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7f7 faea 	bl	8001f58 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a984:	bf00      	nop
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a9b4:	b5b0      	push	{r4, r5, r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d101      	bne.n	800a9ce <HAL_LTDC_ConfigLayer+0x1a>
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	e02c      	b.n	800aa28 <HAL_LTDC_ConfigLayer+0x74>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2134      	movs	r1, #52	; 0x34
 800a9e4:	fb01 f303 	mul.w	r3, r1, r3
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	4614      	mov	r4, r2
 800a9f2:	461d      	mov	r5, r3
 800a9f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	68b9      	ldr	r1, [r7, #8]
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 f88f 	bl	800ab2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2201      	movs	r2, #1
 800aa14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bdb0      	pop	{r4, r5, r7, pc}

0800aa30 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d101      	bne.n	800aa4a <HAL_LTDC_ConfigColorKeying+0x1a>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e030      	b.n	800aaac <HAL_LTDC_ConfigColorKeying+0x7c>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2202      	movs	r2, #2
 800aa56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	01db      	lsls	r3, r3, #7
 800aa64:	4413      	add	r3, r2
 800aa66:	3384      	adds	r3, #132	; 0x84
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	6812      	ldr	r2, [r2, #0]
 800aa6e:	4611      	mov	r1, r2
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	01d2      	lsls	r2, r2, #7
 800aa74:	440a      	add	r2, r1
 800aa76:	3284      	adds	r2, #132	; 0x84
 800aa78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa7c:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	461a      	mov	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	01db      	lsls	r3, r3, #7
 800aa88:	4413      	add	r3, r2
 800aa8a:	3384      	adds	r3, #132	; 0x84
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2201      	movs	r2, #1
 800aa98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d101      	bne.n	800aad0 <HAL_LTDC_EnableColorKeying+0x18>
 800aacc:	2302      	movs	r3, #2
 800aace:	e026      	b.n	800ab1e <HAL_LTDC_EnableColorKeying+0x66>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	461a      	mov	r2, r3
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	01db      	lsls	r3, r3, #7
 800aaea:	4413      	add	r3, r2
 800aaec:	3384      	adds	r3, #132	; 0x84
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	6812      	ldr	r2, [r2, #0]
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	01d2      	lsls	r2, r2, #7
 800aafa:	440a      	add	r2, r1
 800aafc:	3284      	adds	r2, #132	; 0x84
 800aafe:	f043 0302 	orr.w	r3, r3, #2
 800ab02:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
	...

0800ab2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b089      	sub	sp, #36	; 0x24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	0c1b      	lsrs	r3, r3, #16
 800ab44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab48:	4413      	add	r3, r2
 800ab4a:	041b      	lsls	r3, r3, #16
 800ab4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	01db      	lsls	r3, r3, #7
 800ab58:	4413      	add	r3, r2
 800ab5a:	3384      	adds	r3, #132	; 0x84
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	6812      	ldr	r2, [r2, #0]
 800ab62:	4611      	mov	r1, r2
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	01d2      	lsls	r2, r2, #7
 800ab68:	440a      	add	r2, r1
 800ab6a:	3284      	adds	r2, #132	; 0x84
 800ab6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ab70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	0c1b      	lsrs	r3, r3, #16
 800ab7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	01db      	lsls	r3, r3, #7
 800ab90:	440b      	add	r3, r1
 800ab92:	3384      	adds	r3, #132	; 0x84
 800ab94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ab9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	68da      	ldr	r2, [r3, #12]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abaa:	4413      	add	r3, r2
 800abac:	041b      	lsls	r3, r3, #16
 800abae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	461a      	mov	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	01db      	lsls	r3, r3, #7
 800abba:	4413      	add	r3, r2
 800abbc:	3384      	adds	r3, #132	; 0x84
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	6812      	ldr	r2, [r2, #0]
 800abc4:	4611      	mov	r1, r2
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	01d2      	lsls	r2, r2, #7
 800abca:	440a      	add	r2, r1
 800abcc:	3284      	adds	r2, #132	; 0x84
 800abce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800abd2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	689a      	ldr	r2, [r3, #8]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abe2:	4413      	add	r3, r2
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4619      	mov	r1, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	01db      	lsls	r3, r3, #7
 800abf0:	440b      	add	r3, r1
 800abf2:	3384      	adds	r3, #132	; 0x84
 800abf4:	4619      	mov	r1, r3
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	01db      	lsls	r3, r3, #7
 800ac06:	4413      	add	r3, r2
 800ac08:	3384      	adds	r3, #132	; 0x84
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	4611      	mov	r1, r2
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	01d2      	lsls	r2, r2, #7
 800ac16:	440a      	add	r2, r1
 800ac18:	3284      	adds	r2, #132	; 0x84
 800ac1a:	f023 0307 	bic.w	r3, r3, #7
 800ac1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	461a      	mov	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	01db      	lsls	r3, r3, #7
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3384      	adds	r3, #132	; 0x84
 800ac2e:	461a      	mov	r2, r3
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac3c:	021b      	lsls	r3, r3, #8
 800ac3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ac46:	041b      	lsls	r3, r3, #16
 800ac48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	061b      	lsls	r3, r3, #24
 800ac50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	461a      	mov	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	01db      	lsls	r3, r3, #7
 800ac5c:	4413      	add	r3, r2
 800ac5e:	3384      	adds	r3, #132	; 0x84
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	01db      	lsls	r3, r3, #7
 800ac6c:	4413      	add	r3, r2
 800ac6e:	3384      	adds	r3, #132	; 0x84
 800ac70:	461a      	mov	r2, r3
 800ac72:	2300      	movs	r3, #0
 800ac74:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	431a      	orrs	r2, r3
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	431a      	orrs	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	01db      	lsls	r3, r3, #7
 800ac90:	440b      	add	r3, r1
 800ac92:	3384      	adds	r3, #132	; 0x84
 800ac94:	4619      	mov	r1, r3
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	461a      	mov	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	01db      	lsls	r3, r3, #7
 800aca6:	4413      	add	r3, r2
 800aca8:	3384      	adds	r3, #132	; 0x84
 800acaa:	695b      	ldr	r3, [r3, #20]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	6812      	ldr	r2, [r2, #0]
 800acb0:	4611      	mov	r1, r2
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	01d2      	lsls	r2, r2, #7
 800acb6:	440a      	add	r2, r1
 800acb8:	3284      	adds	r2, #132	; 0x84
 800acba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800acbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	01db      	lsls	r3, r3, #7
 800acca:	4413      	add	r3, r2
 800accc:	3384      	adds	r3, #132	; 0x84
 800acce:	461a      	mov	r2, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	01db      	lsls	r3, r3, #7
 800ace0:	4413      	add	r3, r2
 800ace2:	3384      	adds	r3, #132	; 0x84
 800ace4:	69da      	ldr	r2, [r3, #28]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4619      	mov	r1, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	01db      	lsls	r3, r3, #7
 800acf0:	440b      	add	r3, r1
 800acf2:	3384      	adds	r3, #132	; 0x84
 800acf4:	4619      	mov	r1, r3
 800acf6:	4b58      	ldr	r3, [pc, #352]	; (800ae58 <LTDC_SetConfig+0x32c>)
 800acf8:	4013      	ands	r3, r2
 800acfa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	69da      	ldr	r2, [r3, #28]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	6a1b      	ldr	r3, [r3, #32]
 800ad04:	68f9      	ldr	r1, [r7, #12]
 800ad06:	6809      	ldr	r1, [r1, #0]
 800ad08:	4608      	mov	r0, r1
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	01c9      	lsls	r1, r1, #7
 800ad0e:	4401      	add	r1, r0
 800ad10:	3184      	adds	r1, #132	; 0x84
 800ad12:	4313      	orrs	r3, r2
 800ad14:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	01db      	lsls	r3, r3, #7
 800ad20:	4413      	add	r3, r2
 800ad22:	3384      	adds	r3, #132	; 0x84
 800ad24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	01db      	lsls	r3, r3, #7
 800ad30:	4413      	add	r3, r2
 800ad32:	3384      	adds	r3, #132	; 0x84
 800ad34:	461a      	mov	r2, r3
 800ad36:	2300      	movs	r3, #0
 800ad38:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	01db      	lsls	r3, r3, #7
 800ad44:	4413      	add	r3, r2
 800ad46:	3384      	adds	r3, #132	; 0x84
 800ad48:	461a      	mov	r2, r3
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ad58:	2304      	movs	r3, #4
 800ad5a:	61fb      	str	r3, [r7, #28]
 800ad5c:	e01b      	b.n	800ad96 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d102      	bne.n	800ad6c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ad66:	2303      	movs	r3, #3
 800ad68:	61fb      	str	r3, [r7, #28]
 800ad6a:	e014      	b.n	800ad96 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	2b04      	cmp	r3, #4
 800ad72:	d00b      	beq.n	800ad8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d007      	beq.n	800ad8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ad80:	2b03      	cmp	r3, #3
 800ad82:	d003      	beq.n	800ad8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ad88:	2b07      	cmp	r3, #7
 800ad8a:	d102      	bne.n	800ad92 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	61fb      	str	r3, [r7, #28]
 800ad90:	e001      	b.n	800ad96 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ad92:	2301      	movs	r3, #1
 800ad94:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	01db      	lsls	r3, r3, #7
 800ada0:	4413      	add	r3, r2
 800ada2:	3384      	adds	r3, #132	; 0x84
 800ada4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	6812      	ldr	r2, [r2, #0]
 800adaa:	4611      	mov	r1, r2
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	01d2      	lsls	r2, r2, #7
 800adb0:	440a      	add	r2, r1
 800adb2:	3284      	adds	r2, #132	; 0x84
 800adb4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800adb8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbe:	69fa      	ldr	r2, [r7, #28]
 800adc0:	fb02 f303 	mul.w	r3, r2, r3
 800adc4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	6859      	ldr	r1, [r3, #4]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	1acb      	subs	r3, r1, r3
 800add0:	69f9      	ldr	r1, [r7, #28]
 800add2:	fb01 f303 	mul.w	r3, r1, r3
 800add6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800add8:	68f9      	ldr	r1, [r7, #12]
 800adda:	6809      	ldr	r1, [r1, #0]
 800addc:	4608      	mov	r0, r1
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	01c9      	lsls	r1, r1, #7
 800ade2:	4401      	add	r1, r0
 800ade4:	3184      	adds	r1, #132	; 0x84
 800ade6:	4313      	orrs	r3, r2
 800ade8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	01db      	lsls	r3, r3, #7
 800adf4:	4413      	add	r3, r2
 800adf6:	3384      	adds	r3, #132	; 0x84
 800adf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4619      	mov	r1, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	01db      	lsls	r3, r3, #7
 800ae04:	440b      	add	r3, r1
 800ae06:	3384      	adds	r3, #132	; 0x84
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4b14      	ldr	r3, [pc, #80]	; (800ae5c <LTDC_SetConfig+0x330>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	461a      	mov	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	01db      	lsls	r3, r3, #7
 800ae1a:	4413      	add	r3, r2
 800ae1c:	3384      	adds	r3, #132	; 0x84
 800ae1e:	461a      	mov	r2, r3
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	01db      	lsls	r3, r3, #7
 800ae30:	4413      	add	r3, r2
 800ae32:	3384      	adds	r3, #132	; 0x84
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	6812      	ldr	r2, [r2, #0]
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	01d2      	lsls	r2, r2, #7
 800ae40:	440a      	add	r2, r1
 800ae42:	3284      	adds	r2, #132	; 0x84
 800ae44:	f043 0301 	orr.w	r3, r3, #1
 800ae48:	6013      	str	r3, [r2, #0]
}
 800ae4a:	bf00      	nop
 800ae4c:	3724      	adds	r7, #36	; 0x24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	fffff8f8 	.word	0xfffff8f8
 800ae5c:	fffff800 	.word	0xfffff800

0800ae60 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800ae72:	2200      	movs	r2, #0
 800ae74:	e001      	b.n	800ae7a <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800ae76:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d102      	bne.n	800ae8c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800ae86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ae8a:	e000      	b.n	800ae8e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d102      	bne.n	800aea0 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800ae9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae9e:	e000      	b.n	800aea2 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800aea0:	2200      	movs	r2, #0
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeaa:	1e5a      	subs	r2, r3, #1
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb8:	4413      	add	r3, r2
 800aeba:	1e5a      	subs	r2, r3, #1
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec8:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800aece:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 800aed0:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aede:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800aee4:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeea:	4413      	add	r3, r2
 800aeec:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800af0a:	4b23      	ldr	r3, [pc, #140]	; (800af98 <HAL_PWREx_EnableOverDrive+0x98>)
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	4a22      	ldr	r2, [pc, #136]	; (800af98 <HAL_PWREx_EnableOverDrive+0x98>)
 800af10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af14:	6413      	str	r3, [r2, #64]	; 0x40
 800af16:	4b20      	ldr	r3, [pc, #128]	; (800af98 <HAL_PWREx_EnableOverDrive+0x98>)
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800af22:	4b1e      	ldr	r3, [pc, #120]	; (800af9c <HAL_PWREx_EnableOverDrive+0x9c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a1d      	ldr	r2, [pc, #116]	; (800af9c <HAL_PWREx_EnableOverDrive+0x9c>)
 800af28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af2e:	f7fb ffdd 	bl	8006eec <HAL_GetTick>
 800af32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800af34:	e009      	b.n	800af4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800af36:	f7fb ffd9 	bl	8006eec <HAL_GetTick>
 800af3a:	4602      	mov	r2, r0
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af44:	d901      	bls.n	800af4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800af46:	2303      	movs	r3, #3
 800af48:	e022      	b.n	800af90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800af4a:	4b14      	ldr	r3, [pc, #80]	; (800af9c <HAL_PWREx_EnableOverDrive+0x9c>)
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af56:	d1ee      	bne.n	800af36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800af58:	4b10      	ldr	r3, [pc, #64]	; (800af9c <HAL_PWREx_EnableOverDrive+0x9c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a0f      	ldr	r2, [pc, #60]	; (800af9c <HAL_PWREx_EnableOverDrive+0x9c>)
 800af5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af64:	f7fb ffc2 	bl	8006eec <HAL_GetTick>
 800af68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af6a:	e009      	b.n	800af80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800af6c:	f7fb ffbe 	bl	8006eec <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af7a:	d901      	bls.n	800af80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e007      	b.n	800af90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af80:	4b06      	ldr	r3, [pc, #24]	; (800af9c <HAL_PWREx_EnableOverDrive+0x9c>)
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af8c:	d1ee      	bne.n	800af6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	40023800 	.word	0x40023800
 800af9c:	40007000 	.word	0x40007000

0800afa0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800afa8:	f7fb ffa0 	bl	8006eec <HAL_GetTick>
 800afac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e067      	b.n	800b088 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10b      	bne.n	800afdc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7f7 fac1 	bl	8002554 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800afd2:	f241 3188 	movw	r1, #5000	; 0x1388
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fae8 	bl	800b5ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	3b01      	subs	r3, #1
 800afec:	021a      	lsls	r2, r3, #8
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	430a      	orrs	r2, r1
 800aff4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	2120      	movs	r1, #32
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fae0 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b008:	4603      	mov	r3, r0
 800b00a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b00c:	7afb      	ldrb	r3, [r7, #11]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d135      	bne.n	800b07e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	4b1d      	ldr	r3, [pc, #116]	; (800b090 <HAL_QSPI_Init+0xf0>)
 800b01a:	4013      	ands	r3, r2
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	6852      	ldr	r2, [r2, #4]
 800b020:	0611      	lsls	r1, r2, #24
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	68d2      	ldr	r2, [r2, #12]
 800b026:	4311      	orrs	r1, r2
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	69d2      	ldr	r2, [r2, #28]
 800b02c:	4311      	orrs	r1, r2
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	6a12      	ldr	r2, [r2, #32]
 800b032:	4311      	orrs	r1, r2
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	6812      	ldr	r2, [r2, #0]
 800b038:	430b      	orrs	r3, r1
 800b03a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	4b14      	ldr	r3, [pc, #80]	; (800b094 <HAL_QSPI_Init+0xf4>)
 800b044:	4013      	ands	r3, r2
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	6912      	ldr	r2, [r2, #16]
 800b04a:	0411      	lsls	r1, r2, #16
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	6952      	ldr	r2, [r2, #20]
 800b050:	4311      	orrs	r1, r2
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	6992      	ldr	r2, [r2, #24]
 800b056:	4311      	orrs	r1, r2
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	6812      	ldr	r2, [r2, #0]
 800b05c:	430b      	orrs	r3, r1
 800b05e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f042 0201 	orr.w	r2, r2, #1
 800b06e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b086:	7afb      	ldrb	r3, [r7, #11]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	00ffff2f 	.word	0x00ffff2f
 800b094:	ffe0f8fe 	.word	0xffe0f8fe

0800b098 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e016      	b.n	800b0d8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f022 0201 	bic.w	r2, r2, #1
 800b0b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7f7 fafa 	bl	80026b4 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af02      	add	r7, sp, #8
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b0ec:	f7fb fefe 	bl	8006eec <HAL_GetTick>
 800b0f0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d101      	bne.n	800b102 <HAL_QSPI_Command+0x22>
 800b0fe:	2302      	movs	r3, #2
 800b100:	e048      	b.n	800b194 <HAL_QSPI_Command+0xb4>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b01      	cmp	r3, #1
 800b114:	d137      	bne.n	800b186 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2202      	movs	r2, #2
 800b120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	2200      	movs	r2, #0
 800b12c:	2120      	movs	r1, #32
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f000 fa4a 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b134:	4603      	mov	r3, r0
 800b136:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b138:	7dfb      	ldrb	r3, [r7, #23]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d125      	bne.n	800b18a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b13e:	2200      	movs	r2, #0
 800b140:	68b9      	ldr	r1, [r7, #8]
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f000 fa77 	bl	800b636 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d115      	bne.n	800b17c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2201      	movs	r2, #1
 800b158:	2102      	movs	r1, #2
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f000 fa34 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b160:	4603      	mov	r3, r0
 800b162:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b164:	7dfb      	ldrb	r3, [r7, #23]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10f      	bne.n	800b18a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2202      	movs	r2, #2
 800b170:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b17a:	e006      	b.n	800b18a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b184:	e001      	b.n	800b18a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b186:	2302      	movs	r3, #2
 800b188:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b192:	7dfb      	ldrb	r3, [r7, #23]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b08a      	sub	sp, #40	; 0x28
 800b1a0:	af02      	add	r7, sp, #8
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b1ac:	f7fb fe9e 	bl	8006eec <HAL_GetTick>
 800b1b0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3320      	adds	r3, #32
 800b1b8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d101      	bne.n	800b1ca <HAL_QSPI_Transmit+0x2e>
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	e076      	b.n	800b2b8 <HAL_QSPI_Transmit+0x11c>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d165      	bne.n	800b2aa <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d056      	beq.n	800b298 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2212      	movs	r2, #18
 800b1ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	1c5a      	adds	r2, r3, #1
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695a      	ldr	r2, [r3, #20]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b21e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800b220:	e01b      	b.n	800b25a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	2201      	movs	r2, #1
 800b22a:	2104      	movs	r1, #4
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f000 f9cb 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b232:	4603      	mov	r3, r0
 800b234:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b236:	7ffb      	ldrb	r3, [r7, #31]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d113      	bne.n	800b264 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	781a      	ldrb	r2, [r3, #0]
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	1e5a      	subs	r2, r3, #1
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1df      	bne.n	800b222 <HAL_QSPI_Transmit+0x86>
 800b262:	e000      	b.n	800b266 <HAL_QSPI_Transmit+0xca>
          break;
 800b264:	bf00      	nop
      }

      if (status == HAL_OK)
 800b266:	7ffb      	ldrb	r3, [r7, #31]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d110      	bne.n	800b28e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	2201      	movs	r2, #1
 800b274:	2102      	movs	r1, #2
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f000 f9a6 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b27c:	4603      	mov	r3, r0
 800b27e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b280:	7ffb      	ldrb	r3, [r7, #31]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d103      	bne.n	800b28e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2202      	movs	r2, #2
 800b28c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b296:	e00a      	b.n	800b2ae <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b29c:	f043 0208 	orr.w	r2, r3, #8
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	77fb      	strb	r3, [r7, #31]
 800b2a8:	e001      	b.n	800b2ae <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b2b6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3720      	adds	r7, #32
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08a      	sub	sp, #40	; 0x28
 800b2c4:	af02      	add	r7, sp, #8
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b2d0:	f7fb fe0c 	bl	8006eec <HAL_GetTick>
 800b2d4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3320      	adds	r3, #32
 800b2e4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d101      	bne.n	800b2f6 <HAL_QSPI_Receive+0x36>
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	e07d      	b.n	800b3f2 <HAL_QSPI_Receive+0x132>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b01      	cmp	r3, #1
 800b308:	d16c      	bne.n	800b3e4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d05d      	beq.n	800b3d2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2222      	movs	r2, #34	; 0x22
 800b31a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	1c5a      	adds	r2, r3, #1
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	1c5a      	adds	r2, r3, #1
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b34e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800b358:	e01c      	b.n	800b394 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	2201      	movs	r2, #1
 800b362:	2106      	movs	r1, #6
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f000 f92f 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b36a:	4603      	mov	r3, r0
 800b36c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800b36e:	7ffb      	ldrb	r3, [r7, #31]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d114      	bne.n	800b39e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	7812      	ldrb	r2, [r2, #0]
 800b37c:	b2d2      	uxtb	r2, r2
 800b37e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38e:	1e5a      	subs	r2, r3, #1
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1de      	bne.n	800b35a <HAL_QSPI_Receive+0x9a>
 800b39c:	e000      	b.n	800b3a0 <HAL_QSPI_Receive+0xe0>
          break;
 800b39e:	bf00      	nop
      }

      if (status == HAL_OK)
 800b3a0:	7ffb      	ldrb	r3, [r7, #31]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d110      	bne.n	800b3c8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	2102      	movs	r1, #2
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 f909 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b3ba:	7ffb      	ldrb	r3, [r7, #31]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d103      	bne.n	800b3c8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3d0:	e00a      	b.n	800b3e8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d6:	f043 0208 	orr.w	r2, r3, #8
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	77fb      	strb	r3, [r7, #31]
 800b3e2:	e001      	b.n	800b3e8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b3f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b088      	sub	sp, #32
 800b3fe:	af02      	add	r7, sp, #8
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	607a      	str	r2, [r7, #4]
 800b406:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b408:	f7fb fd70 	bl	8006eec <HAL_GetTick>
 800b40c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b01      	cmp	r3, #1
 800b418:	d101      	bne.n	800b41e <HAL_QSPI_AutoPolling+0x24>
 800b41a:	2302      	movs	r3, #2
 800b41c:	e060      	b.n	800b4e0 <HAL_QSPI_AutoPolling+0xe6>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d14f      	bne.n	800b4d2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2242      	movs	r2, #66	; 0x42
 800b43c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	2200      	movs	r2, #0
 800b448:	2120      	movs	r1, #32
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f000 f8bc 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b450:	4603      	mov	r3, r0
 800b452:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d13d      	bne.n	800b4d6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	6812      	ldr	r2, [r2, #0]
 800b462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	6852      	ldr	r2, [r2, #4]
 800b46c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	6892      	ldr	r2, [r2, #8]
 800b476:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	431a      	orrs	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b490:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68da      	ldr	r2, [r3, #12]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b49a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b49e:	68b9      	ldr	r1, [r7, #8]
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f000 f8c8 	bl	800b636 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	2108      	movs	r1, #8
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 f889 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10a      	bne.n	800b4d6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2208      	movs	r2, #8
 800b4c6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4d0:	e001      	b.n	800b4d6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b4f4:	f7fb fcfa 	bl	8006eec <HAL_GetTick>
 800b4f8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b01      	cmp	r3, #1
 800b504:	d101      	bne.n	800b50a <HAL_QSPI_MemoryMapped+0x22>
 800b506:	2302      	movs	r3, #2
 800b508:	e04c      	b.n	800b5a4 <HAL_QSPI_MemoryMapped+0xbc>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d13b      	bne.n	800b596 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2282      	movs	r2, #130	; 0x82
 800b528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	2200      	movs	r2, #0
 800b536:	2120      	movs	r1, #32
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 f845 	bl	800b5c8 <QSPI_WaitFlagStateUntilTimeout>
 800b53e:	4603      	mov	r3, r0
 800b540:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d128      	bne.n	800b59a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f023 0108 	bic.w	r1, r3, #8
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	430a      	orrs	r2, r1
 800b55c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	2b08      	cmp	r3, #8
 800b564:	d110      	bne.n	800b588 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	6812      	ldr	r2, [r2, #0]
 800b56e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2210      	movs	r2, #16
 800b576:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b586:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b588:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b58c:	68b9      	ldr	r1, [r7, #8]
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f000 f851 	bl	800b636 <QSPI_Config>
 800b594:	e001      	b.n	800b59a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b596:	2302      	movs	r3, #2
 800b598:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3718      	adds	r7, #24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	603b      	str	r3, [r7, #0]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b5d8:	e01a      	b.n	800b610 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5e0:	d016      	beq.n	800b610 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5e2:	f7fb fc83 	bl	8006eec <HAL_GetTick>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	69ba      	ldr	r2, [r7, #24]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d302      	bcc.n	800b5f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10b      	bne.n	800b610 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2204      	movs	r2, #4
 800b5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b604:	f043 0201 	orr.w	r2, r3, #1
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e00e      	b.n	800b62e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	689a      	ldr	r2, [r3, #8]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	4013      	ands	r3, r2
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bf14      	ite	ne
 800b61e:	2301      	movne	r3, #1
 800b620:	2300      	moveq	r3, #0
 800b622:	b2db      	uxtb	r3, r3
 800b624:	461a      	mov	r2, r3
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d1d6      	bne.n	800b5da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b636:	b480      	push	{r7}
 800b638:	b085      	sub	sp, #20
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	60f8      	str	r0, [r7, #12]
 800b63e:	60b9      	str	r1, [r7, #8]
 800b640:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b646:	2b00      	cmp	r3, #0
 800b648:	d009      	beq.n	800b65e <QSPI_Config+0x28>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b650:	d005      	beq.n	800b65e <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3a01      	subs	r2, #1
 800b65c:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 80b9 	beq.w	800b7da <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	6a1b      	ldr	r3, [r3, #32]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d05f      	beq.n	800b730 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	6892      	ldr	r2, [r2, #8]
 800b678:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d031      	beq.n	800b6e6 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68a:	431a      	orrs	r2, r3
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b690:	431a      	orrs	r2, r3
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	431a      	orrs	r2, r3
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	695b      	ldr	r3, [r3, #20]
 800b69c:	049b      	lsls	r3, r3, #18
 800b69e:	431a      	orrs	r2, r3
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	431a      	orrs	r2, r3
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	69db      	ldr	r3, [r3, #28]
 800b6b6:	431a      	orrs	r2, r3
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	699b      	ldr	r3, [r3, #24]
 800b6bc:	431a      	orrs	r2, r3
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	ea42 0103 	orr.w	r1, r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	430a      	orrs	r2, r1
 800b6ce:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b6d6:	f000 812e 	beq.w	800b936 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	6852      	ldr	r2, [r2, #4]
 800b6e2:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b6e4:	e127      	b.n	800b936 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f4:	431a      	orrs	r2, r3
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	049b      	lsls	r3, r3, #18
 800b702:	431a      	orrs	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	431a      	orrs	r2, r3
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	431a      	orrs	r2, r3
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	69db      	ldr	r3, [r3, #28]
 800b714:	431a      	orrs	r2, r3
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	431a      	orrs	r2, r3
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	ea42 0103 	orr.w	r1, r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	430a      	orrs	r2, r1
 800b72c:	615a      	str	r2, [r3, #20]
}
 800b72e:	e102      	b.n	800b936 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	69db      	ldr	r3, [r3, #28]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d02e      	beq.n	800b796 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b740:	431a      	orrs	r2, r3
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b746:	431a      	orrs	r2, r3
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	431a      	orrs	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	049b      	lsls	r3, r3, #18
 800b754:	431a      	orrs	r2, r3
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	431a      	orrs	r2, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	431a      	orrs	r2, r3
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	431a      	orrs	r2, r3
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	431a      	orrs	r2, r3
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	ea42 0103 	orr.w	r1, r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	430a      	orrs	r2, r1
 800b77e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b786:	f000 80d6 	beq.w	800b936 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	6852      	ldr	r2, [r2, #4]
 800b792:	619a      	str	r2, [r3, #24]
}
 800b794:	e0cf      	b.n	800b936 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a4:	431a      	orrs	r2, r3
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	431a      	orrs	r2, r3
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	049b      	lsls	r3, r3, #18
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	431a      	orrs	r2, r3
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	ea42 0103 	orr.w	r1, r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	430a      	orrs	r2, r1
 800b7d6:	615a      	str	r2, [r3, #20]
}
 800b7d8:	e0ad      	b.n	800b936 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d058      	beq.n	800b894 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	6892      	ldr	r2, [r2, #8]
 800b7ea:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d02d      	beq.n	800b850 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b802:	431a      	orrs	r2, r3
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	431a      	orrs	r2, r3
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	049b      	lsls	r3, r3, #18
 800b810:	431a      	orrs	r2, r3
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	431a      	orrs	r2, r3
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	431a      	orrs	r2, r3
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	431a      	orrs	r2, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	69db      	ldr	r3, [r3, #28]
 800b828:	431a      	orrs	r2, r3
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	ea42 0103 	orr.w	r1, r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	430a      	orrs	r2, r1
 800b83a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b842:	d078      	beq.n	800b936 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	6852      	ldr	r2, [r2, #4]
 800b84c:	619a      	str	r2, [r3, #24]
}
 800b84e:	e072      	b.n	800b936 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b858:	431a      	orrs	r2, r3
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85e:	431a      	orrs	r2, r3
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	431a      	orrs	r2, r3
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	695b      	ldr	r3, [r3, #20]
 800b86a:	049b      	lsls	r3, r3, #18
 800b86c:	431a      	orrs	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	431a      	orrs	r2, r3
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	431a      	orrs	r2, r3
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	431a      	orrs	r2, r3
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	ea42 0103 	orr.w	r1, r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	430a      	orrs	r2, r1
 800b890:	615a      	str	r2, [r3, #20]
}
 800b892:	e050      	b.n	800b936 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	69db      	ldr	r3, [r3, #28]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d02a      	beq.n	800b8f2 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a4:	431a      	orrs	r2, r3
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	695b      	ldr	r3, [r3, #20]
 800b8b6:	049b      	lsls	r3, r3, #18
 800b8b8:	431a      	orrs	r2, r3
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	69db      	ldr	r3, [r3, #28]
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	699b      	ldr	r3, [r3, #24]
 800b8d0:	ea42 0103 	orr.w	r1, r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	430a      	orrs	r2, r1
 800b8dc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b8e4:	d027      	beq.n	800b936 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	6852      	ldr	r2, [r2, #4]
 800b8ee:	619a      	str	r2, [r3, #24]
}
 800b8f0:	e021      	b.n	800b936 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d01d      	beq.n	800b936 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b902:	431a      	orrs	r2, r3
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b908:	431a      	orrs	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90e:	431a      	orrs	r2, r3
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	049b      	lsls	r3, r3, #18
 800b916:	431a      	orrs	r2, r3
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	6a1b      	ldr	r3, [r3, #32]
 800b91c:	431a      	orrs	r2, r3
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	69db      	ldr	r3, [r3, #28]
 800b922:	431a      	orrs	r2, r3
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	ea42 0103 	orr.w	r1, r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	430a      	orrs	r2, r1
 800b934:	615a      	str	r2, [r3, #20]
}
 800b936:	bf00      	nop
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
	...

0800b944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b94c:	2300      	movs	r3, #0
 800b94e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d101      	bne.n	800b95a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	e29b      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 8087 	beq.w	800ba76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b968:	4b96      	ldr	r3, [pc, #600]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	f003 030c 	and.w	r3, r3, #12
 800b970:	2b04      	cmp	r3, #4
 800b972:	d00c      	beq.n	800b98e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b974:	4b93      	ldr	r3, [pc, #588]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	f003 030c 	and.w	r3, r3, #12
 800b97c:	2b08      	cmp	r3, #8
 800b97e:	d112      	bne.n	800b9a6 <HAL_RCC_OscConfig+0x62>
 800b980:	4b90      	ldr	r3, [pc, #576]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b98c:	d10b      	bne.n	800b9a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b98e:	4b8d      	ldr	r3, [pc, #564]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d06c      	beq.n	800ba74 <HAL_RCC_OscConfig+0x130>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d168      	bne.n	800ba74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e275      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ae:	d106      	bne.n	800b9be <HAL_RCC_OscConfig+0x7a>
 800b9b0:	4b84      	ldr	r3, [pc, #528]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a83      	ldr	r2, [pc, #524]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	e02e      	b.n	800ba1c <HAL_RCC_OscConfig+0xd8>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10c      	bne.n	800b9e0 <HAL_RCC_OscConfig+0x9c>
 800b9c6:	4b7f      	ldr	r3, [pc, #508]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a7e      	ldr	r2, [pc, #504]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	4b7c      	ldr	r3, [pc, #496]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a7b      	ldr	r2, [pc, #492]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9dc:	6013      	str	r3, [r2, #0]
 800b9de:	e01d      	b.n	800ba1c <HAL_RCC_OscConfig+0xd8>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9e8:	d10c      	bne.n	800ba04 <HAL_RCC_OscConfig+0xc0>
 800b9ea:	4b76      	ldr	r3, [pc, #472]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a75      	ldr	r2, [pc, #468]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9f4:	6013      	str	r3, [r2, #0]
 800b9f6:	4b73      	ldr	r3, [pc, #460]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a72      	ldr	r2, [pc, #456]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800b9fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba00:	6013      	str	r3, [r2, #0]
 800ba02:	e00b      	b.n	800ba1c <HAL_RCC_OscConfig+0xd8>
 800ba04:	4b6f      	ldr	r3, [pc, #444]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a6e      	ldr	r2, [pc, #440]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800ba0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	4b6c      	ldr	r3, [pc, #432]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a6b      	ldr	r2, [pc, #428]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800ba16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d013      	beq.n	800ba4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba24:	f7fb fa62 	bl	8006eec <HAL_GetTick>
 800ba28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba2a:	e008      	b.n	800ba3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba2c:	f7fb fa5e 	bl	8006eec <HAL_GetTick>
 800ba30:	4602      	mov	r2, r0
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	2b64      	cmp	r3, #100	; 0x64
 800ba38:	d901      	bls.n	800ba3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e229      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba3e:	4b61      	ldr	r3, [pc, #388]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0f0      	beq.n	800ba2c <HAL_RCC_OscConfig+0xe8>
 800ba4a:	e014      	b.n	800ba76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba4c:	f7fb fa4e 	bl	8006eec <HAL_GetTick>
 800ba50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba52:	e008      	b.n	800ba66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba54:	f7fb fa4a 	bl	8006eec <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	2b64      	cmp	r3, #100	; 0x64
 800ba60:	d901      	bls.n	800ba66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e215      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba66:	4b57      	ldr	r3, [pc, #348]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1f0      	bne.n	800ba54 <HAL_RCC_OscConfig+0x110>
 800ba72:	e000      	b.n	800ba76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f003 0302 	and.w	r3, r3, #2
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d069      	beq.n	800bb56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ba82:	4b50      	ldr	r3, [pc, #320]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f003 030c 	and.w	r3, r3, #12
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00b      	beq.n	800baa6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba8e:	4b4d      	ldr	r3, [pc, #308]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f003 030c 	and.w	r3, r3, #12
 800ba96:	2b08      	cmp	r3, #8
 800ba98:	d11c      	bne.n	800bad4 <HAL_RCC_OscConfig+0x190>
 800ba9a:	4b4a      	ldr	r3, [pc, #296]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d116      	bne.n	800bad4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800baa6:	4b47      	ldr	r3, [pc, #284]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0302 	and.w	r3, r3, #2
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d005      	beq.n	800babe <HAL_RCC_OscConfig+0x17a>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d001      	beq.n	800babe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e1e9      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800babe:	4b41      	ldr	r3, [pc, #260]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	493d      	ldr	r1, [pc, #244]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bad2:	e040      	b.n	800bb56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d023      	beq.n	800bb24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800badc:	4b39      	ldr	r3, [pc, #228]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a38      	ldr	r2, [pc, #224]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bae2:	f043 0301 	orr.w	r3, r3, #1
 800bae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bae8:	f7fb fa00 	bl	8006eec <HAL_GetTick>
 800baec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800baee:	e008      	b.n	800bb02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800baf0:	f7fb f9fc 	bl	8006eec <HAL_GetTick>
 800baf4:	4602      	mov	r2, r0
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d901      	bls.n	800bb02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bafe:	2303      	movs	r3, #3
 800bb00:	e1c7      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb02:	4b30      	ldr	r3, [pc, #192]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 0302 	and.w	r3, r3, #2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d0f0      	beq.n	800baf0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb0e:	4b2d      	ldr	r3, [pc, #180]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	691b      	ldr	r3, [r3, #16]
 800bb1a:	00db      	lsls	r3, r3, #3
 800bb1c:	4929      	ldr	r1, [pc, #164]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	600b      	str	r3, [r1, #0]
 800bb22:	e018      	b.n	800bb56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb24:	4b27      	ldr	r3, [pc, #156]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a26      	ldr	r2, [pc, #152]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bb2a:	f023 0301 	bic.w	r3, r3, #1
 800bb2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb30:	f7fb f9dc 	bl	8006eec <HAL_GetTick>
 800bb34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb36:	e008      	b.n	800bb4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb38:	f7fb f9d8 	bl	8006eec <HAL_GetTick>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d901      	bls.n	800bb4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e1a3      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb4a:	4b1e      	ldr	r3, [pc, #120]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 0302 	and.w	r3, r3, #2
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1f0      	bne.n	800bb38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f003 0308 	and.w	r3, r3, #8
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d038      	beq.n	800bbd4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d019      	beq.n	800bb9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb6a:	4b16      	ldr	r3, [pc, #88]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bb6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb6e:	4a15      	ldr	r2, [pc, #84]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bb70:	f043 0301 	orr.w	r3, r3, #1
 800bb74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb76:	f7fb f9b9 	bl	8006eec <HAL_GetTick>
 800bb7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb7c:	e008      	b.n	800bb90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb7e:	f7fb f9b5 	bl	8006eec <HAL_GetTick>
 800bb82:	4602      	mov	r2, r0
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d901      	bls.n	800bb90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e180      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb90:	4b0c      	ldr	r3, [pc, #48]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bb92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d0f0      	beq.n	800bb7e <HAL_RCC_OscConfig+0x23a>
 800bb9c:	e01a      	b.n	800bbd4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb9e:	4b09      	ldr	r3, [pc, #36]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bba2:	4a08      	ldr	r2, [pc, #32]	; (800bbc4 <HAL_RCC_OscConfig+0x280>)
 800bba4:	f023 0301 	bic.w	r3, r3, #1
 800bba8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbaa:	f7fb f99f 	bl	8006eec <HAL_GetTick>
 800bbae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbb0:	e00a      	b.n	800bbc8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbb2:	f7fb f99b 	bl	8006eec <HAL_GetTick>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d903      	bls.n	800bbc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e166      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
 800bbc4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbc8:	4b92      	ldr	r3, [pc, #584]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bbca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbcc:	f003 0302 	and.w	r3, r3, #2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1ee      	bne.n	800bbb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0304 	and.w	r3, r3, #4
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 80a4 	beq.w	800bd2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbe2:	4b8c      	ldr	r3, [pc, #560]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10d      	bne.n	800bc0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbee:	4b89      	ldr	r3, [pc, #548]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf2:	4a88      	ldr	r2, [pc, #544]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bbf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbf8:	6413      	str	r3, [r2, #64]	; 0x40
 800bbfa:	4b86      	ldr	r3, [pc, #536]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc02:	60bb      	str	r3, [r7, #8]
 800bc04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc06:	2301      	movs	r3, #1
 800bc08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc0a:	4b83      	ldr	r3, [pc, #524]	; (800be18 <HAL_RCC_OscConfig+0x4d4>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d118      	bne.n	800bc48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800bc16:	4b80      	ldr	r3, [pc, #512]	; (800be18 <HAL_RCC_OscConfig+0x4d4>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a7f      	ldr	r2, [pc, #508]	; (800be18 <HAL_RCC_OscConfig+0x4d4>)
 800bc1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc22:	f7fb f963 	bl	8006eec <HAL_GetTick>
 800bc26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc28:	e008      	b.n	800bc3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc2a:	f7fb f95f 	bl	8006eec <HAL_GetTick>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	2b64      	cmp	r3, #100	; 0x64
 800bc36:	d901      	bls.n	800bc3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e12a      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc3c:	4b76      	ldr	r3, [pc, #472]	; (800be18 <HAL_RCC_OscConfig+0x4d4>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d0f0      	beq.n	800bc2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d106      	bne.n	800bc5e <HAL_RCC_OscConfig+0x31a>
 800bc50:	4b70      	ldr	r3, [pc, #448]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc54:	4a6f      	ldr	r2, [pc, #444]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc56:	f043 0301 	orr.w	r3, r3, #1
 800bc5a:	6713      	str	r3, [r2, #112]	; 0x70
 800bc5c:	e02d      	b.n	800bcba <HAL_RCC_OscConfig+0x376>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10c      	bne.n	800bc80 <HAL_RCC_OscConfig+0x33c>
 800bc66:	4b6b      	ldr	r3, [pc, #428]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6a:	4a6a      	ldr	r2, [pc, #424]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc6c:	f023 0301 	bic.w	r3, r3, #1
 800bc70:	6713      	str	r3, [r2, #112]	; 0x70
 800bc72:	4b68      	ldr	r3, [pc, #416]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc76:	4a67      	ldr	r2, [pc, #412]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc78:	f023 0304 	bic.w	r3, r3, #4
 800bc7c:	6713      	str	r3, [r2, #112]	; 0x70
 800bc7e:	e01c      	b.n	800bcba <HAL_RCC_OscConfig+0x376>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	2b05      	cmp	r3, #5
 800bc86:	d10c      	bne.n	800bca2 <HAL_RCC_OscConfig+0x35e>
 800bc88:	4b62      	ldr	r3, [pc, #392]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc8c:	4a61      	ldr	r2, [pc, #388]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc8e:	f043 0304 	orr.w	r3, r3, #4
 800bc92:	6713      	str	r3, [r2, #112]	; 0x70
 800bc94:	4b5f      	ldr	r3, [pc, #380]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc98:	4a5e      	ldr	r2, [pc, #376]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bc9a:	f043 0301 	orr.w	r3, r3, #1
 800bc9e:	6713      	str	r3, [r2, #112]	; 0x70
 800bca0:	e00b      	b.n	800bcba <HAL_RCC_OscConfig+0x376>
 800bca2:	4b5c      	ldr	r3, [pc, #368]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca6:	4a5b      	ldr	r2, [pc, #364]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bca8:	f023 0301 	bic.w	r3, r3, #1
 800bcac:	6713      	str	r3, [r2, #112]	; 0x70
 800bcae:	4b59      	ldr	r3, [pc, #356]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bcb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb2:	4a58      	ldr	r2, [pc, #352]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bcb4:	f023 0304 	bic.w	r3, r3, #4
 800bcb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d015      	beq.n	800bcee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcc2:	f7fb f913 	bl	8006eec <HAL_GetTick>
 800bcc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcc8:	e00a      	b.n	800bce0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcca:	f7fb f90f 	bl	8006eec <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d901      	bls.n	800bce0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e0d8      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bce0:	4b4c      	ldr	r3, [pc, #304]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce4:	f003 0302 	and.w	r3, r3, #2
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0ee      	beq.n	800bcca <HAL_RCC_OscConfig+0x386>
 800bcec:	e014      	b.n	800bd18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcee:	f7fb f8fd 	bl	8006eec <HAL_GetTick>
 800bcf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcf4:	e00a      	b.n	800bd0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcf6:	f7fb f8f9 	bl	8006eec <HAL_GetTick>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d901      	bls.n	800bd0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e0c2      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd0c:	4b41      	ldr	r3, [pc, #260]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bd0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1ee      	bne.n	800bcf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d105      	bne.n	800bd2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd1e:	4b3d      	ldr	r3, [pc, #244]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd22:	4a3c      	ldr	r2, [pc, #240]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bd24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f000 80ae 	beq.w	800be90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bd34:	4b37      	ldr	r3, [pc, #220]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	f003 030c 	and.w	r3, r3, #12
 800bd3c:	2b08      	cmp	r3, #8
 800bd3e:	d06d      	beq.n	800be1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d14b      	bne.n	800bde0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd48:	4b32      	ldr	r3, [pc, #200]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a31      	ldr	r2, [pc, #196]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bd4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd54:	f7fb f8ca 	bl	8006eec <HAL_GetTick>
 800bd58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd5a:	e008      	b.n	800bd6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd5c:	f7fb f8c6 	bl	8006eec <HAL_GetTick>
 800bd60:	4602      	mov	r2, r0
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d901      	bls.n	800bd6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	e091      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd6e:	4b29      	ldr	r3, [pc, #164]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1f0      	bne.n	800bd5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	69da      	ldr	r2, [r3, #28]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	431a      	orrs	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd88:	019b      	lsls	r3, r3, #6
 800bd8a:	431a      	orrs	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd90:	085b      	lsrs	r3, r3, #1
 800bd92:	3b01      	subs	r3, #1
 800bd94:	041b      	lsls	r3, r3, #16
 800bd96:	431a      	orrs	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9c:	061b      	lsls	r3, r3, #24
 800bd9e:	431a      	orrs	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	071b      	lsls	r3, r3, #28
 800bda6:	491b      	ldr	r1, [pc, #108]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bdac:	4b19      	ldr	r3, [pc, #100]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a18      	ldr	r2, [pc, #96]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bdb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdb8:	f7fb f898 	bl	8006eec <HAL_GetTick>
 800bdbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdbe:	e008      	b.n	800bdd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdc0:	f7fb f894 	bl	8006eec <HAL_GetTick>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d901      	bls.n	800bdd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e05f      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdd2:	4b10      	ldr	r3, [pc, #64]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0f0      	beq.n	800bdc0 <HAL_RCC_OscConfig+0x47c>
 800bdde:	e057      	b.n	800be90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bde0:	4b0c      	ldr	r3, [pc, #48]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a0b      	ldr	r2, [pc, #44]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800bde6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bdea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdec:	f7fb f87e 	bl	8006eec <HAL_GetTick>
 800bdf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdf2:	e008      	b.n	800be06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdf4:	f7fb f87a 	bl	8006eec <HAL_GetTick>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d901      	bls.n	800be06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800be02:	2303      	movs	r3, #3
 800be04:	e045      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be06:	4b03      	ldr	r3, [pc, #12]	; (800be14 <HAL_RCC_OscConfig+0x4d0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1f0      	bne.n	800bdf4 <HAL_RCC_OscConfig+0x4b0>
 800be12:	e03d      	b.n	800be90 <HAL_RCC_OscConfig+0x54c>
 800be14:	40023800 	.word	0x40023800
 800be18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800be1c:	4b1f      	ldr	r3, [pc, #124]	; (800be9c <HAL_RCC_OscConfig+0x558>)
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d030      	beq.n	800be8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be34:	429a      	cmp	r2, r3
 800be36:	d129      	bne.n	800be8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be42:	429a      	cmp	r2, r3
 800be44:	d122      	bne.n	800be8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800be4c:	4013      	ands	r3, r2
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800be52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800be54:	4293      	cmp	r3, r2
 800be56:	d119      	bne.n	800be8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be62:	085b      	lsrs	r3, r3, #1
 800be64:	3b01      	subs	r3, #1
 800be66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800be68:	429a      	cmp	r2, r3
 800be6a:	d10f      	bne.n	800be8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800be78:	429a      	cmp	r2, r3
 800be7a:	d107      	bne.n	800be8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be88:	429a      	cmp	r2, r3
 800be8a:	d001      	beq.n	800be90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	e000      	b.n	800be92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	40023800 	.word	0x40023800

0800bea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e0d0      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800beb8:	4b6a      	ldr	r3, [pc, #424]	; (800c064 <HAL_RCC_ClockConfig+0x1c4>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 030f 	and.w	r3, r3, #15
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d910      	bls.n	800bee8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bec6:	4b67      	ldr	r3, [pc, #412]	; (800c064 <HAL_RCC_ClockConfig+0x1c4>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f023 020f 	bic.w	r2, r3, #15
 800bece:	4965      	ldr	r1, [pc, #404]	; (800c064 <HAL_RCC_ClockConfig+0x1c4>)
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bed6:	4b63      	ldr	r3, [pc, #396]	; (800c064 <HAL_RCC_ClockConfig+0x1c4>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 030f 	and.w	r3, r3, #15
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d001      	beq.n	800bee8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e0b8      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0302 	and.w	r3, r3, #2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d020      	beq.n	800bf36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f003 0304 	and.w	r3, r3, #4
 800befc:	2b00      	cmp	r3, #0
 800befe:	d005      	beq.n	800bf0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bf00:	4b59      	ldr	r3, [pc, #356]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	4a58      	ldr	r2, [pc, #352]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bf0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 0308 	and.w	r3, r3, #8
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d005      	beq.n	800bf24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bf18:	4b53      	ldr	r3, [pc, #332]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	4a52      	ldr	r2, [pc, #328]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bf22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf24:	4b50      	ldr	r3, [pc, #320]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	494d      	ldr	r1, [pc, #308]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf32:	4313      	orrs	r3, r2
 800bf34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d040      	beq.n	800bfc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d107      	bne.n	800bf5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf4a:	4b47      	ldr	r3, [pc, #284]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d115      	bne.n	800bf82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	e07f      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d107      	bne.n	800bf72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf62:	4b41      	ldr	r3, [pc, #260]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e073      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf72:	4b3d      	ldr	r3, [pc, #244]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0302 	and.w	r3, r3, #2
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e06b      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf82:	4b39      	ldr	r3, [pc, #228]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	f023 0203 	bic.w	r2, r3, #3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	4936      	ldr	r1, [pc, #216]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bf90:	4313      	orrs	r3, r2
 800bf92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf94:	f7fa ffaa 	bl	8006eec <HAL_GetTick>
 800bf98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf9a:	e00a      	b.n	800bfb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf9c:	f7fa ffa6 	bl	8006eec <HAL_GetTick>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	1ad3      	subs	r3, r2, r3
 800bfa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d901      	bls.n	800bfb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e053      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfb2:	4b2d      	ldr	r3, [pc, #180]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f003 020c 	and.w	r2, r3, #12
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d1eb      	bne.n	800bf9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bfc4:	4b27      	ldr	r3, [pc, #156]	; (800c064 <HAL_RCC_ClockConfig+0x1c4>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 030f 	and.w	r3, r3, #15
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d210      	bcs.n	800bff4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfd2:	4b24      	ldr	r3, [pc, #144]	; (800c064 <HAL_RCC_ClockConfig+0x1c4>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f023 020f 	bic.w	r2, r3, #15
 800bfda:	4922      	ldr	r1, [pc, #136]	; (800c064 <HAL_RCC_ClockConfig+0x1c4>)
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfe2:	4b20      	ldr	r3, [pc, #128]	; (800c064 <HAL_RCC_ClockConfig+0x1c4>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 030f 	and.w	r3, r3, #15
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d001      	beq.n	800bff4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e032      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f003 0304 	and.w	r3, r3, #4
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d008      	beq.n	800c012 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c000:	4b19      	ldr	r3, [pc, #100]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	4916      	ldr	r1, [pc, #88]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0308 	and.w	r3, r3, #8
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d009      	beq.n	800c032 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c01e:	4b12      	ldr	r3, [pc, #72]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	00db      	lsls	r3, r3, #3
 800c02c:	490e      	ldr	r1, [pc, #56]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800c02e:	4313      	orrs	r3, r2
 800c030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c032:	f000 f821 	bl	800c078 <HAL_RCC_GetSysClockFreq>
 800c036:	4602      	mov	r2, r0
 800c038:	4b0b      	ldr	r3, [pc, #44]	; (800c068 <HAL_RCC_ClockConfig+0x1c8>)
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	091b      	lsrs	r3, r3, #4
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	490a      	ldr	r1, [pc, #40]	; (800c06c <HAL_RCC_ClockConfig+0x1cc>)
 800c044:	5ccb      	ldrb	r3, [r1, r3]
 800c046:	fa22 f303 	lsr.w	r3, r2, r3
 800c04a:	4a09      	ldr	r2, [pc, #36]	; (800c070 <HAL_RCC_ClockConfig+0x1d0>)
 800c04c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c04e:	4b09      	ldr	r3, [pc, #36]	; (800c074 <HAL_RCC_ClockConfig+0x1d4>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4618      	mov	r0, r3
 800c054:	f7f6 fc64 	bl	8002920 <HAL_InitTick>

  return HAL_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	40023c00 	.word	0x40023c00
 800c068:	40023800 	.word	0x40023800
 800c06c:	08012eb4 	.word	0x08012eb4
 800c070:	20000014 	.word	0x20000014
 800c074:	20000098 	.word	0x20000098

0800c078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c07c:	b090      	sub	sp, #64	; 0x40
 800c07e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	637b      	str	r3, [r7, #52]	; 0x34
 800c084:	2300      	movs	r3, #0
 800c086:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c088:	2300      	movs	r3, #0
 800c08a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c090:	4b59      	ldr	r3, [pc, #356]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	f003 030c 	and.w	r3, r3, #12
 800c098:	2b08      	cmp	r3, #8
 800c09a:	d00d      	beq.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x40>
 800c09c:	2b08      	cmp	r3, #8
 800c09e:	f200 80a1 	bhi.w	800c1e4 <HAL_RCC_GetSysClockFreq+0x16c>
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <HAL_RCC_GetSysClockFreq+0x34>
 800c0a6:	2b04      	cmp	r3, #4
 800c0a8:	d003      	beq.n	800c0b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800c0aa:	e09b      	b.n	800c1e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c0ac:	4b53      	ldr	r3, [pc, #332]	; (800c1fc <HAL_RCC_GetSysClockFreq+0x184>)
 800c0ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c0b0:	e09b      	b.n	800c1ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c0b2:	4b53      	ldr	r3, [pc, #332]	; (800c200 <HAL_RCC_GetSysClockFreq+0x188>)
 800c0b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c0b6:	e098      	b.n	800c1ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c0b8:	4b4f      	ldr	r3, [pc, #316]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c0c2:	4b4d      	ldr	r3, [pc, #308]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d028      	beq.n	800c120 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c0ce:	4b4a      	ldr	r3, [pc, #296]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	099b      	lsrs	r3, r3, #6
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	623b      	str	r3, [r7, #32]
 800c0d8:	627a      	str	r2, [r7, #36]	; 0x24
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4b47      	ldr	r3, [pc, #284]	; (800c200 <HAL_RCC_GetSysClockFreq+0x188>)
 800c0e4:	fb03 f201 	mul.w	r2, r3, r1
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	fb00 f303 	mul.w	r3, r0, r3
 800c0ee:	4413      	add	r3, r2
 800c0f0:	4a43      	ldr	r2, [pc, #268]	; (800c200 <HAL_RCC_GetSysClockFreq+0x188>)
 800c0f2:	fba0 1202 	umull	r1, r2, r0, r2
 800c0f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0f8:	460a      	mov	r2, r1
 800c0fa:	62ba      	str	r2, [r7, #40]	; 0x28
 800c0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0fe:	4413      	add	r3, r2
 800c100:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c104:	2200      	movs	r2, #0
 800c106:	61bb      	str	r3, [r7, #24]
 800c108:	61fa      	str	r2, [r7, #28]
 800c10a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c10e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c112:	f7f4 f8e5 	bl	80002e0 <__aeabi_uldivmod>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	4613      	mov	r3, r2
 800c11c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c11e:	e053      	b.n	800c1c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c120:	4b35      	ldr	r3, [pc, #212]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	099b      	lsrs	r3, r3, #6
 800c126:	2200      	movs	r2, #0
 800c128:	613b      	str	r3, [r7, #16]
 800c12a:	617a      	str	r2, [r7, #20]
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c132:	f04f 0b00 	mov.w	fp, #0
 800c136:	4652      	mov	r2, sl
 800c138:	465b      	mov	r3, fp
 800c13a:	f04f 0000 	mov.w	r0, #0
 800c13e:	f04f 0100 	mov.w	r1, #0
 800c142:	0159      	lsls	r1, r3, #5
 800c144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c148:	0150      	lsls	r0, r2, #5
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	ebb2 080a 	subs.w	r8, r2, sl
 800c152:	eb63 090b 	sbc.w	r9, r3, fp
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	f04f 0300 	mov.w	r3, #0
 800c15e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c162:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c166:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c16a:	ebb2 0408 	subs.w	r4, r2, r8
 800c16e:	eb63 0509 	sbc.w	r5, r3, r9
 800c172:	f04f 0200 	mov.w	r2, #0
 800c176:	f04f 0300 	mov.w	r3, #0
 800c17a:	00eb      	lsls	r3, r5, #3
 800c17c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c180:	00e2      	lsls	r2, r4, #3
 800c182:	4614      	mov	r4, r2
 800c184:	461d      	mov	r5, r3
 800c186:	eb14 030a 	adds.w	r3, r4, sl
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	eb45 030b 	adc.w	r3, r5, fp
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	f04f 0300 	mov.w	r3, #0
 800c19a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c19e:	4629      	mov	r1, r5
 800c1a0:	028b      	lsls	r3, r1, #10
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	028a      	lsls	r2, r1, #10
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	60bb      	str	r3, [r7, #8]
 800c1b6:	60fa      	str	r2, [r7, #12]
 800c1b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c1bc:	f7f4 f890 	bl	80002e0 <__aeabi_uldivmod>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c1c8:	4b0b      	ldr	r3, [pc, #44]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	0c1b      	lsrs	r3, r3, #16
 800c1ce:	f003 0303 	and.w	r3, r3, #3
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	005b      	lsls	r3, r3, #1
 800c1d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800c1d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c1e2:	e002      	b.n	800c1ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c1e4:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <HAL_RCC_GetSysClockFreq+0x184>)
 800c1e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c1e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3740      	adds	r7, #64	; 0x40
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1f6:	bf00      	nop
 800c1f8:	40023800 	.word	0x40023800
 800c1fc:	00f42400 	.word	0x00f42400
 800c200:	017d7840 	.word	0x017d7840

0800c204 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c208:	4b03      	ldr	r3, [pc, #12]	; (800c218 <HAL_RCC_GetHCLKFreq+0x14>)
 800c20a:	681b      	ldr	r3, [r3, #0]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	20000014 	.word	0x20000014

0800c21c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c220:	f7ff fff0 	bl	800c204 <HAL_RCC_GetHCLKFreq>
 800c224:	4602      	mov	r2, r0
 800c226:	4b05      	ldr	r3, [pc, #20]	; (800c23c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	0a9b      	lsrs	r3, r3, #10
 800c22c:	f003 0307 	and.w	r3, r3, #7
 800c230:	4903      	ldr	r1, [pc, #12]	; (800c240 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c232:	5ccb      	ldrb	r3, [r1, r3]
 800c234:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c238:	4618      	mov	r0, r3
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	40023800 	.word	0x40023800
 800c240:	08012ec4 	.word	0x08012ec4

0800c244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c248:	f7ff ffdc 	bl	800c204 <HAL_RCC_GetHCLKFreq>
 800c24c:	4602      	mov	r2, r0
 800c24e:	4b05      	ldr	r3, [pc, #20]	; (800c264 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	0b5b      	lsrs	r3, r3, #13
 800c254:	f003 0307 	and.w	r3, r3, #7
 800c258:	4903      	ldr	r1, [pc, #12]	; (800c268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c25a:	5ccb      	ldrb	r3, [r1, r3]
 800c25c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c260:	4618      	mov	r0, r3
 800c262:	bd80      	pop	{r7, pc}
 800c264:	40023800 	.word	0x40023800
 800c268:	08012ec4 	.word	0x08012ec4

0800c26c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	220f      	movs	r2, #15
 800c27a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c27c:	4b12      	ldr	r3, [pc, #72]	; (800c2c8 <HAL_RCC_GetClockConfig+0x5c>)
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f003 0203 	and.w	r2, r3, #3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c288:	4b0f      	ldr	r3, [pc, #60]	; (800c2c8 <HAL_RCC_GetClockConfig+0x5c>)
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c294:	4b0c      	ldr	r3, [pc, #48]	; (800c2c8 <HAL_RCC_GetClockConfig+0x5c>)
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c2a0:	4b09      	ldr	r3, [pc, #36]	; (800c2c8 <HAL_RCC_GetClockConfig+0x5c>)
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	08db      	lsrs	r3, r3, #3
 800c2a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c2ae:	4b07      	ldr	r3, [pc, #28]	; (800c2cc <HAL_RCC_GetClockConfig+0x60>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f003 020f 	and.w	r2, r3, #15
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	601a      	str	r2, [r3, #0]
}
 800c2ba:	bf00      	nop
 800c2bc:	370c      	adds	r7, #12
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	40023800 	.word	0x40023800
 800c2cc:	40023c00 	.word	0x40023c00

0800c2d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b088      	sub	sp, #32
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 0301 	and.w	r3, r3, #1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d012      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c2f8:	4b69      	ldr	r3, [pc, #420]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	4a68      	ldr	r2, [pc, #416]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c302:	6093      	str	r3, [r2, #8]
 800c304:	4b66      	ldr	r3, [pc, #408]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c30c:	4964      	ldr	r1, [pc, #400]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c30e:	4313      	orrs	r3, r2
 800c310:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c316:	2b00      	cmp	r3, #0
 800c318:	d101      	bne.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c31a:	2301      	movs	r3, #1
 800c31c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d017      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c32a:	4b5d      	ldr	r3, [pc, #372]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c338:	4959      	ldr	r1, [pc, #356]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c348:	d101      	bne.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c34a:	2301      	movs	r3, #1
 800c34c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c352:	2b00      	cmp	r3, #0
 800c354:	d101      	bne.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c356:	2301      	movs	r3, #1
 800c358:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d017      	beq.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c366:	4b4e      	ldr	r3, [pc, #312]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c36c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c374:	494a      	ldr	r1, [pc, #296]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c376:	4313      	orrs	r3, r2
 800c378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c384:	d101      	bne.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c386:	2301      	movs	r3, #1
 800c388:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c392:	2301      	movs	r3, #1
 800c394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f003 0320 	and.w	r3, r3, #32
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 808b 	beq.w	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c3b4:	4b3a      	ldr	r3, [pc, #232]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b8:	4a39      	ldr	r2, [pc, #228]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3be:	6413      	str	r3, [r2, #64]	; 0x40
 800c3c0:	4b37      	ldr	r3, [pc, #220]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3c8:	60bb      	str	r3, [r7, #8]
 800c3ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c3cc:	4b35      	ldr	r3, [pc, #212]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a34      	ldr	r2, [pc, #208]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c3d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3d8:	f7fa fd88 	bl	8006eec <HAL_GetTick>
 800c3dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c3de:	e008      	b.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3e0:	f7fa fd84 	bl	8006eec <HAL_GetTick>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	2b64      	cmp	r3, #100	; 0x64
 800c3ec:	d901      	bls.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e38f      	b.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c3f2:	4b2c      	ldr	r3, [pc, #176]	; (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d0f0      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c3fe:	4b28      	ldr	r3, [pc, #160]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c406:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d035      	beq.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d02e      	beq.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c41c:	4b20      	ldr	r3, [pc, #128]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c41e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c424:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c426:	4b1e      	ldr	r3, [pc, #120]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c42a:	4a1d      	ldr	r2, [pc, #116]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c42c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c430:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c432:	4b1b      	ldr	r3, [pc, #108]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c436:	4a1a      	ldr	r2, [pc, #104]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c43c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c43e:	4a18      	ldr	r2, [pc, #96]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c444:	4b16      	ldr	r3, [pc, #88]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c448:	f003 0301 	and.w	r3, r3, #1
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d114      	bne.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c450:	f7fa fd4c 	bl	8006eec <HAL_GetTick>
 800c454:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c456:	e00a      	b.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c458:	f7fa fd48 	bl	8006eec <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	f241 3288 	movw	r2, #5000	; 0x1388
 800c466:	4293      	cmp	r3, r2
 800c468:	d901      	bls.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e351      	b.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c46e:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c472:	f003 0302 	and.w	r3, r3, #2
 800c476:	2b00      	cmp	r3, #0
 800c478:	d0ee      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c47e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c486:	d111      	bne.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c488:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c494:	4b04      	ldr	r3, [pc, #16]	; (800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c496:	400b      	ands	r3, r1
 800c498:	4901      	ldr	r1, [pc, #4]	; (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	608b      	str	r3, [r1, #8]
 800c49e:	e00b      	b.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c4a0:	40023800 	.word	0x40023800
 800c4a4:	40007000 	.word	0x40007000
 800c4a8:	0ffffcff 	.word	0x0ffffcff
 800c4ac:	4bac      	ldr	r3, [pc, #688]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	4aab      	ldr	r2, [pc, #684]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c4b6:	6093      	str	r3, [r2, #8]
 800c4b8:	4ba9      	ldr	r3, [pc, #676]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4c4:	49a6      	ldr	r1, [pc, #664]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f003 0310 	and.w	r3, r3, #16
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d010      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c4d6:	4ba2      	ldr	r3, [pc, #648]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4dc:	4aa0      	ldr	r2, [pc, #640]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c4e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c4e6:	4b9e      	ldr	r3, [pc, #632]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f0:	499b      	ldr	r1, [pc, #620]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00a      	beq.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c504:	4b96      	ldr	r3, [pc, #600]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c50a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c512:	4993      	ldr	r1, [pc, #588]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c514:	4313      	orrs	r3, r2
 800c516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00a      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c526:	4b8e      	ldr	r3, [pc, #568]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c52c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c534:	498a      	ldr	r1, [pc, #552]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c536:	4313      	orrs	r3, r2
 800c538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00a      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c548:	4b85      	ldr	r3, [pc, #532]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c54e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c556:	4982      	ldr	r1, [pc, #520]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c558:	4313      	orrs	r3, r2
 800c55a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00a      	beq.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c56a:	4b7d      	ldr	r3, [pc, #500]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c578:	4979      	ldr	r1, [pc, #484]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c57a:	4313      	orrs	r3, r2
 800c57c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00a      	beq.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c58c:	4b74      	ldr	r3, [pc, #464]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c592:	f023 0203 	bic.w	r2, r3, #3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c59a:	4971      	ldr	r1, [pc, #452]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c59c:	4313      	orrs	r3, r2
 800c59e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00a      	beq.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c5ae:	4b6c      	ldr	r3, [pc, #432]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b4:	f023 020c 	bic.w	r2, r3, #12
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5bc:	4968      	ldr	r1, [pc, #416]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00a      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c5d0:	4b63      	ldr	r3, [pc, #396]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5de:	4960      	ldr	r1, [pc, #384]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00a      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c5f2:	4b5b      	ldr	r3, [pc, #364]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c600:	4957      	ldr	r1, [pc, #348]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c602:	4313      	orrs	r3, r2
 800c604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00a      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c614:	4b52      	ldr	r3, [pc, #328]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c61a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c622:	494f      	ldr	r1, [pc, #316]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c624:	4313      	orrs	r3, r2
 800c626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00a      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c636:	4b4a      	ldr	r3, [pc, #296]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c63c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c644:	4946      	ldr	r1, [pc, #280]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c646:	4313      	orrs	r3, r2
 800c648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00a      	beq.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c658:	4b41      	ldr	r3, [pc, #260]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c65e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c666:	493e      	ldr	r1, [pc, #248]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c668:	4313      	orrs	r3, r2
 800c66a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00a      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c67a:	4b39      	ldr	r3, [pc, #228]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c680:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c688:	4935      	ldr	r1, [pc, #212]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c68a:	4313      	orrs	r3, r2
 800c68c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00a      	beq.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c69c:	4b30      	ldr	r3, [pc, #192]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6aa:	492d      	ldr	r1, [pc, #180]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d011      	beq.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c6be:	4b28      	ldr	r3, [pc, #160]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6cc:	4924      	ldr	r1, [pc, #144]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6dc:	d101      	bne.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0308 	and.w	r3, r3, #8
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00a      	beq.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6fe:	4b18      	ldr	r3, [pc, #96]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c704:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c70c:	4914      	ldr	r1, [pc, #80]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c70e:	4313      	orrs	r3, r2
 800c710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00b      	beq.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c720:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c726:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c730:	490b      	ldr	r1, [pc, #44]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c732:	4313      	orrs	r3, r2
 800c734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00f      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c744:	4b06      	ldr	r3, [pc, #24]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c74a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c754:	4902      	ldr	r1, [pc, #8]	; (800c760 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c756:	4313      	orrs	r3, r2
 800c758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c75c:	e002      	b.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800c75e:	bf00      	nop
 800c760:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00b      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c770:	4b8a      	ldr	r3, [pc, #552]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c776:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c780:	4986      	ldr	r1, [pc, #536]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c782:	4313      	orrs	r3, r2
 800c784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00b      	beq.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c794:	4b81      	ldr	r3, [pc, #516]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c79a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7a4:	497d      	ldr	r1, [pc, #500]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d006      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f000 80d6 	beq.w	800c96c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c7c0:	4b76      	ldr	r3, [pc, #472]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a75      	ldr	r2, [pc, #468]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c7c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c7ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7cc:	f7fa fb8e 	bl	8006eec <HAL_GetTick>
 800c7d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c7d2:	e008      	b.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c7d4:	f7fa fb8a 	bl	8006eec <HAL_GetTick>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	2b64      	cmp	r3, #100	; 0x64
 800c7e0:	d901      	bls.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	e195      	b.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c7e6:	4b6d      	ldr	r3, [pc, #436]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1f0      	bne.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 0301 	and.w	r3, r3, #1
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d021      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c802:	2b00      	cmp	r3, #0
 800c804:	d11d      	bne.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c806:	4b65      	ldr	r3, [pc, #404]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c80c:	0c1b      	lsrs	r3, r3, #16
 800c80e:	f003 0303 	and.w	r3, r3, #3
 800c812:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c814:	4b61      	ldr	r3, [pc, #388]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c81a:	0e1b      	lsrs	r3, r3, #24
 800c81c:	f003 030f 	and.w	r3, r3, #15
 800c820:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	019a      	lsls	r2, r3, #6
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	041b      	lsls	r3, r3, #16
 800c82c:	431a      	orrs	r2, r3
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	061b      	lsls	r3, r3, #24
 800c832:	431a      	orrs	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	071b      	lsls	r3, r3, #28
 800c83a:	4958      	ldr	r1, [pc, #352]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c83c:	4313      	orrs	r3, r2
 800c83e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d004      	beq.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c856:	d00a      	beq.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c860:	2b00      	cmp	r3, #0
 800c862:	d02e      	beq.n	800c8c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c86c:	d129      	bne.n	800c8c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c86e:	4b4b      	ldr	r3, [pc, #300]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c874:	0c1b      	lsrs	r3, r3, #16
 800c876:	f003 0303 	and.w	r3, r3, #3
 800c87a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c87c:	4b47      	ldr	r3, [pc, #284]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c87e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c882:	0f1b      	lsrs	r3, r3, #28
 800c884:	f003 0307 	and.w	r3, r3, #7
 800c888:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	019a      	lsls	r2, r3, #6
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	041b      	lsls	r3, r3, #16
 800c894:	431a      	orrs	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	061b      	lsls	r3, r3, #24
 800c89c:	431a      	orrs	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	071b      	lsls	r3, r3, #28
 800c8a2:	493e      	ldr	r1, [pc, #248]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c8aa:	4b3c      	ldr	r3, [pc, #240]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8b0:	f023 021f 	bic.w	r2, r3, #31
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	4938      	ldr	r1, [pc, #224]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d01d      	beq.n	800c90a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c8ce:	4b33      	ldr	r3, [pc, #204]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c8d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8d4:	0e1b      	lsrs	r3, r3, #24
 800c8d6:	f003 030f 	and.w	r3, r3, #15
 800c8da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c8dc:	4b2f      	ldr	r3, [pc, #188]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c8de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8e2:	0f1b      	lsrs	r3, r3, #28
 800c8e4:	f003 0307 	and.w	r3, r3, #7
 800c8e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	019a      	lsls	r2, r3, #6
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	041b      	lsls	r3, r3, #16
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	061b      	lsls	r3, r3, #24
 800c8fc:	431a      	orrs	r2, r3
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	071b      	lsls	r3, r3, #28
 800c902:	4926      	ldr	r1, [pc, #152]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c904:	4313      	orrs	r3, r2
 800c906:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c912:	2b00      	cmp	r3, #0
 800c914:	d011      	beq.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	019a      	lsls	r2, r3, #6
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	041b      	lsls	r3, r3, #16
 800c922:	431a      	orrs	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	061b      	lsls	r3, r3, #24
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	071b      	lsls	r3, r3, #28
 800c932:	491a      	ldr	r1, [pc, #104]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c934:	4313      	orrs	r3, r2
 800c936:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c93a:	4b18      	ldr	r3, [pc, #96]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a17      	ldr	r2, [pc, #92]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c940:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c946:	f7fa fad1 	bl	8006eec <HAL_GetTick>
 800c94a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c94c:	e008      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c94e:	f7fa facd 	bl	8006eec <HAL_GetTick>
 800c952:	4602      	mov	r2, r0
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	2b64      	cmp	r3, #100	; 0x64
 800c95a:	d901      	bls.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e0d8      	b.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c960:	4b0e      	ldr	r3, [pc, #56]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d0f0      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	f040 80ce 	bne.w	800cb10 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c974:	4b09      	ldr	r3, [pc, #36]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a08      	ldr	r2, [pc, #32]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c97a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c97e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c980:	f7fa fab4 	bl	8006eec <HAL_GetTick>
 800c984:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c986:	e00b      	b.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c988:	f7fa fab0 	bl	8006eec <HAL_GetTick>
 800c98c:	4602      	mov	r2, r0
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	2b64      	cmp	r3, #100	; 0x64
 800c994:	d904      	bls.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c996:	2303      	movs	r3, #3
 800c998:	e0bb      	b.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c99a:	bf00      	nop
 800c99c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9a0:	4b5e      	ldr	r3, [pc, #376]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ac:	d0ec      	beq.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d003      	beq.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d02e      	beq.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d12a      	bne.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c9d6:	4b51      	ldr	r3, [pc, #324]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c9d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9dc:	0c1b      	lsrs	r3, r3, #16
 800c9de:	f003 0303 	and.w	r3, r3, #3
 800c9e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c9e4:	4b4d      	ldr	r3, [pc, #308]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ea:	0f1b      	lsrs	r3, r3, #28
 800c9ec:	f003 0307 	and.w	r3, r3, #7
 800c9f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	695b      	ldr	r3, [r3, #20]
 800c9f6:	019a      	lsls	r2, r3, #6
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	041b      	lsls	r3, r3, #16
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	061b      	lsls	r3, r3, #24
 800ca04:	431a      	orrs	r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	071b      	lsls	r3, r3, #28
 800ca0a:	4944      	ldr	r1, [pc, #272]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ca12:	4b42      	ldr	r3, [pc, #264]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca20:	3b01      	subs	r3, #1
 800ca22:	021b      	lsls	r3, r3, #8
 800ca24:	493d      	ldr	r1, [pc, #244]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca26:	4313      	orrs	r3, r2
 800ca28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d022      	beq.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca40:	d11d      	bne.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca42:	4b36      	ldr	r3, [pc, #216]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca48:	0e1b      	lsrs	r3, r3, #24
 800ca4a:	f003 030f 	and.w	r3, r3, #15
 800ca4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ca50:	4b32      	ldr	r3, [pc, #200]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca56:	0f1b      	lsrs	r3, r3, #28
 800ca58:	f003 0307 	and.w	r3, r3, #7
 800ca5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	019a      	lsls	r2, r3, #6
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a1b      	ldr	r3, [r3, #32]
 800ca68:	041b      	lsls	r3, r3, #16
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	061b      	lsls	r3, r3, #24
 800ca70:	431a      	orrs	r2, r3
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	071b      	lsls	r3, r3, #28
 800ca76:	4929      	ldr	r1, [pc, #164]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f003 0308 	and.w	r3, r3, #8
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d028      	beq.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca8a:	4b24      	ldr	r3, [pc, #144]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca90:	0e1b      	lsrs	r3, r3, #24
 800ca92:	f003 030f 	and.w	r3, r3, #15
 800ca96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ca98:	4b20      	ldr	r3, [pc, #128]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ca9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca9e:	0c1b      	lsrs	r3, r3, #16
 800caa0:	f003 0303 	and.w	r3, r3, #3
 800caa4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	019a      	lsls	r2, r3, #6
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	041b      	lsls	r3, r3, #16
 800cab0:	431a      	orrs	r2, r3
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	061b      	lsls	r3, r3, #24
 800cab6:	431a      	orrs	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	69db      	ldr	r3, [r3, #28]
 800cabc:	071b      	lsls	r3, r3, #28
 800cabe:	4917      	ldr	r1, [pc, #92]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cac0:	4313      	orrs	r3, r2
 800cac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cac6:	4b15      	ldr	r3, [pc, #84]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cacc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad4:	4911      	ldr	r1, [pc, #68]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cad6:	4313      	orrs	r3, r2
 800cad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cadc:	4b0f      	ldr	r3, [pc, #60]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a0e      	ldr	r2, [pc, #56]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cae8:	f7fa fa00 	bl	8006eec <HAL_GetTick>
 800caec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800caee:	e008      	b.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800caf0:	f7fa f9fc 	bl	8006eec <HAL_GetTick>
 800caf4:	4602      	mov	r2, r0
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	2b64      	cmp	r3, #100	; 0x64
 800cafc:	d901      	bls.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cafe:	2303      	movs	r3, #3
 800cb00:	e007      	b.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb02:	4b06      	ldr	r3, [pc, #24]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb0e:	d1ef      	bne.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3720      	adds	r7, #32
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	40023800 	.word	0x40023800

0800cb20 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a8c      	ldr	r2, [pc, #560]	; (800cd60 <HAL_RCCEx_GetPeriphCLKConfig+0x240>)
 800cb30:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800cb32:	4b8c      	ldr	r3, [pc, #560]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cb34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb38:	099b      	lsrs	r3, r3, #6
 800cb3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cb42:	4b88      	ldr	r3, [pc, #544]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cb44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb48:	0c1b      	lsrs	r3, r3, #16
 800cb4a:	f003 0203 	and.w	r2, r3, #3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cb52:	4b84      	ldr	r3, [pc, #528]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cb54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb58:	0e1b      	lsrs	r3, r3, #24
 800cb5a:	f003 020f 	and.w	r2, r3, #15
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cb62:	4b80      	ldr	r3, [pc, #512]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cb64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb68:	0f1b      	lsrs	r3, r3, #28
 800cb6a:	f003 0207 	and.w	r2, r3, #7
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800cb72:	4b7c      	ldr	r3, [pc, #496]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cb74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb78:	099b      	lsrs	r3, r3, #6
 800cb7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cb82:	4b78      	ldr	r3, [pc, #480]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cb84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb88:	0c1b      	lsrs	r3, r3, #16
 800cb8a:	f003 0203 	and.w	r2, r3, #3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb92:	4b74      	ldr	r3, [pc, #464]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cb94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb98:	0e1b      	lsrs	r3, r3, #24
 800cb9a:	f003 020f 	and.w	r2, r3, #15
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cba2:	4b70      	ldr	r3, [pc, #448]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cba8:	0f1b      	lsrs	r3, r3, #28
 800cbaa:	f003 0207 	and.w	r2, r3, #7
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800cbb2:	4b6c      	ldr	r3, [pc, #432]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cbb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbb8:	f003 021f 	and.w	r2, r3, #31
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800cbc0:	4b68      	ldr	r3, [pc, #416]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cbc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbc6:	0a1b      	lsrs	r3, r3, #8
 800cbc8:	f003 021f 	and.w	r2, r3, #31
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800cbd0:	4b64      	ldr	r3, [pc, #400]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cbd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbd6:	0c1b      	lsrs	r3, r3, #16
 800cbd8:	f003 0203 	and.w	r2, r3, #3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800cbe0:	4b60      	ldr	r3, [pc, #384]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cbe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbe6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800cbee:	4b5d      	ldr	r3, [pc, #372]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cbf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbf4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800cbfc:	4b59      	ldr	r3, [pc, #356]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800cc08:	4b56      	ldr	r3, [pc, #344]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800cc16:	4b53      	ldr	r3, [pc, #332]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc1c:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800cc24:	4b4f      	ldr	r3, [pc, #316]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc2a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800cc32:	4b4c      	ldr	r3, [pc, #304]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc38:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800cc40:	4b48      	ldr	r3, [pc, #288]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc46:	f003 0203 	and.w	r2, r3, #3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800cc4e:	4b45      	ldr	r3, [pc, #276]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc54:	f003 020c 	and.w	r2, r3, #12
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800cc5c:	4b41      	ldr	r3, [pc, #260]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc62:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800cc6a:	4b3e      	ldr	r3, [pc, #248]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc70:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800cc78:	4b3a      	ldr	r3, [pc, #232]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc7e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800cc86:	4b37      	ldr	r3, [pc, #220]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc8c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800cc94:	4b33      	ldr	r3, [pc, #204]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc9a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800cca2:	4b30      	ldr	r3, [pc, #192]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cca8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ccb0:	4b2c      	ldr	r3, [pc, #176]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccb6:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800ccbe:	4b29      	ldr	r3, [pc, #164]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc4:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800cccc:	4b25      	ldr	r3, [pc, #148]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccd2:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800ccda:	4b22      	ldr	r3, [pc, #136]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cce0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800ccea:	4b1e      	ldr	r3, [pc, #120]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccf0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800ccfa:	4b1a      	ldr	r3, [pc, #104]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800ccfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd00:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800cd0a:	4b16      	ldr	r3, [pc, #88]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd10:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800cd1a:	4b12      	ldr	r3, [pc, #72]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cd22:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800cd24:	4b0f      	ldr	r3, [pc, #60]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd28:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	431a      	orrs	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800cd34:	4b0b      	ldr	r3, [pc, #44]	; (800cd64 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800cd36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d103      	bne.n	800cd4a <HAL_RCCEx_GetPeriphCLKConfig+0x22a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800cd48:	e003      	b.n	800cd52 <HAL_RCCEx_GetPeriphCLKConfig+0x232>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd50:	639a      	str	r2, [r3, #56]	; 0x38
}
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	1cfffff1 	.word	0x1cfffff1
 800cd64:	40023800 	.word	0x40023800

0800cd68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b087      	sub	sp, #28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cd86:	f040 80a4 	bne.w	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800cd8a:	4ba6      	ldr	r3, [pc, #664]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cd8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd90:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cd98:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cda0:	f000 808a 	beq.w	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cdaa:	f200 8091 	bhi.w	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdb4:	d07d      	beq.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdbc:	f200 8088 	bhi.w	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d004      	beq.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdcc:	d039      	beq.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800cdce:	e07f      	b.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cdd0:	4b94      	ldr	r3, [pc, #592]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d108      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800cddc:	4b91      	ldr	r3, [pc, #580]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cde4:	4a90      	ldr	r2, [pc, #576]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cde6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdea:	613b      	str	r3, [r7, #16]
 800cdec:	e007      	b.n	800cdfe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cdee:	4b8d      	ldr	r3, [pc, #564]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdf6:	4a8d      	ldr	r2, [pc, #564]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800cdf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdfc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800cdfe:	4b89      	ldr	r3, [pc, #548]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce04:	0e1b      	lsrs	r3, r3, #24
 800ce06:	f003 030f 	and.w	r3, r3, #15
 800ce0a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ce0c:	4b85      	ldr	r3, [pc, #532]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce12:	099b      	lsrs	r3, r3, #6
 800ce14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	fb03 f202 	mul.w	r2, r3, r2
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce24:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ce26:	4b7f      	ldr	r3, [pc, #508]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce2c:	0a1b      	lsrs	r3, r3, #8
 800ce2e:	f003 031f 	and.w	r3, r3, #31
 800ce32:	3301      	adds	r3, #1
 800ce34:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce3e:	617b      	str	r3, [r7, #20]
        break;
 800ce40:	e047      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ce42:	4b78      	ldr	r3, [pc, #480]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d108      	bne.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ce4e:	4b75      	ldr	r3, [pc, #468]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce56:	4a74      	ldr	r2, [pc, #464]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ce58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce5c:	613b      	str	r3, [r7, #16]
 800ce5e:	e007      	b.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ce60:	4b70      	ldr	r3, [pc, #448]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce68:	4a70      	ldr	r2, [pc, #448]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800ce6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce6e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ce70:	4b6c      	ldr	r3, [pc, #432]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce76:	0e1b      	lsrs	r3, r3, #24
 800ce78:	f003 030f 	and.w	r3, r3, #15
 800ce7c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ce7e:	4b69      	ldr	r3, [pc, #420]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce84:	099b      	lsrs	r3, r3, #6
 800ce86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	fb03 f202 	mul.w	r2, r3, r2
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce96:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ce98:	4b62      	ldr	r3, [pc, #392]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce9e:	f003 031f 	and.w	r3, r3, #31
 800cea2:	3301      	adds	r3, #1
 800cea4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceae:	617b      	str	r3, [r7, #20]
        break;
 800ceb0:	e00f      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ceb2:	4b5f      	ldr	r3, [pc, #380]	; (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800ceb4:	617b      	str	r3, [r7, #20]
        break;
 800ceb6:	e00c      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ceb8:	4b5a      	ldr	r3, [pc, #360]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d102      	bne.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800cec4:	4b58      	ldr	r3, [pc, #352]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cec6:	617b      	str	r3, [r7, #20]
        break;
 800cec8:	e003      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800ceca:	4b58      	ldr	r3, [pc, #352]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800cecc:	617b      	str	r3, [r7, #20]
        break;
 800cece:	e000      	b.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 800ced0:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ced8:	f040 80ad 	bne.w	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 800cedc:	4b51      	ldr	r3, [pc, #324]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cee2:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ceea:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cef2:	f000 808a 	beq.w	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cefc:	f200 809a 	bhi.w	800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf06:	d07d      	beq.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf0e:	f200 8091 	bhi.w	800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d004      	beq.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf1e:	d039      	beq.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800cf20:	e088      	b.n	800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cf22:	4b40      	ldr	r3, [pc, #256]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d108      	bne.n	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800cf2e:	4b3d      	ldr	r3, [pc, #244]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf36:	4a3c      	ldr	r2, [pc, #240]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cf38:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf3c:	613b      	str	r3, [r7, #16]
 800cf3e:	e007      	b.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cf40:	4b38      	ldr	r3, [pc, #224]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf48:	4a38      	ldr	r2, [pc, #224]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800cf4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf4e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800cf50:	4b34      	ldr	r3, [pc, #208]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf56:	0e1b      	lsrs	r3, r3, #24
 800cf58:	f003 030f 	and.w	r3, r3, #15
 800cf5c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800cf5e:	4b31      	ldr	r3, [pc, #196]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf64:	099b      	lsrs	r3, r3, #6
 800cf66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf6a:	693a      	ldr	r2, [r7, #16]
 800cf6c:	fb03 f202 	mul.w	r2, r3, r2
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf76:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800cf78:	4b2a      	ldr	r3, [pc, #168]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf7e:	0a1b      	lsrs	r3, r3, #8
 800cf80:	f003 031f 	and.w	r3, r3, #31
 800cf84:	3301      	adds	r3, #1
 800cf86:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf90:	617b      	str	r3, [r7, #20]
        break;
 800cf92:	e050      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cf94:	4b23      	ldr	r3, [pc, #140]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d108      	bne.n	800cfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800cfa0:	4b20      	ldr	r3, [pc, #128]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfa8:	4a1f      	ldr	r2, [pc, #124]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfae:	613b      	str	r3, [r7, #16]
 800cfb0:	e007      	b.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cfb2:	4b1c      	ldr	r3, [pc, #112]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfba:	4a1c      	ldr	r2, [pc, #112]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800cfbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800cfc2:	4b18      	ldr	r3, [pc, #96]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cfc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfc8:	0e1b      	lsrs	r3, r3, #24
 800cfca:	f003 030f 	and.w	r3, r3, #15
 800cfce:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800cfd0:	4b14      	ldr	r3, [pc, #80]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cfd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfd6:	099b      	lsrs	r3, r3, #6
 800cfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	fb03 f202 	mul.w	r2, r3, r2
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfe8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800cfea:	4b0e      	ldr	r3, [pc, #56]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cfec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cff0:	f003 031f 	and.w	r3, r3, #31
 800cff4:	3301      	adds	r3, #1
 800cff6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d000:	617b      	str	r3, [r7, #20]
        break;
 800d002:	e018      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d004:	4b0a      	ldr	r3, [pc, #40]	; (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800d006:	617b      	str	r3, [r7, #20]
        break;
 800d008:	e015      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d00a:	4b06      	ldr	r3, [pc, #24]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d102      	bne.n	800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800d016:	4b04      	ldr	r3, [pc, #16]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d018:	617b      	str	r3, [r7, #20]
        break;
 800d01a:	e00c      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 800d01c:	4b03      	ldr	r3, [pc, #12]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d01e:	617b      	str	r3, [r7, #20]
        break;
 800d020:	e009      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800d022:	bf00      	nop
 800d024:	40023800 	.word	0x40023800
 800d028:	00f42400 	.word	0x00f42400
 800d02c:	017d7840 	.word	0x017d7840
 800d030:	00bb8000 	.word	0x00bb8000
        break;
 800d034:	bf00      	nop
      }
    }
  }

  return frequency;
 800d036:	697b      	ldr	r3, [r7, #20]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	371c      	adds	r7, #28
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e156      	b.n	800d310 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d106      	bne.n	800d07c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7f5 fba8 	bl	80027cc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2202      	movs	r2, #2
 800d080:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fb13 	bl	800d6b0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	2b02      	cmp	r3, #2
 800d090:	d00c      	beq.n	800d0ac <HAL_SAI_Init+0x68>
 800d092:	2b02      	cmp	r3, #2
 800d094:	d80d      	bhi.n	800d0b2 <HAL_SAI_Init+0x6e>
 800d096:	2b00      	cmp	r3, #0
 800d098:	d002      	beq.n	800d0a0 <HAL_SAI_Init+0x5c>
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d003      	beq.n	800d0a6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800d09e:	e008      	b.n	800d0b2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	61fb      	str	r3, [r7, #28]
      break;
 800d0a4:	e006      	b.n	800d0b4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d0a6:	2310      	movs	r3, #16
 800d0a8:	61fb      	str	r3, [r7, #28]
      break;
 800d0aa:	e003      	b.n	800d0b4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d0ac:	2320      	movs	r3, #32
 800d0ae:	61fb      	str	r3, [r7, #28]
      break;
 800d0b0:	e000      	b.n	800d0b4 <HAL_SAI_Init+0x70>
      break;
 800d0b2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	2b03      	cmp	r3, #3
 800d0ba:	d81e      	bhi.n	800d0fa <HAL_SAI_Init+0xb6>
 800d0bc:	a201      	add	r2, pc, #4	; (adr r2, 800d0c4 <HAL_SAI_Init+0x80>)
 800d0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c2:	bf00      	nop
 800d0c4:	0800d0d5 	.word	0x0800d0d5
 800d0c8:	0800d0db 	.word	0x0800d0db
 800d0cc:	0800d0e3 	.word	0x0800d0e3
 800d0d0:	0800d0eb 	.word	0x0800d0eb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	617b      	str	r3, [r7, #20]
    }
    break;
 800d0d8:	e010      	b.n	800d0fc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0de:	617b      	str	r3, [r7, #20]
    }
    break;
 800d0e0:	e00c      	b.n	800d0fc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d0e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0e6:	617b      	str	r3, [r7, #20]
    }
    break;
 800d0e8:	e008      	b.n	800d0fc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d0ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0ee:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	f043 0301 	orr.w	r3, r3, #1
 800d0f6:	61fb      	str	r3, [r7, #28]
    }
    break;
 800d0f8:	e000      	b.n	800d0fc <HAL_SAI_Init+0xb8>
    default:
      break;
 800d0fa:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a85      	ldr	r2, [pc, #532]	; (800d318 <HAL_SAI_Init+0x2d4>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d004      	beq.n	800d110 <HAL_SAI_Init+0xcc>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a84      	ldr	r2, [pc, #528]	; (800d31c <HAL_SAI_Init+0x2d8>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d103      	bne.n	800d118 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d110:	4a83      	ldr	r2, [pc, #524]	; (800d320 <HAL_SAI_Init+0x2dc>)
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	6013      	str	r3, [r2, #0]
 800d116:	e002      	b.n	800d11e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d118:	4a82      	ldr	r2, [pc, #520]	; (800d324 <HAL_SAI_Init+0x2e0>)
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	69db      	ldr	r3, [r3, #28]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d04c      	beq.n	800d1c0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a7a      	ldr	r2, [pc, #488]	; (800d318 <HAL_SAI_Init+0x2d4>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d004      	beq.n	800d13e <HAL_SAI_Init+0xfa>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a78      	ldr	r2, [pc, #480]	; (800d31c <HAL_SAI_Init+0x2d8>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d104      	bne.n	800d148 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d13e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d142:	f7ff fe11 	bl	800cd68 <HAL_RCCEx_GetPeriphCLKFreq>
 800d146:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a76      	ldr	r2, [pc, #472]	; (800d328 <HAL_SAI_Init+0x2e4>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d004      	beq.n	800d15c <HAL_SAI_Init+0x118>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a75      	ldr	r2, [pc, #468]	; (800d32c <HAL_SAI_Init+0x2e8>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d104      	bne.n	800d166 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d15c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d160:	f7ff fe02 	bl	800cd68 <HAL_RCCEx_GetPeriphCLKFreq>
 800d164:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d166:	693a      	ldr	r2, [r7, #16]
 800d168:	4613      	mov	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4413      	add	r3, r2
 800d16e:	005b      	lsls	r3, r3, #1
 800d170:	461a      	mov	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	69db      	ldr	r3, [r3, #28]
 800d176:	025b      	lsls	r3, r3, #9
 800d178:	fbb2 f3f3 	udiv	r3, r2, r3
 800d17c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	4a6b      	ldr	r2, [pc, #428]	; (800d330 <HAL_SAI_Init+0x2ec>)
 800d182:	fba2 2303 	umull	r2, r3, r2, r3
 800d186:	08da      	lsrs	r2, r3, #3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d18c:	68f9      	ldr	r1, [r7, #12]
 800d18e:	4b68      	ldr	r3, [pc, #416]	; (800d330 <HAL_SAI_Init+0x2ec>)
 800d190:	fba3 2301 	umull	r2, r3, r3, r1
 800d194:	08da      	lsrs	r2, r3, #3
 800d196:	4613      	mov	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	1aca      	subs	r2, r1, r3
 800d1a0:	2a08      	cmp	r2, #8
 800d1a2:	d904      	bls.n	800d1ae <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6a1b      	ldr	r3, [r3, #32]
 800d1a8:	1c5a      	adds	r2, r3, #1
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b2:	2b04      	cmp	r3, #4
 800d1b4:	d104      	bne.n	800d1c0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a1b      	ldr	r3, [r3, #32]
 800d1ba:	085a      	lsrs	r2, r3, #1
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d003      	beq.n	800d1d0 <HAL_SAI_Init+0x18c>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d109      	bne.n	800d1e4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d101      	bne.n	800d1dc <HAL_SAI_Init+0x198>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	e001      	b.n	800d1e0 <HAL_SAI_Init+0x19c>
 800d1dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1e0:	61bb      	str	r3, [r7, #24]
 800d1e2:	e008      	b.n	800d1f6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d102      	bne.n	800d1f2 <HAL_SAI_Init+0x1ae>
 800d1ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1f0:	e000      	b.n	800d1f4 <HAL_SAI_Init+0x1b0>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	6819      	ldr	r1, [r3, #0]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	4b4c      	ldr	r3, [pc, #304]	; (800d334 <HAL_SAI_Init+0x2f0>)
 800d202:	400b      	ands	r3, r1
 800d204:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	6819      	ldr	r1, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	685a      	ldr	r2, [r3, #4]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d214:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d21a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d220:	431a      	orrs	r2, r3
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800d22e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d23a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6a1b      	ldr	r3, [r3, #32]
 800d240:	051b      	lsls	r3, r3, #20
 800d242:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	430a      	orrs	r2, r1
 800d24a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6859      	ldr	r1, [r3, #4]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	4b38      	ldr	r3, [pc, #224]	; (800d338 <HAL_SAI_Init+0x2f4>)
 800d258:	400b      	ands	r3, r1
 800d25a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6859      	ldr	r1, [r3, #4]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	699a      	ldr	r2, [r3, #24]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26a:	431a      	orrs	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d270:	431a      	orrs	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	430a      	orrs	r2, r1
 800d278:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	6899      	ldr	r1, [r3, #8]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	4b2d      	ldr	r3, [pc, #180]	; (800d33c <HAL_SAI_Init+0x2f8>)
 800d286:	400b      	ands	r3, r1
 800d288:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	6899      	ldr	r1, [r3, #8]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d294:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d29a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d2a0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d2a6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d2b0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	430a      	orrs	r2, r1
 800d2b8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68d9      	ldr	r1, [r3, #12]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d2c8:	400b      	ands	r3, r1
 800d2ca:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68d9      	ldr	r1, [r3, #12]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2da:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2e0:	041b      	lsls	r3, r3, #16
 800d2e2:	431a      	orrs	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2e8:	3b01      	subs	r3, #1
 800d2ea:	021b      	lsls	r3, r3, #8
 800d2ec:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3720      	adds	r7, #32
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	40015804 	.word	0x40015804
 800d31c:	40015824 	.word	0x40015824
 800d320:	40015800 	.word	0x40015800
 800d324:	40015c00 	.word	0x40015c00
 800d328:	40015c04 	.word	0x40015c04
 800d32c:	40015c24 	.word	0x40015c24
 800d330:	cccccccd 	.word	0xcccccccd
 800d334:	ff05c010 	.word	0xff05c010
 800d338:	ffff1ff0 	.word	0xffff1ff0
 800d33c:	fff88000 	.word	0xfff88000

0800d340 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d34e:	2301      	movs	r3, #1
 800d350:	e027      	b.n	800d3a2 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2202      	movs	r2, #2
 800d356:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2200      	movs	r2, #0
 800d360:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d36a:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f99f 	bl	800d6b0 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	685a      	ldr	r2, [r3, #4]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f042 0208 	orr.w	r2, r2, #8
 800d380:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7f5 fa6e 	bl	8002864 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
	...

0800d3ac <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b086      	sub	sp, #24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d3ba:	f7f9 fd97 	bl	8006eec <HAL_GetTick>
 800d3be:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d002      	beq.n	800d3cc <HAL_SAI_Transmit_DMA+0x20>
 800d3c6:	88fb      	ldrh	r3, [r7, #6]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e093      	b.n	800d4f8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	f040 808c 	bne.w	800d4f6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d101      	bne.n	800d3ec <HAL_SAI_Transmit_DMA+0x40>
 800d3e8:	2302      	movs	r3, #2
 800d3ea:	e085      	b.n	800d4f8 <HAL_SAI_Transmit_DMA+0x14c>
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	88fa      	ldrh	r2, [r7, #6]
 800d3fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	88fa      	ldrh	r2, [r7, #6]
 800d406:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2212      	movs	r2, #18
 800d416:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d41e:	4a38      	ldr	r2, [pc, #224]	; (800d500 <HAL_SAI_Transmit_DMA+0x154>)
 800d420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d426:	4a37      	ldr	r2, [pc, #220]	; (800d504 <HAL_SAI_Transmit_DMA+0x158>)
 800d428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d42e:	4a36      	ldr	r2, [pc, #216]	; (800d508 <HAL_SAI_Transmit_DMA+0x15c>)
 800d430:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d436:	2200      	movs	r2, #0
 800d438:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d442:	4619      	mov	r1, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	331c      	adds	r3, #28
 800d44a:	461a      	mov	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d452:	f7fa f8a7 	bl	80075a4 <HAL_DMA_Start_IT>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d005      	beq.n	800d468 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d464:	2301      	movs	r3, #1
 800d466:	e047      	b.n	800d4f8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d468:	2100      	movs	r1, #0
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f000 f8ea 	bl	800d644 <SAI_InterruptFlag>
 800d470:	4601      	mov	r1, r0
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	691a      	ldr	r2, [r3, #16]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	430a      	orrs	r2, r1
 800d47e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d48e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d490:	e015      	b.n	800d4be <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d492:	f7f9 fd2b 	bl	8006eec <HAL_GetTick>
 800d496:	4602      	mov	r2, r0
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4a0:	d90d      	bls.n	800d4be <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	e01c      	b.n	800d4f8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0e2      	beq.n	800d492 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d107      	bne.n	800d4ea <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d4e8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e000      	b.n	800d4f8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800d4f6:	2302      	movs	r3, #2
  }
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	0800d781 	.word	0x0800d781
 800d504:	0800d721 	.word	0x0800d721
 800d508:	0800d819 	.word	0x0800d819

0800d50c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	4613      	mov	r3, r2
 800d518:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <HAL_SAI_Receive_DMA+0x1a>
 800d520:	88fb      	ldrh	r3, [r7, #6]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d101      	bne.n	800d52a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	e074      	b.n	800d614 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b01      	cmp	r3, #1
 800d534:	d16d      	bne.n	800d612 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d101      	bne.n	800d544 <HAL_SAI_Receive_DMA+0x38>
 800d540:	2302      	movs	r3, #2
 800d542:	e067      	b.n	800d614 <HAL_SAI_Receive_DMA+0x108>
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	88fa      	ldrh	r2, [r7, #6]
 800d556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	88fa      	ldrh	r2, [r7, #6]
 800d55e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2222      	movs	r2, #34	; 0x22
 800d56e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d576:	4a29      	ldr	r2, [pc, #164]	; (800d61c <HAL_SAI_Receive_DMA+0x110>)
 800d578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d57e:	4a28      	ldr	r2, [pc, #160]	; (800d620 <HAL_SAI_Receive_DMA+0x114>)
 800d580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d586:	4a27      	ldr	r2, [pc, #156]	; (800d624 <HAL_SAI_Receive_DMA+0x118>)
 800d588:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d58e:	2200      	movs	r2, #0
 800d590:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	331c      	adds	r3, #28
 800d59c:	4619      	mov	r1, r3
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5aa:	f7f9 fffb 	bl	80075a4 <HAL_DMA_Start_IT>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d005      	beq.n	800d5c0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e029      	b.n	800d614 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f000 f83e 	bl	800d644 <SAI_InterruptFlag>
 800d5c8:	4601      	mov	r1, r0
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	691a      	ldr	r2, [r3, #16]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	430a      	orrs	r2, r1
 800d5d6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d5e6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d107      	bne.n	800d606 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d604:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2200      	movs	r2, #0
 800d60a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	e000      	b.n	800d614 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800d612:	2302      	movs	r3, #2
  }
}
 800d614:	4618      	mov	r0, r3
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	0800d7fd 	.word	0x0800d7fd
 800d620:	0800d79d 	.word	0x0800d79d
 800d624:	0800d819 	.word	0x0800d819

0800d628 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d636:	b2db      	uxtb	r3, r3
}
 800d638:	4618      	mov	r0, r3
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d64e:	2301      	movs	r3, #1
 800d650:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d103      	bne.n	800d660 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f043 0308 	orr.w	r3, r3, #8
 800d65e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d664:	2b08      	cmp	r3, #8
 800d666:	d10b      	bne.n	800d680 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	d003      	beq.n	800d678 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	2b01      	cmp	r3, #1
 800d676:	d103      	bne.n	800d680 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f043 0310 	orr.w	r3, r3, #16
 800d67e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	2b03      	cmp	r3, #3
 800d686:	d003      	beq.n	800d690 <SAI_InterruptFlag+0x4c>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d104      	bne.n	800d69a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d696:	60fb      	str	r3, [r7, #12]
 800d698:	e003      	b.n	800d6a2 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f043 0304 	orr.w	r3, r3, #4
 800d6a0:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3714      	adds	r7, #20
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d6b8:	4b17      	ldr	r3, [pc, #92]	; (800d718 <SAI_Disable+0x68>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a17      	ldr	r2, [pc, #92]	; (800d71c <SAI_Disable+0x6c>)
 800d6be:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c2:	0b1b      	lsrs	r3, r3, #12
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d6da:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	1e5a      	subs	r2, r3, #1
 800d6e0:	60fa      	str	r2, [r7, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10a      	bne.n	800d6fc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	72fb      	strb	r3, [r7, #11]
      break;
 800d6fa:	e006      	b.n	800d70a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1e8      	bne.n	800d6dc <SAI_Disable+0x2c>

  return status;
 800d70a:	7afb      	ldrb	r3, [r7, #11]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3714      	adds	r7, #20
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	20000014 	.word	0x20000014
 800d71c:	95cbec1b 	.word	0x95cbec1b

0800d720 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	69db      	ldr	r3, [r3, #28]
 800d732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d736:	d01c      	beq.n	800d772 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d74e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d750:	2100      	movs	r1, #0
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f7ff ff76 	bl	800d644 <SAI_InterruptFlag>
 800d758:	4603      	mov	r3, r0
 800d75a:	43d9      	mvns	r1, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	691a      	ldr	r2, [r3, #16]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	400a      	ands	r2, r1
 800d768:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f7f7 fbaf 	bl	8004ed6 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d778:	bf00      	nop
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f7f7 fbab 	bl	8004eea <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d794:	bf00      	nop
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	69db      	ldr	r3, [r3, #28]
 800d7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b2:	d01c      	beq.n	800d7ee <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d7c2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7ff ff38 	bl	800d644 <SAI_InterruptFlag>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	43d9      	mvns	r1, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	691a      	ldr	r2, [r3, #16]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	400a      	ands	r2, r1
 800d7e4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7f7 fc98 	bl	8005124 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d808:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f7f7 fc80 	bl	8005110 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d810:	bf00      	nop
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d824:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d82c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d004      	beq.n	800d84a <SAI_DMAError+0x32>
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d846:	2b01      	cmp	r3, #1
 800d848:	d112      	bne.n	800d870 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d858:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f7ff ff28 	bl	800d6b0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2201      	movs	r2, #1
 800d864:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f7f7 fb45 	bl	8004f00 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d876:	bf00      	nop
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b082      	sub	sp, #8
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
 800d886:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d101      	bne.n	800d892 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	e025      	b.n	800d8de <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d106      	bne.n	800d8ac <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7f3 fb70 	bl	8000f8c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f001 f83a 	bl	800e938 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6818      	ldr	r0, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	6839      	ldr	r1, [r7, #0]
 800d8d0:	f001 f88e 	bl	800e9f0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d8dc:	2300      	movs	r3, #0
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b086      	sub	sp, #24
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	60f8      	str	r0, [r7, #12]
 800d8ee:	60b9      	str	r1, [r7, #8]
 800d8f0:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8f8:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d8fa:	7dfb      	ldrb	r3, [r7, #23]
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d101      	bne.n	800d904 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d900:	2302      	movs	r3, #2
 800d902:	e021      	b.n	800d948 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d904:	7dfb      	ldrb	r3, [r7, #23]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d002      	beq.n	800d910 <HAL_SDRAM_SendCommand+0x2a>
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
 800d90c:	2b05      	cmp	r3, #5
 800d90e:	d118      	bne.n	800d942 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2202      	movs	r2, #2
 800d914:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	68b9      	ldr	r1, [r7, #8]
 800d920:	4618      	mov	r0, r3
 800d922:	f001 f8cf 	bl	800eac4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d104      	bne.n	800d938 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2205      	movs	r2, #5
 800d932:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d936:	e006      	b.n	800d946 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2201      	movs	r2, #1
 800d93c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d940:	e001      	b.n	800d946 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d942:	2301      	movs	r3, #1
 800d944:	e000      	b.n	800d948 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3718      	adds	r7, #24
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d960:	b2db      	uxtb	r3, r3
 800d962:	2b02      	cmp	r3, #2
 800d964:	d101      	bne.n	800d96a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d966:	2302      	movs	r3, #2
 800d968:	e016      	b.n	800d998 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d970:	b2db      	uxtb	r3, r3
 800d972:	2b01      	cmp	r3, #1
 800d974:	d10f      	bne.n	800d996 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2202      	movs	r2, #2
 800d97a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6839      	ldr	r1, [r7, #0]
 800d984:	4618      	mov	r0, r3
 800d986:	f001 f8c1 	bl	800eb0c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2201      	movs	r2, #1
 800d98e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	e000      	b.n	800d998 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d996:	2301      	movs	r3, #1
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d101      	bne.n	800d9b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e049      	b.n	800da46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f841 	bl	800da4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	f000 fa00 	bl	800dde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800da4e:	b480      	push	{r7}
 800da50:	b083      	sub	sp, #12
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800da56:	bf00      	nop
 800da58:	370c      	adds	r7, #12
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
	...

0800da64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b01      	cmp	r3, #1
 800da76:	d001      	beq.n	800da7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	e054      	b.n	800db26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2202      	movs	r2, #2
 800da80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68da      	ldr	r2, [r3, #12]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f042 0201 	orr.w	r2, r2, #1
 800da92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a26      	ldr	r2, [pc, #152]	; (800db34 <HAL_TIM_Base_Start_IT+0xd0>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d022      	beq.n	800dae4 <HAL_TIM_Base_Start_IT+0x80>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daa6:	d01d      	beq.n	800dae4 <HAL_TIM_Base_Start_IT+0x80>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a22      	ldr	r2, [pc, #136]	; (800db38 <HAL_TIM_Base_Start_IT+0xd4>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d018      	beq.n	800dae4 <HAL_TIM_Base_Start_IT+0x80>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a21      	ldr	r2, [pc, #132]	; (800db3c <HAL_TIM_Base_Start_IT+0xd8>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d013      	beq.n	800dae4 <HAL_TIM_Base_Start_IT+0x80>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a1f      	ldr	r2, [pc, #124]	; (800db40 <HAL_TIM_Base_Start_IT+0xdc>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d00e      	beq.n	800dae4 <HAL_TIM_Base_Start_IT+0x80>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a1e      	ldr	r2, [pc, #120]	; (800db44 <HAL_TIM_Base_Start_IT+0xe0>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d009      	beq.n	800dae4 <HAL_TIM_Base_Start_IT+0x80>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a1c      	ldr	r2, [pc, #112]	; (800db48 <HAL_TIM_Base_Start_IT+0xe4>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d004      	beq.n	800dae4 <HAL_TIM_Base_Start_IT+0x80>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a1b      	ldr	r2, [pc, #108]	; (800db4c <HAL_TIM_Base_Start_IT+0xe8>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d115      	bne.n	800db10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	689a      	ldr	r2, [r3, #8]
 800daea:	4b19      	ldr	r3, [pc, #100]	; (800db50 <HAL_TIM_Base_Start_IT+0xec>)
 800daec:	4013      	ands	r3, r2
 800daee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2b06      	cmp	r3, #6
 800daf4:	d015      	beq.n	800db22 <HAL_TIM_Base_Start_IT+0xbe>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dafc:	d011      	beq.n	800db22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f042 0201 	orr.w	r2, r2, #1
 800db0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db0e:	e008      	b.n	800db22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f042 0201 	orr.w	r2, r2, #1
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	e000      	b.n	800db24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	40010000 	.word	0x40010000
 800db38:	40000400 	.word	0x40000400
 800db3c:	40000800 	.word	0x40000800
 800db40:	40000c00 	.word	0x40000c00
 800db44:	40010400 	.word	0x40010400
 800db48:	40014000 	.word	0x40014000
 800db4c:	40001800 	.word	0x40001800
 800db50:	00010007 	.word	0x00010007

0800db54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	f003 0302 	and.w	r3, r3, #2
 800db66:	2b02      	cmp	r3, #2
 800db68:	d122      	bne.n	800dbb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	f003 0302 	and.w	r3, r3, #2
 800db74:	2b02      	cmp	r3, #2
 800db76:	d11b      	bne.n	800dbb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f06f 0202 	mvn.w	r2, #2
 800db80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2201      	movs	r2, #1
 800db86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	f003 0303 	and.w	r3, r3, #3
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 f905 	bl	800dda6 <HAL_TIM_IC_CaptureCallback>
 800db9c:	e005      	b.n	800dbaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f8f7 	bl	800dd92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 f908 	bl	800ddba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	f003 0304 	and.w	r3, r3, #4
 800dbba:	2b04      	cmp	r3, #4
 800dbbc:	d122      	bne.n	800dc04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	f003 0304 	and.w	r3, r3, #4
 800dbc8:	2b04      	cmp	r3, #4
 800dbca:	d11b      	bne.n	800dc04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f06f 0204 	mvn.w	r2, #4
 800dbd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2202      	movs	r2, #2
 800dbda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d003      	beq.n	800dbf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 f8db 	bl	800dda6 <HAL_TIM_IC_CaptureCallback>
 800dbf0:	e005      	b.n	800dbfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f8cd 	bl	800dd92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f8de 	bl	800ddba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	f003 0308 	and.w	r3, r3, #8
 800dc0e:	2b08      	cmp	r3, #8
 800dc10:	d122      	bne.n	800dc58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	f003 0308 	and.w	r3, r3, #8
 800dc1c:	2b08      	cmp	r3, #8
 800dc1e:	d11b      	bne.n	800dc58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f06f 0208 	mvn.w	r2, #8
 800dc28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2204      	movs	r2, #4
 800dc2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	69db      	ldr	r3, [r3, #28]
 800dc36:	f003 0303 	and.w	r3, r3, #3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f8b1 	bl	800dda6 <HAL_TIM_IC_CaptureCallback>
 800dc44:	e005      	b.n	800dc52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f8a3 	bl	800dd92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f8b4 	bl	800ddba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	f003 0310 	and.w	r3, r3, #16
 800dc62:	2b10      	cmp	r3, #16
 800dc64:	d122      	bne.n	800dcac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f003 0310 	and.w	r3, r3, #16
 800dc70:	2b10      	cmp	r3, #16
 800dc72:	d11b      	bne.n	800dcac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f06f 0210 	mvn.w	r2, #16
 800dc7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2208      	movs	r2, #8
 800dc82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	69db      	ldr	r3, [r3, #28]
 800dc8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d003      	beq.n	800dc9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f887 	bl	800dda6 <HAL_TIM_IC_CaptureCallback>
 800dc98:	e005      	b.n	800dca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f879 	bl	800dd92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 f88a 	bl	800ddba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	f003 0301 	and.w	r3, r3, #1
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d10e      	bne.n	800dcd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	f003 0301 	and.w	r3, r3, #1
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d107      	bne.n	800dcd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f06f 0201 	mvn.w	r2, #1
 800dcd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f7f4 fbf4 	bl	80024c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dce2:	2b80      	cmp	r3, #128	; 0x80
 800dce4:	d10e      	bne.n	800dd04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcf0:	2b80      	cmp	r3, #128	; 0x80
 800dcf2:	d107      	bne.n	800dd04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dcfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f91a 	bl	800df38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	691b      	ldr	r3, [r3, #16]
 800dd0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd12:	d10e      	bne.n	800dd32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd1e:	2b80      	cmp	r3, #128	; 0x80
 800dd20:	d107      	bne.n	800dd32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 f90d 	bl	800df4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	691b      	ldr	r3, [r3, #16]
 800dd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd3c:	2b40      	cmp	r3, #64	; 0x40
 800dd3e:	d10e      	bne.n	800dd5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4a:	2b40      	cmp	r3, #64	; 0x40
 800dd4c:	d107      	bne.n	800dd5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dd56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 f838 	bl	800ddce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	f003 0320 	and.w	r3, r3, #32
 800dd68:	2b20      	cmp	r3, #32
 800dd6a:	d10e      	bne.n	800dd8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	f003 0320 	and.w	r3, r3, #32
 800dd76:	2b20      	cmp	r3, #32
 800dd78:	d107      	bne.n	800dd8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f06f 0220 	mvn.w	r2, #32
 800dd82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f8cd 	bl	800df24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd8a:	bf00      	nop
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd92:	b480      	push	{r7}
 800dd94:	b083      	sub	sp, #12
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd9a:	bf00      	nop
 800dd9c:	370c      	adds	r7, #12
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dda6:	b480      	push	{r7}
 800dda8:	b083      	sub	sp, #12
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ddae:	bf00      	nop
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b083      	sub	sp, #12
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddc2:	bf00      	nop
 800ddc4:	370c      	adds	r7, #12
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b083      	sub	sp, #12
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ddd6:	bf00      	nop
 800ddd8:	370c      	adds	r7, #12
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
	...

0800dde4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a40      	ldr	r2, [pc, #256]	; (800def8 <TIM_Base_SetConfig+0x114>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d013      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de02:	d00f      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a3d      	ldr	r2, [pc, #244]	; (800defc <TIM_Base_SetConfig+0x118>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d00b      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a3c      	ldr	r2, [pc, #240]	; (800df00 <TIM_Base_SetConfig+0x11c>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d007      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a3b      	ldr	r2, [pc, #236]	; (800df04 <TIM_Base_SetConfig+0x120>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d003      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a3a      	ldr	r2, [pc, #232]	; (800df08 <TIM_Base_SetConfig+0x124>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d108      	bne.n	800de36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4313      	orrs	r3, r2
 800de34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a2f      	ldr	r2, [pc, #188]	; (800def8 <TIM_Base_SetConfig+0x114>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d02b      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de44:	d027      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a2c      	ldr	r2, [pc, #176]	; (800defc <TIM_Base_SetConfig+0x118>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d023      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a2b      	ldr	r2, [pc, #172]	; (800df00 <TIM_Base_SetConfig+0x11c>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d01f      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a2a      	ldr	r2, [pc, #168]	; (800df04 <TIM_Base_SetConfig+0x120>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d01b      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a29      	ldr	r2, [pc, #164]	; (800df08 <TIM_Base_SetConfig+0x124>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d017      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a28      	ldr	r2, [pc, #160]	; (800df0c <TIM_Base_SetConfig+0x128>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d013      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a27      	ldr	r2, [pc, #156]	; (800df10 <TIM_Base_SetConfig+0x12c>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d00f      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a26      	ldr	r2, [pc, #152]	; (800df14 <TIM_Base_SetConfig+0x130>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d00b      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a25      	ldr	r2, [pc, #148]	; (800df18 <TIM_Base_SetConfig+0x134>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d007      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a24      	ldr	r2, [pc, #144]	; (800df1c <TIM_Base_SetConfig+0x138>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d003      	beq.n	800de96 <TIM_Base_SetConfig+0xb2>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4a23      	ldr	r2, [pc, #140]	; (800df20 <TIM_Base_SetConfig+0x13c>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d108      	bne.n	800dea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	689a      	ldr	r2, [r3, #8]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a0a      	ldr	r2, [pc, #40]	; (800def8 <TIM_Base_SetConfig+0x114>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d003      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a0c      	ldr	r2, [pc, #48]	; (800df08 <TIM_Base_SetConfig+0x124>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d103      	bne.n	800dee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	691a      	ldr	r2, [r3, #16]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	615a      	str	r2, [r3, #20]
}
 800deea:	bf00      	nop
 800deec:	3714      	adds	r7, #20
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	40010000 	.word	0x40010000
 800defc:	40000400 	.word	0x40000400
 800df00:	40000800 	.word	0x40000800
 800df04:	40000c00 	.word	0x40000c00
 800df08:	40010400 	.word	0x40010400
 800df0c:	40014000 	.word	0x40014000
 800df10:	40014400 	.word	0x40014400
 800df14:	40014800 	.word	0x40014800
 800df18:	40001800 	.word	0x40001800
 800df1c:	40001c00 	.word	0x40001c00
 800df20:	40002000 	.word	0x40002000

0800df24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df40:	bf00      	nop
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d101      	bne.n	800df72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	e040      	b.n	800dff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d106      	bne.n	800df88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7f4 fe5c 	bl	8002c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2224      	movs	r2, #36	; 0x24
 800df8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f022 0201 	bic.w	r2, r2, #1
 800df9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 f8b0 	bl	800e104 <UART_SetConfig>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d101      	bne.n	800dfae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e022      	b.n	800dff4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d002      	beq.n	800dfbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fb08 	bl	800e5cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	685a      	ldr	r2, [r3, #4]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dfca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	689a      	ldr	r2, [r3, #8]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dfda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f042 0201 	orr.w	r2, r2, #1
 800dfea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 fb8f 	bl	800e710 <UART_CheckIdleState>
 800dff2:	4603      	mov	r3, r0
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b08a      	sub	sp, #40	; 0x28
 800e000:	af02      	add	r7, sp, #8
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	603b      	str	r3, [r7, #0]
 800e008:	4613      	mov	r3, r2
 800e00a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e010:	2b20      	cmp	r3, #32
 800e012:	d171      	bne.n	800e0f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <HAL_UART_Transmit+0x24>
 800e01a:	88fb      	ldrh	r3, [r7, #6]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d101      	bne.n	800e024 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	e06a      	b.n	800e0fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2200      	movs	r2, #0
 800e028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2221      	movs	r2, #33	; 0x21
 800e030:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e032:	f7f8 ff5b 	bl	8006eec <HAL_GetTick>
 800e036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	88fa      	ldrh	r2, [r7, #6]
 800e03c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	88fa      	ldrh	r2, [r7, #6]
 800e044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e050:	d108      	bne.n	800e064 <HAL_UART_Transmit+0x68>
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d104      	bne.n	800e064 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e05a:	2300      	movs	r3, #0
 800e05c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	61bb      	str	r3, [r7, #24]
 800e062:	e003      	b.n	800e06c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e068:	2300      	movs	r3, #0
 800e06a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e06c:	e02c      	b.n	800e0c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	2200      	movs	r2, #0
 800e076:	2180      	movs	r1, #128	; 0x80
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f000 fb96 	bl	800e7aa <UART_WaitOnFlagUntilTimeout>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800e084:	2303      	movs	r3, #3
 800e086:	e038      	b.n	800e0fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10b      	bne.n	800e0a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	881b      	ldrh	r3, [r3, #0]
 800e092:	461a      	mov	r2, r3
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e09c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	3302      	adds	r3, #2
 800e0a2:	61bb      	str	r3, [r7, #24]
 800e0a4:	e007      	b.n	800e0b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	781a      	ldrb	r2, [r3, #0]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d1cc      	bne.n	800e06e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2140      	movs	r1, #64	; 0x40
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f000 fb63 	bl	800e7aa <UART_WaitOnFlagUntilTimeout>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800e0ea:	2303      	movs	r3, #3
 800e0ec:	e005      	b.n	800e0fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2220      	movs	r2, #32
 800e0f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e000      	b.n	800e0fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e0f8:	2302      	movs	r3, #2
  }
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3720      	adds	r7, #32
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
	...

0800e104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b088      	sub	sp, #32
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	689a      	ldr	r2, [r3, #8]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	691b      	ldr	r3, [r3, #16]
 800e118:	431a      	orrs	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	695b      	ldr	r3, [r3, #20]
 800e11e:	431a      	orrs	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	4313      	orrs	r3, r2
 800e126:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	4ba6      	ldr	r3, [pc, #664]	; (800e3c8 <UART_SetConfig+0x2c4>)
 800e130:	4013      	ands	r3, r2
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	6812      	ldr	r2, [r2, #0]
 800e136:	6979      	ldr	r1, [r7, #20]
 800e138:	430b      	orrs	r3, r1
 800e13a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	68da      	ldr	r2, [r3, #12]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	430a      	orrs	r2, r1
 800e150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	699b      	ldr	r3, [r3, #24]
 800e156:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a1b      	ldr	r3, [r3, #32]
 800e15c:	697a      	ldr	r2, [r7, #20]
 800e15e:	4313      	orrs	r3, r2
 800e160:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	697a      	ldr	r2, [r7, #20]
 800e172:	430a      	orrs	r2, r1
 800e174:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a94      	ldr	r2, [pc, #592]	; (800e3cc <UART_SetConfig+0x2c8>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d120      	bne.n	800e1c2 <UART_SetConfig+0xbe>
 800e180:	4b93      	ldr	r3, [pc, #588]	; (800e3d0 <UART_SetConfig+0x2cc>)
 800e182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e186:	f003 0303 	and.w	r3, r3, #3
 800e18a:	2b03      	cmp	r3, #3
 800e18c:	d816      	bhi.n	800e1bc <UART_SetConfig+0xb8>
 800e18e:	a201      	add	r2, pc, #4	; (adr r2, 800e194 <UART_SetConfig+0x90>)
 800e190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e194:	0800e1a5 	.word	0x0800e1a5
 800e198:	0800e1b1 	.word	0x0800e1b1
 800e19c:	0800e1ab 	.word	0x0800e1ab
 800e1a0:	0800e1b7 	.word	0x0800e1b7
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	77fb      	strb	r3, [r7, #31]
 800e1a8:	e150      	b.n	800e44c <UART_SetConfig+0x348>
 800e1aa:	2302      	movs	r3, #2
 800e1ac:	77fb      	strb	r3, [r7, #31]
 800e1ae:	e14d      	b.n	800e44c <UART_SetConfig+0x348>
 800e1b0:	2304      	movs	r3, #4
 800e1b2:	77fb      	strb	r3, [r7, #31]
 800e1b4:	e14a      	b.n	800e44c <UART_SetConfig+0x348>
 800e1b6:	2308      	movs	r3, #8
 800e1b8:	77fb      	strb	r3, [r7, #31]
 800e1ba:	e147      	b.n	800e44c <UART_SetConfig+0x348>
 800e1bc:	2310      	movs	r3, #16
 800e1be:	77fb      	strb	r3, [r7, #31]
 800e1c0:	e144      	b.n	800e44c <UART_SetConfig+0x348>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a83      	ldr	r2, [pc, #524]	; (800e3d4 <UART_SetConfig+0x2d0>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d132      	bne.n	800e232 <UART_SetConfig+0x12e>
 800e1cc:	4b80      	ldr	r3, [pc, #512]	; (800e3d0 <UART_SetConfig+0x2cc>)
 800e1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1d2:	f003 030c 	and.w	r3, r3, #12
 800e1d6:	2b0c      	cmp	r3, #12
 800e1d8:	d828      	bhi.n	800e22c <UART_SetConfig+0x128>
 800e1da:	a201      	add	r2, pc, #4	; (adr r2, 800e1e0 <UART_SetConfig+0xdc>)
 800e1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e0:	0800e215 	.word	0x0800e215
 800e1e4:	0800e22d 	.word	0x0800e22d
 800e1e8:	0800e22d 	.word	0x0800e22d
 800e1ec:	0800e22d 	.word	0x0800e22d
 800e1f0:	0800e221 	.word	0x0800e221
 800e1f4:	0800e22d 	.word	0x0800e22d
 800e1f8:	0800e22d 	.word	0x0800e22d
 800e1fc:	0800e22d 	.word	0x0800e22d
 800e200:	0800e21b 	.word	0x0800e21b
 800e204:	0800e22d 	.word	0x0800e22d
 800e208:	0800e22d 	.word	0x0800e22d
 800e20c:	0800e22d 	.word	0x0800e22d
 800e210:	0800e227 	.word	0x0800e227
 800e214:	2300      	movs	r3, #0
 800e216:	77fb      	strb	r3, [r7, #31]
 800e218:	e118      	b.n	800e44c <UART_SetConfig+0x348>
 800e21a:	2302      	movs	r3, #2
 800e21c:	77fb      	strb	r3, [r7, #31]
 800e21e:	e115      	b.n	800e44c <UART_SetConfig+0x348>
 800e220:	2304      	movs	r3, #4
 800e222:	77fb      	strb	r3, [r7, #31]
 800e224:	e112      	b.n	800e44c <UART_SetConfig+0x348>
 800e226:	2308      	movs	r3, #8
 800e228:	77fb      	strb	r3, [r7, #31]
 800e22a:	e10f      	b.n	800e44c <UART_SetConfig+0x348>
 800e22c:	2310      	movs	r3, #16
 800e22e:	77fb      	strb	r3, [r7, #31]
 800e230:	e10c      	b.n	800e44c <UART_SetConfig+0x348>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a68      	ldr	r2, [pc, #416]	; (800e3d8 <UART_SetConfig+0x2d4>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d120      	bne.n	800e27e <UART_SetConfig+0x17a>
 800e23c:	4b64      	ldr	r3, [pc, #400]	; (800e3d0 <UART_SetConfig+0x2cc>)
 800e23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e242:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e246:	2b30      	cmp	r3, #48	; 0x30
 800e248:	d013      	beq.n	800e272 <UART_SetConfig+0x16e>
 800e24a:	2b30      	cmp	r3, #48	; 0x30
 800e24c:	d814      	bhi.n	800e278 <UART_SetConfig+0x174>
 800e24e:	2b20      	cmp	r3, #32
 800e250:	d009      	beq.n	800e266 <UART_SetConfig+0x162>
 800e252:	2b20      	cmp	r3, #32
 800e254:	d810      	bhi.n	800e278 <UART_SetConfig+0x174>
 800e256:	2b00      	cmp	r3, #0
 800e258:	d002      	beq.n	800e260 <UART_SetConfig+0x15c>
 800e25a:	2b10      	cmp	r3, #16
 800e25c:	d006      	beq.n	800e26c <UART_SetConfig+0x168>
 800e25e:	e00b      	b.n	800e278 <UART_SetConfig+0x174>
 800e260:	2300      	movs	r3, #0
 800e262:	77fb      	strb	r3, [r7, #31]
 800e264:	e0f2      	b.n	800e44c <UART_SetConfig+0x348>
 800e266:	2302      	movs	r3, #2
 800e268:	77fb      	strb	r3, [r7, #31]
 800e26a:	e0ef      	b.n	800e44c <UART_SetConfig+0x348>
 800e26c:	2304      	movs	r3, #4
 800e26e:	77fb      	strb	r3, [r7, #31]
 800e270:	e0ec      	b.n	800e44c <UART_SetConfig+0x348>
 800e272:	2308      	movs	r3, #8
 800e274:	77fb      	strb	r3, [r7, #31]
 800e276:	e0e9      	b.n	800e44c <UART_SetConfig+0x348>
 800e278:	2310      	movs	r3, #16
 800e27a:	77fb      	strb	r3, [r7, #31]
 800e27c:	e0e6      	b.n	800e44c <UART_SetConfig+0x348>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a56      	ldr	r2, [pc, #344]	; (800e3dc <UART_SetConfig+0x2d8>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d120      	bne.n	800e2ca <UART_SetConfig+0x1c6>
 800e288:	4b51      	ldr	r3, [pc, #324]	; (800e3d0 <UART_SetConfig+0x2cc>)
 800e28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e28e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e292:	2bc0      	cmp	r3, #192	; 0xc0
 800e294:	d013      	beq.n	800e2be <UART_SetConfig+0x1ba>
 800e296:	2bc0      	cmp	r3, #192	; 0xc0
 800e298:	d814      	bhi.n	800e2c4 <UART_SetConfig+0x1c0>
 800e29a:	2b80      	cmp	r3, #128	; 0x80
 800e29c:	d009      	beq.n	800e2b2 <UART_SetConfig+0x1ae>
 800e29e:	2b80      	cmp	r3, #128	; 0x80
 800e2a0:	d810      	bhi.n	800e2c4 <UART_SetConfig+0x1c0>
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d002      	beq.n	800e2ac <UART_SetConfig+0x1a8>
 800e2a6:	2b40      	cmp	r3, #64	; 0x40
 800e2a8:	d006      	beq.n	800e2b8 <UART_SetConfig+0x1b4>
 800e2aa:	e00b      	b.n	800e2c4 <UART_SetConfig+0x1c0>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	77fb      	strb	r3, [r7, #31]
 800e2b0:	e0cc      	b.n	800e44c <UART_SetConfig+0x348>
 800e2b2:	2302      	movs	r3, #2
 800e2b4:	77fb      	strb	r3, [r7, #31]
 800e2b6:	e0c9      	b.n	800e44c <UART_SetConfig+0x348>
 800e2b8:	2304      	movs	r3, #4
 800e2ba:	77fb      	strb	r3, [r7, #31]
 800e2bc:	e0c6      	b.n	800e44c <UART_SetConfig+0x348>
 800e2be:	2308      	movs	r3, #8
 800e2c0:	77fb      	strb	r3, [r7, #31]
 800e2c2:	e0c3      	b.n	800e44c <UART_SetConfig+0x348>
 800e2c4:	2310      	movs	r3, #16
 800e2c6:	77fb      	strb	r3, [r7, #31]
 800e2c8:	e0c0      	b.n	800e44c <UART_SetConfig+0x348>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a44      	ldr	r2, [pc, #272]	; (800e3e0 <UART_SetConfig+0x2dc>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d125      	bne.n	800e320 <UART_SetConfig+0x21c>
 800e2d4:	4b3e      	ldr	r3, [pc, #248]	; (800e3d0 <UART_SetConfig+0x2cc>)
 800e2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2e2:	d017      	beq.n	800e314 <UART_SetConfig+0x210>
 800e2e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2e8:	d817      	bhi.n	800e31a <UART_SetConfig+0x216>
 800e2ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2ee:	d00b      	beq.n	800e308 <UART_SetConfig+0x204>
 800e2f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2f4:	d811      	bhi.n	800e31a <UART_SetConfig+0x216>
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <UART_SetConfig+0x1fe>
 800e2fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2fe:	d006      	beq.n	800e30e <UART_SetConfig+0x20a>
 800e300:	e00b      	b.n	800e31a <UART_SetConfig+0x216>
 800e302:	2300      	movs	r3, #0
 800e304:	77fb      	strb	r3, [r7, #31]
 800e306:	e0a1      	b.n	800e44c <UART_SetConfig+0x348>
 800e308:	2302      	movs	r3, #2
 800e30a:	77fb      	strb	r3, [r7, #31]
 800e30c:	e09e      	b.n	800e44c <UART_SetConfig+0x348>
 800e30e:	2304      	movs	r3, #4
 800e310:	77fb      	strb	r3, [r7, #31]
 800e312:	e09b      	b.n	800e44c <UART_SetConfig+0x348>
 800e314:	2308      	movs	r3, #8
 800e316:	77fb      	strb	r3, [r7, #31]
 800e318:	e098      	b.n	800e44c <UART_SetConfig+0x348>
 800e31a:	2310      	movs	r3, #16
 800e31c:	77fb      	strb	r3, [r7, #31]
 800e31e:	e095      	b.n	800e44c <UART_SetConfig+0x348>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a2f      	ldr	r2, [pc, #188]	; (800e3e4 <UART_SetConfig+0x2e0>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d125      	bne.n	800e376 <UART_SetConfig+0x272>
 800e32a:	4b29      	ldr	r3, [pc, #164]	; (800e3d0 <UART_SetConfig+0x2cc>)
 800e32c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e338:	d017      	beq.n	800e36a <UART_SetConfig+0x266>
 800e33a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e33e:	d817      	bhi.n	800e370 <UART_SetConfig+0x26c>
 800e340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e344:	d00b      	beq.n	800e35e <UART_SetConfig+0x25a>
 800e346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e34a:	d811      	bhi.n	800e370 <UART_SetConfig+0x26c>
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d003      	beq.n	800e358 <UART_SetConfig+0x254>
 800e350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e354:	d006      	beq.n	800e364 <UART_SetConfig+0x260>
 800e356:	e00b      	b.n	800e370 <UART_SetConfig+0x26c>
 800e358:	2301      	movs	r3, #1
 800e35a:	77fb      	strb	r3, [r7, #31]
 800e35c:	e076      	b.n	800e44c <UART_SetConfig+0x348>
 800e35e:	2302      	movs	r3, #2
 800e360:	77fb      	strb	r3, [r7, #31]
 800e362:	e073      	b.n	800e44c <UART_SetConfig+0x348>
 800e364:	2304      	movs	r3, #4
 800e366:	77fb      	strb	r3, [r7, #31]
 800e368:	e070      	b.n	800e44c <UART_SetConfig+0x348>
 800e36a:	2308      	movs	r3, #8
 800e36c:	77fb      	strb	r3, [r7, #31]
 800e36e:	e06d      	b.n	800e44c <UART_SetConfig+0x348>
 800e370:	2310      	movs	r3, #16
 800e372:	77fb      	strb	r3, [r7, #31]
 800e374:	e06a      	b.n	800e44c <UART_SetConfig+0x348>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a1b      	ldr	r2, [pc, #108]	; (800e3e8 <UART_SetConfig+0x2e4>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d138      	bne.n	800e3f2 <UART_SetConfig+0x2ee>
 800e380:	4b13      	ldr	r3, [pc, #76]	; (800e3d0 <UART_SetConfig+0x2cc>)
 800e382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e386:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e38a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e38e:	d017      	beq.n	800e3c0 <UART_SetConfig+0x2bc>
 800e390:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e394:	d82a      	bhi.n	800e3ec <UART_SetConfig+0x2e8>
 800e396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e39a:	d00b      	beq.n	800e3b4 <UART_SetConfig+0x2b0>
 800e39c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3a0:	d824      	bhi.n	800e3ec <UART_SetConfig+0x2e8>
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d003      	beq.n	800e3ae <UART_SetConfig+0x2aa>
 800e3a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3aa:	d006      	beq.n	800e3ba <UART_SetConfig+0x2b6>
 800e3ac:	e01e      	b.n	800e3ec <UART_SetConfig+0x2e8>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	77fb      	strb	r3, [r7, #31]
 800e3b2:	e04b      	b.n	800e44c <UART_SetConfig+0x348>
 800e3b4:	2302      	movs	r3, #2
 800e3b6:	77fb      	strb	r3, [r7, #31]
 800e3b8:	e048      	b.n	800e44c <UART_SetConfig+0x348>
 800e3ba:	2304      	movs	r3, #4
 800e3bc:	77fb      	strb	r3, [r7, #31]
 800e3be:	e045      	b.n	800e44c <UART_SetConfig+0x348>
 800e3c0:	2308      	movs	r3, #8
 800e3c2:	77fb      	strb	r3, [r7, #31]
 800e3c4:	e042      	b.n	800e44c <UART_SetConfig+0x348>
 800e3c6:	bf00      	nop
 800e3c8:	efff69f3 	.word	0xefff69f3
 800e3cc:	40011000 	.word	0x40011000
 800e3d0:	40023800 	.word	0x40023800
 800e3d4:	40004400 	.word	0x40004400
 800e3d8:	40004800 	.word	0x40004800
 800e3dc:	40004c00 	.word	0x40004c00
 800e3e0:	40005000 	.word	0x40005000
 800e3e4:	40011400 	.word	0x40011400
 800e3e8:	40007800 	.word	0x40007800
 800e3ec:	2310      	movs	r3, #16
 800e3ee:	77fb      	strb	r3, [r7, #31]
 800e3f0:	e02c      	b.n	800e44c <UART_SetConfig+0x348>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a72      	ldr	r2, [pc, #456]	; (800e5c0 <UART_SetConfig+0x4bc>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d125      	bne.n	800e448 <UART_SetConfig+0x344>
 800e3fc:	4b71      	ldr	r3, [pc, #452]	; (800e5c4 <UART_SetConfig+0x4c0>)
 800e3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e402:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e406:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e40a:	d017      	beq.n	800e43c <UART_SetConfig+0x338>
 800e40c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e410:	d817      	bhi.n	800e442 <UART_SetConfig+0x33e>
 800e412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e416:	d00b      	beq.n	800e430 <UART_SetConfig+0x32c>
 800e418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e41c:	d811      	bhi.n	800e442 <UART_SetConfig+0x33e>
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <UART_SetConfig+0x326>
 800e422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e426:	d006      	beq.n	800e436 <UART_SetConfig+0x332>
 800e428:	e00b      	b.n	800e442 <UART_SetConfig+0x33e>
 800e42a:	2300      	movs	r3, #0
 800e42c:	77fb      	strb	r3, [r7, #31]
 800e42e:	e00d      	b.n	800e44c <UART_SetConfig+0x348>
 800e430:	2302      	movs	r3, #2
 800e432:	77fb      	strb	r3, [r7, #31]
 800e434:	e00a      	b.n	800e44c <UART_SetConfig+0x348>
 800e436:	2304      	movs	r3, #4
 800e438:	77fb      	strb	r3, [r7, #31]
 800e43a:	e007      	b.n	800e44c <UART_SetConfig+0x348>
 800e43c:	2308      	movs	r3, #8
 800e43e:	77fb      	strb	r3, [r7, #31]
 800e440:	e004      	b.n	800e44c <UART_SetConfig+0x348>
 800e442:	2310      	movs	r3, #16
 800e444:	77fb      	strb	r3, [r7, #31]
 800e446:	e001      	b.n	800e44c <UART_SetConfig+0x348>
 800e448:	2310      	movs	r3, #16
 800e44a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	69db      	ldr	r3, [r3, #28]
 800e450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e454:	d15b      	bne.n	800e50e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e456:	7ffb      	ldrb	r3, [r7, #31]
 800e458:	2b08      	cmp	r3, #8
 800e45a:	d828      	bhi.n	800e4ae <UART_SetConfig+0x3aa>
 800e45c:	a201      	add	r2, pc, #4	; (adr r2, 800e464 <UART_SetConfig+0x360>)
 800e45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e462:	bf00      	nop
 800e464:	0800e489 	.word	0x0800e489
 800e468:	0800e491 	.word	0x0800e491
 800e46c:	0800e499 	.word	0x0800e499
 800e470:	0800e4af 	.word	0x0800e4af
 800e474:	0800e49f 	.word	0x0800e49f
 800e478:	0800e4af 	.word	0x0800e4af
 800e47c:	0800e4af 	.word	0x0800e4af
 800e480:	0800e4af 	.word	0x0800e4af
 800e484:	0800e4a7 	.word	0x0800e4a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e488:	f7fd fec8 	bl	800c21c <HAL_RCC_GetPCLK1Freq>
 800e48c:	61b8      	str	r0, [r7, #24]
        break;
 800e48e:	e013      	b.n	800e4b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e490:	f7fd fed8 	bl	800c244 <HAL_RCC_GetPCLK2Freq>
 800e494:	61b8      	str	r0, [r7, #24]
        break;
 800e496:	e00f      	b.n	800e4b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e498:	4b4b      	ldr	r3, [pc, #300]	; (800e5c8 <UART_SetConfig+0x4c4>)
 800e49a:	61bb      	str	r3, [r7, #24]
        break;
 800e49c:	e00c      	b.n	800e4b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e49e:	f7fd fdeb 	bl	800c078 <HAL_RCC_GetSysClockFreq>
 800e4a2:	61b8      	str	r0, [r7, #24]
        break;
 800e4a4:	e008      	b.n	800e4b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4aa:	61bb      	str	r3, [r7, #24]
        break;
 800e4ac:	e004      	b.n	800e4b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	77bb      	strb	r3, [r7, #30]
        break;
 800e4b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d074      	beq.n	800e5a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	005a      	lsls	r2, r3, #1
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	085b      	lsrs	r3, r3, #1
 800e4c8:	441a      	add	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	2b0f      	cmp	r3, #15
 800e4d8:	d916      	bls.n	800e508 <UART_SetConfig+0x404>
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4e0:	d212      	bcs.n	800e508 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	f023 030f 	bic.w	r3, r3, #15
 800e4ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	085b      	lsrs	r3, r3, #1
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	f003 0307 	and.w	r3, r3, #7
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	89fb      	ldrh	r3, [r7, #14]
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	89fa      	ldrh	r2, [r7, #14]
 800e504:	60da      	str	r2, [r3, #12]
 800e506:	e04f      	b.n	800e5a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e508:	2301      	movs	r3, #1
 800e50a:	77bb      	strb	r3, [r7, #30]
 800e50c:	e04c      	b.n	800e5a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e50e:	7ffb      	ldrb	r3, [r7, #31]
 800e510:	2b08      	cmp	r3, #8
 800e512:	d828      	bhi.n	800e566 <UART_SetConfig+0x462>
 800e514:	a201      	add	r2, pc, #4	; (adr r2, 800e51c <UART_SetConfig+0x418>)
 800e516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e51a:	bf00      	nop
 800e51c:	0800e541 	.word	0x0800e541
 800e520:	0800e549 	.word	0x0800e549
 800e524:	0800e551 	.word	0x0800e551
 800e528:	0800e567 	.word	0x0800e567
 800e52c:	0800e557 	.word	0x0800e557
 800e530:	0800e567 	.word	0x0800e567
 800e534:	0800e567 	.word	0x0800e567
 800e538:	0800e567 	.word	0x0800e567
 800e53c:	0800e55f 	.word	0x0800e55f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e540:	f7fd fe6c 	bl	800c21c <HAL_RCC_GetPCLK1Freq>
 800e544:	61b8      	str	r0, [r7, #24]
        break;
 800e546:	e013      	b.n	800e570 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e548:	f7fd fe7c 	bl	800c244 <HAL_RCC_GetPCLK2Freq>
 800e54c:	61b8      	str	r0, [r7, #24]
        break;
 800e54e:	e00f      	b.n	800e570 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e550:	4b1d      	ldr	r3, [pc, #116]	; (800e5c8 <UART_SetConfig+0x4c4>)
 800e552:	61bb      	str	r3, [r7, #24]
        break;
 800e554:	e00c      	b.n	800e570 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e556:	f7fd fd8f 	bl	800c078 <HAL_RCC_GetSysClockFreq>
 800e55a:	61b8      	str	r0, [r7, #24]
        break;
 800e55c:	e008      	b.n	800e570 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e55e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e562:	61bb      	str	r3, [r7, #24]
        break;
 800e564:	e004      	b.n	800e570 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e566:	2300      	movs	r3, #0
 800e568:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e56a:	2301      	movs	r3, #1
 800e56c:	77bb      	strb	r3, [r7, #30]
        break;
 800e56e:	bf00      	nop
    }

    if (pclk != 0U)
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d018      	beq.n	800e5a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	085a      	lsrs	r2, r3, #1
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	441a      	add	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	fbb2 f3f3 	udiv	r3, r2, r3
 800e588:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	2b0f      	cmp	r3, #15
 800e58e:	d909      	bls.n	800e5a4 <UART_SetConfig+0x4a0>
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e596:	d205      	bcs.n	800e5a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	60da      	str	r2, [r3, #12]
 800e5a2:	e001      	b.n	800e5a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e5b4:	7fbb      	ldrb	r3, [r7, #30]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3720      	adds	r7, #32
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	40007c00 	.word	0x40007c00
 800e5c4:	40023800 	.word	0x40023800
 800e5c8:	00f42400 	.word	0x00f42400

0800e5cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d8:	f003 0301 	and.w	r3, r3, #1
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00a      	beq.n	800e5f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	430a      	orrs	r2, r1
 800e5f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00a      	beq.n	800e618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	430a      	orrs	r2, r1
 800e616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61c:	f003 0304 	and.w	r3, r3, #4
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00a      	beq.n	800e63a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	430a      	orrs	r2, r1
 800e638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63e:	f003 0308 	and.w	r3, r3, #8
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00a      	beq.n	800e65c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	430a      	orrs	r2, r1
 800e65a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e660:	f003 0310 	and.w	r3, r3, #16
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00a      	beq.n	800e67e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	430a      	orrs	r2, r1
 800e67c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e682:	f003 0320 	and.w	r3, r3, #32
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00a      	beq.n	800e6a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	430a      	orrs	r2, r1
 800e69e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d01a      	beq.n	800e6e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	430a      	orrs	r2, r1
 800e6c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6ca:	d10a      	bne.n	800e6e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	430a      	orrs	r2, r1
 800e6e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00a      	beq.n	800e704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	430a      	orrs	r2, r1
 800e702:	605a      	str	r2, [r3, #4]
  }
}
 800e704:	bf00      	nop
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af02      	add	r7, sp, #8
 800e716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e720:	f7f8 fbe4 	bl	8006eec <HAL_GetTick>
 800e724:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f003 0308 	and.w	r3, r3, #8
 800e730:	2b08      	cmp	r3, #8
 800e732:	d10e      	bne.n	800e752 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e738:	9300      	str	r3, [sp, #0]
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f831 	bl	800e7aa <UART_WaitOnFlagUntilTimeout>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e74e:	2303      	movs	r3, #3
 800e750:	e027      	b.n	800e7a2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f003 0304 	and.w	r3, r3, #4
 800e75c:	2b04      	cmp	r3, #4
 800e75e:	d10e      	bne.n	800e77e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 f81b 	bl	800e7aa <UART_WaitOnFlagUntilTimeout>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d001      	beq.n	800e77e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e77a:	2303      	movs	r3, #3
 800e77c:	e011      	b.n	800e7a2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2220      	movs	r2, #32
 800e782:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2220      	movs	r2, #32
 800e788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2200      	movs	r2, #0
 800e796:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b09c      	sub	sp, #112	; 0x70
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	60f8      	str	r0, [r7, #12]
 800e7b2:	60b9      	str	r1, [r7, #8]
 800e7b4:	603b      	str	r3, [r7, #0]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7ba:	e0a7      	b.n	800e90c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7c2:	f000 80a3 	beq.w	800e90c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7c6:	f7f8 fb91 	bl	8006eec <HAL_GetTick>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	1ad3      	subs	r3, r2, r3
 800e7d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d302      	bcc.n	800e7dc <UART_WaitOnFlagUntilTimeout+0x32>
 800e7d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d13f      	bne.n	800e85c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e4:	e853 3f00 	ldrex	r3, [r3]
 800e7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e7f0:	667b      	str	r3, [r7, #100]	; 0x64
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e800:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e802:	e841 2300 	strex	r3, r2, [r1]
 800e806:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1e6      	bne.n	800e7dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3308      	adds	r3, #8
 800e814:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e818:	e853 3f00 	ldrex	r3, [r3]
 800e81c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e820:	f023 0301 	bic.w	r3, r3, #1
 800e824:	663b      	str	r3, [r7, #96]	; 0x60
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3308      	adds	r3, #8
 800e82c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e82e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e830:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e836:	e841 2300 	strex	r3, r2, [r1]
 800e83a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1e5      	bne.n	800e80e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2220      	movs	r2, #32
 800e846:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2220      	movs	r2, #32
 800e84c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800e858:	2303      	movs	r3, #3
 800e85a:	e068      	b.n	800e92e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f003 0304 	and.w	r3, r3, #4
 800e866:	2b00      	cmp	r3, #0
 800e868:	d050      	beq.n	800e90c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	69db      	ldr	r3, [r3, #28]
 800e870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e878:	d148      	bne.n	800e90c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e882:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88c:	e853 3f00 	ldrex	r3, [r3]
 800e890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e898:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e8a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8aa:	e841 2300 	strex	r3, r2, [r1]
 800e8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1e6      	bne.n	800e884 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3308      	adds	r3, #8
 800e8bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	e853 3f00 	ldrex	r3, [r3]
 800e8c4:	613b      	str	r3, [r7, #16]
   return(result);
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	f023 0301 	bic.w	r3, r3, #1
 800e8cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	3308      	adds	r3, #8
 800e8d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e8d6:	623a      	str	r2, [r7, #32]
 800e8d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8da:	69f9      	ldr	r1, [r7, #28]
 800e8dc:	6a3a      	ldr	r2, [r7, #32]
 800e8de:	e841 2300 	strex	r3, r2, [r1]
 800e8e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d1e5      	bne.n	800e8b6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2220      	movs	r2, #32
 800e8ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2220      	movs	r2, #32
 800e8f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2220      	movs	r2, #32
 800e8fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2200      	movs	r2, #0
 800e904:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e908:	2303      	movs	r3, #3
 800e90a:	e010      	b.n	800e92e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	69da      	ldr	r2, [r3, #28]
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	4013      	ands	r3, r2
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	429a      	cmp	r2, r3
 800e91a:	bf0c      	ite	eq
 800e91c:	2301      	moveq	r3, #1
 800e91e:	2300      	movne	r3, #0
 800e920:	b2db      	uxtb	r3, r3
 800e922:	461a      	mov	r2, r3
 800e924:	79fb      	ldrb	r3, [r7, #7]
 800e926:	429a      	cmp	r2, r3
 800e928:	f43f af48 	beq.w	800e7bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3770      	adds	r7, #112	; 0x70
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
	...

0800e938 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d121      	bne.n	800e98e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	4b27      	ldr	r3, [pc, #156]	; (800e9ec <FMC_SDRAM_Init+0xb4>)
 800e950:	4013      	ands	r3, r2
 800e952:	683a      	ldr	r2, [r7, #0]
 800e954:	6851      	ldr	r1, [r2, #4]
 800e956:	683a      	ldr	r2, [r7, #0]
 800e958:	6892      	ldr	r2, [r2, #8]
 800e95a:	4311      	orrs	r1, r2
 800e95c:	683a      	ldr	r2, [r7, #0]
 800e95e:	68d2      	ldr	r2, [r2, #12]
 800e960:	4311      	orrs	r1, r2
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	6912      	ldr	r2, [r2, #16]
 800e966:	4311      	orrs	r1, r2
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	6952      	ldr	r2, [r2, #20]
 800e96c:	4311      	orrs	r1, r2
 800e96e:	683a      	ldr	r2, [r7, #0]
 800e970:	6992      	ldr	r2, [r2, #24]
 800e972:	4311      	orrs	r1, r2
 800e974:	683a      	ldr	r2, [r7, #0]
 800e976:	69d2      	ldr	r2, [r2, #28]
 800e978:	4311      	orrs	r1, r2
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	6a12      	ldr	r2, [r2, #32]
 800e97e:	4311      	orrs	r1, r2
 800e980:	683a      	ldr	r2, [r7, #0]
 800e982:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e984:	430a      	orrs	r2, r1
 800e986:	431a      	orrs	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	601a      	str	r2, [r3, #0]
 800e98c:	e026      	b.n	800e9dc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	69d9      	ldr	r1, [r3, #28]
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	6a1b      	ldr	r3, [r3, #32]
 800e99e:	4319      	orrs	r1, r3
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a4:	430b      	orrs	r3, r1
 800e9a6:	431a      	orrs	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	4b0e      	ldr	r3, [pc, #56]	; (800e9ec <FMC_SDRAM_Init+0xb4>)
 800e9b2:	4013      	ands	r3, r2
 800e9b4:	683a      	ldr	r2, [r7, #0]
 800e9b6:	6851      	ldr	r1, [r2, #4]
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	6892      	ldr	r2, [r2, #8]
 800e9bc:	4311      	orrs	r1, r2
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	68d2      	ldr	r2, [r2, #12]
 800e9c2:	4311      	orrs	r1, r2
 800e9c4:	683a      	ldr	r2, [r7, #0]
 800e9c6:	6912      	ldr	r2, [r2, #16]
 800e9c8:	4311      	orrs	r1, r2
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	6952      	ldr	r2, [r2, #20]
 800e9ce:	4311      	orrs	r1, r2
 800e9d0:	683a      	ldr	r2, [r7, #0]
 800e9d2:	6992      	ldr	r2, [r2, #24]
 800e9d4:	430a      	orrs	r2, r1
 800e9d6:	431a      	orrs	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop
 800e9ec:	ffff8000 	.word	0xffff8000

0800e9f0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b085      	sub	sp, #20
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d128      	bne.n	800ea54 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	1e59      	subs	r1, r3, #1
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	011b      	lsls	r3, r3, #4
 800ea18:	4319      	orrs	r1, r3
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	021b      	lsls	r3, r3, #8
 800ea22:	4319      	orrs	r1, r3
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	031b      	lsls	r3, r3, #12
 800ea2c:	4319      	orrs	r1, r3
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	691b      	ldr	r3, [r3, #16]
 800ea32:	3b01      	subs	r3, #1
 800ea34:	041b      	lsls	r3, r3, #16
 800ea36:	4319      	orrs	r1, r3
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	695b      	ldr	r3, [r3, #20]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	051b      	lsls	r3, r3, #20
 800ea40:	4319      	orrs	r1, r3
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	3b01      	subs	r3, #1
 800ea48:	061b      	lsls	r3, r3, #24
 800ea4a:	430b      	orrs	r3, r1
 800ea4c:	431a      	orrs	r2, r3
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	609a      	str	r2, [r3, #8]
 800ea52:	e02d      	b.n	800eab0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	689a      	ldr	r2, [r3, #8]
 800ea58:	4b19      	ldr	r3, [pc, #100]	; (800eac0 <FMC_SDRAM_Timing_Init+0xd0>)
 800ea5a:	4013      	ands	r3, r2
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	68d2      	ldr	r2, [r2, #12]
 800ea60:	3a01      	subs	r2, #1
 800ea62:	0311      	lsls	r1, r2, #12
 800ea64:	68ba      	ldr	r2, [r7, #8]
 800ea66:	6952      	ldr	r2, [r2, #20]
 800ea68:	3a01      	subs	r2, #1
 800ea6a:	0512      	lsls	r2, r2, #20
 800ea6c:	430a      	orrs	r2, r1
 800ea6e:	431a      	orrs	r2, r3
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	1e59      	subs	r1, r3, #1
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	3b01      	subs	r3, #1
 800ea88:	011b      	lsls	r3, r3, #4
 800ea8a:	4319      	orrs	r1, r3
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	3b01      	subs	r3, #1
 800ea92:	021b      	lsls	r3, r3, #8
 800ea94:	4319      	orrs	r1, r3
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	041b      	lsls	r3, r3, #16
 800ea9e:	4319      	orrs	r1, r3
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	061b      	lsls	r3, r3, #24
 800eaa8:	430b      	orrs	r3, r1
 800eaaa:	431a      	orrs	r2, r3
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3714      	adds	r7, #20
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	ff0f0fff 	.word	0xff0f0fff

0800eac4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	691a      	ldr	r2, [r3, #16]
 800ead4:	4b0c      	ldr	r3, [pc, #48]	; (800eb08 <FMC_SDRAM_SendCommand+0x44>)
 800ead6:	4013      	ands	r3, r2
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	6811      	ldr	r1, [r2, #0]
 800eadc:	68ba      	ldr	r2, [r7, #8]
 800eade:	6852      	ldr	r2, [r2, #4]
 800eae0:	4311      	orrs	r1, r2
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	6892      	ldr	r2, [r2, #8]
 800eae6:	3a01      	subs	r2, #1
 800eae8:	0152      	lsls	r2, r2, #5
 800eaea:	4311      	orrs	r1, r2
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	68d2      	ldr	r2, [r2, #12]
 800eaf0:	0252      	lsls	r2, r2, #9
 800eaf2:	430a      	orrs	r2, r1
 800eaf4:	431a      	orrs	r2, r3
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3714      	adds	r7, #20
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr
 800eb08:	ffc00000 	.word	0xffc00000

0800eb0c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	695a      	ldr	r2, [r3, #20]
 800eb1a:	4b07      	ldr	r3, [pc, #28]	; (800eb38 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800eb1c:	4013      	ands	r3, r2
 800eb1e:	683a      	ldr	r2, [r7, #0]
 800eb20:	0052      	lsls	r2, r2, #1
 800eb22:	431a      	orrs	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	ffffc001 	.word	0xffffc001

0800eb3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800eb46:	2300      	movs	r3, #0
 800eb48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800eb4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eb4e:	2b84      	cmp	r3, #132	; 0x84
 800eb50:	d005      	beq.n	800eb5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800eb52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	4413      	add	r3, r2
 800eb5a:	3303      	adds	r3, #3
 800eb5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb72:	f3ef 8305 	mrs	r3, IPSR
 800eb76:	607b      	str	r3, [r7, #4]
  return(result);
 800eb78:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bf14      	ite	ne
 800eb7e:	2301      	movne	r3, #1
 800eb80:	2300      	moveq	r3, #0
 800eb82:	b2db      	uxtb	r3, r3
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eb94:	f001 f94c 	bl	800fe30 <vTaskStartScheduler>
  
  return osOK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eb9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eba0:	b089      	sub	sp, #36	; 0x24
 800eba2:	af04      	add	r7, sp, #16
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d020      	beq.n	800ebf2 <osThreadCreate+0x54>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	699b      	ldr	r3, [r3, #24]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d01c      	beq.n	800ebf2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	685c      	ldr	r4, [r3, #4]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	691e      	ldr	r6, [r3, #16]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7ff ffb6 	bl	800eb3c <makeFreeRtosPriority>
 800ebd0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	695b      	ldr	r3, [r3, #20]
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ebda:	9202      	str	r2, [sp, #8]
 800ebdc:	9301      	str	r3, [sp, #4]
 800ebde:	9100      	str	r1, [sp, #0]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	4632      	mov	r2, r6
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f000 ff3a 	bl	800fa60 <xTaskCreateStatic>
 800ebec:	4603      	mov	r3, r0
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	e01c      	b.n	800ec2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	685c      	ldr	r4, [r3, #4]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ebfe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7ff ff98 	bl	800eb3c <makeFreeRtosPriority>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	f107 030c 	add.w	r3, r7, #12
 800ec12:	9301      	str	r3, [sp, #4]
 800ec14:	9200      	str	r2, [sp, #0]
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	4632      	mov	r2, r6
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f000 ff82 	bl	800fb26 <xTaskCreate>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d001      	beq.n	800ec2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	e000      	b.n	800ec2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b084      	sub	sp, #16
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d001      	beq.n	800ec4c <osDelay+0x16>
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	e000      	b.n	800ec4e <osDelay+0x18>
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f001 f8b8 	bl	800fdc4 <vTaskDelay>
  
  return osOK;
 800ec54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ec5e:	b590      	push	{r4, r7, lr}
 800ec60:	b085      	sub	sp, #20
 800ec62:	af02      	add	r7, sp, #8
 800ec64:	6078      	str	r0, [r7, #4]
 800ec66:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d011      	beq.n	800ec94 <osMessageCreate+0x36>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00d      	beq.n	800ec94 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6818      	ldr	r0, [r3, #0]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6859      	ldr	r1, [r3, #4]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	689a      	ldr	r2, [r3, #8]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	2400      	movs	r4, #0
 800ec8a:	9400      	str	r4, [sp, #0]
 800ec8c:	f000 f9e2 	bl	800f054 <xQueueGenericCreateStatic>
 800ec90:	4603      	mov	r3, r0
 800ec92:	e008      	b.n	800eca6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6818      	ldr	r0, [r3, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	4619      	mov	r1, r3
 800eca0:	f000 fa5a 	bl	800f158 <xQueueGenericCreate>
 800eca4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	370c      	adds	r7, #12
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd90      	pop	{r4, r7, pc}
	...

0800ecb0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d101      	bne.n	800ecce <osMessagePut+0x1e>
    ticks = 1;
 800ecca:	2301      	movs	r3, #1
 800eccc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ecce:	f7ff ff4d 	bl	800eb6c <inHandlerMode>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d018      	beq.n	800ed0a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ecd8:	f107 0210 	add.w	r2, r7, #16
 800ecdc:	f107 0108 	add.w	r1, r7, #8
 800ece0:	2300      	movs	r3, #0
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f000 fba0 	bl	800f428 <xQueueGenericSendFromISR>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d001      	beq.n	800ecf2 <osMessagePut+0x42>
      return osErrorOS;
 800ecee:	23ff      	movs	r3, #255	; 0xff
 800ecf0:	e018      	b.n	800ed24 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d014      	beq.n	800ed22 <osMessagePut+0x72>
 800ecf8:	4b0c      	ldr	r3, [pc, #48]	; (800ed2c <osMessagePut+0x7c>)
 800ecfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecfe:	601a      	str	r2, [r3, #0]
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	f3bf 8f6f 	isb	sy
 800ed08:	e00b      	b.n	800ed22 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ed0a:	f107 0108 	add.w	r1, r7, #8
 800ed0e:	2300      	movs	r3, #0
 800ed10:	697a      	ldr	r2, [r7, #20]
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f000 fa82 	bl	800f21c <xQueueGenericSend>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d001      	beq.n	800ed22 <osMessagePut+0x72>
      return osErrorOS;
 800ed1e:	23ff      	movs	r3, #255	; 0xff
 800ed20:	e000      	b.n	800ed24 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ed22:	2300      	movs	r3, #0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3718      	adds	r7, #24
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	e000ed04 	.word	0xe000ed04

0800ed30 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ed30:	b590      	push	{r4, r7, lr}
 800ed32:	b08b      	sub	sp, #44	; 0x2c
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ed40:	2300      	movs	r3, #0
 800ed42:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d10a      	bne.n	800ed60 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ed4a:	2380      	movs	r3, #128	; 0x80
 800ed4c:	617b      	str	r3, [r7, #20]
    return event;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	461c      	mov	r4, r3
 800ed52:	f107 0314 	add.w	r3, r7, #20
 800ed56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ed5e:	e054      	b.n	800ee0a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ed60:	2300      	movs	r3, #0
 800ed62:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed6e:	d103      	bne.n	800ed78 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ed70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed74:	627b      	str	r3, [r7, #36]	; 0x24
 800ed76:	e009      	b.n	800ed8c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d006      	beq.n	800ed8c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ed82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d101      	bne.n	800ed8c <osMessageGet+0x5c>
      ticks = 1;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ed8c:	f7ff feee 	bl	800eb6c <inHandlerMode>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d01c      	beq.n	800edd0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ed96:	f107 0220 	add.w	r2, r7, #32
 800ed9a:	f107 0314 	add.w	r3, r7, #20
 800ed9e:	3304      	adds	r3, #4
 800eda0:	4619      	mov	r1, r3
 800eda2:	68b8      	ldr	r0, [r7, #8]
 800eda4:	f000 fcc6 	bl	800f734 <xQueueReceiveFromISR>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d102      	bne.n	800edb4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800edae:	2310      	movs	r3, #16
 800edb0:	617b      	str	r3, [r7, #20]
 800edb2:	e001      	b.n	800edb8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800edb4:	2300      	movs	r3, #0
 800edb6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800edb8:	6a3b      	ldr	r3, [r7, #32]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d01d      	beq.n	800edfa <osMessageGet+0xca>
 800edbe:	4b15      	ldr	r3, [pc, #84]	; (800ee14 <osMessageGet+0xe4>)
 800edc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edc4:	601a      	str	r2, [r3, #0]
 800edc6:	f3bf 8f4f 	dsb	sy
 800edca:	f3bf 8f6f 	isb	sy
 800edce:	e014      	b.n	800edfa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800edd0:	f107 0314 	add.w	r3, r7, #20
 800edd4:	3304      	adds	r3, #4
 800edd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edd8:	4619      	mov	r1, r3
 800edda:	68b8      	ldr	r0, [r7, #8]
 800eddc:	f000 fbc4 	bl	800f568 <xQueueReceive>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d102      	bne.n	800edec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ede6:	2310      	movs	r3, #16
 800ede8:	617b      	str	r3, [r7, #20]
 800edea:	e006      	b.n	800edfa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d101      	bne.n	800edf6 <osMessageGet+0xc6>
 800edf2:	2300      	movs	r3, #0
 800edf4:	e000      	b.n	800edf8 <osMessageGet+0xc8>
 800edf6:	2340      	movs	r3, #64	; 0x40
 800edf8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	461c      	mov	r4, r3
 800edfe:	f107 0314 	add.w	r3, r7, #20
 800ee02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ee0a:	68f8      	ldr	r0, [r7, #12]
 800ee0c:	372c      	adds	r7, #44	; 0x2c
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd90      	pop	{r4, r7, pc}
 800ee12:	bf00      	nop
 800ee14:	e000ed04 	.word	0xe000ed04

0800ee18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f103 0208 	add.w	r2, r3, #8
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f103 0208 	add.w	r2, r3, #8
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f103 0208 	add.w	r2, r3, #8
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ee4c:	bf00      	nop
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ee66:	bf00      	nop
 800ee68:	370c      	adds	r7, #12
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr

0800ee72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee72:	b480      	push	{r7}
 800ee74:	b085      	sub	sp, #20
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
 800ee7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	689a      	ldr	r2, [r3, #8]
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	683a      	ldr	r2, [r7, #0]
 800ee96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	1c5a      	adds	r2, r3, #1
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	601a      	str	r2, [r3, #0]
}
 800eeae:	bf00      	nop
 800eeb0:	3714      	adds	r7, #20
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr

0800eeba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eeba:	b480      	push	{r7}
 800eebc:	b085      	sub	sp, #20
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
 800eec2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eed0:	d103      	bne.n	800eeda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	60fb      	str	r3, [r7, #12]
 800eed8:	e00c      	b.n	800eef4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	3308      	adds	r3, #8
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	e002      	b.n	800eee8 <vListInsert+0x2e>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	60fb      	str	r3, [r7, #12]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	68ba      	ldr	r2, [r7, #8]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d2f6      	bcs.n	800eee2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	1c5a      	adds	r2, r3, #1
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	601a      	str	r2, [r3, #0]
}
 800ef20:	bf00      	nop
 800ef22:	3714      	adds	r7, #20
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	6892      	ldr	r2, [r2, #8]
 800ef42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	6852      	ldr	r2, [r2, #4]
 800ef4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d103      	bne.n	800ef60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	689a      	ldr	r2, [r3, #8]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	1e5a      	subs	r2, r3, #1
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3714      	adds	r7, #20
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d10c      	bne.n	800efae <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	b672      	cpsid	i
 800ef9a:	f383 8811 	msr	BASEPRI, r3
 800ef9e:	f3bf 8f6f 	isb	sy
 800efa2:	f3bf 8f4f 	dsb	sy
 800efa6:	b662      	cpsie	i
 800efa8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800efaa:	bf00      	nop
 800efac:	e7fe      	b.n	800efac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800efae:	f001 fd7d 	bl	8010aac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efba:	68f9      	ldr	r1, [r7, #12]
 800efbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800efbe:	fb01 f303 	mul.w	r3, r1, r3
 800efc2:	441a      	add	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efde:	3b01      	subs	r3, #1
 800efe0:	68f9      	ldr	r1, [r7, #12]
 800efe2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800efe4:	fb01 f303 	mul.w	r3, r1, r3
 800efe8:	441a      	add	r2, r3
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	22ff      	movs	r2, #255	; 0xff
 800eff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	22ff      	movs	r2, #255	; 0xff
 800effa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d114      	bne.n	800f02e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	691b      	ldr	r3, [r3, #16]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d01a      	beq.n	800f042 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	3310      	adds	r3, #16
 800f010:	4618      	mov	r0, r3
 800f012:	f001 f96b 	bl	80102ec <xTaskRemoveFromEventList>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d012      	beq.n	800f042 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f01c:	4b0c      	ldr	r3, [pc, #48]	; (800f050 <xQueueGenericReset+0xd0>)
 800f01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f022:	601a      	str	r2, [r3, #0]
 800f024:	f3bf 8f4f 	dsb	sy
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	e009      	b.n	800f042 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3310      	adds	r3, #16
 800f032:	4618      	mov	r0, r3
 800f034:	f7ff fef0 	bl	800ee18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	3324      	adds	r3, #36	; 0x24
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7ff feeb 	bl	800ee18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f042:	f001 fd67 	bl	8010b14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f046:	2301      	movs	r3, #1
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	e000ed04 	.word	0xe000ed04

0800f054 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f054:	b580      	push	{r7, lr}
 800f056:	b08e      	sub	sp, #56	; 0x38
 800f058:	af02      	add	r7, sp, #8
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
 800f060:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10c      	bne.n	800f082 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06c:	b672      	cpsid	i
 800f06e:	f383 8811 	msr	BASEPRI, r3
 800f072:	f3bf 8f6f 	isb	sy
 800f076:	f3bf 8f4f 	dsb	sy
 800f07a:	b662      	cpsie	i
 800f07c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f07e:	bf00      	nop
 800f080:	e7fe      	b.n	800f080 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10c      	bne.n	800f0a2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08c:	b672      	cpsid	i
 800f08e:	f383 8811 	msr	BASEPRI, r3
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	b662      	cpsie	i
 800f09c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d002      	beq.n	800f0ae <xQueueGenericCreateStatic+0x5a>
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d001      	beq.n	800f0b2 <xQueueGenericCreateStatic+0x5e>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e000      	b.n	800f0b4 <xQueueGenericCreateStatic+0x60>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d10c      	bne.n	800f0d2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0bc:	b672      	cpsid	i
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	b662      	cpsie	i
 800f0cc:	623b      	str	r3, [r7, #32]
}
 800f0ce:	bf00      	nop
 800f0d0:	e7fe      	b.n	800f0d0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d102      	bne.n	800f0de <xQueueGenericCreateStatic+0x8a>
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d101      	bne.n	800f0e2 <xQueueGenericCreateStatic+0x8e>
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e000      	b.n	800f0e4 <xQueueGenericCreateStatic+0x90>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10c      	bne.n	800f102 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ec:	b672      	cpsid	i
 800f0ee:	f383 8811 	msr	BASEPRI, r3
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	f3bf 8f4f 	dsb	sy
 800f0fa:	b662      	cpsie	i
 800f0fc:	61fb      	str	r3, [r7, #28]
}
 800f0fe:	bf00      	nop
 800f100:	e7fe      	b.n	800f100 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f102:	2348      	movs	r3, #72	; 0x48
 800f104:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	2b48      	cmp	r3, #72	; 0x48
 800f10a:	d00c      	beq.n	800f126 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f110:	b672      	cpsid	i
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	b662      	cpsie	i
 800f120:	61bb      	str	r3, [r7, #24]
}
 800f122:	bf00      	nop
 800f124:	e7fe      	b.n	800f124 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f126:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00d      	beq.n	800f14e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f134:	2201      	movs	r2, #1
 800f136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f13a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	4613      	mov	r3, r2
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	68b9      	ldr	r1, [r7, #8]
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f000 f847 	bl	800f1dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f150:	4618      	mov	r0, r3
 800f152:	3730      	adds	r7, #48	; 0x30
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b08a      	sub	sp, #40	; 0x28
 800f15c:	af02      	add	r7, sp, #8
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	4613      	mov	r3, r2
 800f164:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d10c      	bne.n	800f186 <xQueueGenericCreate+0x2e>
	__asm volatile
 800f16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f170:	b672      	cpsid	i
 800f172:	f383 8811 	msr	BASEPRI, r3
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	b662      	cpsie	i
 800f180:	613b      	str	r3, [r7, #16]
}
 800f182:	bf00      	nop
 800f184:	e7fe      	b.n	800f184 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d102      	bne.n	800f192 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f18c:	2300      	movs	r3, #0
 800f18e:	61fb      	str	r3, [r7, #28]
 800f190:	e004      	b.n	800f19c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	fb02 f303 	mul.w	r3, r2, r3
 800f19a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	3348      	adds	r3, #72	; 0x48
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f001 fdaf 	bl	8010d04 <pvPortMalloc>
 800f1a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f1a8:	69bb      	ldr	r3, [r7, #24]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d011      	beq.n	800f1d2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	3348      	adds	r3, #72	; 0x48
 800f1b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f1c0:	79fa      	ldrb	r2, [r7, #7]
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	697a      	ldr	r2, [r7, #20]
 800f1ca:	68b9      	ldr	r1, [r7, #8]
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f000 f805 	bl	800f1dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f1d2:	69bb      	ldr	r3, [r7, #24]
	}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3720      	adds	r7, #32
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
 800f1e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d103      	bne.n	800f1f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	69ba      	ldr	r2, [r7, #24]
 800f1f4:	601a      	str	r2, [r3, #0]
 800f1f6:	e002      	b.n	800f1fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f204:	69bb      	ldr	r3, [r7, #24]
 800f206:	68ba      	ldr	r2, [r7, #8]
 800f208:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f20a:	2101      	movs	r1, #1
 800f20c:	69b8      	ldr	r0, [r7, #24]
 800f20e:	f7ff feb7 	bl	800ef80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f212:	bf00      	nop
 800f214:	3710      	adds	r7, #16
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
	...

0800f21c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b08e      	sub	sp, #56	; 0x38
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
 800f228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f22a:	2300      	movs	r3, #0
 800f22c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10c      	bne.n	800f252 <xQueueGenericSend+0x36>
	__asm volatile
 800f238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23c:	b672      	cpsid	i
 800f23e:	f383 8811 	msr	BASEPRI, r3
 800f242:	f3bf 8f6f 	isb	sy
 800f246:	f3bf 8f4f 	dsb	sy
 800f24a:	b662      	cpsie	i
 800f24c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f24e:	bf00      	nop
 800f250:	e7fe      	b.n	800f250 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d103      	bne.n	800f260 <xQueueGenericSend+0x44>
 800f258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d101      	bne.n	800f264 <xQueueGenericSend+0x48>
 800f260:	2301      	movs	r3, #1
 800f262:	e000      	b.n	800f266 <xQueueGenericSend+0x4a>
 800f264:	2300      	movs	r3, #0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10c      	bne.n	800f284 <xQueueGenericSend+0x68>
	__asm volatile
 800f26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26e:	b672      	cpsid	i
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	b662      	cpsie	i
 800f27e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f280:	bf00      	nop
 800f282:	e7fe      	b.n	800f282 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	2b02      	cmp	r3, #2
 800f288:	d103      	bne.n	800f292 <xQueueGenericSend+0x76>
 800f28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d101      	bne.n	800f296 <xQueueGenericSend+0x7a>
 800f292:	2301      	movs	r3, #1
 800f294:	e000      	b.n	800f298 <xQueueGenericSend+0x7c>
 800f296:	2300      	movs	r3, #0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10c      	bne.n	800f2b6 <xQueueGenericSend+0x9a>
	__asm volatile
 800f29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a0:	b672      	cpsid	i
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	b662      	cpsie	i
 800f2b0:	623b      	str	r3, [r7, #32]
}
 800f2b2:	bf00      	nop
 800f2b4:	e7fe      	b.n	800f2b4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2b6:	f001 f9e1 	bl	801067c <xTaskGetSchedulerState>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d102      	bne.n	800f2c6 <xQueueGenericSend+0xaa>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d101      	bne.n	800f2ca <xQueueGenericSend+0xae>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e000      	b.n	800f2cc <xQueueGenericSend+0xb0>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d10c      	bne.n	800f2ea <xQueueGenericSend+0xce>
	__asm volatile
 800f2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d4:	b672      	cpsid	i
 800f2d6:	f383 8811 	msr	BASEPRI, r3
 800f2da:	f3bf 8f6f 	isb	sy
 800f2de:	f3bf 8f4f 	dsb	sy
 800f2e2:	b662      	cpsie	i
 800f2e4:	61fb      	str	r3, [r7, #28]
}
 800f2e6:	bf00      	nop
 800f2e8:	e7fe      	b.n	800f2e8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2ea:	f001 fbdf 	bl	8010aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d302      	bcc.n	800f300 <xQueueGenericSend+0xe4>
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	2b02      	cmp	r3, #2
 800f2fe:	d129      	bne.n	800f354 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f300:	683a      	ldr	r2, [r7, #0]
 800f302:	68b9      	ldr	r1, [r7, #8]
 800f304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f306:	f000 fa9b 	bl	800f840 <prvCopyDataToQueue>
 800f30a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f310:	2b00      	cmp	r3, #0
 800f312:	d010      	beq.n	800f336 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f316:	3324      	adds	r3, #36	; 0x24
 800f318:	4618      	mov	r0, r3
 800f31a:	f000 ffe7 	bl	80102ec <xTaskRemoveFromEventList>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d013      	beq.n	800f34c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f324:	4b3f      	ldr	r3, [pc, #252]	; (800f424 <xQueueGenericSend+0x208>)
 800f326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f32a:	601a      	str	r2, [r3, #0]
 800f32c:	f3bf 8f4f 	dsb	sy
 800f330:	f3bf 8f6f 	isb	sy
 800f334:	e00a      	b.n	800f34c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d007      	beq.n	800f34c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f33c:	4b39      	ldr	r3, [pc, #228]	; (800f424 <xQueueGenericSend+0x208>)
 800f33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f34c:	f001 fbe2 	bl	8010b14 <vPortExitCritical>
				return pdPASS;
 800f350:	2301      	movs	r3, #1
 800f352:	e063      	b.n	800f41c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d103      	bne.n	800f362 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f35a:	f001 fbdb 	bl	8010b14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f35e:	2300      	movs	r3, #0
 800f360:	e05c      	b.n	800f41c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f364:	2b00      	cmp	r3, #0
 800f366:	d106      	bne.n	800f376 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f368:	f107 0314 	add.w	r3, r7, #20
 800f36c:	4618      	mov	r0, r3
 800f36e:	f001 f821 	bl	80103b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f372:	2301      	movs	r3, #1
 800f374:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f376:	f001 fbcd 	bl	8010b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f37a:	f000 fdc7 	bl	800ff0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f37e:	f001 fb95 	bl	8010aac <vPortEnterCritical>
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f388:	b25b      	sxtb	r3, r3
 800f38a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f38e:	d103      	bne.n	800f398 <xQueueGenericSend+0x17c>
 800f390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f392:	2200      	movs	r2, #0
 800f394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f39e:	b25b      	sxtb	r3, r3
 800f3a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3a4:	d103      	bne.n	800f3ae <xQueueGenericSend+0x192>
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3ae:	f001 fbb1 	bl	8010b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3b2:	1d3a      	adds	r2, r7, #4
 800f3b4:	f107 0314 	add.w	r3, r7, #20
 800f3b8:	4611      	mov	r1, r2
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f001 f810 	bl	80103e0 <xTaskCheckForTimeOut>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d124      	bne.n	800f410 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f3c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3c8:	f000 fb32 	bl	800fa30 <prvIsQueueFull>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d018      	beq.n	800f404 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d4:	3310      	adds	r3, #16
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	4611      	mov	r1, r2
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f000 ff60 	bl	80102a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f3e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3e2:	f000 fabd 	bl	800f960 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f3e6:	f000 fd9f 	bl	800ff28 <xTaskResumeAll>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	f47f af7c 	bne.w	800f2ea <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f3f2:	4b0c      	ldr	r3, [pc, #48]	; (800f424 <xQueueGenericSend+0x208>)
 800f3f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3f8:	601a      	str	r2, [r3, #0]
 800f3fa:	f3bf 8f4f 	dsb	sy
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	e772      	b.n	800f2ea <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f406:	f000 faab 	bl	800f960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f40a:	f000 fd8d 	bl	800ff28 <xTaskResumeAll>
 800f40e:	e76c      	b.n	800f2ea <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f412:	f000 faa5 	bl	800f960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f416:	f000 fd87 	bl	800ff28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f41a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3738      	adds	r7, #56	; 0x38
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	e000ed04 	.word	0xe000ed04

0800f428 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08e      	sub	sp, #56	; 0x38
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d10c      	bne.n	800f45a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800f440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f444:	b672      	cpsid	i
 800f446:	f383 8811 	msr	BASEPRI, r3
 800f44a:	f3bf 8f6f 	isb	sy
 800f44e:	f3bf 8f4f 	dsb	sy
 800f452:	b662      	cpsie	i
 800f454:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f456:	bf00      	nop
 800f458:	e7fe      	b.n	800f458 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d103      	bne.n	800f468 <xQueueGenericSendFromISR+0x40>
 800f460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f464:	2b00      	cmp	r3, #0
 800f466:	d101      	bne.n	800f46c <xQueueGenericSendFromISR+0x44>
 800f468:	2301      	movs	r3, #1
 800f46a:	e000      	b.n	800f46e <xQueueGenericSendFromISR+0x46>
 800f46c:	2300      	movs	r3, #0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d10c      	bne.n	800f48c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800f472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f476:	b672      	cpsid	i
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	b662      	cpsie	i
 800f486:	623b      	str	r3, [r7, #32]
}
 800f488:	bf00      	nop
 800f48a:	e7fe      	b.n	800f48a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d103      	bne.n	800f49a <xQueueGenericSendFromISR+0x72>
 800f492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f496:	2b01      	cmp	r3, #1
 800f498:	d101      	bne.n	800f49e <xQueueGenericSendFromISR+0x76>
 800f49a:	2301      	movs	r3, #1
 800f49c:	e000      	b.n	800f4a0 <xQueueGenericSendFromISR+0x78>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d10c      	bne.n	800f4be <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800f4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a8:	b672      	cpsid	i
 800f4aa:	f383 8811 	msr	BASEPRI, r3
 800f4ae:	f3bf 8f6f 	isb	sy
 800f4b2:	f3bf 8f4f 	dsb	sy
 800f4b6:	b662      	cpsie	i
 800f4b8:	61fb      	str	r3, [r7, #28]
}
 800f4ba:	bf00      	nop
 800f4bc:	e7fe      	b.n	800f4bc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4be:	f001 fbdd 	bl	8010c7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f4c2:	f3ef 8211 	mrs	r2, BASEPRI
 800f4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ca:	b672      	cpsid	i
 800f4cc:	f383 8811 	msr	BASEPRI, r3
 800f4d0:	f3bf 8f6f 	isb	sy
 800f4d4:	f3bf 8f4f 	dsb	sy
 800f4d8:	b662      	cpsie	i
 800f4da:	61ba      	str	r2, [r7, #24]
 800f4dc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f4de:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d302      	bcc.n	800f4f4 <xQueueGenericSendFromISR+0xcc>
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	2b02      	cmp	r3, #2
 800f4f2:	d12c      	bne.n	800f54e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4fe:	683a      	ldr	r2, [r7, #0]
 800f500:	68b9      	ldr	r1, [r7, #8]
 800f502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f504:	f000 f99c 	bl	800f840 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f508:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f50c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f510:	d112      	bne.n	800f538 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f516:	2b00      	cmp	r3, #0
 800f518:	d016      	beq.n	800f548 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51c:	3324      	adds	r3, #36	; 0x24
 800f51e:	4618      	mov	r0, r3
 800f520:	f000 fee4 	bl	80102ec <xTaskRemoveFromEventList>
 800f524:	4603      	mov	r3, r0
 800f526:	2b00      	cmp	r3, #0
 800f528:	d00e      	beq.n	800f548 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00b      	beq.n	800f548 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	601a      	str	r2, [r3, #0]
 800f536:	e007      	b.n	800f548 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f538:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f53c:	3301      	adds	r3, #1
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	b25a      	sxtb	r2, r3
 800f542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f548:	2301      	movs	r3, #1
 800f54a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f54c:	e001      	b.n	800f552 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f54e:	2300      	movs	r3, #0
 800f550:	637b      	str	r3, [r7, #52]	; 0x34
 800f552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f554:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f55c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f560:	4618      	mov	r0, r3
 800f562:	3738      	adds	r7, #56	; 0x38
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b08c      	sub	sp, #48	; 0x30
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f574:	2300      	movs	r3, #0
 800f576:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d10c      	bne.n	800f59c <xQueueReceive+0x34>
	__asm volatile
 800f582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f586:	b672      	cpsid	i
 800f588:	f383 8811 	msr	BASEPRI, r3
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	b662      	cpsie	i
 800f596:	623b      	str	r3, [r7, #32]
}
 800f598:	bf00      	nop
 800f59a:	e7fe      	b.n	800f59a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d103      	bne.n	800f5aa <xQueueReceive+0x42>
 800f5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d101      	bne.n	800f5ae <xQueueReceive+0x46>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e000      	b.n	800f5b0 <xQueueReceive+0x48>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10c      	bne.n	800f5ce <xQueueReceive+0x66>
	__asm volatile
 800f5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b8:	b672      	cpsid	i
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	b662      	cpsie	i
 800f5c8:	61fb      	str	r3, [r7, #28]
}
 800f5ca:	bf00      	nop
 800f5cc:	e7fe      	b.n	800f5cc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5ce:	f001 f855 	bl	801067c <xTaskGetSchedulerState>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d102      	bne.n	800f5de <xQueueReceive+0x76>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <xQueueReceive+0x7a>
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e000      	b.n	800f5e4 <xQueueReceive+0x7c>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d10c      	bne.n	800f602 <xQueueReceive+0x9a>
	__asm volatile
 800f5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ec:	b672      	cpsid	i
 800f5ee:	f383 8811 	msr	BASEPRI, r3
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	b662      	cpsie	i
 800f5fc:	61bb      	str	r3, [r7, #24]
}
 800f5fe:	bf00      	nop
 800f600:	e7fe      	b.n	800f600 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f602:	f001 fa53 	bl	8010aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f60a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d01f      	beq.n	800f652 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f612:	68b9      	ldr	r1, [r7, #8]
 800f614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f616:	f000 f97d 	bl	800f914 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	1e5a      	subs	r2, r3, #1
 800f61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f620:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00f      	beq.n	800f64a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62c:	3310      	adds	r3, #16
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fe5c 	bl	80102ec <xTaskRemoveFromEventList>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d007      	beq.n	800f64a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f63a:	4b3d      	ldr	r3, [pc, #244]	; (800f730 <xQueueReceive+0x1c8>)
 800f63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f640:	601a      	str	r2, [r3, #0]
 800f642:	f3bf 8f4f 	dsb	sy
 800f646:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f64a:	f001 fa63 	bl	8010b14 <vPortExitCritical>
				return pdPASS;
 800f64e:	2301      	movs	r3, #1
 800f650:	e069      	b.n	800f726 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d103      	bne.n	800f660 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f658:	f001 fa5c 	bl	8010b14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f65c:	2300      	movs	r3, #0
 800f65e:	e062      	b.n	800f726 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f662:	2b00      	cmp	r3, #0
 800f664:	d106      	bne.n	800f674 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f666:	f107 0310 	add.w	r3, r7, #16
 800f66a:	4618      	mov	r0, r3
 800f66c:	f000 fea2 	bl	80103b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f670:	2301      	movs	r3, #1
 800f672:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f674:	f001 fa4e 	bl	8010b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f678:	f000 fc48 	bl	800ff0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f67c:	f001 fa16 	bl	8010aac <vPortEnterCritical>
 800f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f686:	b25b      	sxtb	r3, r3
 800f688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f68c:	d103      	bne.n	800f696 <xQueueReceive+0x12e>
 800f68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f690:	2200      	movs	r2, #0
 800f692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f69c:	b25b      	sxtb	r3, r3
 800f69e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6a2:	d103      	bne.n	800f6ac <xQueueReceive+0x144>
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6ac:	f001 fa32 	bl	8010b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6b0:	1d3a      	adds	r2, r7, #4
 800f6b2:	f107 0310 	add.w	r3, r7, #16
 800f6b6:	4611      	mov	r1, r2
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f000 fe91 	bl	80103e0 <xTaskCheckForTimeOut>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d123      	bne.n	800f70c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6c6:	f000 f99d 	bl	800fa04 <prvIsQueueEmpty>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d017      	beq.n	800f700 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d2:	3324      	adds	r3, #36	; 0x24
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	4611      	mov	r1, r2
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 fde1 	bl	80102a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6e0:	f000 f93e 	bl	800f960 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f6e4:	f000 fc20 	bl	800ff28 <xTaskResumeAll>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d189      	bne.n	800f602 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f6ee:	4b10      	ldr	r3, [pc, #64]	; (800f730 <xQueueReceive+0x1c8>)
 800f6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6f4:	601a      	str	r2, [r3, #0]
 800f6f6:	f3bf 8f4f 	dsb	sy
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	e780      	b.n	800f602 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f702:	f000 f92d 	bl	800f960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f706:	f000 fc0f 	bl	800ff28 <xTaskResumeAll>
 800f70a:	e77a      	b.n	800f602 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f70c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f70e:	f000 f927 	bl	800f960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f712:	f000 fc09 	bl	800ff28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f718:	f000 f974 	bl	800fa04 <prvIsQueueEmpty>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f43f af6f 	beq.w	800f602 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f726:	4618      	mov	r0, r3
 800f728:	3730      	adds	r7, #48	; 0x30
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	e000ed04 	.word	0xe000ed04

0800f734 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b08e      	sub	sp, #56	; 0x38
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	2b00      	cmp	r3, #0
 800f748:	d10c      	bne.n	800f764 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800f74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74e:	b672      	cpsid	i
 800f750:	f383 8811 	msr	BASEPRI, r3
 800f754:	f3bf 8f6f 	isb	sy
 800f758:	f3bf 8f4f 	dsb	sy
 800f75c:	b662      	cpsie	i
 800f75e:	623b      	str	r3, [r7, #32]
}
 800f760:	bf00      	nop
 800f762:	e7fe      	b.n	800f762 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d103      	bne.n	800f772 <xQueueReceiveFromISR+0x3e>
 800f76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d101      	bne.n	800f776 <xQueueReceiveFromISR+0x42>
 800f772:	2301      	movs	r3, #1
 800f774:	e000      	b.n	800f778 <xQueueReceiveFromISR+0x44>
 800f776:	2300      	movs	r3, #0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d10c      	bne.n	800f796 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800f77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f780:	b672      	cpsid	i
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	b662      	cpsie	i
 800f790:	61fb      	str	r3, [r7, #28]
}
 800f792:	bf00      	nop
 800f794:	e7fe      	b.n	800f794 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f796:	f001 fa71 	bl	8010c7c <vPortValidateInterruptPriority>
	__asm volatile
 800f79a:	f3ef 8211 	mrs	r2, BASEPRI
 800f79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a2:	b672      	cpsid	i
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	b662      	cpsie	i
 800f7b2:	61ba      	str	r2, [r7, #24]
 800f7b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f7b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d02f      	beq.n	800f826 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f7d0:	68b9      	ldr	r1, [r7, #8]
 800f7d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7d4:	f000 f89e 	bl	800f914 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7da:	1e5a      	subs	r2, r3, #1
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f7e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7e8:	d112      	bne.n	800f810 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d016      	beq.n	800f820 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f4:	3310      	adds	r3, #16
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f000 fd78 	bl	80102ec <xTaskRemoveFromEventList>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00e      	beq.n	800f820 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d00b      	beq.n	800f820 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	601a      	str	r2, [r3, #0]
 800f80e:	e007      	b.n	800f820 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f814:	3301      	adds	r3, #1
 800f816:	b2db      	uxtb	r3, r3
 800f818:	b25a      	sxtb	r2, r3
 800f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f820:	2301      	movs	r3, #1
 800f822:	637b      	str	r3, [r7, #52]	; 0x34
 800f824:	e001      	b.n	800f82a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800f826:	2300      	movs	r3, #0
 800f828:	637b      	str	r3, [r7, #52]	; 0x34
 800f82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	f383 8811 	msr	BASEPRI, r3
}
 800f834:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3738      	adds	r7, #56	; 0x38
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b086      	sub	sp, #24
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f84c:	2300      	movs	r3, #0
 800f84e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f854:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10d      	bne.n	800f87a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d14d      	bne.n	800f902 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f000 ff24 	bl	80106b8 <xTaskPriorityDisinherit>
 800f870:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2200      	movs	r2, #0
 800f876:	609a      	str	r2, [r3, #8]
 800f878:	e043      	b.n	800f902 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d119      	bne.n	800f8b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	6858      	ldr	r0, [r3, #4]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f888:	461a      	mov	r2, r3
 800f88a:	68b9      	ldr	r1, [r7, #8]
 800f88c:	f002 fbb4 	bl	8011ff8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	685a      	ldr	r2, [r3, #4]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f898:	441a      	add	r2, r3
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	685a      	ldr	r2, [r3, #4]
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	689b      	ldr	r3, [r3, #8]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d32b      	bcc.n	800f902 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	605a      	str	r2, [r3, #4]
 800f8b2:	e026      	b.n	800f902 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	68d8      	ldr	r0, [r3, #12]
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8bc:	461a      	mov	r2, r3
 800f8be:	68b9      	ldr	r1, [r7, #8]
 800f8c0:	f002 fb9a 	bl	8011ff8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	68da      	ldr	r2, [r3, #12]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8cc:	425b      	negs	r3, r3
 800f8ce:	441a      	add	r2, r3
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	68da      	ldr	r2, [r3, #12]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d207      	bcs.n	800f8f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	689a      	ldr	r2, [r3, #8]
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8e8:	425b      	negs	r3, r3
 800f8ea:	441a      	add	r2, r3
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	d105      	bne.n	800f902 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d002      	beq.n	800f902 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	3b01      	subs	r3, #1
 800f900:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	1c5a      	adds	r2, r3, #1
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f90a:	697b      	ldr	r3, [r7, #20]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3718      	adds	r7, #24
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f922:	2b00      	cmp	r3, #0
 800f924:	d018      	beq.n	800f958 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	68da      	ldr	r2, [r3, #12]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f92e:	441a      	add	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	68da      	ldr	r2, [r3, #12]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d303      	bcc.n	800f948 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	68d9      	ldr	r1, [r3, #12]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f950:	461a      	mov	r2, r3
 800f952:	6838      	ldr	r0, [r7, #0]
 800f954:	f002 fb50 	bl	8011ff8 <memcpy>
	}
}
 800f958:	bf00      	nop
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f968:	f001 f8a0 	bl	8010aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f972:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f974:	e011      	b.n	800f99a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d012      	beq.n	800f9a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	3324      	adds	r3, #36	; 0x24
 800f982:	4618      	mov	r0, r3
 800f984:	f000 fcb2 	bl	80102ec <xTaskRemoveFromEventList>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d001      	beq.n	800f992 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f98e:	f000 fd8d 	bl	80104ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f992:	7bfb      	ldrb	r3, [r7, #15]
 800f994:	3b01      	subs	r3, #1
 800f996:	b2db      	uxtb	r3, r3
 800f998:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	dce9      	bgt.n	800f976 <prvUnlockQueue+0x16>
 800f9a2:	e000      	b.n	800f9a6 <prvUnlockQueue+0x46>
					break;
 800f9a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	22ff      	movs	r2, #255	; 0xff
 800f9aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f9ae:	f001 f8b1 	bl	8010b14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f9b2:	f001 f87b 	bl	8010aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9be:	e011      	b.n	800f9e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	691b      	ldr	r3, [r3, #16]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d012      	beq.n	800f9ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3310      	adds	r3, #16
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f000 fc8d 	bl	80102ec <xTaskRemoveFromEventList>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d001      	beq.n	800f9dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f9d8:	f000 fd68 	bl	80104ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f9dc:	7bbb      	ldrb	r3, [r7, #14]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	dce9      	bgt.n	800f9c0 <prvUnlockQueue+0x60>
 800f9ec:	e000      	b.n	800f9f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f9ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	22ff      	movs	r2, #255	; 0xff
 800f9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f9f8:	f001 f88c 	bl	8010b14 <vPortExitCritical>
}
 800f9fc:	bf00      	nop
 800f9fe:	3710      	adds	r7, #16
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa0c:	f001 f84e 	bl	8010aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d102      	bne.n	800fa1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa18:	2301      	movs	r3, #1
 800fa1a:	60fb      	str	r3, [r7, #12]
 800fa1c:	e001      	b.n	800fa22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa22:	f001 f877 	bl	8010b14 <vPortExitCritical>

	return xReturn;
 800fa26:	68fb      	ldr	r3, [r7, #12]
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3710      	adds	r7, #16
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa38:	f001 f838 	bl	8010aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d102      	bne.n	800fa4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	60fb      	str	r3, [r7, #12]
 800fa4c:	e001      	b.n	800fa52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa52:	f001 f85f 	bl	8010b14 <vPortExitCritical>

	return xReturn;
 800fa56:	68fb      	ldr	r3, [r7, #12]
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b08e      	sub	sp, #56	; 0x38
 800fa64:	af04      	add	r7, sp, #16
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	607a      	str	r2, [r7, #4]
 800fa6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d10c      	bne.n	800fa8e <xTaskCreateStatic+0x2e>
	__asm volatile
 800fa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa78:	b672      	cpsid	i
 800fa7a:	f383 8811 	msr	BASEPRI, r3
 800fa7e:	f3bf 8f6f 	isb	sy
 800fa82:	f3bf 8f4f 	dsb	sy
 800fa86:	b662      	cpsie	i
 800fa88:	623b      	str	r3, [r7, #32]
}
 800fa8a:	bf00      	nop
 800fa8c:	e7fe      	b.n	800fa8c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800fa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d10c      	bne.n	800faae <xTaskCreateStatic+0x4e>
	__asm volatile
 800fa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa98:	b672      	cpsid	i
 800fa9a:	f383 8811 	msr	BASEPRI, r3
 800fa9e:	f3bf 8f6f 	isb	sy
 800faa2:	f3bf 8f4f 	dsb	sy
 800faa6:	b662      	cpsie	i
 800faa8:	61fb      	str	r3, [r7, #28]
}
 800faaa:	bf00      	nop
 800faac:	e7fe      	b.n	800faac <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800faae:	23a0      	movs	r3, #160	; 0xa0
 800fab0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	2ba0      	cmp	r3, #160	; 0xa0
 800fab6:	d00c      	beq.n	800fad2 <xTaskCreateStatic+0x72>
	__asm volatile
 800fab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fabc:	b672      	cpsid	i
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	b662      	cpsie	i
 800facc:	61bb      	str	r3, [r7, #24]
}
 800face:	bf00      	nop
 800fad0:	e7fe      	b.n	800fad0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fad2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d01e      	beq.n	800fb18 <xTaskCreateStatic+0xb8>
 800fada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d01b      	beq.n	800fb18 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fae8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800faea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faec:	2202      	movs	r2, #2
 800faee:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800faf2:	2300      	movs	r3, #0
 800faf4:	9303      	str	r3, [sp, #12]
 800faf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf8:	9302      	str	r3, [sp, #8]
 800fafa:	f107 0314 	add.w	r3, r7, #20
 800fafe:	9301      	str	r3, [sp, #4]
 800fb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	68b9      	ldr	r1, [r7, #8]
 800fb0a:	68f8      	ldr	r0, [r7, #12]
 800fb0c:	f000 f850 	bl	800fbb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb12:	f000 f8ed 	bl	800fcf0 <prvAddNewTaskToReadyList>
 800fb16:	e001      	b.n	800fb1c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fb1c:	697b      	ldr	r3, [r7, #20]
	}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3728      	adds	r7, #40	; 0x28
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b08c      	sub	sp, #48	; 0x30
 800fb2a:	af04      	add	r7, sp, #16
 800fb2c:	60f8      	str	r0, [r7, #12]
 800fb2e:	60b9      	str	r1, [r7, #8]
 800fb30:	603b      	str	r3, [r7, #0]
 800fb32:	4613      	mov	r3, r2
 800fb34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fb36:	88fb      	ldrh	r3, [r7, #6]
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f001 f8e2 	bl	8010d04 <pvPortMalloc>
 800fb40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00e      	beq.n	800fb66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fb48:	20a0      	movs	r0, #160	; 0xa0
 800fb4a:	f001 f8db 	bl	8010d04 <pvPortMalloc>
 800fb4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d003      	beq.n	800fb5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	697a      	ldr	r2, [r7, #20]
 800fb5a:	631a      	str	r2, [r3, #48]	; 0x30
 800fb5c:	e005      	b.n	800fb6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fb5e:	6978      	ldr	r0, [r7, #20]
 800fb60:	f001 f99a 	bl	8010e98 <vPortFree>
 800fb64:	e001      	b.n	800fb6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fb66:	2300      	movs	r3, #0
 800fb68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d017      	beq.n	800fba0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb78:	88fa      	ldrh	r2, [r7, #6]
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	9303      	str	r3, [sp, #12]
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	9302      	str	r3, [sp, #8]
 800fb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb84:	9301      	str	r3, [sp, #4]
 800fb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	68b9      	ldr	r1, [r7, #8]
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f000 f80e 	bl	800fbb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb94:	69f8      	ldr	r0, [r7, #28]
 800fb96:	f000 f8ab 	bl	800fcf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	61bb      	str	r3, [r7, #24]
 800fb9e:	e002      	b.n	800fba6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fba4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fba6:	69bb      	ldr	r3, [r7, #24]
	}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3720      	adds	r7, #32
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b088      	sub	sp, #32
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
 800fbbc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbc2:	6879      	ldr	r1, [r7, #4]
 800fbc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fbc8:	440b      	add	r3, r1
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4413      	add	r3, r2
 800fbce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	f023 0307 	bic.w	r3, r3, #7
 800fbd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fbd8:	69bb      	ldr	r3, [r7, #24]
 800fbda:	f003 0307 	and.w	r3, r3, #7
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00c      	beq.n	800fbfc <prvInitialiseNewTask+0x4c>
	__asm volatile
 800fbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe6:	b672      	cpsid	i
 800fbe8:	f383 8811 	msr	BASEPRI, r3
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	b662      	cpsie	i
 800fbf6:	617b      	str	r3, [r7, #20]
}
 800fbf8:	bf00      	nop
 800fbfa:	e7fe      	b.n	800fbfa <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d01f      	beq.n	800fc42 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc02:	2300      	movs	r3, #0
 800fc04:	61fb      	str	r3, [r7, #28]
 800fc06:	e012      	b.n	800fc2e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fc08:	68ba      	ldr	r2, [r7, #8]
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	7819      	ldrb	r1, [r3, #0]
 800fc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	4413      	add	r3, r2
 800fc16:	3334      	adds	r3, #52	; 0x34
 800fc18:	460a      	mov	r2, r1
 800fc1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	4413      	add	r3, r2
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d006      	beq.n	800fc36 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	61fb      	str	r3, [r7, #28]
 800fc2e:	69fb      	ldr	r3, [r7, #28]
 800fc30:	2b0f      	cmp	r3, #15
 800fc32:	d9e9      	bls.n	800fc08 <prvInitialiseNewTask+0x58>
 800fc34:	e000      	b.n	800fc38 <prvInitialiseNewTask+0x88>
			{
				break;
 800fc36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fc40:	e003      	b.n	800fc4a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4c:	2b06      	cmp	r3, #6
 800fc4e:	d901      	bls.n	800fc54 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fc50:	2306      	movs	r3, #6
 800fc52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc62:	2200      	movs	r2, #0
 800fc64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc68:	3304      	adds	r3, #4
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7ff f8f4 	bl	800ee58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc72:	3318      	adds	r3, #24
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7ff f8ef 	bl	800ee58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc82:	f1c3 0207 	rsb	r2, r3, #7
 800fc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc92:	2200      	movs	r2, #0
 800fc94:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca2:	334c      	adds	r3, #76	; 0x4c
 800fca4:	224c      	movs	r2, #76	; 0x4c
 800fca6:	2100      	movs	r1, #0
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f002 f91b 	bl	8011ee4 <memset>
 800fcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb0:	4a0c      	ldr	r2, [pc, #48]	; (800fce4 <prvInitialiseNewTask+0x134>)
 800fcb2:	651a      	str	r2, [r3, #80]	; 0x50
 800fcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb6:	4a0c      	ldr	r2, [pc, #48]	; (800fce8 <prvInitialiseNewTask+0x138>)
 800fcb8:	655a      	str	r2, [r3, #84]	; 0x54
 800fcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbc:	4a0b      	ldr	r2, [pc, #44]	; (800fcec <prvInitialiseNewTask+0x13c>)
 800fcbe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fcc0:	683a      	ldr	r2, [r7, #0]
 800fcc2:	68f9      	ldr	r1, [r7, #12]
 800fcc4:	69b8      	ldr	r0, [r7, #24]
 800fcc6:	f000 fde7 	bl	8010898 <pxPortInitialiseStack>
 800fcca:	4602      	mov	r2, r0
 800fccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d002      	beq.n	800fcdc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcdc:	bf00      	nop
 800fcde:	3720      	adds	r7, #32
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	20006a5c 	.word	0x20006a5c
 800fce8:	20006ac4 	.word	0x20006ac4
 800fcec:	20006b2c 	.word	0x20006b2c

0800fcf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fcf8:	f000 fed8 	bl	8010aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fcfc:	4b2a      	ldr	r3, [pc, #168]	; (800fda8 <prvAddNewTaskToReadyList+0xb8>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	3301      	adds	r3, #1
 800fd02:	4a29      	ldr	r2, [pc, #164]	; (800fda8 <prvAddNewTaskToReadyList+0xb8>)
 800fd04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fd06:	4b29      	ldr	r3, [pc, #164]	; (800fdac <prvAddNewTaskToReadyList+0xbc>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d109      	bne.n	800fd22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fd0e:	4a27      	ldr	r2, [pc, #156]	; (800fdac <prvAddNewTaskToReadyList+0xbc>)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fd14:	4b24      	ldr	r3, [pc, #144]	; (800fda8 <prvAddNewTaskToReadyList+0xb8>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d110      	bne.n	800fd3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fd1c:	f000 fbea 	bl	80104f4 <prvInitialiseTaskLists>
 800fd20:	e00d      	b.n	800fd3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fd22:	4b23      	ldr	r3, [pc, #140]	; (800fdb0 <prvAddNewTaskToReadyList+0xc0>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d109      	bne.n	800fd3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fd2a:	4b20      	ldr	r3, [pc, #128]	; (800fdac <prvAddNewTaskToReadyList+0xbc>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d802      	bhi.n	800fd3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fd38:	4a1c      	ldr	r2, [pc, #112]	; (800fdac <prvAddNewTaskToReadyList+0xbc>)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fd3e:	4b1d      	ldr	r3, [pc, #116]	; (800fdb4 <prvAddNewTaskToReadyList+0xc4>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	3301      	adds	r3, #1
 800fd44:	4a1b      	ldr	r2, [pc, #108]	; (800fdb4 <prvAddNewTaskToReadyList+0xc4>)
 800fd46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	409a      	lsls	r2, r3
 800fd50:	4b19      	ldr	r3, [pc, #100]	; (800fdb8 <prvAddNewTaskToReadyList+0xc8>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4313      	orrs	r3, r2
 800fd56:	4a18      	ldr	r2, [pc, #96]	; (800fdb8 <prvAddNewTaskToReadyList+0xc8>)
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd5e:	4613      	mov	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4413      	add	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	4a15      	ldr	r2, [pc, #84]	; (800fdbc <prvAddNewTaskToReadyList+0xcc>)
 800fd68:	441a      	add	r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	3304      	adds	r3, #4
 800fd6e:	4619      	mov	r1, r3
 800fd70:	4610      	mov	r0, r2
 800fd72:	f7ff f87e 	bl	800ee72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fd76:	f000 fecd 	bl	8010b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fd7a:	4b0d      	ldr	r3, [pc, #52]	; (800fdb0 <prvAddNewTaskToReadyList+0xc0>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00e      	beq.n	800fda0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fd82:	4b0a      	ldr	r3, [pc, #40]	; (800fdac <prvAddNewTaskToReadyList+0xbc>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d207      	bcs.n	800fda0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fd90:	4b0b      	ldr	r3, [pc, #44]	; (800fdc0 <prvAddNewTaskToReadyList+0xd0>)
 800fd92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	f3bf 8f4f 	dsb	sy
 800fd9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fda0:	bf00      	nop
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	20002e10 	.word	0x20002e10
 800fdac:	20002d10 	.word	0x20002d10
 800fdb0:	20002e1c 	.word	0x20002e1c
 800fdb4:	20002e2c 	.word	0x20002e2c
 800fdb8:	20002e18 	.word	0x20002e18
 800fdbc:	20002d14 	.word	0x20002d14
 800fdc0:	e000ed04 	.word	0xe000ed04

0800fdc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d019      	beq.n	800fe0a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fdd6:	4b14      	ldr	r3, [pc, #80]	; (800fe28 <vTaskDelay+0x64>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00c      	beq.n	800fdf8 <vTaskDelay+0x34>
	__asm volatile
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	b672      	cpsid	i
 800fde4:	f383 8811 	msr	BASEPRI, r3
 800fde8:	f3bf 8f6f 	isb	sy
 800fdec:	f3bf 8f4f 	dsb	sy
 800fdf0:	b662      	cpsie	i
 800fdf2:	60bb      	str	r3, [r7, #8]
}
 800fdf4:	bf00      	nop
 800fdf6:	e7fe      	b.n	800fdf6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800fdf8:	f000 f888 	bl	800ff0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 fce4 	bl	80107cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fe04:	f000 f890 	bl	800ff28 <xTaskResumeAll>
 800fe08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d107      	bne.n	800fe20 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800fe10:	4b06      	ldr	r3, [pc, #24]	; (800fe2c <vTaskDelay+0x68>)
 800fe12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe16:	601a      	str	r2, [r3, #0]
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe20:	bf00      	nop
 800fe22:	3710      	adds	r7, #16
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	20002e38 	.word	0x20002e38
 800fe2c:	e000ed04 	.word	0xe000ed04

0800fe30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b08a      	sub	sp, #40	; 0x28
 800fe34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fe36:	2300      	movs	r3, #0
 800fe38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fe3e:	463a      	mov	r2, r7
 800fe40:	1d39      	adds	r1, r7, #4
 800fe42:	f107 0308 	add.w	r3, r7, #8
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7f1 f8aa 	bl	8000fa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fe4c:	6839      	ldr	r1, [r7, #0]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	68ba      	ldr	r2, [r7, #8]
 800fe52:	9202      	str	r2, [sp, #8]
 800fe54:	9301      	str	r3, [sp, #4]
 800fe56:	2300      	movs	r3, #0
 800fe58:	9300      	str	r3, [sp, #0]
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	460a      	mov	r2, r1
 800fe5e:	4923      	ldr	r1, [pc, #140]	; (800feec <vTaskStartScheduler+0xbc>)
 800fe60:	4823      	ldr	r0, [pc, #140]	; (800fef0 <vTaskStartScheduler+0xc0>)
 800fe62:	f7ff fdfd 	bl	800fa60 <xTaskCreateStatic>
 800fe66:	4603      	mov	r3, r0
 800fe68:	4a22      	ldr	r2, [pc, #136]	; (800fef4 <vTaskStartScheduler+0xc4>)
 800fe6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fe6c:	4b21      	ldr	r3, [pc, #132]	; (800fef4 <vTaskStartScheduler+0xc4>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d002      	beq.n	800fe7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fe74:	2301      	movs	r3, #1
 800fe76:	617b      	str	r3, [r7, #20]
 800fe78:	e001      	b.n	800fe7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d11d      	bne.n	800fec0 <vTaskStartScheduler+0x90>
	__asm volatile
 800fe84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe88:	b672      	cpsid	i
 800fe8a:	f383 8811 	msr	BASEPRI, r3
 800fe8e:	f3bf 8f6f 	isb	sy
 800fe92:	f3bf 8f4f 	dsb	sy
 800fe96:	b662      	cpsie	i
 800fe98:	613b      	str	r3, [r7, #16]
}
 800fe9a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe9c:	4b16      	ldr	r3, [pc, #88]	; (800fef8 <vTaskStartScheduler+0xc8>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	334c      	adds	r3, #76	; 0x4c
 800fea2:	4a16      	ldr	r2, [pc, #88]	; (800fefc <vTaskStartScheduler+0xcc>)
 800fea4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fea6:	4b16      	ldr	r3, [pc, #88]	; (800ff00 <vTaskStartScheduler+0xd0>)
 800fea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800feac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800feae:	4b15      	ldr	r3, [pc, #84]	; (800ff04 <vTaskStartScheduler+0xd4>)
 800feb0:	2201      	movs	r2, #1
 800feb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800feb4:	4b14      	ldr	r3, [pc, #80]	; (800ff08 <vTaskStartScheduler+0xd8>)
 800feb6:	2200      	movs	r2, #0
 800feb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800feba:	f000 fd79 	bl	80109b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800febe:	e010      	b.n	800fee2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fec6:	d10c      	bne.n	800fee2 <vTaskStartScheduler+0xb2>
	__asm volatile
 800fec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fecc:	b672      	cpsid	i
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	b662      	cpsie	i
 800fedc:	60fb      	str	r3, [r7, #12]
}
 800fede:	bf00      	nop
 800fee0:	e7fe      	b.n	800fee0 <vTaskStartScheduler+0xb0>
}
 800fee2:	bf00      	nop
 800fee4:	3718      	adds	r7, #24
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	08012eac 	.word	0x08012eac
 800fef0:	080104c5 	.word	0x080104c5
 800fef4:	20002e34 	.word	0x20002e34
 800fef8:	20002d10 	.word	0x20002d10
 800fefc:	200000fc 	.word	0x200000fc
 800ff00:	20002e30 	.word	0x20002e30
 800ff04:	20002e1c 	.word	0x20002e1c
 800ff08:	20002e14 	.word	0x20002e14

0800ff0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ff10:	4b04      	ldr	r3, [pc, #16]	; (800ff24 <vTaskSuspendAll+0x18>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	3301      	adds	r3, #1
 800ff16:	4a03      	ldr	r2, [pc, #12]	; (800ff24 <vTaskSuspendAll+0x18>)
 800ff18:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ff1a:	bf00      	nop
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	20002e38 	.word	0x20002e38

0800ff28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ff32:	2300      	movs	r3, #0
 800ff34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ff36:	4b42      	ldr	r3, [pc, #264]	; (8010040 <xTaskResumeAll+0x118>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d10c      	bne.n	800ff58 <xTaskResumeAll+0x30>
	__asm volatile
 800ff3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff42:	b672      	cpsid	i
 800ff44:	f383 8811 	msr	BASEPRI, r3
 800ff48:	f3bf 8f6f 	isb	sy
 800ff4c:	f3bf 8f4f 	dsb	sy
 800ff50:	b662      	cpsie	i
 800ff52:	603b      	str	r3, [r7, #0]
}
 800ff54:	bf00      	nop
 800ff56:	e7fe      	b.n	800ff56 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ff58:	f000 fda8 	bl	8010aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ff5c:	4b38      	ldr	r3, [pc, #224]	; (8010040 <xTaskResumeAll+0x118>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	3b01      	subs	r3, #1
 800ff62:	4a37      	ldr	r2, [pc, #220]	; (8010040 <xTaskResumeAll+0x118>)
 800ff64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff66:	4b36      	ldr	r3, [pc, #216]	; (8010040 <xTaskResumeAll+0x118>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d161      	bne.n	8010032 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ff6e:	4b35      	ldr	r3, [pc, #212]	; (8010044 <xTaskResumeAll+0x11c>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d05d      	beq.n	8010032 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff76:	e02e      	b.n	800ffd6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff78:	4b33      	ldr	r3, [pc, #204]	; (8010048 <xTaskResumeAll+0x120>)
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	3318      	adds	r3, #24
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fe ffd1 	bl	800ef2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	3304      	adds	r3, #4
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fe ffcc 	bl	800ef2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff98:	2201      	movs	r2, #1
 800ff9a:	409a      	lsls	r2, r3
 800ff9c:	4b2b      	ldr	r3, [pc, #172]	; (801004c <xTaskResumeAll+0x124>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	4a2a      	ldr	r2, [pc, #168]	; (801004c <xTaskResumeAll+0x124>)
 800ffa4:	6013      	str	r3, [r2, #0]
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffaa:	4613      	mov	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	4a27      	ldr	r2, [pc, #156]	; (8010050 <xTaskResumeAll+0x128>)
 800ffb4:	441a      	add	r2, r3
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	3304      	adds	r3, #4
 800ffba:	4619      	mov	r1, r3
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	f7fe ff58 	bl	800ee72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc6:	4b23      	ldr	r3, [pc, #140]	; (8010054 <xTaskResumeAll+0x12c>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d302      	bcc.n	800ffd6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ffd0:	4b21      	ldr	r3, [pc, #132]	; (8010058 <xTaskResumeAll+0x130>)
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ffd6:	4b1c      	ldr	r3, [pc, #112]	; (8010048 <xTaskResumeAll+0x120>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d1cc      	bne.n	800ff78 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d001      	beq.n	800ffe8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ffe4:	f000 fb2a 	bl	801063c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ffe8:	4b1c      	ldr	r3, [pc, #112]	; (801005c <xTaskResumeAll+0x134>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d010      	beq.n	8010016 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fff4:	f000 f836 	bl	8010064 <xTaskIncrementTick>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d002      	beq.n	8010004 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fffe:	4b16      	ldr	r3, [pc, #88]	; (8010058 <xTaskResumeAll+0x130>)
 8010000:	2201      	movs	r2, #1
 8010002:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	3b01      	subs	r3, #1
 8010008:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d1f1      	bne.n	800fff4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8010010:	4b12      	ldr	r3, [pc, #72]	; (801005c <xTaskResumeAll+0x134>)
 8010012:	2200      	movs	r2, #0
 8010014:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010016:	4b10      	ldr	r3, [pc, #64]	; (8010058 <xTaskResumeAll+0x130>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d009      	beq.n	8010032 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801001e:	2301      	movs	r3, #1
 8010020:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010022:	4b0f      	ldr	r3, [pc, #60]	; (8010060 <xTaskResumeAll+0x138>)
 8010024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010028:	601a      	str	r2, [r3, #0]
 801002a:	f3bf 8f4f 	dsb	sy
 801002e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010032:	f000 fd6f 	bl	8010b14 <vPortExitCritical>

	return xAlreadyYielded;
 8010036:	68bb      	ldr	r3, [r7, #8]
}
 8010038:	4618      	mov	r0, r3
 801003a:	3710      	adds	r7, #16
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	20002e38 	.word	0x20002e38
 8010044:	20002e10 	.word	0x20002e10
 8010048:	20002dd0 	.word	0x20002dd0
 801004c:	20002e18 	.word	0x20002e18
 8010050:	20002d14 	.word	0x20002d14
 8010054:	20002d10 	.word	0x20002d10
 8010058:	20002e24 	.word	0x20002e24
 801005c:	20002e20 	.word	0x20002e20
 8010060:	e000ed04 	.word	0xe000ed04

08010064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801006a:	2300      	movs	r3, #0
 801006c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801006e:	4b4f      	ldr	r3, [pc, #316]	; (80101ac <xTaskIncrementTick+0x148>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	f040 808a 	bne.w	801018c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010078:	4b4d      	ldr	r3, [pc, #308]	; (80101b0 <xTaskIncrementTick+0x14c>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	3301      	adds	r3, #1
 801007e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010080:	4a4b      	ldr	r2, [pc, #300]	; (80101b0 <xTaskIncrementTick+0x14c>)
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d122      	bne.n	80100d2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801008c:	4b49      	ldr	r3, [pc, #292]	; (80101b4 <xTaskIncrementTick+0x150>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00c      	beq.n	80100b0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8010096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009a:	b672      	cpsid	i
 801009c:	f383 8811 	msr	BASEPRI, r3
 80100a0:	f3bf 8f6f 	isb	sy
 80100a4:	f3bf 8f4f 	dsb	sy
 80100a8:	b662      	cpsie	i
 80100aa:	603b      	str	r3, [r7, #0]
}
 80100ac:	bf00      	nop
 80100ae:	e7fe      	b.n	80100ae <xTaskIncrementTick+0x4a>
 80100b0:	4b40      	ldr	r3, [pc, #256]	; (80101b4 <xTaskIncrementTick+0x150>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	60fb      	str	r3, [r7, #12]
 80100b6:	4b40      	ldr	r3, [pc, #256]	; (80101b8 <xTaskIncrementTick+0x154>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4a3e      	ldr	r2, [pc, #248]	; (80101b4 <xTaskIncrementTick+0x150>)
 80100bc:	6013      	str	r3, [r2, #0]
 80100be:	4a3e      	ldr	r2, [pc, #248]	; (80101b8 <xTaskIncrementTick+0x154>)
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	6013      	str	r3, [r2, #0]
 80100c4:	4b3d      	ldr	r3, [pc, #244]	; (80101bc <xTaskIncrementTick+0x158>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	3301      	adds	r3, #1
 80100ca:	4a3c      	ldr	r2, [pc, #240]	; (80101bc <xTaskIncrementTick+0x158>)
 80100cc:	6013      	str	r3, [r2, #0]
 80100ce:	f000 fab5 	bl	801063c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80100d2:	4b3b      	ldr	r3, [pc, #236]	; (80101c0 <xTaskIncrementTick+0x15c>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	693a      	ldr	r2, [r7, #16]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d348      	bcc.n	801016e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100dc:	4b35      	ldr	r3, [pc, #212]	; (80101b4 <xTaskIncrementTick+0x150>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d104      	bne.n	80100f0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100e6:	4b36      	ldr	r3, [pc, #216]	; (80101c0 <xTaskIncrementTick+0x15c>)
 80100e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100ec:	601a      	str	r2, [r3, #0]
					break;
 80100ee:	e03e      	b.n	801016e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100f0:	4b30      	ldr	r3, [pc, #192]	; (80101b4 <xTaskIncrementTick+0x150>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010100:	693a      	ldr	r2, [r7, #16]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	429a      	cmp	r2, r3
 8010106:	d203      	bcs.n	8010110 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010108:	4a2d      	ldr	r2, [pc, #180]	; (80101c0 <xTaskIncrementTick+0x15c>)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801010e:	e02e      	b.n	801016e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	3304      	adds	r3, #4
 8010114:	4618      	mov	r0, r3
 8010116:	f7fe ff09 	bl	800ef2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801011e:	2b00      	cmp	r3, #0
 8010120:	d004      	beq.n	801012c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	3318      	adds	r3, #24
 8010126:	4618      	mov	r0, r3
 8010128:	f7fe ff00 	bl	800ef2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010130:	2201      	movs	r2, #1
 8010132:	409a      	lsls	r2, r3
 8010134:	4b23      	ldr	r3, [pc, #140]	; (80101c4 <xTaskIncrementTick+0x160>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4313      	orrs	r3, r2
 801013a:	4a22      	ldr	r2, [pc, #136]	; (80101c4 <xTaskIncrementTick+0x160>)
 801013c:	6013      	str	r3, [r2, #0]
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010142:	4613      	mov	r3, r2
 8010144:	009b      	lsls	r3, r3, #2
 8010146:	4413      	add	r3, r2
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4a1f      	ldr	r2, [pc, #124]	; (80101c8 <xTaskIncrementTick+0x164>)
 801014c:	441a      	add	r2, r3
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	3304      	adds	r3, #4
 8010152:	4619      	mov	r1, r3
 8010154:	4610      	mov	r0, r2
 8010156:	f7fe fe8c 	bl	800ee72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801015e:	4b1b      	ldr	r3, [pc, #108]	; (80101cc <xTaskIncrementTick+0x168>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010164:	429a      	cmp	r2, r3
 8010166:	d3b9      	bcc.n	80100dc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8010168:	2301      	movs	r3, #1
 801016a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801016c:	e7b6      	b.n	80100dc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801016e:	4b17      	ldr	r3, [pc, #92]	; (80101cc <xTaskIncrementTick+0x168>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010174:	4914      	ldr	r1, [pc, #80]	; (80101c8 <xTaskIncrementTick+0x164>)
 8010176:	4613      	mov	r3, r2
 8010178:	009b      	lsls	r3, r3, #2
 801017a:	4413      	add	r3, r2
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	440b      	add	r3, r1
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b01      	cmp	r3, #1
 8010184:	d907      	bls.n	8010196 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8010186:	2301      	movs	r3, #1
 8010188:	617b      	str	r3, [r7, #20]
 801018a:	e004      	b.n	8010196 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801018c:	4b10      	ldr	r3, [pc, #64]	; (80101d0 <xTaskIncrementTick+0x16c>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	3301      	adds	r3, #1
 8010192:	4a0f      	ldr	r2, [pc, #60]	; (80101d0 <xTaskIncrementTick+0x16c>)
 8010194:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010196:	4b0f      	ldr	r3, [pc, #60]	; (80101d4 <xTaskIncrementTick+0x170>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801019e:	2301      	movs	r3, #1
 80101a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80101a2:	697b      	ldr	r3, [r7, #20]
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3718      	adds	r7, #24
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	20002e38 	.word	0x20002e38
 80101b0:	20002e14 	.word	0x20002e14
 80101b4:	20002dc8 	.word	0x20002dc8
 80101b8:	20002dcc 	.word	0x20002dcc
 80101bc:	20002e28 	.word	0x20002e28
 80101c0:	20002e30 	.word	0x20002e30
 80101c4:	20002e18 	.word	0x20002e18
 80101c8:	20002d14 	.word	0x20002d14
 80101cc:	20002d10 	.word	0x20002d10
 80101d0:	20002e20 	.word	0x20002e20
 80101d4:	20002e24 	.word	0x20002e24

080101d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80101d8:	b480      	push	{r7}
 80101da:	b087      	sub	sp, #28
 80101dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80101de:	4b2a      	ldr	r3, [pc, #168]	; (8010288 <vTaskSwitchContext+0xb0>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d003      	beq.n	80101ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80101e6:	4b29      	ldr	r3, [pc, #164]	; (801028c <vTaskSwitchContext+0xb4>)
 80101e8:	2201      	movs	r2, #1
 80101ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80101ec:	e046      	b.n	801027c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80101ee:	4b27      	ldr	r3, [pc, #156]	; (801028c <vTaskSwitchContext+0xb4>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101f4:	4b26      	ldr	r3, [pc, #152]	; (8010290 <vTaskSwitchContext+0xb8>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	fab3 f383 	clz	r3, r3
 8010200:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010202:	7afb      	ldrb	r3, [r7, #11]
 8010204:	f1c3 031f 	rsb	r3, r3, #31
 8010208:	617b      	str	r3, [r7, #20]
 801020a:	4922      	ldr	r1, [pc, #136]	; (8010294 <vTaskSwitchContext+0xbc>)
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	4613      	mov	r3, r2
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	4413      	add	r3, r2
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	440b      	add	r3, r1
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d10c      	bne.n	8010238 <vTaskSwitchContext+0x60>
	__asm volatile
 801021e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010222:	b672      	cpsid	i
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	b662      	cpsie	i
 8010232:	607b      	str	r3, [r7, #4]
}
 8010234:	bf00      	nop
 8010236:	e7fe      	b.n	8010236 <vTaskSwitchContext+0x5e>
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	4613      	mov	r3, r2
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4413      	add	r3, r2
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	4a14      	ldr	r2, [pc, #80]	; (8010294 <vTaskSwitchContext+0xbc>)
 8010244:	4413      	add	r3, r2
 8010246:	613b      	str	r3, [r7, #16]
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	685a      	ldr	r2, [r3, #4]
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	605a      	str	r2, [r3, #4]
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	685a      	ldr	r2, [r3, #4]
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	3308      	adds	r3, #8
 801025a:	429a      	cmp	r2, r3
 801025c:	d104      	bne.n	8010268 <vTaskSwitchContext+0x90>
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	685a      	ldr	r2, [r3, #4]
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	605a      	str	r2, [r3, #4]
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	4a0a      	ldr	r2, [pc, #40]	; (8010298 <vTaskSwitchContext+0xc0>)
 8010270:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010272:	4b09      	ldr	r3, [pc, #36]	; (8010298 <vTaskSwitchContext+0xc0>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	334c      	adds	r3, #76	; 0x4c
 8010278:	4a08      	ldr	r2, [pc, #32]	; (801029c <vTaskSwitchContext+0xc4>)
 801027a:	6013      	str	r3, [r2, #0]
}
 801027c:	bf00      	nop
 801027e:	371c      	adds	r7, #28
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr
 8010288:	20002e38 	.word	0x20002e38
 801028c:	20002e24 	.word	0x20002e24
 8010290:	20002e18 	.word	0x20002e18
 8010294:	20002d14 	.word	0x20002d14
 8010298:	20002d10 	.word	0x20002d10
 801029c:	200000fc 	.word	0x200000fc

080102a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d10c      	bne.n	80102ca <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80102b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b4:	b672      	cpsid	i
 80102b6:	f383 8811 	msr	BASEPRI, r3
 80102ba:	f3bf 8f6f 	isb	sy
 80102be:	f3bf 8f4f 	dsb	sy
 80102c2:	b662      	cpsie	i
 80102c4:	60fb      	str	r3, [r7, #12]
}
 80102c6:	bf00      	nop
 80102c8:	e7fe      	b.n	80102c8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102ca:	4b07      	ldr	r3, [pc, #28]	; (80102e8 <vTaskPlaceOnEventList+0x48>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	3318      	adds	r3, #24
 80102d0:	4619      	mov	r1, r3
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7fe fdf1 	bl	800eeba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80102d8:	2101      	movs	r1, #1
 80102da:	6838      	ldr	r0, [r7, #0]
 80102dc:	f000 fa76 	bl	80107cc <prvAddCurrentTaskToDelayedList>
}
 80102e0:	bf00      	nop
 80102e2:	3710      	adds	r7, #16
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	20002d10 	.word	0x20002d10

080102ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d10c      	bne.n	801031c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	b672      	cpsid	i
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	b662      	cpsie	i
 8010316:	60fb      	str	r3, [r7, #12]
}
 8010318:	bf00      	nop
 801031a:	e7fe      	b.n	801031a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	3318      	adds	r3, #24
 8010320:	4618      	mov	r0, r3
 8010322:	f7fe fe03 	bl	800ef2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010326:	4b1d      	ldr	r3, [pc, #116]	; (801039c <xTaskRemoveFromEventList+0xb0>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d11c      	bne.n	8010368 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	3304      	adds	r3, #4
 8010332:	4618      	mov	r0, r3
 8010334:	f7fe fdfa 	bl	800ef2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033c:	2201      	movs	r2, #1
 801033e:	409a      	lsls	r2, r3
 8010340:	4b17      	ldr	r3, [pc, #92]	; (80103a0 <xTaskRemoveFromEventList+0xb4>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4313      	orrs	r3, r2
 8010346:	4a16      	ldr	r2, [pc, #88]	; (80103a0 <xTaskRemoveFromEventList+0xb4>)
 8010348:	6013      	str	r3, [r2, #0]
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034e:	4613      	mov	r3, r2
 8010350:	009b      	lsls	r3, r3, #2
 8010352:	4413      	add	r3, r2
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	4a13      	ldr	r2, [pc, #76]	; (80103a4 <xTaskRemoveFromEventList+0xb8>)
 8010358:	441a      	add	r2, r3
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	3304      	adds	r3, #4
 801035e:	4619      	mov	r1, r3
 8010360:	4610      	mov	r0, r2
 8010362:	f7fe fd86 	bl	800ee72 <vListInsertEnd>
 8010366:	e005      	b.n	8010374 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	3318      	adds	r3, #24
 801036c:	4619      	mov	r1, r3
 801036e:	480e      	ldr	r0, [pc, #56]	; (80103a8 <xTaskRemoveFromEventList+0xbc>)
 8010370:	f7fe fd7f 	bl	800ee72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010378:	4b0c      	ldr	r3, [pc, #48]	; (80103ac <xTaskRemoveFromEventList+0xc0>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801037e:	429a      	cmp	r2, r3
 8010380:	d905      	bls.n	801038e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010382:	2301      	movs	r3, #1
 8010384:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010386:	4b0a      	ldr	r3, [pc, #40]	; (80103b0 <xTaskRemoveFromEventList+0xc4>)
 8010388:	2201      	movs	r2, #1
 801038a:	601a      	str	r2, [r3, #0]
 801038c:	e001      	b.n	8010392 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801038e:	2300      	movs	r3, #0
 8010390:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010392:	697b      	ldr	r3, [r7, #20]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3718      	adds	r7, #24
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	20002e38 	.word	0x20002e38
 80103a0:	20002e18 	.word	0x20002e18
 80103a4:	20002d14 	.word	0x20002d14
 80103a8:	20002dd0 	.word	0x20002dd0
 80103ac:	20002d10 	.word	0x20002d10
 80103b0:	20002e24 	.word	0x20002e24

080103b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80103bc:	4b06      	ldr	r3, [pc, #24]	; (80103d8 <vTaskInternalSetTimeOutState+0x24>)
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80103c4:	4b05      	ldr	r3, [pc, #20]	; (80103dc <vTaskInternalSetTimeOutState+0x28>)
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	605a      	str	r2, [r3, #4]
}
 80103cc:	bf00      	nop
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr
 80103d8:	20002e28 	.word	0x20002e28
 80103dc:	20002e14 	.word	0x20002e14

080103e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b088      	sub	sp, #32
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d10c      	bne.n	801040a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80103f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f4:	b672      	cpsid	i
 80103f6:	f383 8811 	msr	BASEPRI, r3
 80103fa:	f3bf 8f6f 	isb	sy
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	b662      	cpsie	i
 8010404:	613b      	str	r3, [r7, #16]
}
 8010406:	bf00      	nop
 8010408:	e7fe      	b.n	8010408 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10c      	bne.n	801042a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010414:	b672      	cpsid	i
 8010416:	f383 8811 	msr	BASEPRI, r3
 801041a:	f3bf 8f6f 	isb	sy
 801041e:	f3bf 8f4f 	dsb	sy
 8010422:	b662      	cpsie	i
 8010424:	60fb      	str	r3, [r7, #12]
}
 8010426:	bf00      	nop
 8010428:	e7fe      	b.n	8010428 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801042a:	f000 fb3f 	bl	8010aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801042e:	4b1d      	ldr	r3, [pc, #116]	; (80104a4 <xTaskCheckForTimeOut+0xc4>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	69ba      	ldr	r2, [r7, #24]
 801043a:	1ad3      	subs	r3, r2, r3
 801043c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010446:	d102      	bne.n	801044e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010448:	2300      	movs	r3, #0
 801044a:	61fb      	str	r3, [r7, #28]
 801044c:	e023      	b.n	8010496 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	4b15      	ldr	r3, [pc, #84]	; (80104a8 <xTaskCheckForTimeOut+0xc8>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	429a      	cmp	r2, r3
 8010458:	d007      	beq.n	801046a <xTaskCheckForTimeOut+0x8a>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	69ba      	ldr	r2, [r7, #24]
 8010460:	429a      	cmp	r2, r3
 8010462:	d302      	bcc.n	801046a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010464:	2301      	movs	r3, #1
 8010466:	61fb      	str	r3, [r7, #28]
 8010468:	e015      	b.n	8010496 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	697a      	ldr	r2, [r7, #20]
 8010470:	429a      	cmp	r2, r3
 8010472:	d20b      	bcs.n	801048c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	1ad2      	subs	r2, r2, r3
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f7ff ff97 	bl	80103b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010486:	2300      	movs	r3, #0
 8010488:	61fb      	str	r3, [r7, #28]
 801048a:	e004      	b.n	8010496 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	2200      	movs	r2, #0
 8010490:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010492:	2301      	movs	r3, #1
 8010494:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010496:	f000 fb3d 	bl	8010b14 <vPortExitCritical>

	return xReturn;
 801049a:	69fb      	ldr	r3, [r7, #28]
}
 801049c:	4618      	mov	r0, r3
 801049e:	3720      	adds	r7, #32
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	20002e14 	.word	0x20002e14
 80104a8:	20002e28 	.word	0x20002e28

080104ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80104ac:	b480      	push	{r7}
 80104ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80104b0:	4b03      	ldr	r3, [pc, #12]	; (80104c0 <vTaskMissedYield+0x14>)
 80104b2:	2201      	movs	r2, #1
 80104b4:	601a      	str	r2, [r3, #0]
}
 80104b6:	bf00      	nop
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr
 80104c0:	20002e24 	.word	0x20002e24

080104c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80104cc:	f000 f852 	bl	8010574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80104d0:	4b06      	ldr	r3, [pc, #24]	; (80104ec <prvIdleTask+0x28>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d9f9      	bls.n	80104cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80104d8:	4b05      	ldr	r3, [pc, #20]	; (80104f0 <prvIdleTask+0x2c>)
 80104da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104de:	601a      	str	r2, [r3, #0]
 80104e0:	f3bf 8f4f 	dsb	sy
 80104e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80104e8:	e7f0      	b.n	80104cc <prvIdleTask+0x8>
 80104ea:	bf00      	nop
 80104ec:	20002d14 	.word	0x20002d14
 80104f0:	e000ed04 	.word	0xe000ed04

080104f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b082      	sub	sp, #8
 80104f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80104fa:	2300      	movs	r3, #0
 80104fc:	607b      	str	r3, [r7, #4]
 80104fe:	e00c      	b.n	801051a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	4613      	mov	r3, r2
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	4413      	add	r3, r2
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	4a12      	ldr	r2, [pc, #72]	; (8010554 <prvInitialiseTaskLists+0x60>)
 801050c:	4413      	add	r3, r2
 801050e:	4618      	mov	r0, r3
 8010510:	f7fe fc82 	bl	800ee18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	3301      	adds	r3, #1
 8010518:	607b      	str	r3, [r7, #4]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2b06      	cmp	r3, #6
 801051e:	d9ef      	bls.n	8010500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010520:	480d      	ldr	r0, [pc, #52]	; (8010558 <prvInitialiseTaskLists+0x64>)
 8010522:	f7fe fc79 	bl	800ee18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010526:	480d      	ldr	r0, [pc, #52]	; (801055c <prvInitialiseTaskLists+0x68>)
 8010528:	f7fe fc76 	bl	800ee18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801052c:	480c      	ldr	r0, [pc, #48]	; (8010560 <prvInitialiseTaskLists+0x6c>)
 801052e:	f7fe fc73 	bl	800ee18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010532:	480c      	ldr	r0, [pc, #48]	; (8010564 <prvInitialiseTaskLists+0x70>)
 8010534:	f7fe fc70 	bl	800ee18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010538:	480b      	ldr	r0, [pc, #44]	; (8010568 <prvInitialiseTaskLists+0x74>)
 801053a:	f7fe fc6d 	bl	800ee18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801053e:	4b0b      	ldr	r3, [pc, #44]	; (801056c <prvInitialiseTaskLists+0x78>)
 8010540:	4a05      	ldr	r2, [pc, #20]	; (8010558 <prvInitialiseTaskLists+0x64>)
 8010542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010544:	4b0a      	ldr	r3, [pc, #40]	; (8010570 <prvInitialiseTaskLists+0x7c>)
 8010546:	4a05      	ldr	r2, [pc, #20]	; (801055c <prvInitialiseTaskLists+0x68>)
 8010548:	601a      	str	r2, [r3, #0]
}
 801054a:	bf00      	nop
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	20002d14 	.word	0x20002d14
 8010558:	20002da0 	.word	0x20002da0
 801055c:	20002db4 	.word	0x20002db4
 8010560:	20002dd0 	.word	0x20002dd0
 8010564:	20002de4 	.word	0x20002de4
 8010568:	20002dfc 	.word	0x20002dfc
 801056c:	20002dc8 	.word	0x20002dc8
 8010570:	20002dcc 	.word	0x20002dcc

08010574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801057a:	e019      	b.n	80105b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801057c:	f000 fa96 	bl	8010aac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010580:	4b10      	ldr	r3, [pc, #64]	; (80105c4 <prvCheckTasksWaitingTermination+0x50>)
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	68db      	ldr	r3, [r3, #12]
 8010586:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	3304      	adds	r3, #4
 801058c:	4618      	mov	r0, r3
 801058e:	f7fe fccd 	bl	800ef2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010592:	4b0d      	ldr	r3, [pc, #52]	; (80105c8 <prvCheckTasksWaitingTermination+0x54>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	3b01      	subs	r3, #1
 8010598:	4a0b      	ldr	r2, [pc, #44]	; (80105c8 <prvCheckTasksWaitingTermination+0x54>)
 801059a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801059c:	4b0b      	ldr	r3, [pc, #44]	; (80105cc <prvCheckTasksWaitingTermination+0x58>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3b01      	subs	r3, #1
 80105a2:	4a0a      	ldr	r2, [pc, #40]	; (80105cc <prvCheckTasksWaitingTermination+0x58>)
 80105a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80105a6:	f000 fab5 	bl	8010b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 f810 	bl	80105d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105b0:	4b06      	ldr	r3, [pc, #24]	; (80105cc <prvCheckTasksWaitingTermination+0x58>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d1e1      	bne.n	801057c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80105b8:	bf00      	nop
 80105ba:	bf00      	nop
 80105bc:	3708      	adds	r7, #8
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	20002de4 	.word	0x20002de4
 80105c8:	20002e10 	.word	0x20002e10
 80105cc:	20002df8 	.word	0x20002df8

080105d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	334c      	adds	r3, #76	; 0x4c
 80105dc:	4618      	mov	r0, r3
 80105de:	f001 fc89 	bl	8011ef4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d108      	bne.n	80105fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f0:	4618      	mov	r0, r3
 80105f2:	f000 fc51 	bl	8010e98 <vPortFree>
				vPortFree( pxTCB );
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fc4e 	bl	8010e98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80105fc:	e01a      	b.n	8010634 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010604:	2b01      	cmp	r3, #1
 8010606:	d103      	bne.n	8010610 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f000 fc45 	bl	8010e98 <vPortFree>
	}
 801060e:	e011      	b.n	8010634 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010616:	2b02      	cmp	r3, #2
 8010618:	d00c      	beq.n	8010634 <prvDeleteTCB+0x64>
	__asm volatile
 801061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061e:	b672      	cpsid	i
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	b662      	cpsie	i
 801062e:	60fb      	str	r3, [r7, #12]
}
 8010630:	bf00      	nop
 8010632:	e7fe      	b.n	8010632 <prvDeleteTCB+0x62>
	}
 8010634:	bf00      	nop
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010642:	4b0c      	ldr	r3, [pc, #48]	; (8010674 <prvResetNextTaskUnblockTime+0x38>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d104      	bne.n	8010656 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801064c:	4b0a      	ldr	r3, [pc, #40]	; (8010678 <prvResetNextTaskUnblockTime+0x3c>)
 801064e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010652:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010654:	e008      	b.n	8010668 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010656:	4b07      	ldr	r3, [pc, #28]	; (8010674 <prvResetNextTaskUnblockTime+0x38>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	68db      	ldr	r3, [r3, #12]
 801065e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	4a04      	ldr	r2, [pc, #16]	; (8010678 <prvResetNextTaskUnblockTime+0x3c>)
 8010666:	6013      	str	r3, [r2, #0]
}
 8010668:	bf00      	nop
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr
 8010674:	20002dc8 	.word	0x20002dc8
 8010678:	20002e30 	.word	0x20002e30

0801067c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010682:	4b0b      	ldr	r3, [pc, #44]	; (80106b0 <xTaskGetSchedulerState+0x34>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d102      	bne.n	8010690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801068a:	2301      	movs	r3, #1
 801068c:	607b      	str	r3, [r7, #4]
 801068e:	e008      	b.n	80106a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010690:	4b08      	ldr	r3, [pc, #32]	; (80106b4 <xTaskGetSchedulerState+0x38>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d102      	bne.n	801069e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010698:	2302      	movs	r3, #2
 801069a:	607b      	str	r3, [r7, #4]
 801069c:	e001      	b.n	80106a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801069e:	2300      	movs	r3, #0
 80106a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80106a2:	687b      	ldr	r3, [r7, #4]
	}
 80106a4:	4618      	mov	r0, r3
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr
 80106b0:	20002e1c 	.word	0x20002e1c
 80106b4:	20002e38 	.word	0x20002e38

080106b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b086      	sub	sp, #24
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80106c4:	2300      	movs	r3, #0
 80106c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d072      	beq.n	80107b4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80106ce:	4b3c      	ldr	r3, [pc, #240]	; (80107c0 <xTaskPriorityDisinherit+0x108>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	693a      	ldr	r2, [r7, #16]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d00c      	beq.n	80106f2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106dc:	b672      	cpsid	i
 80106de:	f383 8811 	msr	BASEPRI, r3
 80106e2:	f3bf 8f6f 	isb	sy
 80106e6:	f3bf 8f4f 	dsb	sy
 80106ea:	b662      	cpsie	i
 80106ec:	60fb      	str	r3, [r7, #12]
}
 80106ee:	bf00      	nop
 80106f0:	e7fe      	b.n	80106f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d10c      	bne.n	8010714 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80106fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fe:	b672      	cpsid	i
 8010700:	f383 8811 	msr	BASEPRI, r3
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	f3bf 8f4f 	dsb	sy
 801070c:	b662      	cpsie	i
 801070e:	60bb      	str	r3, [r7, #8]
}
 8010710:	bf00      	nop
 8010712:	e7fe      	b.n	8010712 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010718:	1e5a      	subs	r2, r3, #1
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010726:	429a      	cmp	r2, r3
 8010728:	d044      	beq.n	80107b4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801072e:	2b00      	cmp	r3, #0
 8010730:	d140      	bne.n	80107b4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	3304      	adds	r3, #4
 8010736:	4618      	mov	r0, r3
 8010738:	f7fe fbf8 	bl	800ef2c <uxListRemove>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d115      	bne.n	801076e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010746:	491f      	ldr	r1, [pc, #124]	; (80107c4 <xTaskPriorityDisinherit+0x10c>)
 8010748:	4613      	mov	r3, r2
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	4413      	add	r3, r2
 801074e:	009b      	lsls	r3, r3, #2
 8010750:	440b      	add	r3, r1
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d10a      	bne.n	801076e <xTaskPriorityDisinherit+0xb6>
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801075c:	2201      	movs	r2, #1
 801075e:	fa02 f303 	lsl.w	r3, r2, r3
 8010762:	43da      	mvns	r2, r3
 8010764:	4b18      	ldr	r3, [pc, #96]	; (80107c8 <xTaskPriorityDisinherit+0x110>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	4013      	ands	r3, r2
 801076a:	4a17      	ldr	r2, [pc, #92]	; (80107c8 <xTaskPriorityDisinherit+0x110>)
 801076c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801077a:	f1c3 0207 	rsb	r2, r3, #7
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010786:	2201      	movs	r2, #1
 8010788:	409a      	lsls	r2, r3
 801078a:	4b0f      	ldr	r3, [pc, #60]	; (80107c8 <xTaskPriorityDisinherit+0x110>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4313      	orrs	r3, r2
 8010790:	4a0d      	ldr	r2, [pc, #52]	; (80107c8 <xTaskPriorityDisinherit+0x110>)
 8010792:	6013      	str	r3, [r2, #0]
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010798:	4613      	mov	r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	4413      	add	r3, r2
 801079e:	009b      	lsls	r3, r3, #2
 80107a0:	4a08      	ldr	r2, [pc, #32]	; (80107c4 <xTaskPriorityDisinherit+0x10c>)
 80107a2:	441a      	add	r2, r3
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	3304      	adds	r3, #4
 80107a8:	4619      	mov	r1, r3
 80107aa:	4610      	mov	r0, r2
 80107ac:	f7fe fb61 	bl	800ee72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80107b0:	2301      	movs	r3, #1
 80107b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80107b4:	697b      	ldr	r3, [r7, #20]
	}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3718      	adds	r7, #24
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	20002d10 	.word	0x20002d10
 80107c4:	20002d14 	.word	0x20002d14
 80107c8:	20002e18 	.word	0x20002e18

080107cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80107d6:	4b29      	ldr	r3, [pc, #164]	; (801087c <prvAddCurrentTaskToDelayedList+0xb0>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107dc:	4b28      	ldr	r3, [pc, #160]	; (8010880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	3304      	adds	r3, #4
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7fe fba2 	bl	800ef2c <uxListRemove>
 80107e8:	4603      	mov	r3, r0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d10b      	bne.n	8010806 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80107ee:	4b24      	ldr	r3, [pc, #144]	; (8010880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f4:	2201      	movs	r2, #1
 80107f6:	fa02 f303 	lsl.w	r3, r2, r3
 80107fa:	43da      	mvns	r2, r3
 80107fc:	4b21      	ldr	r3, [pc, #132]	; (8010884 <prvAddCurrentTaskToDelayedList+0xb8>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4013      	ands	r3, r2
 8010802:	4a20      	ldr	r2, [pc, #128]	; (8010884 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010804:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801080c:	d10a      	bne.n	8010824 <prvAddCurrentTaskToDelayedList+0x58>
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d007      	beq.n	8010824 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010814:	4b1a      	ldr	r3, [pc, #104]	; (8010880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	3304      	adds	r3, #4
 801081a:	4619      	mov	r1, r3
 801081c:	481a      	ldr	r0, [pc, #104]	; (8010888 <prvAddCurrentTaskToDelayedList+0xbc>)
 801081e:	f7fe fb28 	bl	800ee72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010822:	e026      	b.n	8010872 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010824:	68fa      	ldr	r2, [r7, #12]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4413      	add	r3, r2
 801082a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801082c:	4b14      	ldr	r3, [pc, #80]	; (8010880 <prvAddCurrentTaskToDelayedList+0xb4>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	68ba      	ldr	r2, [r7, #8]
 8010832:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	429a      	cmp	r2, r3
 801083a:	d209      	bcs.n	8010850 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801083c:	4b13      	ldr	r3, [pc, #76]	; (801088c <prvAddCurrentTaskToDelayedList+0xc0>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	4b0f      	ldr	r3, [pc, #60]	; (8010880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	3304      	adds	r3, #4
 8010846:	4619      	mov	r1, r3
 8010848:	4610      	mov	r0, r2
 801084a:	f7fe fb36 	bl	800eeba <vListInsert>
}
 801084e:	e010      	b.n	8010872 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010850:	4b0f      	ldr	r3, [pc, #60]	; (8010890 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	4b0a      	ldr	r3, [pc, #40]	; (8010880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	3304      	adds	r3, #4
 801085a:	4619      	mov	r1, r3
 801085c:	4610      	mov	r0, r2
 801085e:	f7fe fb2c 	bl	800eeba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010862:	4b0c      	ldr	r3, [pc, #48]	; (8010894 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	429a      	cmp	r2, r3
 801086a:	d202      	bcs.n	8010872 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801086c:	4a09      	ldr	r2, [pc, #36]	; (8010894 <prvAddCurrentTaskToDelayedList+0xc8>)
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	6013      	str	r3, [r2, #0]
}
 8010872:	bf00      	nop
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	20002e14 	.word	0x20002e14
 8010880:	20002d10 	.word	0x20002d10
 8010884:	20002e18 	.word	0x20002e18
 8010888:	20002dfc 	.word	0x20002dfc
 801088c:	20002dcc 	.word	0x20002dcc
 8010890:	20002dc8 	.word	0x20002dc8
 8010894:	20002e30 	.word	0x20002e30

08010898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010898:	b480      	push	{r7}
 801089a:	b085      	sub	sp, #20
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	3b04      	subs	r3, #4
 80108a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80108b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	3b04      	subs	r3, #4
 80108b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	f023 0201 	bic.w	r2, r3, #1
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	3b04      	subs	r3, #4
 80108c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80108c8:	4a0c      	ldr	r2, [pc, #48]	; (80108fc <pxPortInitialiseStack+0x64>)
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	3b14      	subs	r3, #20
 80108d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80108d4:	687a      	ldr	r2, [r7, #4]
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	3b04      	subs	r3, #4
 80108de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f06f 0202 	mvn.w	r2, #2
 80108e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	3b20      	subs	r3, #32
 80108ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80108ee:	68fb      	ldr	r3, [r7, #12]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3714      	adds	r7, #20
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr
 80108fc:	08010901 	.word	0x08010901

08010900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010900:	b480      	push	{r7}
 8010902:	b085      	sub	sp, #20
 8010904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010906:	2300      	movs	r3, #0
 8010908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801090a:	4b14      	ldr	r3, [pc, #80]	; (801095c <prvTaskExitError+0x5c>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010912:	d00c      	beq.n	801092e <prvTaskExitError+0x2e>
	__asm volatile
 8010914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010918:	b672      	cpsid	i
 801091a:	f383 8811 	msr	BASEPRI, r3
 801091e:	f3bf 8f6f 	isb	sy
 8010922:	f3bf 8f4f 	dsb	sy
 8010926:	b662      	cpsie	i
 8010928:	60fb      	str	r3, [r7, #12]
}
 801092a:	bf00      	nop
 801092c:	e7fe      	b.n	801092c <prvTaskExitError+0x2c>
	__asm volatile
 801092e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010932:	b672      	cpsid	i
 8010934:	f383 8811 	msr	BASEPRI, r3
 8010938:	f3bf 8f6f 	isb	sy
 801093c:	f3bf 8f4f 	dsb	sy
 8010940:	b662      	cpsie	i
 8010942:	60bb      	str	r3, [r7, #8]
}
 8010944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010946:	bf00      	nop
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d0fc      	beq.n	8010948 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801094e:	bf00      	nop
 8010950:	bf00      	nop
 8010952:	3714      	adds	r7, #20
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr
 801095c:	200000a0 	.word	0x200000a0

08010960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010960:	4b07      	ldr	r3, [pc, #28]	; (8010980 <pxCurrentTCBConst2>)
 8010962:	6819      	ldr	r1, [r3, #0]
 8010964:	6808      	ldr	r0, [r1, #0]
 8010966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801096a:	f380 8809 	msr	PSP, r0
 801096e:	f3bf 8f6f 	isb	sy
 8010972:	f04f 0000 	mov.w	r0, #0
 8010976:	f380 8811 	msr	BASEPRI, r0
 801097a:	4770      	bx	lr
 801097c:	f3af 8000 	nop.w

08010980 <pxCurrentTCBConst2>:
 8010980:	20002d10 	.word	0x20002d10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010984:	bf00      	nop
 8010986:	bf00      	nop

08010988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010988:	4808      	ldr	r0, [pc, #32]	; (80109ac <prvPortStartFirstTask+0x24>)
 801098a:	6800      	ldr	r0, [r0, #0]
 801098c:	6800      	ldr	r0, [r0, #0]
 801098e:	f380 8808 	msr	MSP, r0
 8010992:	f04f 0000 	mov.w	r0, #0
 8010996:	f380 8814 	msr	CONTROL, r0
 801099a:	b662      	cpsie	i
 801099c:	b661      	cpsie	f
 801099e:	f3bf 8f4f 	dsb	sy
 80109a2:	f3bf 8f6f 	isb	sy
 80109a6:	df00      	svc	0
 80109a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80109aa:	bf00      	nop
 80109ac:	e000ed08 	.word	0xe000ed08

080109b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80109b6:	4b37      	ldr	r3, [pc, #220]	; (8010a94 <xPortStartScheduler+0xe4>)
 80109b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	22ff      	movs	r2, #255	; 0xff
 80109c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80109d0:	78fb      	ldrb	r3, [r7, #3]
 80109d2:	b2db      	uxtb	r3, r3
 80109d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80109d8:	b2da      	uxtb	r2, r3
 80109da:	4b2f      	ldr	r3, [pc, #188]	; (8010a98 <xPortStartScheduler+0xe8>)
 80109dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80109de:	4b2f      	ldr	r3, [pc, #188]	; (8010a9c <xPortStartScheduler+0xec>)
 80109e0:	2207      	movs	r2, #7
 80109e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109e4:	e009      	b.n	80109fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80109e6:	4b2d      	ldr	r3, [pc, #180]	; (8010a9c <xPortStartScheduler+0xec>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	3b01      	subs	r3, #1
 80109ec:	4a2b      	ldr	r2, [pc, #172]	; (8010a9c <xPortStartScheduler+0xec>)
 80109ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80109f0:	78fb      	ldrb	r3, [r7, #3]
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	005b      	lsls	r3, r3, #1
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109fa:	78fb      	ldrb	r3, [r7, #3]
 80109fc:	b2db      	uxtb	r3, r3
 80109fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a02:	2b80      	cmp	r3, #128	; 0x80
 8010a04:	d0ef      	beq.n	80109e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a06:	4b25      	ldr	r3, [pc, #148]	; (8010a9c <xPortStartScheduler+0xec>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f1c3 0307 	rsb	r3, r3, #7
 8010a0e:	2b04      	cmp	r3, #4
 8010a10:	d00c      	beq.n	8010a2c <xPortStartScheduler+0x7c>
	__asm volatile
 8010a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a16:	b672      	cpsid	i
 8010a18:	f383 8811 	msr	BASEPRI, r3
 8010a1c:	f3bf 8f6f 	isb	sy
 8010a20:	f3bf 8f4f 	dsb	sy
 8010a24:	b662      	cpsie	i
 8010a26:	60bb      	str	r3, [r7, #8]
}
 8010a28:	bf00      	nop
 8010a2a:	e7fe      	b.n	8010a2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a2c:	4b1b      	ldr	r3, [pc, #108]	; (8010a9c <xPortStartScheduler+0xec>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	021b      	lsls	r3, r3, #8
 8010a32:	4a1a      	ldr	r2, [pc, #104]	; (8010a9c <xPortStartScheduler+0xec>)
 8010a34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a36:	4b19      	ldr	r3, [pc, #100]	; (8010a9c <xPortStartScheduler+0xec>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010a3e:	4a17      	ldr	r2, [pc, #92]	; (8010a9c <xPortStartScheduler+0xec>)
 8010a40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	b2da      	uxtb	r2, r3
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010a4a:	4b15      	ldr	r3, [pc, #84]	; (8010aa0 <xPortStartScheduler+0xf0>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4a14      	ldr	r2, [pc, #80]	; (8010aa0 <xPortStartScheduler+0xf0>)
 8010a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010a54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010a56:	4b12      	ldr	r3, [pc, #72]	; (8010aa0 <xPortStartScheduler+0xf0>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4a11      	ldr	r2, [pc, #68]	; (8010aa0 <xPortStartScheduler+0xf0>)
 8010a5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010a60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010a62:	f000 f8dd 	bl	8010c20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a66:	4b0f      	ldr	r3, [pc, #60]	; (8010aa4 <xPortStartScheduler+0xf4>)
 8010a68:	2200      	movs	r2, #0
 8010a6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a6c:	f000 f8fc 	bl	8010c68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a70:	4b0d      	ldr	r3, [pc, #52]	; (8010aa8 <xPortStartScheduler+0xf8>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4a0c      	ldr	r2, [pc, #48]	; (8010aa8 <xPortStartScheduler+0xf8>)
 8010a76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010a7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a7c:	f7ff ff84 	bl	8010988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010a80:	f7ff fbaa 	bl	80101d8 <vTaskSwitchContext>
	prvTaskExitError();
 8010a84:	f7ff ff3c 	bl	8010900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010a88:	2300      	movs	r3, #0
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	e000e400 	.word	0xe000e400
 8010a98:	20002e3c 	.word	0x20002e3c
 8010a9c:	20002e40 	.word	0x20002e40
 8010aa0:	e000ed20 	.word	0xe000ed20
 8010aa4:	200000a0 	.word	0x200000a0
 8010aa8:	e000ef34 	.word	0xe000ef34

08010aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010aac:	b480      	push	{r7}
 8010aae:	b083      	sub	sp, #12
 8010ab0:	af00      	add	r7, sp, #0
	__asm volatile
 8010ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab6:	b672      	cpsid	i
 8010ab8:	f383 8811 	msr	BASEPRI, r3
 8010abc:	f3bf 8f6f 	isb	sy
 8010ac0:	f3bf 8f4f 	dsb	sy
 8010ac4:	b662      	cpsie	i
 8010ac6:	607b      	str	r3, [r7, #4]
}
 8010ac8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010aca:	4b10      	ldr	r3, [pc, #64]	; (8010b0c <vPortEnterCritical+0x60>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	3301      	adds	r3, #1
 8010ad0:	4a0e      	ldr	r2, [pc, #56]	; (8010b0c <vPortEnterCritical+0x60>)
 8010ad2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010ad4:	4b0d      	ldr	r3, [pc, #52]	; (8010b0c <vPortEnterCritical+0x60>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d111      	bne.n	8010b00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010adc:	4b0c      	ldr	r3, [pc, #48]	; (8010b10 <vPortEnterCritical+0x64>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d00c      	beq.n	8010b00 <vPortEnterCritical+0x54>
	__asm volatile
 8010ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aea:	b672      	cpsid	i
 8010aec:	f383 8811 	msr	BASEPRI, r3
 8010af0:	f3bf 8f6f 	isb	sy
 8010af4:	f3bf 8f4f 	dsb	sy
 8010af8:	b662      	cpsie	i
 8010afa:	603b      	str	r3, [r7, #0]
}
 8010afc:	bf00      	nop
 8010afe:	e7fe      	b.n	8010afe <vPortEnterCritical+0x52>
	}
}
 8010b00:	bf00      	nop
 8010b02:	370c      	adds	r7, #12
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr
 8010b0c:	200000a0 	.word	0x200000a0
 8010b10:	e000ed04 	.word	0xe000ed04

08010b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b1a:	4b13      	ldr	r3, [pc, #76]	; (8010b68 <vPortExitCritical+0x54>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d10c      	bne.n	8010b3c <vPortExitCritical+0x28>
	__asm volatile
 8010b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b26:	b672      	cpsid	i
 8010b28:	f383 8811 	msr	BASEPRI, r3
 8010b2c:	f3bf 8f6f 	isb	sy
 8010b30:	f3bf 8f4f 	dsb	sy
 8010b34:	b662      	cpsie	i
 8010b36:	607b      	str	r3, [r7, #4]
}
 8010b38:	bf00      	nop
 8010b3a:	e7fe      	b.n	8010b3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010b3c:	4b0a      	ldr	r3, [pc, #40]	; (8010b68 <vPortExitCritical+0x54>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	3b01      	subs	r3, #1
 8010b42:	4a09      	ldr	r2, [pc, #36]	; (8010b68 <vPortExitCritical+0x54>)
 8010b44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b46:	4b08      	ldr	r3, [pc, #32]	; (8010b68 <vPortExitCritical+0x54>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d105      	bne.n	8010b5a <vPortExitCritical+0x46>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	f383 8811 	msr	BASEPRI, r3
}
 8010b58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010b5a:	bf00      	nop
 8010b5c:	370c      	adds	r7, #12
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr
 8010b66:	bf00      	nop
 8010b68:	200000a0 	.word	0x200000a0
 8010b6c:	00000000 	.word	0x00000000

08010b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b70:	f3ef 8009 	mrs	r0, PSP
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	4b15      	ldr	r3, [pc, #84]	; (8010bd0 <pxCurrentTCBConst>)
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	f01e 0f10 	tst.w	lr, #16
 8010b80:	bf08      	it	eq
 8010b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8a:	6010      	str	r0, [r2, #0]
 8010b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010b94:	b672      	cpsid	i
 8010b96:	f380 8811 	msr	BASEPRI, r0
 8010b9a:	f3bf 8f4f 	dsb	sy
 8010b9e:	f3bf 8f6f 	isb	sy
 8010ba2:	b662      	cpsie	i
 8010ba4:	f7ff fb18 	bl	80101d8 <vTaskSwitchContext>
 8010ba8:	f04f 0000 	mov.w	r0, #0
 8010bac:	f380 8811 	msr	BASEPRI, r0
 8010bb0:	bc09      	pop	{r0, r3}
 8010bb2:	6819      	ldr	r1, [r3, #0]
 8010bb4:	6808      	ldr	r0, [r1, #0]
 8010bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bba:	f01e 0f10 	tst.w	lr, #16
 8010bbe:	bf08      	it	eq
 8010bc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010bc4:	f380 8809 	msr	PSP, r0
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop

08010bd0 <pxCurrentTCBConst>:
 8010bd0:	20002d10 	.word	0x20002d10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010bd4:	bf00      	nop
 8010bd6:	bf00      	nop

08010bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8010bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be2:	b672      	cpsid	i
 8010be4:	f383 8811 	msr	BASEPRI, r3
 8010be8:	f3bf 8f6f 	isb	sy
 8010bec:	f3bf 8f4f 	dsb	sy
 8010bf0:	b662      	cpsie	i
 8010bf2:	607b      	str	r3, [r7, #4]
}
 8010bf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010bf6:	f7ff fa35 	bl	8010064 <xTaskIncrementTick>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d003      	beq.n	8010c08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c00:	4b06      	ldr	r3, [pc, #24]	; (8010c1c <SysTick_Handler+0x44>)
 8010c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c06:	601a      	str	r2, [r3, #0]
 8010c08:	2300      	movs	r3, #0
 8010c0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	f383 8811 	msr	BASEPRI, r3
}
 8010c12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c14:	bf00      	nop
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	e000ed04 	.word	0xe000ed04

08010c20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c20:	b480      	push	{r7}
 8010c22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c24:	4b0b      	ldr	r3, [pc, #44]	; (8010c54 <vPortSetupTimerInterrupt+0x34>)
 8010c26:	2200      	movs	r2, #0
 8010c28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c2a:	4b0b      	ldr	r3, [pc, #44]	; (8010c58 <vPortSetupTimerInterrupt+0x38>)
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c30:	4b0a      	ldr	r3, [pc, #40]	; (8010c5c <vPortSetupTimerInterrupt+0x3c>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	4a0a      	ldr	r2, [pc, #40]	; (8010c60 <vPortSetupTimerInterrupt+0x40>)
 8010c36:	fba2 2303 	umull	r2, r3, r2, r3
 8010c3a:	099b      	lsrs	r3, r3, #6
 8010c3c:	4a09      	ldr	r2, [pc, #36]	; (8010c64 <vPortSetupTimerInterrupt+0x44>)
 8010c3e:	3b01      	subs	r3, #1
 8010c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c42:	4b04      	ldr	r3, [pc, #16]	; (8010c54 <vPortSetupTimerInterrupt+0x34>)
 8010c44:	2207      	movs	r2, #7
 8010c46:	601a      	str	r2, [r3, #0]
}
 8010c48:	bf00      	nop
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	e000e010 	.word	0xe000e010
 8010c58:	e000e018 	.word	0xe000e018
 8010c5c:	20000014 	.word	0x20000014
 8010c60:	10624dd3 	.word	0x10624dd3
 8010c64:	e000e014 	.word	0xe000e014

08010c68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010c78 <vPortEnableVFP+0x10>
 8010c6c:	6801      	ldr	r1, [r0, #0]
 8010c6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010c72:	6001      	str	r1, [r0, #0]
 8010c74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c76:	bf00      	nop
 8010c78:	e000ed88 	.word	0xe000ed88

08010c7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010c82:	f3ef 8305 	mrs	r3, IPSR
 8010c86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2b0f      	cmp	r3, #15
 8010c8c:	d916      	bls.n	8010cbc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010c8e:	4a19      	ldr	r2, [pc, #100]	; (8010cf4 <vPortValidateInterruptPriority+0x78>)
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	4413      	add	r3, r2
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010c98:	4b17      	ldr	r3, [pc, #92]	; (8010cf8 <vPortValidateInterruptPriority+0x7c>)
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	7afa      	ldrb	r2, [r7, #11]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d20c      	bcs.n	8010cbc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca6:	b672      	cpsid	i
 8010ca8:	f383 8811 	msr	BASEPRI, r3
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	b662      	cpsie	i
 8010cb6:	607b      	str	r3, [r7, #4]
}
 8010cb8:	bf00      	nop
 8010cba:	e7fe      	b.n	8010cba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010cbc:	4b0f      	ldr	r3, [pc, #60]	; (8010cfc <vPortValidateInterruptPriority+0x80>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010cc4:	4b0e      	ldr	r3, [pc, #56]	; (8010d00 <vPortValidateInterruptPriority+0x84>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d90c      	bls.n	8010ce6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd0:	b672      	cpsid	i
 8010cd2:	f383 8811 	msr	BASEPRI, r3
 8010cd6:	f3bf 8f6f 	isb	sy
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	b662      	cpsie	i
 8010ce0:	603b      	str	r3, [r7, #0]
}
 8010ce2:	bf00      	nop
 8010ce4:	e7fe      	b.n	8010ce4 <vPortValidateInterruptPriority+0x68>
	}
 8010ce6:	bf00      	nop
 8010ce8:	3714      	adds	r7, #20
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr
 8010cf2:	bf00      	nop
 8010cf4:	e000e3f0 	.word	0xe000e3f0
 8010cf8:	20002e3c 	.word	0x20002e3c
 8010cfc:	e000ed0c 	.word	0xe000ed0c
 8010d00:	20002e40 	.word	0x20002e40

08010d04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b08a      	sub	sp, #40	; 0x28
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d10:	f7ff f8fc 	bl	800ff0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d14:	4b5b      	ldr	r3, [pc, #364]	; (8010e84 <pvPortMalloc+0x180>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d101      	bne.n	8010d20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d1c:	f000 f91a 	bl	8010f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d20:	4b59      	ldr	r3, [pc, #356]	; (8010e88 <pvPortMalloc+0x184>)
 8010d22:	681a      	ldr	r2, [r3, #0]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	4013      	ands	r3, r2
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f040 8092 	bne.w	8010e52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d01f      	beq.n	8010d74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010d34:	2208      	movs	r2, #8
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	4413      	add	r3, r2
 8010d3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f003 0307 	and.w	r3, r3, #7
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d016      	beq.n	8010d74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f023 0307 	bic.w	r3, r3, #7
 8010d4c:	3308      	adds	r3, #8
 8010d4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f003 0307 	and.w	r3, r3, #7
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00c      	beq.n	8010d74 <pvPortMalloc+0x70>
	__asm volatile
 8010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5e:	b672      	cpsid	i
 8010d60:	f383 8811 	msr	BASEPRI, r3
 8010d64:	f3bf 8f6f 	isb	sy
 8010d68:	f3bf 8f4f 	dsb	sy
 8010d6c:	b662      	cpsie	i
 8010d6e:	617b      	str	r3, [r7, #20]
}
 8010d70:	bf00      	nop
 8010d72:	e7fe      	b.n	8010d72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d06b      	beq.n	8010e52 <pvPortMalloc+0x14e>
 8010d7a:	4b44      	ldr	r3, [pc, #272]	; (8010e8c <pvPortMalloc+0x188>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	687a      	ldr	r2, [r7, #4]
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d866      	bhi.n	8010e52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d84:	4b42      	ldr	r3, [pc, #264]	; (8010e90 <pvPortMalloc+0x18c>)
 8010d86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d88:	4b41      	ldr	r3, [pc, #260]	; (8010e90 <pvPortMalloc+0x18c>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d8e:	e004      	b.n	8010d9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d903      	bls.n	8010dac <pvPortMalloc+0xa8>
 8010da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1f1      	bne.n	8010d90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010dac:	4b35      	ldr	r3, [pc, #212]	; (8010e84 <pvPortMalloc+0x180>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d04d      	beq.n	8010e52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010db6:	6a3b      	ldr	r3, [r7, #32]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2208      	movs	r2, #8
 8010dbc:	4413      	add	r3, r2
 8010dbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	6a3b      	ldr	r3, [r7, #32]
 8010dc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dca:	685a      	ldr	r2, [r3, #4]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	1ad2      	subs	r2, r2, r3
 8010dd0:	2308      	movs	r3, #8
 8010dd2:	005b      	lsls	r3, r3, #1
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d921      	bls.n	8010e1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4413      	add	r3, r2
 8010dde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	f003 0307 	and.w	r3, r3, #7
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00c      	beq.n	8010e04 <pvPortMalloc+0x100>
	__asm volatile
 8010dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dee:	b672      	cpsid	i
 8010df0:	f383 8811 	msr	BASEPRI, r3
 8010df4:	f3bf 8f6f 	isb	sy
 8010df8:	f3bf 8f4f 	dsb	sy
 8010dfc:	b662      	cpsie	i
 8010dfe:	613b      	str	r3, [r7, #16]
}
 8010e00:	bf00      	nop
 8010e02:	e7fe      	b.n	8010e02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e06:	685a      	ldr	r2, [r3, #4]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	1ad2      	subs	r2, r2, r3
 8010e0c:	69bb      	ldr	r3, [r7, #24]
 8010e0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e16:	69b8      	ldr	r0, [r7, #24]
 8010e18:	f000 f8fe 	bl	8011018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e1c:	4b1b      	ldr	r3, [pc, #108]	; (8010e8c <pvPortMalloc+0x188>)
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	1ad3      	subs	r3, r2, r3
 8010e26:	4a19      	ldr	r2, [pc, #100]	; (8010e8c <pvPortMalloc+0x188>)
 8010e28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e2a:	4b18      	ldr	r3, [pc, #96]	; (8010e8c <pvPortMalloc+0x188>)
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	4b19      	ldr	r3, [pc, #100]	; (8010e94 <pvPortMalloc+0x190>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d203      	bcs.n	8010e3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e36:	4b15      	ldr	r3, [pc, #84]	; (8010e8c <pvPortMalloc+0x188>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	4a16      	ldr	r2, [pc, #88]	; (8010e94 <pvPortMalloc+0x190>)
 8010e3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e40:	685a      	ldr	r2, [r3, #4]
 8010e42:	4b11      	ldr	r3, [pc, #68]	; (8010e88 <pvPortMalloc+0x184>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	431a      	orrs	r2, r3
 8010e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4e:	2200      	movs	r2, #0
 8010e50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e52:	f7ff f869 	bl	800ff28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	f003 0307 	and.w	r3, r3, #7
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00c      	beq.n	8010e7a <pvPortMalloc+0x176>
	__asm volatile
 8010e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e64:	b672      	cpsid	i
 8010e66:	f383 8811 	msr	BASEPRI, r3
 8010e6a:	f3bf 8f6f 	isb	sy
 8010e6e:	f3bf 8f4f 	dsb	sy
 8010e72:	b662      	cpsie	i
 8010e74:	60fb      	str	r3, [r7, #12]
}
 8010e76:	bf00      	nop
 8010e78:	e7fe      	b.n	8010e78 <pvPortMalloc+0x174>
	return pvReturn;
 8010e7a:	69fb      	ldr	r3, [r7, #28]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3728      	adds	r7, #40	; 0x28
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	20006a4c 	.word	0x20006a4c
 8010e88:	20006a58 	.word	0x20006a58
 8010e8c:	20006a50 	.word	0x20006a50
 8010e90:	20006a44 	.word	0x20006a44
 8010e94:	20006a54 	.word	0x20006a54

08010e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b086      	sub	sp, #24
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d04c      	beq.n	8010f44 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010eaa:	2308      	movs	r3, #8
 8010eac:	425b      	negs	r3, r3
 8010eae:	697a      	ldr	r2, [r7, #20]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	4b23      	ldr	r3, [pc, #140]	; (8010f4c <vPortFree+0xb4>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4013      	ands	r3, r2
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d10c      	bne.n	8010ee0 <vPortFree+0x48>
	__asm volatile
 8010ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eca:	b672      	cpsid	i
 8010ecc:	f383 8811 	msr	BASEPRI, r3
 8010ed0:	f3bf 8f6f 	isb	sy
 8010ed4:	f3bf 8f4f 	dsb	sy
 8010ed8:	b662      	cpsie	i
 8010eda:	60fb      	str	r3, [r7, #12]
}
 8010edc:	bf00      	nop
 8010ede:	e7fe      	b.n	8010ede <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d00c      	beq.n	8010f02 <vPortFree+0x6a>
	__asm volatile
 8010ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eec:	b672      	cpsid	i
 8010eee:	f383 8811 	msr	BASEPRI, r3
 8010ef2:	f3bf 8f6f 	isb	sy
 8010ef6:	f3bf 8f4f 	dsb	sy
 8010efa:	b662      	cpsie	i
 8010efc:	60bb      	str	r3, [r7, #8]
}
 8010efe:	bf00      	nop
 8010f00:	e7fe      	b.n	8010f00 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	685a      	ldr	r2, [r3, #4]
 8010f06:	4b11      	ldr	r3, [pc, #68]	; (8010f4c <vPortFree+0xb4>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4013      	ands	r3, r2
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d019      	beq.n	8010f44 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d115      	bne.n	8010f44 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	685a      	ldr	r2, [r3, #4]
 8010f1c:	4b0b      	ldr	r3, [pc, #44]	; (8010f4c <vPortFree+0xb4>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	43db      	mvns	r3, r3
 8010f22:	401a      	ands	r2, r3
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f28:	f7fe fff0 	bl	800ff0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	685a      	ldr	r2, [r3, #4]
 8010f30:	4b07      	ldr	r3, [pc, #28]	; (8010f50 <vPortFree+0xb8>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4413      	add	r3, r2
 8010f36:	4a06      	ldr	r2, [pc, #24]	; (8010f50 <vPortFree+0xb8>)
 8010f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f3a:	6938      	ldr	r0, [r7, #16]
 8010f3c:	f000 f86c 	bl	8011018 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010f40:	f7fe fff2 	bl	800ff28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f44:	bf00      	nop
 8010f46:	3718      	adds	r7, #24
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	20006a58 	.word	0x20006a58
 8010f50:	20006a50 	.word	0x20006a50

08010f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f54:	b480      	push	{r7}
 8010f56:	b085      	sub	sp, #20
 8010f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f60:	4b27      	ldr	r3, [pc, #156]	; (8011000 <prvHeapInit+0xac>)
 8010f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f003 0307 	and.w	r3, r3, #7
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00c      	beq.n	8010f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	3307      	adds	r3, #7
 8010f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f023 0307 	bic.w	r3, r3, #7
 8010f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f7c:	68ba      	ldr	r2, [r7, #8]
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	1ad3      	subs	r3, r2, r3
 8010f82:	4a1f      	ldr	r2, [pc, #124]	; (8011000 <prvHeapInit+0xac>)
 8010f84:	4413      	add	r3, r2
 8010f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010f8c:	4a1d      	ldr	r2, [pc, #116]	; (8011004 <prvHeapInit+0xb0>)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010f92:	4b1c      	ldr	r3, [pc, #112]	; (8011004 <prvHeapInit+0xb0>)
 8010f94:	2200      	movs	r2, #0
 8010f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	68ba      	ldr	r2, [r7, #8]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fa0:	2208      	movs	r2, #8
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	1a9b      	subs	r3, r3, r2
 8010fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	f023 0307 	bic.w	r3, r3, #7
 8010fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	4a15      	ldr	r2, [pc, #84]	; (8011008 <prvHeapInit+0xb4>)
 8010fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010fb6:	4b14      	ldr	r3, [pc, #80]	; (8011008 <prvHeapInit+0xb4>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010fbe:	4b12      	ldr	r3, [pc, #72]	; (8011008 <prvHeapInit+0xb4>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	68fa      	ldr	r2, [r7, #12]
 8010fce:	1ad2      	subs	r2, r2, r3
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010fd4:	4b0c      	ldr	r3, [pc, #48]	; (8011008 <prvHeapInit+0xb4>)
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	4a0a      	ldr	r2, [pc, #40]	; (801100c <prvHeapInit+0xb8>)
 8010fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	4a09      	ldr	r2, [pc, #36]	; (8011010 <prvHeapInit+0xbc>)
 8010fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010fec:	4b09      	ldr	r3, [pc, #36]	; (8011014 <prvHeapInit+0xc0>)
 8010fee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010ff2:	601a      	str	r2, [r3, #0]
}
 8010ff4:	bf00      	nop
 8010ff6:	3714      	adds	r7, #20
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr
 8011000:	20002e44 	.word	0x20002e44
 8011004:	20006a44 	.word	0x20006a44
 8011008:	20006a4c 	.word	0x20006a4c
 801100c:	20006a54 	.word	0x20006a54
 8011010:	20006a50 	.word	0x20006a50
 8011014:	20006a58 	.word	0x20006a58

08011018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011018:	b480      	push	{r7}
 801101a:	b085      	sub	sp, #20
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011020:	4b28      	ldr	r3, [pc, #160]	; (80110c4 <prvInsertBlockIntoFreeList+0xac>)
 8011022:	60fb      	str	r3, [r7, #12]
 8011024:	e002      	b.n	801102c <prvInsertBlockIntoFreeList+0x14>
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	60fb      	str	r3, [r7, #12]
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	429a      	cmp	r2, r3
 8011034:	d8f7      	bhi.n	8011026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	4413      	add	r3, r2
 8011042:	687a      	ldr	r2, [r7, #4]
 8011044:	429a      	cmp	r2, r3
 8011046:	d108      	bne.n	801105a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	685a      	ldr	r2, [r3, #4]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	441a      	add	r2, r3
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	441a      	add	r2, r3
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	429a      	cmp	r2, r3
 801106c:	d118      	bne.n	80110a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	4b15      	ldr	r3, [pc, #84]	; (80110c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	429a      	cmp	r2, r3
 8011078:	d00d      	beq.n	8011096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685a      	ldr	r2, [r3, #4]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	441a      	add	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	e008      	b.n	80110a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011096:	4b0c      	ldr	r3, [pc, #48]	; (80110c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	601a      	str	r2, [r3, #0]
 801109e:	e003      	b.n	80110a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d002      	beq.n	80110b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110b6:	bf00      	nop
 80110b8:	3714      	adds	r7, #20
 80110ba:	46bd      	mov	sp, r7
 80110bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c0:	4770      	bx	lr
 80110c2:	bf00      	nop
 80110c4:	20006a44 	.word	0x20006a44
 80110c8:	20006a4c 	.word	0x20006a4c
 80110cc:	00000000 	.word	0x00000000

080110d0 <sin>:
 80110d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110d2:	eeb0 7b40 	vmov.f64	d7, d0
 80110d6:	ee17 3a90 	vmov	r3, s15
 80110da:	4a21      	ldr	r2, [pc, #132]	; (8011160 <sin+0x90>)
 80110dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80110e0:	4293      	cmp	r3, r2
 80110e2:	dc07      	bgt.n	80110f4 <sin+0x24>
 80110e4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011158 <sin+0x88>
 80110e8:	2000      	movs	r0, #0
 80110ea:	b005      	add	sp, #20
 80110ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80110f0:	f000 bc7e 	b.w	80119f0 <__kernel_sin>
 80110f4:	4a1b      	ldr	r2, [pc, #108]	; (8011164 <sin+0x94>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	dd04      	ble.n	8011104 <sin+0x34>
 80110fa:	ee30 0b40 	vsub.f64	d0, d0, d0
 80110fe:	b005      	add	sp, #20
 8011100:	f85d fb04 	ldr.w	pc, [sp], #4
 8011104:	4668      	mov	r0, sp
 8011106:	f000 f82f 	bl	8011168 <__ieee754_rem_pio2>
 801110a:	f000 0003 	and.w	r0, r0, #3
 801110e:	2801      	cmp	r0, #1
 8011110:	d00a      	beq.n	8011128 <sin+0x58>
 8011112:	2802      	cmp	r0, #2
 8011114:	d00f      	beq.n	8011136 <sin+0x66>
 8011116:	b9c0      	cbnz	r0, 801114a <sin+0x7a>
 8011118:	ed9d 1b02 	vldr	d1, [sp, #8]
 801111c:	ed9d 0b00 	vldr	d0, [sp]
 8011120:	2001      	movs	r0, #1
 8011122:	f000 fc65 	bl	80119f0 <__kernel_sin>
 8011126:	e7ea      	b.n	80110fe <sin+0x2e>
 8011128:	ed9d 1b02 	vldr	d1, [sp, #8]
 801112c:	ed9d 0b00 	vldr	d0, [sp]
 8011130:	f000 fbf2 	bl	8011918 <__kernel_cos>
 8011134:	e7e3      	b.n	80110fe <sin+0x2e>
 8011136:	ed9d 1b02 	vldr	d1, [sp, #8]
 801113a:	ed9d 0b00 	vldr	d0, [sp]
 801113e:	2001      	movs	r0, #1
 8011140:	f000 fc56 	bl	80119f0 <__kernel_sin>
 8011144:	eeb1 0b40 	vneg.f64	d0, d0
 8011148:	e7d9      	b.n	80110fe <sin+0x2e>
 801114a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801114e:	ed9d 0b00 	vldr	d0, [sp]
 8011152:	f000 fbe1 	bl	8011918 <__kernel_cos>
 8011156:	e7f5      	b.n	8011144 <sin+0x74>
	...
 8011160:	3fe921fb 	.word	0x3fe921fb
 8011164:	7fefffff 	.word	0x7fefffff

08011168 <__ieee754_rem_pio2>:
 8011168:	b570      	push	{r4, r5, r6, lr}
 801116a:	eeb0 7b40 	vmov.f64	d7, d0
 801116e:	ee17 5a90 	vmov	r5, s15
 8011172:	4b99      	ldr	r3, [pc, #612]	; (80113d8 <__ieee754_rem_pio2+0x270>)
 8011174:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011178:	429e      	cmp	r6, r3
 801117a:	b088      	sub	sp, #32
 801117c:	4604      	mov	r4, r0
 801117e:	dc07      	bgt.n	8011190 <__ieee754_rem_pio2+0x28>
 8011180:	2200      	movs	r2, #0
 8011182:	2300      	movs	r3, #0
 8011184:	ed84 0b00 	vstr	d0, [r4]
 8011188:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801118c:	2000      	movs	r0, #0
 801118e:	e01b      	b.n	80111c8 <__ieee754_rem_pio2+0x60>
 8011190:	4b92      	ldr	r3, [pc, #584]	; (80113dc <__ieee754_rem_pio2+0x274>)
 8011192:	429e      	cmp	r6, r3
 8011194:	dc3b      	bgt.n	801120e <__ieee754_rem_pio2+0xa6>
 8011196:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801119a:	2d00      	cmp	r5, #0
 801119c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011398 <__ieee754_rem_pio2+0x230>
 80111a0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80111a4:	dd19      	ble.n	80111da <__ieee754_rem_pio2+0x72>
 80111a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80111aa:	429e      	cmp	r6, r3
 80111ac:	d00e      	beq.n	80111cc <__ieee754_rem_pio2+0x64>
 80111ae:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80113a0 <__ieee754_rem_pio2+0x238>
 80111b2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80111b6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80111ba:	ed84 5b00 	vstr	d5, [r4]
 80111be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80111c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80111c6:	2001      	movs	r0, #1
 80111c8:	b008      	add	sp, #32
 80111ca:	bd70      	pop	{r4, r5, r6, pc}
 80111cc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80113a8 <__ieee754_rem_pio2+0x240>
 80111d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80111d4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80113b0 <__ieee754_rem_pio2+0x248>
 80111d8:	e7eb      	b.n	80111b2 <__ieee754_rem_pio2+0x4a>
 80111da:	429e      	cmp	r6, r3
 80111dc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80111e0:	d00e      	beq.n	8011200 <__ieee754_rem_pio2+0x98>
 80111e2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80113a0 <__ieee754_rem_pio2+0x238>
 80111e6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80111ea:	ee37 7b45 	vsub.f64	d7, d7, d5
 80111ee:	ed84 5b00 	vstr	d5, [r4]
 80111f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111fa:	ed84 7b02 	vstr	d7, [r4, #8]
 80111fe:	e7e3      	b.n	80111c8 <__ieee754_rem_pio2+0x60>
 8011200:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80113a8 <__ieee754_rem_pio2+0x240>
 8011204:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011208:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80113b0 <__ieee754_rem_pio2+0x248>
 801120c:	e7eb      	b.n	80111e6 <__ieee754_rem_pio2+0x7e>
 801120e:	4b74      	ldr	r3, [pc, #464]	; (80113e0 <__ieee754_rem_pio2+0x278>)
 8011210:	429e      	cmp	r6, r3
 8011212:	dc70      	bgt.n	80112f6 <__ieee754_rem_pio2+0x18e>
 8011214:	f000 fc44 	bl	8011aa0 <fabs>
 8011218:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801121c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80113b8 <__ieee754_rem_pio2+0x250>
 8011220:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011224:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011228:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801122c:	ee17 0a90 	vmov	r0, s15
 8011230:	eeb1 4b45 	vneg.f64	d4, d5
 8011234:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011398 <__ieee754_rem_pio2+0x230>
 8011238:	eea5 0b47 	vfms.f64	d0, d5, d7
 801123c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80113a0 <__ieee754_rem_pio2+0x238>
 8011240:	281f      	cmp	r0, #31
 8011242:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011246:	ee30 6b47 	vsub.f64	d6, d0, d7
 801124a:	dc08      	bgt.n	801125e <__ieee754_rem_pio2+0xf6>
 801124c:	4b65      	ldr	r3, [pc, #404]	; (80113e4 <__ieee754_rem_pio2+0x27c>)
 801124e:	1e42      	subs	r2, r0, #1
 8011250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011254:	42b3      	cmp	r3, r6
 8011256:	d002      	beq.n	801125e <__ieee754_rem_pio2+0xf6>
 8011258:	ed84 6b00 	vstr	d6, [r4]
 801125c:	e024      	b.n	80112a8 <__ieee754_rem_pio2+0x140>
 801125e:	ee16 3a90 	vmov	r3, s13
 8011262:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011266:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801126a:	2b10      	cmp	r3, #16
 801126c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011270:	ddf2      	ble.n	8011258 <__ieee754_rem_pio2+0xf0>
 8011272:	eeb0 6b40 	vmov.f64	d6, d0
 8011276:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 80113a8 <__ieee754_rem_pio2+0x240>
 801127a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801127e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011282:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011286:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80113b0 <__ieee754_rem_pio2+0x248>
 801128a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801128e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011292:	ee13 3a90 	vmov	r3, s7
 8011296:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801129a:	1ad3      	subs	r3, r2, r3
 801129c:	2b31      	cmp	r3, #49	; 0x31
 801129e:	dc17      	bgt.n	80112d0 <__ieee754_rem_pio2+0x168>
 80112a0:	eeb0 0b46 	vmov.f64	d0, d6
 80112a4:	ed84 3b00 	vstr	d3, [r4]
 80112a8:	ed94 6b00 	vldr	d6, [r4]
 80112ac:	2d00      	cmp	r5, #0
 80112ae:	ee30 0b46 	vsub.f64	d0, d0, d6
 80112b2:	ee30 0b47 	vsub.f64	d0, d0, d7
 80112b6:	ed84 0b02 	vstr	d0, [r4, #8]
 80112ba:	da85      	bge.n	80111c8 <__ieee754_rem_pio2+0x60>
 80112bc:	eeb1 6b46 	vneg.f64	d6, d6
 80112c0:	eeb1 0b40 	vneg.f64	d0, d0
 80112c4:	ed84 6b00 	vstr	d6, [r4]
 80112c8:	ed84 0b02 	vstr	d0, [r4, #8]
 80112cc:	4240      	negs	r0, r0
 80112ce:	e77b      	b.n	80111c8 <__ieee754_rem_pio2+0x60>
 80112d0:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80113c0 <__ieee754_rem_pio2+0x258>
 80112d4:	eeb0 0b46 	vmov.f64	d0, d6
 80112d8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80112dc:	ee36 6b40 	vsub.f64	d6, d6, d0
 80112e0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80112e4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 80113c8 <__ieee754_rem_pio2+0x260>
 80112e8:	eeb0 7b46 	vmov.f64	d7, d6
 80112ec:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80112f0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80112f4:	e7b0      	b.n	8011258 <__ieee754_rem_pio2+0xf0>
 80112f6:	4b3c      	ldr	r3, [pc, #240]	; (80113e8 <__ieee754_rem_pio2+0x280>)
 80112f8:	429e      	cmp	r6, r3
 80112fa:	dd06      	ble.n	801130a <__ieee754_rem_pio2+0x1a2>
 80112fc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011300:	ed80 7b02 	vstr	d7, [r0, #8]
 8011304:	ed80 7b00 	vstr	d7, [r0]
 8011308:	e740      	b.n	801118c <__ieee754_rem_pio2+0x24>
 801130a:	1532      	asrs	r2, r6, #20
 801130c:	ee10 0a10 	vmov	r0, s0
 8011310:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011314:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011318:	ec41 0b17 	vmov	d7, r0, r1
 801131c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011320:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80113d0 <__ieee754_rem_pio2+0x268>
 8011324:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011328:	ee37 7b46 	vsub.f64	d7, d7, d6
 801132c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011330:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011334:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011338:	a808      	add	r0, sp, #32
 801133a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801133e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011342:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011346:	ee27 7b05 	vmul.f64	d7, d7, d5
 801134a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801134e:	2103      	movs	r1, #3
 8011350:	ed30 7b02 	vldmdb	r0!, {d7}
 8011354:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801135c:	460b      	mov	r3, r1
 801135e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8011362:	d0f5      	beq.n	8011350 <__ieee754_rem_pio2+0x1e8>
 8011364:	4921      	ldr	r1, [pc, #132]	; (80113ec <__ieee754_rem_pio2+0x284>)
 8011366:	9101      	str	r1, [sp, #4]
 8011368:	2102      	movs	r1, #2
 801136a:	9100      	str	r1, [sp, #0]
 801136c:	a802      	add	r0, sp, #8
 801136e:	4621      	mov	r1, r4
 8011370:	f000 f83e 	bl	80113f0 <__kernel_rem_pio2>
 8011374:	2d00      	cmp	r5, #0
 8011376:	f6bf af27 	bge.w	80111c8 <__ieee754_rem_pio2+0x60>
 801137a:	ed94 7b00 	vldr	d7, [r4]
 801137e:	eeb1 7b47 	vneg.f64	d7, d7
 8011382:	ed84 7b00 	vstr	d7, [r4]
 8011386:	ed94 7b02 	vldr	d7, [r4, #8]
 801138a:	eeb1 7b47 	vneg.f64	d7, d7
 801138e:	ed84 7b02 	vstr	d7, [r4, #8]
 8011392:	e79b      	b.n	80112cc <__ieee754_rem_pio2+0x164>
 8011394:	f3af 8000 	nop.w
 8011398:	54400000 	.word	0x54400000
 801139c:	3ff921fb 	.word	0x3ff921fb
 80113a0:	1a626331 	.word	0x1a626331
 80113a4:	3dd0b461 	.word	0x3dd0b461
 80113a8:	1a600000 	.word	0x1a600000
 80113ac:	3dd0b461 	.word	0x3dd0b461
 80113b0:	2e037073 	.word	0x2e037073
 80113b4:	3ba3198a 	.word	0x3ba3198a
 80113b8:	6dc9c883 	.word	0x6dc9c883
 80113bc:	3fe45f30 	.word	0x3fe45f30
 80113c0:	2e000000 	.word	0x2e000000
 80113c4:	3ba3198a 	.word	0x3ba3198a
 80113c8:	252049c1 	.word	0x252049c1
 80113cc:	397b839a 	.word	0x397b839a
 80113d0:	00000000 	.word	0x00000000
 80113d4:	41700000 	.word	0x41700000
 80113d8:	3fe921fb 	.word	0x3fe921fb
 80113dc:	4002d97b 	.word	0x4002d97b
 80113e0:	413921fb 	.word	0x413921fb
 80113e4:	0801498c 	.word	0x0801498c
 80113e8:	7fefffff 	.word	0x7fefffff
 80113ec:	08014a0c 	.word	0x08014a0c

080113f0 <__kernel_rem_pio2>:
 80113f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f4:	ed2d 8b06 	vpush	{d8-d10}
 80113f8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80113fc:	460f      	mov	r7, r1
 80113fe:	9002      	str	r0, [sp, #8]
 8011400:	49c3      	ldr	r1, [pc, #780]	; (8011710 <__kernel_rem_pio2+0x320>)
 8011402:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011404:	9301      	str	r3, [sp, #4]
 8011406:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801140a:	9901      	ldr	r1, [sp, #4]
 801140c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801140e:	f112 0f14 	cmn.w	r2, #20
 8011412:	bfa8      	it	ge
 8011414:	1ed0      	subge	r0, r2, #3
 8011416:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 801141a:	bfaa      	itet	ge
 801141c:	2418      	movge	r4, #24
 801141e:	2000      	movlt	r0, #0
 8011420:	fb90 f0f4 	sdivge	r0, r0, r4
 8011424:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 80116f8 <__kernel_rem_pio2+0x308>
 8011428:	f06f 0417 	mvn.w	r4, #23
 801142c:	fb00 4404 	mla	r4, r0, r4, r4
 8011430:	eba0 060a 	sub.w	r6, r0, sl
 8011434:	4414      	add	r4, r2
 8011436:	eb09 0c0a 	add.w	ip, r9, sl
 801143a:	ad1a      	add	r5, sp, #104	; 0x68
 801143c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8011440:	2200      	movs	r2, #0
 8011442:	4562      	cmp	r2, ip
 8011444:	dd10      	ble.n	8011468 <__kernel_rem_pio2+0x78>
 8011446:	9a01      	ldr	r2, [sp, #4]
 8011448:	a91a      	add	r1, sp, #104	; 0x68
 801144a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801144e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8011452:	f04f 0c00 	mov.w	ip, #0
 8011456:	45cc      	cmp	ip, r9
 8011458:	dc26      	bgt.n	80114a8 <__kernel_rem_pio2+0xb8>
 801145a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 80116f8 <__kernel_rem_pio2+0x308>
 801145e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011462:	4616      	mov	r6, r2
 8011464:	2500      	movs	r5, #0
 8011466:	e015      	b.n	8011494 <__kernel_rem_pio2+0xa4>
 8011468:	42d6      	cmn	r6, r2
 801146a:	d409      	bmi.n	8011480 <__kernel_rem_pio2+0x90>
 801146c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8011470:	ee07 1a90 	vmov	s15, r1
 8011474:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011478:	eca5 7b02 	vstmia	r5!, {d7}
 801147c:	3201      	adds	r2, #1
 801147e:	e7e0      	b.n	8011442 <__kernel_rem_pio2+0x52>
 8011480:	eeb0 7b46 	vmov.f64	d7, d6
 8011484:	e7f8      	b.n	8011478 <__kernel_rem_pio2+0x88>
 8011486:	ecbe 5b02 	vldmia	lr!, {d5}
 801148a:	ed96 6b00 	vldr	d6, [r6]
 801148e:	3501      	adds	r5, #1
 8011490:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011494:	4555      	cmp	r5, sl
 8011496:	f1a6 0608 	sub.w	r6, r6, #8
 801149a:	ddf4      	ble.n	8011486 <__kernel_rem_pio2+0x96>
 801149c:	eca8 7b02 	vstmia	r8!, {d7}
 80114a0:	f10c 0c01 	add.w	ip, ip, #1
 80114a4:	3208      	adds	r2, #8
 80114a6:	e7d6      	b.n	8011456 <__kernel_rem_pio2+0x66>
 80114a8:	aa06      	add	r2, sp, #24
 80114aa:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8011700 <__kernel_rem_pio2+0x310>
 80114ae:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011708 <__kernel_rem_pio2+0x318>
 80114b2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80114b6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80114ba:	9204      	str	r2, [sp, #16]
 80114bc:	9303      	str	r3, [sp, #12]
 80114be:	464d      	mov	r5, r9
 80114c0:	00eb      	lsls	r3, r5, #3
 80114c2:	9305      	str	r3, [sp, #20]
 80114c4:	ab92      	add	r3, sp, #584	; 0x248
 80114c6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80114ca:	f10d 0b18 	add.w	fp, sp, #24
 80114ce:	ab6a      	add	r3, sp, #424	; 0x1a8
 80114d0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80114d4:	465e      	mov	r6, fp
 80114d6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80114da:	4628      	mov	r0, r5
 80114dc:	2800      	cmp	r0, #0
 80114de:	f1a2 0208 	sub.w	r2, r2, #8
 80114e2:	dc48      	bgt.n	8011576 <__kernel_rem_pio2+0x186>
 80114e4:	4620      	mov	r0, r4
 80114e6:	f000 fae7 	bl	8011ab8 <scalbn>
 80114ea:	eeb0 8b40 	vmov.f64	d8, d0
 80114ee:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80114f2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80114f6:	f000 fb5f 	bl	8011bb8 <floor>
 80114fa:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80114fe:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011502:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011506:	2c00      	cmp	r4, #0
 8011508:	ee17 8a90 	vmov	r8, s15
 801150c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011510:	ee38 8b47 	vsub.f64	d8, d8, d7
 8011514:	dd41      	ble.n	801159a <__kernel_rem_pio2+0x1aa>
 8011516:	1e68      	subs	r0, r5, #1
 8011518:	ab06      	add	r3, sp, #24
 801151a:	f1c4 0c18 	rsb	ip, r4, #24
 801151e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011522:	fa46 f20c 	asr.w	r2, r6, ip
 8011526:	4490      	add	r8, r2
 8011528:	fa02 f20c 	lsl.w	r2, r2, ip
 801152c:	1ab6      	subs	r6, r6, r2
 801152e:	f1c4 0217 	rsb	r2, r4, #23
 8011532:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011536:	4116      	asrs	r6, r2
 8011538:	2e00      	cmp	r6, #0
 801153a:	dd3d      	ble.n	80115b8 <__kernel_rem_pio2+0x1c8>
 801153c:	f04f 0c00 	mov.w	ip, #0
 8011540:	f108 0801 	add.w	r8, r8, #1
 8011544:	4660      	mov	r0, ip
 8011546:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801154a:	4565      	cmp	r5, ip
 801154c:	dc6a      	bgt.n	8011624 <__kernel_rem_pio2+0x234>
 801154e:	2c00      	cmp	r4, #0
 8011550:	dd04      	ble.n	801155c <__kernel_rem_pio2+0x16c>
 8011552:	2c01      	cmp	r4, #1
 8011554:	d07b      	beq.n	801164e <__kernel_rem_pio2+0x25e>
 8011556:	2c02      	cmp	r4, #2
 8011558:	f000 8083 	beq.w	8011662 <__kernel_rem_pio2+0x272>
 801155c:	2e02      	cmp	r6, #2
 801155e:	d12b      	bne.n	80115b8 <__kernel_rem_pio2+0x1c8>
 8011560:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011564:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011568:	b330      	cbz	r0, 80115b8 <__kernel_rem_pio2+0x1c8>
 801156a:	4620      	mov	r0, r4
 801156c:	f000 faa4 	bl	8011ab8 <scalbn>
 8011570:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011574:	e020      	b.n	80115b8 <__kernel_rem_pio2+0x1c8>
 8011576:	ee20 7b09 	vmul.f64	d7, d0, d9
 801157a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801157e:	3801      	subs	r0, #1
 8011580:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011584:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011588:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801158c:	eca6 0a01 	vstmia	r6!, {s0}
 8011590:	ed92 0b00 	vldr	d0, [r2]
 8011594:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011598:	e7a0      	b.n	80114dc <__kernel_rem_pio2+0xec>
 801159a:	d105      	bne.n	80115a8 <__kernel_rem_pio2+0x1b8>
 801159c:	1e6a      	subs	r2, r5, #1
 801159e:	ab06      	add	r3, sp, #24
 80115a0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80115a4:	15f6      	asrs	r6, r6, #23
 80115a6:	e7c7      	b.n	8011538 <__kernel_rem_pio2+0x148>
 80115a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80115ac:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80115b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b4:	da34      	bge.n	8011620 <__kernel_rem_pio2+0x230>
 80115b6:	2600      	movs	r6, #0
 80115b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c0:	f040 80aa 	bne.w	8011718 <__kernel_rem_pio2+0x328>
 80115c4:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80115c8:	4658      	mov	r0, fp
 80115ca:	2200      	movs	r2, #0
 80115cc:	4548      	cmp	r0, r9
 80115ce:	da50      	bge.n	8011672 <__kernel_rem_pio2+0x282>
 80115d0:	2a00      	cmp	r2, #0
 80115d2:	d06b      	beq.n	80116ac <__kernel_rem_pio2+0x2bc>
 80115d4:	ab06      	add	r3, sp, #24
 80115d6:	3c18      	subs	r4, #24
 80115d8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f000 8087 	beq.w	80116f0 <__kernel_rem_pio2+0x300>
 80115e2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80115e6:	4620      	mov	r0, r4
 80115e8:	f000 fa66 	bl	8011ab8 <scalbn>
 80115ec:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8011700 <__kernel_rem_pio2+0x310>
 80115f0:	f10b 0201 	add.w	r2, fp, #1
 80115f4:	a96a      	add	r1, sp, #424	; 0x1a8
 80115f6:	00d3      	lsls	r3, r2, #3
 80115f8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80115fc:	465a      	mov	r2, fp
 80115fe:	2a00      	cmp	r2, #0
 8011600:	f280 80b8 	bge.w	8011774 <__kernel_rem_pio2+0x384>
 8011604:	465a      	mov	r2, fp
 8011606:	2a00      	cmp	r2, #0
 8011608:	f2c0 80d6 	blt.w	80117b8 <__kernel_rem_pio2+0x3c8>
 801160c:	a96a      	add	r1, sp, #424	; 0x1a8
 801160e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8011612:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80116f8 <__kernel_rem_pio2+0x308>
 8011616:	4d3f      	ldr	r5, [pc, #252]	; (8011714 <__kernel_rem_pio2+0x324>)
 8011618:	2000      	movs	r0, #0
 801161a:	ebab 0102 	sub.w	r1, fp, r2
 801161e:	e0c0      	b.n	80117a2 <__kernel_rem_pio2+0x3b2>
 8011620:	2602      	movs	r6, #2
 8011622:	e78b      	b.n	801153c <__kernel_rem_pio2+0x14c>
 8011624:	f8db 2000 	ldr.w	r2, [fp]
 8011628:	b958      	cbnz	r0, 8011642 <__kernel_rem_pio2+0x252>
 801162a:	b122      	cbz	r2, 8011636 <__kernel_rem_pio2+0x246>
 801162c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011630:	f8cb 2000 	str.w	r2, [fp]
 8011634:	2201      	movs	r2, #1
 8011636:	f10c 0c01 	add.w	ip, ip, #1
 801163a:	f10b 0b04 	add.w	fp, fp, #4
 801163e:	4610      	mov	r0, r2
 8011640:	e783      	b.n	801154a <__kernel_rem_pio2+0x15a>
 8011642:	ebae 0202 	sub.w	r2, lr, r2
 8011646:	f8cb 2000 	str.w	r2, [fp]
 801164a:	4602      	mov	r2, r0
 801164c:	e7f3      	b.n	8011636 <__kernel_rem_pio2+0x246>
 801164e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011652:	ab06      	add	r3, sp, #24
 8011654:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011658:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801165c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011660:	e77c      	b.n	801155c <__kernel_rem_pio2+0x16c>
 8011662:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011666:	ab06      	add	r3, sp, #24
 8011668:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801166c:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011670:	e7f4      	b.n	801165c <__kernel_rem_pio2+0x26c>
 8011672:	ab06      	add	r3, sp, #24
 8011674:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011678:	3801      	subs	r0, #1
 801167a:	431a      	orrs	r2, r3
 801167c:	e7a6      	b.n	80115cc <__kernel_rem_pio2+0x1dc>
 801167e:	3201      	adds	r2, #1
 8011680:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8011684:	2e00      	cmp	r6, #0
 8011686:	d0fa      	beq.n	801167e <__kernel_rem_pio2+0x28e>
 8011688:	9b05      	ldr	r3, [sp, #20]
 801168a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801168e:	eb0d 0003 	add.w	r0, sp, r3
 8011692:	9b01      	ldr	r3, [sp, #4]
 8011694:	18ee      	adds	r6, r5, r3
 8011696:	ab1a      	add	r3, sp, #104	; 0x68
 8011698:	f105 0c01 	add.w	ip, r5, #1
 801169c:	3898      	subs	r0, #152	; 0x98
 801169e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80116a2:	442a      	add	r2, r5
 80116a4:	4562      	cmp	r2, ip
 80116a6:	da04      	bge.n	80116b2 <__kernel_rem_pio2+0x2c2>
 80116a8:	4615      	mov	r5, r2
 80116aa:	e709      	b.n	80114c0 <__kernel_rem_pio2+0xd0>
 80116ac:	9804      	ldr	r0, [sp, #16]
 80116ae:	2201      	movs	r2, #1
 80116b0:	e7e6      	b.n	8011680 <__kernel_rem_pio2+0x290>
 80116b2:	9b03      	ldr	r3, [sp, #12]
 80116b4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80116b8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80116bc:	9305      	str	r3, [sp, #20]
 80116be:	ee07 3a90 	vmov	s15, r3
 80116c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80116c6:	2500      	movs	r5, #0
 80116c8:	eca6 7b02 	vstmia	r6!, {d7}
 80116cc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80116f8 <__kernel_rem_pio2+0x308>
 80116d0:	46b0      	mov	r8, r6
 80116d2:	4555      	cmp	r5, sl
 80116d4:	dd04      	ble.n	80116e0 <__kernel_rem_pio2+0x2f0>
 80116d6:	eca0 7b02 	vstmia	r0!, {d7}
 80116da:	f10c 0c01 	add.w	ip, ip, #1
 80116de:	e7e1      	b.n	80116a4 <__kernel_rem_pio2+0x2b4>
 80116e0:	ecbe 5b02 	vldmia	lr!, {d5}
 80116e4:	ed38 6b02 	vldmdb	r8!, {d6}
 80116e8:	3501      	adds	r5, #1
 80116ea:	eea5 7b06 	vfma.f64	d7, d5, d6
 80116ee:	e7f0      	b.n	80116d2 <__kernel_rem_pio2+0x2e2>
 80116f0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80116f4:	e76e      	b.n	80115d4 <__kernel_rem_pio2+0x1e4>
 80116f6:	bf00      	nop
	...
 8011704:	3e700000 	.word	0x3e700000
 8011708:	00000000 	.word	0x00000000
 801170c:	41700000 	.word	0x41700000
 8011710:	08014b58 	.word	0x08014b58
 8011714:	08014b18 	.word	0x08014b18
 8011718:	4260      	negs	r0, r4
 801171a:	eeb0 0b48 	vmov.f64	d0, d8
 801171e:	f000 f9cb 	bl	8011ab8 <scalbn>
 8011722:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011900 <__kernel_rem_pio2+0x510>
 8011726:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172e:	db18      	blt.n	8011762 <__kernel_rem_pio2+0x372>
 8011730:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011908 <__kernel_rem_pio2+0x518>
 8011734:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011738:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801173c:	aa06      	add	r2, sp, #24
 801173e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011742:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011746:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801174a:	f105 0b01 	add.w	fp, r5, #1
 801174e:	ee10 3a10 	vmov	r3, s0
 8011752:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011756:	ee17 3a10 	vmov	r3, s14
 801175a:	3418      	adds	r4, #24
 801175c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011760:	e73f      	b.n	80115e2 <__kernel_rem_pio2+0x1f2>
 8011762:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011766:	aa06      	add	r2, sp, #24
 8011768:	ee10 3a10 	vmov	r3, s0
 801176c:	46ab      	mov	fp, r5
 801176e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011772:	e736      	b.n	80115e2 <__kernel_rem_pio2+0x1f2>
 8011774:	a806      	add	r0, sp, #24
 8011776:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801177a:	9001      	str	r0, [sp, #4]
 801177c:	ee07 0a90 	vmov	s15, r0
 8011780:	3a01      	subs	r2, #1
 8011782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011786:	ee27 7b00 	vmul.f64	d7, d7, d0
 801178a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801178e:	ed21 7b02 	vstmdb	r1!, {d7}
 8011792:	e734      	b.n	80115fe <__kernel_rem_pio2+0x20e>
 8011794:	ecb5 5b02 	vldmia	r5!, {d5}
 8011798:	ecb4 6b02 	vldmia	r4!, {d6}
 801179c:	3001      	adds	r0, #1
 801179e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80117a2:	4548      	cmp	r0, r9
 80117a4:	dc01      	bgt.n	80117aa <__kernel_rem_pio2+0x3ba>
 80117a6:	4288      	cmp	r0, r1
 80117a8:	ddf4      	ble.n	8011794 <__kernel_rem_pio2+0x3a4>
 80117aa:	a842      	add	r0, sp, #264	; 0x108
 80117ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80117b0:	ed81 7b00 	vstr	d7, [r1]
 80117b4:	3a01      	subs	r2, #1
 80117b6:	e726      	b.n	8011606 <__kernel_rem_pio2+0x216>
 80117b8:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80117ba:	2a02      	cmp	r2, #2
 80117bc:	dc0a      	bgt.n	80117d4 <__kernel_rem_pio2+0x3e4>
 80117be:	2a00      	cmp	r2, #0
 80117c0:	dc2e      	bgt.n	8011820 <__kernel_rem_pio2+0x430>
 80117c2:	d047      	beq.n	8011854 <__kernel_rem_pio2+0x464>
 80117c4:	f008 0007 	and.w	r0, r8, #7
 80117c8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80117cc:	ecbd 8b06 	vpop	{d8-d10}
 80117d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80117d6:	2a03      	cmp	r2, #3
 80117d8:	d1f4      	bne.n	80117c4 <__kernel_rem_pio2+0x3d4>
 80117da:	a942      	add	r1, sp, #264	; 0x108
 80117dc:	f1a3 0208 	sub.w	r2, r3, #8
 80117e0:	440a      	add	r2, r1
 80117e2:	4611      	mov	r1, r2
 80117e4:	4658      	mov	r0, fp
 80117e6:	2800      	cmp	r0, #0
 80117e8:	f1a1 0108 	sub.w	r1, r1, #8
 80117ec:	dc55      	bgt.n	801189a <__kernel_rem_pio2+0x4aa>
 80117ee:	4659      	mov	r1, fp
 80117f0:	2901      	cmp	r1, #1
 80117f2:	f1a2 0208 	sub.w	r2, r2, #8
 80117f6:	dc60      	bgt.n	80118ba <__kernel_rem_pio2+0x4ca>
 80117f8:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8011910 <__kernel_rem_pio2+0x520>
 80117fc:	aa42      	add	r2, sp, #264	; 0x108
 80117fe:	4413      	add	r3, r2
 8011800:	f1bb 0f01 	cmp.w	fp, #1
 8011804:	dc69      	bgt.n	80118da <__kernel_rem_pio2+0x4ea>
 8011806:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801180a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801180e:	2e00      	cmp	r6, #0
 8011810:	d16a      	bne.n	80118e8 <__kernel_rem_pio2+0x4f8>
 8011812:	ed87 5b00 	vstr	d5, [r7]
 8011816:	ed87 6b02 	vstr	d6, [r7, #8]
 801181a:	ed87 7b04 	vstr	d7, [r7, #16]
 801181e:	e7d1      	b.n	80117c4 <__kernel_rem_pio2+0x3d4>
 8011820:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011910 <__kernel_rem_pio2+0x520>
 8011824:	aa42      	add	r2, sp, #264	; 0x108
 8011826:	4413      	add	r3, r2
 8011828:	465a      	mov	r2, fp
 801182a:	2a00      	cmp	r2, #0
 801182c:	da26      	bge.n	801187c <__kernel_rem_pio2+0x48c>
 801182e:	b35e      	cbz	r6, 8011888 <__kernel_rem_pio2+0x498>
 8011830:	eeb1 7b46 	vneg.f64	d7, d6
 8011834:	ed87 7b00 	vstr	d7, [r7]
 8011838:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801183c:	aa44      	add	r2, sp, #272	; 0x110
 801183e:	2301      	movs	r3, #1
 8011840:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011844:	459b      	cmp	fp, r3
 8011846:	da22      	bge.n	801188e <__kernel_rem_pio2+0x49e>
 8011848:	b10e      	cbz	r6, 801184e <__kernel_rem_pio2+0x45e>
 801184a:	eeb1 7b47 	vneg.f64	d7, d7
 801184e:	ed87 7b02 	vstr	d7, [r7, #8]
 8011852:	e7b7      	b.n	80117c4 <__kernel_rem_pio2+0x3d4>
 8011854:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011910 <__kernel_rem_pio2+0x520>
 8011858:	aa42      	add	r2, sp, #264	; 0x108
 801185a:	4413      	add	r3, r2
 801185c:	f1bb 0f00 	cmp.w	fp, #0
 8011860:	da05      	bge.n	801186e <__kernel_rem_pio2+0x47e>
 8011862:	b10e      	cbz	r6, 8011868 <__kernel_rem_pio2+0x478>
 8011864:	eeb1 7b47 	vneg.f64	d7, d7
 8011868:	ed87 7b00 	vstr	d7, [r7]
 801186c:	e7aa      	b.n	80117c4 <__kernel_rem_pio2+0x3d4>
 801186e:	ed33 6b02 	vldmdb	r3!, {d6}
 8011872:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011876:	ee37 7b06 	vadd.f64	d7, d7, d6
 801187a:	e7ef      	b.n	801185c <__kernel_rem_pio2+0x46c>
 801187c:	ed33 7b02 	vldmdb	r3!, {d7}
 8011880:	3a01      	subs	r2, #1
 8011882:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011886:	e7d0      	b.n	801182a <__kernel_rem_pio2+0x43a>
 8011888:	eeb0 7b46 	vmov.f64	d7, d6
 801188c:	e7d2      	b.n	8011834 <__kernel_rem_pio2+0x444>
 801188e:	ecb2 6b02 	vldmia	r2!, {d6}
 8011892:	3301      	adds	r3, #1
 8011894:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011898:	e7d4      	b.n	8011844 <__kernel_rem_pio2+0x454>
 801189a:	ed91 7b00 	vldr	d7, [r1]
 801189e:	ed91 5b02 	vldr	d5, [r1, #8]
 80118a2:	3801      	subs	r0, #1
 80118a4:	ee37 6b05 	vadd.f64	d6, d7, d5
 80118a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118ac:	ed81 6b00 	vstr	d6, [r1]
 80118b0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118b4:	ed81 7b02 	vstr	d7, [r1, #8]
 80118b8:	e795      	b.n	80117e6 <__kernel_rem_pio2+0x3f6>
 80118ba:	ed92 7b00 	vldr	d7, [r2]
 80118be:	ed92 5b02 	vldr	d5, [r2, #8]
 80118c2:	3901      	subs	r1, #1
 80118c4:	ee37 6b05 	vadd.f64	d6, d7, d5
 80118c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118cc:	ed82 6b00 	vstr	d6, [r2]
 80118d0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118d4:	ed82 7b02 	vstr	d7, [r2, #8]
 80118d8:	e78a      	b.n	80117f0 <__kernel_rem_pio2+0x400>
 80118da:	ed33 6b02 	vldmdb	r3!, {d6}
 80118de:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80118e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118e6:	e78b      	b.n	8011800 <__kernel_rem_pio2+0x410>
 80118e8:	eeb1 5b45 	vneg.f64	d5, d5
 80118ec:	eeb1 6b46 	vneg.f64	d6, d6
 80118f0:	ed87 5b00 	vstr	d5, [r7]
 80118f4:	eeb1 7b47 	vneg.f64	d7, d7
 80118f8:	ed87 6b02 	vstr	d6, [r7, #8]
 80118fc:	e78d      	b.n	801181a <__kernel_rem_pio2+0x42a>
 80118fe:	bf00      	nop
 8011900:	00000000 	.word	0x00000000
 8011904:	41700000 	.word	0x41700000
 8011908:	00000000 	.word	0x00000000
 801190c:	3e700000 	.word	0x3e700000
	...

08011918 <__kernel_cos>:
 8011918:	ee10 1a90 	vmov	r1, s1
 801191c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011920:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011924:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011928:	da05      	bge.n	8011936 <__kernel_cos+0x1e>
 801192a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801192e:	ee17 3a90 	vmov	r3, s15
 8011932:	2b00      	cmp	r3, #0
 8011934:	d03d      	beq.n	80119b2 <__kernel_cos+0x9a>
 8011936:	ee20 5b00 	vmul.f64	d5, d0, d0
 801193a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801193e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 80119b8 <__kernel_cos+0xa0>
 8011942:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 80119c0 <__kernel_cos+0xa8>
 8011946:	eea5 4b07 	vfma.f64	d4, d5, d7
 801194a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80119c8 <__kernel_cos+0xb0>
 801194e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011952:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 80119d0 <__kernel_cos+0xb8>
 8011956:	eea7 4b05 	vfma.f64	d4, d7, d5
 801195a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80119d8 <__kernel_cos+0xc0>
 801195e:	4b22      	ldr	r3, [pc, #136]	; (80119e8 <__kernel_cos+0xd0>)
 8011960:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011964:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80119e0 <__kernel_cos+0xc8>
 8011968:	4299      	cmp	r1, r3
 801196a:	eea7 4b05 	vfma.f64	d4, d7, d5
 801196e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011972:	ee24 4b05 	vmul.f64	d4, d4, d5
 8011976:	ee25 7b07 	vmul.f64	d7, d5, d7
 801197a:	eea5 1b04 	vfma.f64	d1, d5, d4
 801197e:	dc04      	bgt.n	801198a <__kernel_cos+0x72>
 8011980:	ee37 7b41 	vsub.f64	d7, d7, d1
 8011984:	ee36 0b47 	vsub.f64	d0, d6, d7
 8011988:	4770      	bx	lr
 801198a:	4b18      	ldr	r3, [pc, #96]	; (80119ec <__kernel_cos+0xd4>)
 801198c:	4299      	cmp	r1, r3
 801198e:	dc0d      	bgt.n	80119ac <__kernel_cos+0x94>
 8011990:	2200      	movs	r2, #0
 8011992:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011996:	ec43 2b15 	vmov	d5, r2, r3
 801199a:	ee36 0b45 	vsub.f64	d0, d6, d5
 801199e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80119a2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80119a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80119aa:	4770      	bx	lr
 80119ac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80119b0:	e7f3      	b.n	801199a <__kernel_cos+0x82>
 80119b2:	eeb0 0b46 	vmov.f64	d0, d6
 80119b6:	4770      	bx	lr
 80119b8:	be8838d4 	.word	0xbe8838d4
 80119bc:	bda8fae9 	.word	0xbda8fae9
 80119c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80119c4:	3e21ee9e 	.word	0x3e21ee9e
 80119c8:	809c52ad 	.word	0x809c52ad
 80119cc:	be927e4f 	.word	0xbe927e4f
 80119d0:	19cb1590 	.word	0x19cb1590
 80119d4:	3efa01a0 	.word	0x3efa01a0
 80119d8:	16c15177 	.word	0x16c15177
 80119dc:	bf56c16c 	.word	0xbf56c16c
 80119e0:	5555554c 	.word	0x5555554c
 80119e4:	3fa55555 	.word	0x3fa55555
 80119e8:	3fd33332 	.word	0x3fd33332
 80119ec:	3fe90000 	.word	0x3fe90000

080119f0 <__kernel_sin>:
 80119f0:	ee10 3a90 	vmov	r3, s1
 80119f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119f8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80119fc:	da04      	bge.n	8011a08 <__kernel_sin+0x18>
 80119fe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011a02:	ee17 3a90 	vmov	r3, s15
 8011a06:	b35b      	cbz	r3, 8011a60 <__kernel_sin+0x70>
 8011a08:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011a0c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011a10:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011a68 <__kernel_sin+0x78>
 8011a14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011a70 <__kernel_sin+0x80>
 8011a18:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011a1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011a78 <__kernel_sin+0x88>
 8011a20:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011a24:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011a80 <__kernel_sin+0x90>
 8011a28:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011a2c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011a88 <__kernel_sin+0x98>
 8011a30:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011a34:	b930      	cbnz	r0, 8011a44 <__kernel_sin+0x54>
 8011a36:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011a90 <__kernel_sin+0xa0>
 8011a3a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011a3e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011a42:	4770      	bx	lr
 8011a44:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011a48:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011a4c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011a50:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011a54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011a98 <__kernel_sin+0xa8>
 8011a58:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011a5c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011a60:	4770      	bx	lr
 8011a62:	bf00      	nop
 8011a64:	f3af 8000 	nop.w
 8011a68:	5acfd57c 	.word	0x5acfd57c
 8011a6c:	3de5d93a 	.word	0x3de5d93a
 8011a70:	8a2b9ceb 	.word	0x8a2b9ceb
 8011a74:	be5ae5e6 	.word	0xbe5ae5e6
 8011a78:	57b1fe7d 	.word	0x57b1fe7d
 8011a7c:	3ec71de3 	.word	0x3ec71de3
 8011a80:	19c161d5 	.word	0x19c161d5
 8011a84:	bf2a01a0 	.word	0xbf2a01a0
 8011a88:	1110f8a6 	.word	0x1110f8a6
 8011a8c:	3f811111 	.word	0x3f811111
 8011a90:	55555549 	.word	0x55555549
 8011a94:	bfc55555 	.word	0xbfc55555
 8011a98:	55555549 	.word	0x55555549
 8011a9c:	3fc55555 	.word	0x3fc55555

08011aa0 <fabs>:
 8011aa0:	ec51 0b10 	vmov	r0, r1, d0
 8011aa4:	ee10 2a10 	vmov	r2, s0
 8011aa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011aac:	ec43 2b10 	vmov	d0, r2, r3
 8011ab0:	4770      	bx	lr
 8011ab2:	0000      	movs	r0, r0
 8011ab4:	0000      	movs	r0, r0
	...

08011ab8 <scalbn>:
 8011ab8:	ee10 1a90 	vmov	r1, s1
 8011abc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011ac0:	b98b      	cbnz	r3, 8011ae6 <scalbn+0x2e>
 8011ac2:	ee10 3a10 	vmov	r3, s0
 8011ac6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011aca:	4319      	orrs	r1, r3
 8011acc:	d00a      	beq.n	8011ae4 <scalbn+0x2c>
 8011ace:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8011b80 <scalbn+0xc8>
 8011ad2:	4b37      	ldr	r3, [pc, #220]	; (8011bb0 <scalbn+0xf8>)
 8011ad4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011ad8:	4298      	cmp	r0, r3
 8011ada:	da0b      	bge.n	8011af4 <scalbn+0x3c>
 8011adc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8011b88 <scalbn+0xd0>
 8011ae0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011ae4:	4770      	bx	lr
 8011ae6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011aea:	4293      	cmp	r3, r2
 8011aec:	d107      	bne.n	8011afe <scalbn+0x46>
 8011aee:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011af2:	4770      	bx	lr
 8011af4:	ee10 1a90 	vmov	r1, s1
 8011af8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011afc:	3b36      	subs	r3, #54	; 0x36
 8011afe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011b02:	4290      	cmp	r0, r2
 8011b04:	dd0d      	ble.n	8011b22 <scalbn+0x6a>
 8011b06:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8011b90 <scalbn+0xd8>
 8011b0a:	ee10 3a90 	vmov	r3, s1
 8011b0e:	eeb0 6b47 	vmov.f64	d6, d7
 8011b12:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8011b98 <scalbn+0xe0>
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011b1c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011b20:	4770      	bx	lr
 8011b22:	4418      	add	r0, r3
 8011b24:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8011b28:	4298      	cmp	r0, r3
 8011b2a:	dcec      	bgt.n	8011b06 <scalbn+0x4e>
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	dd0a      	ble.n	8011b46 <scalbn+0x8e>
 8011b30:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011b34:	ec53 2b10 	vmov	r2, r3, d0
 8011b38:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011b3c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011b40:	ec43 2b10 	vmov	d0, r2, r3
 8011b44:	4770      	bx	lr
 8011b46:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8011b4a:	da09      	bge.n	8011b60 <scalbn+0xa8>
 8011b4c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011b88 <scalbn+0xd0>
 8011b50:	ee10 3a90 	vmov	r3, s1
 8011b54:	eeb0 6b47 	vmov.f64	d6, d7
 8011b58:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8011ba0 <scalbn+0xe8>
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	e7db      	b.n	8011b18 <scalbn+0x60>
 8011b60:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8011b64:	ec53 2b10 	vmov	r2, r3, d0
 8011b68:	3036      	adds	r0, #54	; 0x36
 8011b6a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011b6e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011b72:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8011ba8 <scalbn+0xf0>
 8011b76:	ec43 2b10 	vmov	d0, r2, r3
 8011b7a:	e7b1      	b.n	8011ae0 <scalbn+0x28>
 8011b7c:	f3af 8000 	nop.w
 8011b80:	00000000 	.word	0x00000000
 8011b84:	43500000 	.word	0x43500000
 8011b88:	c2f8f359 	.word	0xc2f8f359
 8011b8c:	01a56e1f 	.word	0x01a56e1f
 8011b90:	8800759c 	.word	0x8800759c
 8011b94:	7e37e43c 	.word	0x7e37e43c
 8011b98:	8800759c 	.word	0x8800759c
 8011b9c:	fe37e43c 	.word	0xfe37e43c
 8011ba0:	c2f8f359 	.word	0xc2f8f359
 8011ba4:	81a56e1f 	.word	0x81a56e1f
 8011ba8:	00000000 	.word	0x00000000
 8011bac:	3c900000 	.word	0x3c900000
 8011bb0:	ffff3cb0 	.word	0xffff3cb0
 8011bb4:	00000000 	.word	0x00000000

08011bb8 <floor>:
 8011bb8:	ee10 1a90 	vmov	r1, s1
 8011bbc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011bc0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011bc4:	2b13      	cmp	r3, #19
 8011bc6:	b530      	push	{r4, r5, lr}
 8011bc8:	ee10 0a10 	vmov	r0, s0
 8011bcc:	ee10 5a10 	vmov	r5, s0
 8011bd0:	dc31      	bgt.n	8011c36 <floor+0x7e>
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	da15      	bge.n	8011c02 <floor+0x4a>
 8011bd6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011c98 <floor+0xe0>
 8011bda:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011bde:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be6:	dd07      	ble.n	8011bf8 <floor+0x40>
 8011be8:	2900      	cmp	r1, #0
 8011bea:	da4e      	bge.n	8011c8a <floor+0xd2>
 8011bec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011bf0:	4308      	orrs	r0, r1
 8011bf2:	d04d      	beq.n	8011c90 <floor+0xd8>
 8011bf4:	492a      	ldr	r1, [pc, #168]	; (8011ca0 <floor+0xe8>)
 8011bf6:	2000      	movs	r0, #0
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	ec43 2b10 	vmov	d0, r2, r3
 8011c00:	e020      	b.n	8011c44 <floor+0x8c>
 8011c02:	4a28      	ldr	r2, [pc, #160]	; (8011ca4 <floor+0xec>)
 8011c04:	411a      	asrs	r2, r3
 8011c06:	ea01 0402 	and.w	r4, r1, r2
 8011c0a:	4304      	orrs	r4, r0
 8011c0c:	d01a      	beq.n	8011c44 <floor+0x8c>
 8011c0e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8011c98 <floor+0xe0>
 8011c12:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011c16:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1e:	ddeb      	ble.n	8011bf8 <floor+0x40>
 8011c20:	2900      	cmp	r1, #0
 8011c22:	bfbe      	ittt	lt
 8011c24:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011c28:	fa40 f303 	asrlt.w	r3, r0, r3
 8011c2c:	18c9      	addlt	r1, r1, r3
 8011c2e:	ea21 0102 	bic.w	r1, r1, r2
 8011c32:	2000      	movs	r0, #0
 8011c34:	e7e0      	b.n	8011bf8 <floor+0x40>
 8011c36:	2b33      	cmp	r3, #51	; 0x33
 8011c38:	dd05      	ble.n	8011c46 <floor+0x8e>
 8011c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c3e:	d101      	bne.n	8011c44 <floor+0x8c>
 8011c40:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011c44:	bd30      	pop	{r4, r5, pc}
 8011c46:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c4e:	40e2      	lsrs	r2, r4
 8011c50:	4210      	tst	r0, r2
 8011c52:	d0f7      	beq.n	8011c44 <floor+0x8c>
 8011c54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011c98 <floor+0xe0>
 8011c58:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011c5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c64:	ddc8      	ble.n	8011bf8 <floor+0x40>
 8011c66:	2900      	cmp	r1, #0
 8011c68:	da02      	bge.n	8011c70 <floor+0xb8>
 8011c6a:	2b14      	cmp	r3, #20
 8011c6c:	d103      	bne.n	8011c76 <floor+0xbe>
 8011c6e:	3101      	adds	r1, #1
 8011c70:	ea20 0002 	bic.w	r0, r0, r2
 8011c74:	e7c0      	b.n	8011bf8 <floor+0x40>
 8011c76:	2401      	movs	r4, #1
 8011c78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011c7c:	fa04 f303 	lsl.w	r3, r4, r3
 8011c80:	4418      	add	r0, r3
 8011c82:	4285      	cmp	r5, r0
 8011c84:	bf88      	it	hi
 8011c86:	1909      	addhi	r1, r1, r4
 8011c88:	e7f2      	b.n	8011c70 <floor+0xb8>
 8011c8a:	2000      	movs	r0, #0
 8011c8c:	4601      	mov	r1, r0
 8011c8e:	e7b3      	b.n	8011bf8 <floor+0x40>
 8011c90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011c94:	e7b0      	b.n	8011bf8 <floor+0x40>
 8011c96:	bf00      	nop
 8011c98:	8800759c 	.word	0x8800759c
 8011c9c:	7e37e43c 	.word	0x7e37e43c
 8011ca0:	bff00000 	.word	0xbff00000
 8011ca4:	000fffff 	.word	0x000fffff

08011ca8 <std>:
 8011ca8:	2300      	movs	r3, #0
 8011caa:	b510      	push	{r4, lr}
 8011cac:	4604      	mov	r4, r0
 8011cae:	e9c0 3300 	strd	r3, r3, [r0]
 8011cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011cb6:	6083      	str	r3, [r0, #8]
 8011cb8:	8181      	strh	r1, [r0, #12]
 8011cba:	6643      	str	r3, [r0, #100]	; 0x64
 8011cbc:	81c2      	strh	r2, [r0, #14]
 8011cbe:	6183      	str	r3, [r0, #24]
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	2208      	movs	r2, #8
 8011cc4:	305c      	adds	r0, #92	; 0x5c
 8011cc6:	f000 f90d 	bl	8011ee4 <memset>
 8011cca:	4b05      	ldr	r3, [pc, #20]	; (8011ce0 <std+0x38>)
 8011ccc:	6263      	str	r3, [r4, #36]	; 0x24
 8011cce:	4b05      	ldr	r3, [pc, #20]	; (8011ce4 <std+0x3c>)
 8011cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8011cd2:	4b05      	ldr	r3, [pc, #20]	; (8011ce8 <std+0x40>)
 8011cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011cd6:	4b05      	ldr	r3, [pc, #20]	; (8011cec <std+0x44>)
 8011cd8:	6224      	str	r4, [r4, #32]
 8011cda:	6323      	str	r3, [r4, #48]	; 0x30
 8011cdc:	bd10      	pop	{r4, pc}
 8011cde:	bf00      	nop
 8011ce0:	08012909 	.word	0x08012909
 8011ce4:	0801292b 	.word	0x0801292b
 8011ce8:	08012963 	.word	0x08012963
 8011cec:	08012987 	.word	0x08012987

08011cf0 <stdio_exit_handler>:
 8011cf0:	4a02      	ldr	r2, [pc, #8]	; (8011cfc <stdio_exit_handler+0xc>)
 8011cf2:	4903      	ldr	r1, [pc, #12]	; (8011d00 <stdio_exit_handler+0x10>)
 8011cf4:	4803      	ldr	r0, [pc, #12]	; (8011d04 <stdio_exit_handler+0x14>)
 8011cf6:	f000 b869 	b.w	8011dcc <_fwalk_sglue>
 8011cfa:	bf00      	nop
 8011cfc:	200000a4 	.word	0x200000a4
 8011d00:	080128a1 	.word	0x080128a1
 8011d04:	200000b0 	.word	0x200000b0

08011d08 <cleanup_stdio>:
 8011d08:	6841      	ldr	r1, [r0, #4]
 8011d0a:	4b0c      	ldr	r3, [pc, #48]	; (8011d3c <cleanup_stdio+0x34>)
 8011d0c:	4299      	cmp	r1, r3
 8011d0e:	b510      	push	{r4, lr}
 8011d10:	4604      	mov	r4, r0
 8011d12:	d001      	beq.n	8011d18 <cleanup_stdio+0x10>
 8011d14:	f000 fdc4 	bl	80128a0 <_fflush_r>
 8011d18:	68a1      	ldr	r1, [r4, #8]
 8011d1a:	4b09      	ldr	r3, [pc, #36]	; (8011d40 <cleanup_stdio+0x38>)
 8011d1c:	4299      	cmp	r1, r3
 8011d1e:	d002      	beq.n	8011d26 <cleanup_stdio+0x1e>
 8011d20:	4620      	mov	r0, r4
 8011d22:	f000 fdbd 	bl	80128a0 <_fflush_r>
 8011d26:	68e1      	ldr	r1, [r4, #12]
 8011d28:	4b06      	ldr	r3, [pc, #24]	; (8011d44 <cleanup_stdio+0x3c>)
 8011d2a:	4299      	cmp	r1, r3
 8011d2c:	d004      	beq.n	8011d38 <cleanup_stdio+0x30>
 8011d2e:	4620      	mov	r0, r4
 8011d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d34:	f000 bdb4 	b.w	80128a0 <_fflush_r>
 8011d38:	bd10      	pop	{r4, pc}
 8011d3a:	bf00      	nop
 8011d3c:	20006a5c 	.word	0x20006a5c
 8011d40:	20006ac4 	.word	0x20006ac4
 8011d44:	20006b2c 	.word	0x20006b2c

08011d48 <global_stdio_init.part.0>:
 8011d48:	b510      	push	{r4, lr}
 8011d4a:	4b0b      	ldr	r3, [pc, #44]	; (8011d78 <global_stdio_init.part.0+0x30>)
 8011d4c:	4c0b      	ldr	r4, [pc, #44]	; (8011d7c <global_stdio_init.part.0+0x34>)
 8011d4e:	4a0c      	ldr	r2, [pc, #48]	; (8011d80 <global_stdio_init.part.0+0x38>)
 8011d50:	601a      	str	r2, [r3, #0]
 8011d52:	4620      	mov	r0, r4
 8011d54:	2200      	movs	r2, #0
 8011d56:	2104      	movs	r1, #4
 8011d58:	f7ff ffa6 	bl	8011ca8 <std>
 8011d5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011d60:	2201      	movs	r2, #1
 8011d62:	2109      	movs	r1, #9
 8011d64:	f7ff ffa0 	bl	8011ca8 <std>
 8011d68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011d6c:	2202      	movs	r2, #2
 8011d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d72:	2112      	movs	r1, #18
 8011d74:	f7ff bf98 	b.w	8011ca8 <std>
 8011d78:	20006b94 	.word	0x20006b94
 8011d7c:	20006a5c 	.word	0x20006a5c
 8011d80:	08011cf1 	.word	0x08011cf1

08011d84 <__sfp_lock_acquire>:
 8011d84:	4801      	ldr	r0, [pc, #4]	; (8011d8c <__sfp_lock_acquire+0x8>)
 8011d86:	f000 b935 	b.w	8011ff4 <__retarget_lock_acquire_recursive>
 8011d8a:	bf00      	nop
 8011d8c:	20006b9d 	.word	0x20006b9d

08011d90 <__sfp_lock_release>:
 8011d90:	4801      	ldr	r0, [pc, #4]	; (8011d98 <__sfp_lock_release+0x8>)
 8011d92:	f000 b930 	b.w	8011ff6 <__retarget_lock_release_recursive>
 8011d96:	bf00      	nop
 8011d98:	20006b9d 	.word	0x20006b9d

08011d9c <__sinit>:
 8011d9c:	b510      	push	{r4, lr}
 8011d9e:	4604      	mov	r4, r0
 8011da0:	f7ff fff0 	bl	8011d84 <__sfp_lock_acquire>
 8011da4:	6a23      	ldr	r3, [r4, #32]
 8011da6:	b11b      	cbz	r3, 8011db0 <__sinit+0x14>
 8011da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dac:	f7ff bff0 	b.w	8011d90 <__sfp_lock_release>
 8011db0:	4b04      	ldr	r3, [pc, #16]	; (8011dc4 <__sinit+0x28>)
 8011db2:	6223      	str	r3, [r4, #32]
 8011db4:	4b04      	ldr	r3, [pc, #16]	; (8011dc8 <__sinit+0x2c>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d1f5      	bne.n	8011da8 <__sinit+0xc>
 8011dbc:	f7ff ffc4 	bl	8011d48 <global_stdio_init.part.0>
 8011dc0:	e7f2      	b.n	8011da8 <__sinit+0xc>
 8011dc2:	bf00      	nop
 8011dc4:	08011d09 	.word	0x08011d09
 8011dc8:	20006b94 	.word	0x20006b94

08011dcc <_fwalk_sglue>:
 8011dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dd0:	4607      	mov	r7, r0
 8011dd2:	4688      	mov	r8, r1
 8011dd4:	4614      	mov	r4, r2
 8011dd6:	2600      	movs	r6, #0
 8011dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8011de0:	d505      	bpl.n	8011dee <_fwalk_sglue+0x22>
 8011de2:	6824      	ldr	r4, [r4, #0]
 8011de4:	2c00      	cmp	r4, #0
 8011de6:	d1f7      	bne.n	8011dd8 <_fwalk_sglue+0xc>
 8011de8:	4630      	mov	r0, r6
 8011dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dee:	89ab      	ldrh	r3, [r5, #12]
 8011df0:	2b01      	cmp	r3, #1
 8011df2:	d907      	bls.n	8011e04 <_fwalk_sglue+0x38>
 8011df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011df8:	3301      	adds	r3, #1
 8011dfa:	d003      	beq.n	8011e04 <_fwalk_sglue+0x38>
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	4638      	mov	r0, r7
 8011e00:	47c0      	blx	r8
 8011e02:	4306      	orrs	r6, r0
 8011e04:	3568      	adds	r5, #104	; 0x68
 8011e06:	e7e9      	b.n	8011ddc <_fwalk_sglue+0x10>

08011e08 <iprintf>:
 8011e08:	b40f      	push	{r0, r1, r2, r3}
 8011e0a:	b507      	push	{r0, r1, r2, lr}
 8011e0c:	4906      	ldr	r1, [pc, #24]	; (8011e28 <iprintf+0x20>)
 8011e0e:	ab04      	add	r3, sp, #16
 8011e10:	6808      	ldr	r0, [r1, #0]
 8011e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e16:	6881      	ldr	r1, [r0, #8]
 8011e18:	9301      	str	r3, [sp, #4]
 8011e1a:	f000 f971 	bl	8012100 <_vfiprintf_r>
 8011e1e:	b003      	add	sp, #12
 8011e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e24:	b004      	add	sp, #16
 8011e26:	4770      	bx	lr
 8011e28:	200000fc 	.word	0x200000fc

08011e2c <_puts_r>:
 8011e2c:	6a03      	ldr	r3, [r0, #32]
 8011e2e:	b570      	push	{r4, r5, r6, lr}
 8011e30:	6884      	ldr	r4, [r0, #8]
 8011e32:	4605      	mov	r5, r0
 8011e34:	460e      	mov	r6, r1
 8011e36:	b90b      	cbnz	r3, 8011e3c <_puts_r+0x10>
 8011e38:	f7ff ffb0 	bl	8011d9c <__sinit>
 8011e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e3e:	07db      	lsls	r3, r3, #31
 8011e40:	d405      	bmi.n	8011e4e <_puts_r+0x22>
 8011e42:	89a3      	ldrh	r3, [r4, #12]
 8011e44:	0598      	lsls	r0, r3, #22
 8011e46:	d402      	bmi.n	8011e4e <_puts_r+0x22>
 8011e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e4a:	f000 f8d3 	bl	8011ff4 <__retarget_lock_acquire_recursive>
 8011e4e:	89a3      	ldrh	r3, [r4, #12]
 8011e50:	0719      	lsls	r1, r3, #28
 8011e52:	d513      	bpl.n	8011e7c <_puts_r+0x50>
 8011e54:	6923      	ldr	r3, [r4, #16]
 8011e56:	b18b      	cbz	r3, 8011e7c <_puts_r+0x50>
 8011e58:	3e01      	subs	r6, #1
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e60:	3b01      	subs	r3, #1
 8011e62:	60a3      	str	r3, [r4, #8]
 8011e64:	b9e9      	cbnz	r1, 8011ea2 <_puts_r+0x76>
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	da2e      	bge.n	8011ec8 <_puts_r+0x9c>
 8011e6a:	4622      	mov	r2, r4
 8011e6c:	210a      	movs	r1, #10
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f000 fd8d 	bl	801298e <__swbuf_r>
 8011e74:	3001      	adds	r0, #1
 8011e76:	d007      	beq.n	8011e88 <_puts_r+0x5c>
 8011e78:	250a      	movs	r5, #10
 8011e7a:	e007      	b.n	8011e8c <_puts_r+0x60>
 8011e7c:	4621      	mov	r1, r4
 8011e7e:	4628      	mov	r0, r5
 8011e80:	f000 fdc2 	bl	8012a08 <__swsetup_r>
 8011e84:	2800      	cmp	r0, #0
 8011e86:	d0e7      	beq.n	8011e58 <_puts_r+0x2c>
 8011e88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e8e:	07da      	lsls	r2, r3, #31
 8011e90:	d405      	bmi.n	8011e9e <_puts_r+0x72>
 8011e92:	89a3      	ldrh	r3, [r4, #12]
 8011e94:	059b      	lsls	r3, r3, #22
 8011e96:	d402      	bmi.n	8011e9e <_puts_r+0x72>
 8011e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e9a:	f000 f8ac 	bl	8011ff6 <__retarget_lock_release_recursive>
 8011e9e:	4628      	mov	r0, r5
 8011ea0:	bd70      	pop	{r4, r5, r6, pc}
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	da04      	bge.n	8011eb0 <_puts_r+0x84>
 8011ea6:	69a2      	ldr	r2, [r4, #24]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	dc06      	bgt.n	8011eba <_puts_r+0x8e>
 8011eac:	290a      	cmp	r1, #10
 8011eae:	d004      	beq.n	8011eba <_puts_r+0x8e>
 8011eb0:	6823      	ldr	r3, [r4, #0]
 8011eb2:	1c5a      	adds	r2, r3, #1
 8011eb4:	6022      	str	r2, [r4, #0]
 8011eb6:	7019      	strb	r1, [r3, #0]
 8011eb8:	e7cf      	b.n	8011e5a <_puts_r+0x2e>
 8011eba:	4622      	mov	r2, r4
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	f000 fd66 	bl	801298e <__swbuf_r>
 8011ec2:	3001      	adds	r0, #1
 8011ec4:	d1c9      	bne.n	8011e5a <_puts_r+0x2e>
 8011ec6:	e7df      	b.n	8011e88 <_puts_r+0x5c>
 8011ec8:	6823      	ldr	r3, [r4, #0]
 8011eca:	250a      	movs	r5, #10
 8011ecc:	1c5a      	adds	r2, r3, #1
 8011ece:	6022      	str	r2, [r4, #0]
 8011ed0:	701d      	strb	r5, [r3, #0]
 8011ed2:	e7db      	b.n	8011e8c <_puts_r+0x60>

08011ed4 <puts>:
 8011ed4:	4b02      	ldr	r3, [pc, #8]	; (8011ee0 <puts+0xc>)
 8011ed6:	4601      	mov	r1, r0
 8011ed8:	6818      	ldr	r0, [r3, #0]
 8011eda:	f7ff bfa7 	b.w	8011e2c <_puts_r>
 8011ede:	bf00      	nop
 8011ee0:	200000fc 	.word	0x200000fc

08011ee4 <memset>:
 8011ee4:	4402      	add	r2, r0
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d100      	bne.n	8011eee <memset+0xa>
 8011eec:	4770      	bx	lr
 8011eee:	f803 1b01 	strb.w	r1, [r3], #1
 8011ef2:	e7f9      	b.n	8011ee8 <memset+0x4>

08011ef4 <_reclaim_reent>:
 8011ef4:	4b29      	ldr	r3, [pc, #164]	; (8011f9c <_reclaim_reent+0xa8>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	4283      	cmp	r3, r0
 8011efa:	b570      	push	{r4, r5, r6, lr}
 8011efc:	4604      	mov	r4, r0
 8011efe:	d04b      	beq.n	8011f98 <_reclaim_reent+0xa4>
 8011f00:	69c3      	ldr	r3, [r0, #28]
 8011f02:	b143      	cbz	r3, 8011f16 <_reclaim_reent+0x22>
 8011f04:	68db      	ldr	r3, [r3, #12]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d144      	bne.n	8011f94 <_reclaim_reent+0xa0>
 8011f0a:	69e3      	ldr	r3, [r4, #28]
 8011f0c:	6819      	ldr	r1, [r3, #0]
 8011f0e:	b111      	cbz	r1, 8011f16 <_reclaim_reent+0x22>
 8011f10:	4620      	mov	r0, r4
 8011f12:	f000 f87f 	bl	8012014 <_free_r>
 8011f16:	6961      	ldr	r1, [r4, #20]
 8011f18:	b111      	cbz	r1, 8011f20 <_reclaim_reent+0x2c>
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	f000 f87a 	bl	8012014 <_free_r>
 8011f20:	69e1      	ldr	r1, [r4, #28]
 8011f22:	b111      	cbz	r1, 8011f2a <_reclaim_reent+0x36>
 8011f24:	4620      	mov	r0, r4
 8011f26:	f000 f875 	bl	8012014 <_free_r>
 8011f2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011f2c:	b111      	cbz	r1, 8011f34 <_reclaim_reent+0x40>
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f000 f870 	bl	8012014 <_free_r>
 8011f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f36:	b111      	cbz	r1, 8011f3e <_reclaim_reent+0x4a>
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f000 f86b 	bl	8012014 <_free_r>
 8011f3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011f40:	b111      	cbz	r1, 8011f48 <_reclaim_reent+0x54>
 8011f42:	4620      	mov	r0, r4
 8011f44:	f000 f866 	bl	8012014 <_free_r>
 8011f48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011f4a:	b111      	cbz	r1, 8011f52 <_reclaim_reent+0x5e>
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	f000 f861 	bl	8012014 <_free_r>
 8011f52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011f54:	b111      	cbz	r1, 8011f5c <_reclaim_reent+0x68>
 8011f56:	4620      	mov	r0, r4
 8011f58:	f000 f85c 	bl	8012014 <_free_r>
 8011f5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011f5e:	b111      	cbz	r1, 8011f66 <_reclaim_reent+0x72>
 8011f60:	4620      	mov	r0, r4
 8011f62:	f000 f857 	bl	8012014 <_free_r>
 8011f66:	6a23      	ldr	r3, [r4, #32]
 8011f68:	b1b3      	cbz	r3, 8011f98 <_reclaim_reent+0xa4>
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f70:	4718      	bx	r3
 8011f72:	5949      	ldr	r1, [r1, r5]
 8011f74:	b941      	cbnz	r1, 8011f88 <_reclaim_reent+0x94>
 8011f76:	3504      	adds	r5, #4
 8011f78:	69e3      	ldr	r3, [r4, #28]
 8011f7a:	2d80      	cmp	r5, #128	; 0x80
 8011f7c:	68d9      	ldr	r1, [r3, #12]
 8011f7e:	d1f8      	bne.n	8011f72 <_reclaim_reent+0x7e>
 8011f80:	4620      	mov	r0, r4
 8011f82:	f000 f847 	bl	8012014 <_free_r>
 8011f86:	e7c0      	b.n	8011f0a <_reclaim_reent+0x16>
 8011f88:	680e      	ldr	r6, [r1, #0]
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f000 f842 	bl	8012014 <_free_r>
 8011f90:	4631      	mov	r1, r6
 8011f92:	e7ef      	b.n	8011f74 <_reclaim_reent+0x80>
 8011f94:	2500      	movs	r5, #0
 8011f96:	e7ef      	b.n	8011f78 <_reclaim_reent+0x84>
 8011f98:	bd70      	pop	{r4, r5, r6, pc}
 8011f9a:	bf00      	nop
 8011f9c:	200000fc 	.word	0x200000fc

08011fa0 <__errno>:
 8011fa0:	4b01      	ldr	r3, [pc, #4]	; (8011fa8 <__errno+0x8>)
 8011fa2:	6818      	ldr	r0, [r3, #0]
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop
 8011fa8:	200000fc 	.word	0x200000fc

08011fac <__libc_init_array>:
 8011fac:	b570      	push	{r4, r5, r6, lr}
 8011fae:	4d0d      	ldr	r5, [pc, #52]	; (8011fe4 <__libc_init_array+0x38>)
 8011fb0:	4c0d      	ldr	r4, [pc, #52]	; (8011fe8 <__libc_init_array+0x3c>)
 8011fb2:	1b64      	subs	r4, r4, r5
 8011fb4:	10a4      	asrs	r4, r4, #2
 8011fb6:	2600      	movs	r6, #0
 8011fb8:	42a6      	cmp	r6, r4
 8011fba:	d109      	bne.n	8011fd0 <__libc_init_array+0x24>
 8011fbc:	4d0b      	ldr	r5, [pc, #44]	; (8011fec <__libc_init_array+0x40>)
 8011fbe:	4c0c      	ldr	r4, [pc, #48]	; (8011ff0 <__libc_init_array+0x44>)
 8011fc0:	f000 fe54 	bl	8012c6c <_init>
 8011fc4:	1b64      	subs	r4, r4, r5
 8011fc6:	10a4      	asrs	r4, r4, #2
 8011fc8:	2600      	movs	r6, #0
 8011fca:	42a6      	cmp	r6, r4
 8011fcc:	d105      	bne.n	8011fda <__libc_init_array+0x2e>
 8011fce:	bd70      	pop	{r4, r5, r6, pc}
 8011fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fd4:	4798      	blx	r3
 8011fd6:	3601      	adds	r6, #1
 8011fd8:	e7ee      	b.n	8011fb8 <__libc_init_array+0xc>
 8011fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fde:	4798      	blx	r3
 8011fe0:	3601      	adds	r6, #1
 8011fe2:	e7f2      	b.n	8011fca <__libc_init_array+0x1e>
 8011fe4:	08014ba4 	.word	0x08014ba4
 8011fe8:	08014ba4 	.word	0x08014ba4
 8011fec:	08014ba4 	.word	0x08014ba4
 8011ff0:	08014bac 	.word	0x08014bac

08011ff4 <__retarget_lock_acquire_recursive>:
 8011ff4:	4770      	bx	lr

08011ff6 <__retarget_lock_release_recursive>:
 8011ff6:	4770      	bx	lr

08011ff8 <memcpy>:
 8011ff8:	440a      	add	r2, r1
 8011ffa:	4291      	cmp	r1, r2
 8011ffc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012000:	d100      	bne.n	8012004 <memcpy+0xc>
 8012002:	4770      	bx	lr
 8012004:	b510      	push	{r4, lr}
 8012006:	f811 4b01 	ldrb.w	r4, [r1], #1
 801200a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801200e:	4291      	cmp	r1, r2
 8012010:	d1f9      	bne.n	8012006 <memcpy+0xe>
 8012012:	bd10      	pop	{r4, pc}

08012014 <_free_r>:
 8012014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012016:	2900      	cmp	r1, #0
 8012018:	d044      	beq.n	80120a4 <_free_r+0x90>
 801201a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801201e:	9001      	str	r0, [sp, #4]
 8012020:	2b00      	cmp	r3, #0
 8012022:	f1a1 0404 	sub.w	r4, r1, #4
 8012026:	bfb8      	it	lt
 8012028:	18e4      	addlt	r4, r4, r3
 801202a:	f000 fc61 	bl	80128f0 <__malloc_lock>
 801202e:	4a1e      	ldr	r2, [pc, #120]	; (80120a8 <_free_r+0x94>)
 8012030:	9801      	ldr	r0, [sp, #4]
 8012032:	6813      	ldr	r3, [r2, #0]
 8012034:	b933      	cbnz	r3, 8012044 <_free_r+0x30>
 8012036:	6063      	str	r3, [r4, #4]
 8012038:	6014      	str	r4, [r2, #0]
 801203a:	b003      	add	sp, #12
 801203c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012040:	f000 bc5c 	b.w	80128fc <__malloc_unlock>
 8012044:	42a3      	cmp	r3, r4
 8012046:	d908      	bls.n	801205a <_free_r+0x46>
 8012048:	6825      	ldr	r5, [r4, #0]
 801204a:	1961      	adds	r1, r4, r5
 801204c:	428b      	cmp	r3, r1
 801204e:	bf01      	itttt	eq
 8012050:	6819      	ldreq	r1, [r3, #0]
 8012052:	685b      	ldreq	r3, [r3, #4]
 8012054:	1949      	addeq	r1, r1, r5
 8012056:	6021      	streq	r1, [r4, #0]
 8012058:	e7ed      	b.n	8012036 <_free_r+0x22>
 801205a:	461a      	mov	r2, r3
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	b10b      	cbz	r3, 8012064 <_free_r+0x50>
 8012060:	42a3      	cmp	r3, r4
 8012062:	d9fa      	bls.n	801205a <_free_r+0x46>
 8012064:	6811      	ldr	r1, [r2, #0]
 8012066:	1855      	adds	r5, r2, r1
 8012068:	42a5      	cmp	r5, r4
 801206a:	d10b      	bne.n	8012084 <_free_r+0x70>
 801206c:	6824      	ldr	r4, [r4, #0]
 801206e:	4421      	add	r1, r4
 8012070:	1854      	adds	r4, r2, r1
 8012072:	42a3      	cmp	r3, r4
 8012074:	6011      	str	r1, [r2, #0]
 8012076:	d1e0      	bne.n	801203a <_free_r+0x26>
 8012078:	681c      	ldr	r4, [r3, #0]
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	6053      	str	r3, [r2, #4]
 801207e:	440c      	add	r4, r1
 8012080:	6014      	str	r4, [r2, #0]
 8012082:	e7da      	b.n	801203a <_free_r+0x26>
 8012084:	d902      	bls.n	801208c <_free_r+0x78>
 8012086:	230c      	movs	r3, #12
 8012088:	6003      	str	r3, [r0, #0]
 801208a:	e7d6      	b.n	801203a <_free_r+0x26>
 801208c:	6825      	ldr	r5, [r4, #0]
 801208e:	1961      	adds	r1, r4, r5
 8012090:	428b      	cmp	r3, r1
 8012092:	bf04      	itt	eq
 8012094:	6819      	ldreq	r1, [r3, #0]
 8012096:	685b      	ldreq	r3, [r3, #4]
 8012098:	6063      	str	r3, [r4, #4]
 801209a:	bf04      	itt	eq
 801209c:	1949      	addeq	r1, r1, r5
 801209e:	6021      	streq	r1, [r4, #0]
 80120a0:	6054      	str	r4, [r2, #4]
 80120a2:	e7ca      	b.n	801203a <_free_r+0x26>
 80120a4:	b003      	add	sp, #12
 80120a6:	bd30      	pop	{r4, r5, pc}
 80120a8:	20006ba0 	.word	0x20006ba0

080120ac <__sfputc_r>:
 80120ac:	6893      	ldr	r3, [r2, #8]
 80120ae:	3b01      	subs	r3, #1
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	b410      	push	{r4}
 80120b4:	6093      	str	r3, [r2, #8]
 80120b6:	da08      	bge.n	80120ca <__sfputc_r+0x1e>
 80120b8:	6994      	ldr	r4, [r2, #24]
 80120ba:	42a3      	cmp	r3, r4
 80120bc:	db01      	blt.n	80120c2 <__sfputc_r+0x16>
 80120be:	290a      	cmp	r1, #10
 80120c0:	d103      	bne.n	80120ca <__sfputc_r+0x1e>
 80120c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120c6:	f000 bc62 	b.w	801298e <__swbuf_r>
 80120ca:	6813      	ldr	r3, [r2, #0]
 80120cc:	1c58      	adds	r0, r3, #1
 80120ce:	6010      	str	r0, [r2, #0]
 80120d0:	7019      	strb	r1, [r3, #0]
 80120d2:	4608      	mov	r0, r1
 80120d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120d8:	4770      	bx	lr

080120da <__sfputs_r>:
 80120da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120dc:	4606      	mov	r6, r0
 80120de:	460f      	mov	r7, r1
 80120e0:	4614      	mov	r4, r2
 80120e2:	18d5      	adds	r5, r2, r3
 80120e4:	42ac      	cmp	r4, r5
 80120e6:	d101      	bne.n	80120ec <__sfputs_r+0x12>
 80120e8:	2000      	movs	r0, #0
 80120ea:	e007      	b.n	80120fc <__sfputs_r+0x22>
 80120ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f0:	463a      	mov	r2, r7
 80120f2:	4630      	mov	r0, r6
 80120f4:	f7ff ffda 	bl	80120ac <__sfputc_r>
 80120f8:	1c43      	adds	r3, r0, #1
 80120fa:	d1f3      	bne.n	80120e4 <__sfputs_r+0xa>
 80120fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012100 <_vfiprintf_r>:
 8012100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012104:	460d      	mov	r5, r1
 8012106:	b09d      	sub	sp, #116	; 0x74
 8012108:	4614      	mov	r4, r2
 801210a:	4698      	mov	r8, r3
 801210c:	4606      	mov	r6, r0
 801210e:	b118      	cbz	r0, 8012118 <_vfiprintf_r+0x18>
 8012110:	6a03      	ldr	r3, [r0, #32]
 8012112:	b90b      	cbnz	r3, 8012118 <_vfiprintf_r+0x18>
 8012114:	f7ff fe42 	bl	8011d9c <__sinit>
 8012118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801211a:	07d9      	lsls	r1, r3, #31
 801211c:	d405      	bmi.n	801212a <_vfiprintf_r+0x2a>
 801211e:	89ab      	ldrh	r3, [r5, #12]
 8012120:	059a      	lsls	r2, r3, #22
 8012122:	d402      	bmi.n	801212a <_vfiprintf_r+0x2a>
 8012124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012126:	f7ff ff65 	bl	8011ff4 <__retarget_lock_acquire_recursive>
 801212a:	89ab      	ldrh	r3, [r5, #12]
 801212c:	071b      	lsls	r3, r3, #28
 801212e:	d501      	bpl.n	8012134 <_vfiprintf_r+0x34>
 8012130:	692b      	ldr	r3, [r5, #16]
 8012132:	b99b      	cbnz	r3, 801215c <_vfiprintf_r+0x5c>
 8012134:	4629      	mov	r1, r5
 8012136:	4630      	mov	r0, r6
 8012138:	f000 fc66 	bl	8012a08 <__swsetup_r>
 801213c:	b170      	cbz	r0, 801215c <_vfiprintf_r+0x5c>
 801213e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012140:	07dc      	lsls	r4, r3, #31
 8012142:	d504      	bpl.n	801214e <_vfiprintf_r+0x4e>
 8012144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012148:	b01d      	add	sp, #116	; 0x74
 801214a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801214e:	89ab      	ldrh	r3, [r5, #12]
 8012150:	0598      	lsls	r0, r3, #22
 8012152:	d4f7      	bmi.n	8012144 <_vfiprintf_r+0x44>
 8012154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012156:	f7ff ff4e 	bl	8011ff6 <__retarget_lock_release_recursive>
 801215a:	e7f3      	b.n	8012144 <_vfiprintf_r+0x44>
 801215c:	2300      	movs	r3, #0
 801215e:	9309      	str	r3, [sp, #36]	; 0x24
 8012160:	2320      	movs	r3, #32
 8012162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012166:	f8cd 800c 	str.w	r8, [sp, #12]
 801216a:	2330      	movs	r3, #48	; 0x30
 801216c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012320 <_vfiprintf_r+0x220>
 8012170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012174:	f04f 0901 	mov.w	r9, #1
 8012178:	4623      	mov	r3, r4
 801217a:	469a      	mov	sl, r3
 801217c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012180:	b10a      	cbz	r2, 8012186 <_vfiprintf_r+0x86>
 8012182:	2a25      	cmp	r2, #37	; 0x25
 8012184:	d1f9      	bne.n	801217a <_vfiprintf_r+0x7a>
 8012186:	ebba 0b04 	subs.w	fp, sl, r4
 801218a:	d00b      	beq.n	80121a4 <_vfiprintf_r+0xa4>
 801218c:	465b      	mov	r3, fp
 801218e:	4622      	mov	r2, r4
 8012190:	4629      	mov	r1, r5
 8012192:	4630      	mov	r0, r6
 8012194:	f7ff ffa1 	bl	80120da <__sfputs_r>
 8012198:	3001      	adds	r0, #1
 801219a:	f000 80a9 	beq.w	80122f0 <_vfiprintf_r+0x1f0>
 801219e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121a0:	445a      	add	r2, fp
 80121a2:	9209      	str	r2, [sp, #36]	; 0x24
 80121a4:	f89a 3000 	ldrb.w	r3, [sl]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f000 80a1 	beq.w	80122f0 <_vfiprintf_r+0x1f0>
 80121ae:	2300      	movs	r3, #0
 80121b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121b8:	f10a 0a01 	add.w	sl, sl, #1
 80121bc:	9304      	str	r3, [sp, #16]
 80121be:	9307      	str	r3, [sp, #28]
 80121c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121c4:	931a      	str	r3, [sp, #104]	; 0x68
 80121c6:	4654      	mov	r4, sl
 80121c8:	2205      	movs	r2, #5
 80121ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121ce:	4854      	ldr	r0, [pc, #336]	; (8012320 <_vfiprintf_r+0x220>)
 80121d0:	f7ee f836 	bl	8000240 <memchr>
 80121d4:	9a04      	ldr	r2, [sp, #16]
 80121d6:	b9d8      	cbnz	r0, 8012210 <_vfiprintf_r+0x110>
 80121d8:	06d1      	lsls	r1, r2, #27
 80121da:	bf44      	itt	mi
 80121dc:	2320      	movmi	r3, #32
 80121de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121e2:	0713      	lsls	r3, r2, #28
 80121e4:	bf44      	itt	mi
 80121e6:	232b      	movmi	r3, #43	; 0x2b
 80121e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121ec:	f89a 3000 	ldrb.w	r3, [sl]
 80121f0:	2b2a      	cmp	r3, #42	; 0x2a
 80121f2:	d015      	beq.n	8012220 <_vfiprintf_r+0x120>
 80121f4:	9a07      	ldr	r2, [sp, #28]
 80121f6:	4654      	mov	r4, sl
 80121f8:	2000      	movs	r0, #0
 80121fa:	f04f 0c0a 	mov.w	ip, #10
 80121fe:	4621      	mov	r1, r4
 8012200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012204:	3b30      	subs	r3, #48	; 0x30
 8012206:	2b09      	cmp	r3, #9
 8012208:	d94d      	bls.n	80122a6 <_vfiprintf_r+0x1a6>
 801220a:	b1b0      	cbz	r0, 801223a <_vfiprintf_r+0x13a>
 801220c:	9207      	str	r2, [sp, #28]
 801220e:	e014      	b.n	801223a <_vfiprintf_r+0x13a>
 8012210:	eba0 0308 	sub.w	r3, r0, r8
 8012214:	fa09 f303 	lsl.w	r3, r9, r3
 8012218:	4313      	orrs	r3, r2
 801221a:	9304      	str	r3, [sp, #16]
 801221c:	46a2      	mov	sl, r4
 801221e:	e7d2      	b.n	80121c6 <_vfiprintf_r+0xc6>
 8012220:	9b03      	ldr	r3, [sp, #12]
 8012222:	1d19      	adds	r1, r3, #4
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	9103      	str	r1, [sp, #12]
 8012228:	2b00      	cmp	r3, #0
 801222a:	bfbb      	ittet	lt
 801222c:	425b      	neglt	r3, r3
 801222e:	f042 0202 	orrlt.w	r2, r2, #2
 8012232:	9307      	strge	r3, [sp, #28]
 8012234:	9307      	strlt	r3, [sp, #28]
 8012236:	bfb8      	it	lt
 8012238:	9204      	strlt	r2, [sp, #16]
 801223a:	7823      	ldrb	r3, [r4, #0]
 801223c:	2b2e      	cmp	r3, #46	; 0x2e
 801223e:	d10c      	bne.n	801225a <_vfiprintf_r+0x15a>
 8012240:	7863      	ldrb	r3, [r4, #1]
 8012242:	2b2a      	cmp	r3, #42	; 0x2a
 8012244:	d134      	bne.n	80122b0 <_vfiprintf_r+0x1b0>
 8012246:	9b03      	ldr	r3, [sp, #12]
 8012248:	1d1a      	adds	r2, r3, #4
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	9203      	str	r2, [sp, #12]
 801224e:	2b00      	cmp	r3, #0
 8012250:	bfb8      	it	lt
 8012252:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012256:	3402      	adds	r4, #2
 8012258:	9305      	str	r3, [sp, #20]
 801225a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012330 <_vfiprintf_r+0x230>
 801225e:	7821      	ldrb	r1, [r4, #0]
 8012260:	2203      	movs	r2, #3
 8012262:	4650      	mov	r0, sl
 8012264:	f7ed ffec 	bl	8000240 <memchr>
 8012268:	b138      	cbz	r0, 801227a <_vfiprintf_r+0x17a>
 801226a:	9b04      	ldr	r3, [sp, #16]
 801226c:	eba0 000a 	sub.w	r0, r0, sl
 8012270:	2240      	movs	r2, #64	; 0x40
 8012272:	4082      	lsls	r2, r0
 8012274:	4313      	orrs	r3, r2
 8012276:	3401      	adds	r4, #1
 8012278:	9304      	str	r3, [sp, #16]
 801227a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801227e:	4829      	ldr	r0, [pc, #164]	; (8012324 <_vfiprintf_r+0x224>)
 8012280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012284:	2206      	movs	r2, #6
 8012286:	f7ed ffdb 	bl	8000240 <memchr>
 801228a:	2800      	cmp	r0, #0
 801228c:	d03f      	beq.n	801230e <_vfiprintf_r+0x20e>
 801228e:	4b26      	ldr	r3, [pc, #152]	; (8012328 <_vfiprintf_r+0x228>)
 8012290:	bb1b      	cbnz	r3, 80122da <_vfiprintf_r+0x1da>
 8012292:	9b03      	ldr	r3, [sp, #12]
 8012294:	3307      	adds	r3, #7
 8012296:	f023 0307 	bic.w	r3, r3, #7
 801229a:	3308      	adds	r3, #8
 801229c:	9303      	str	r3, [sp, #12]
 801229e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122a0:	443b      	add	r3, r7
 80122a2:	9309      	str	r3, [sp, #36]	; 0x24
 80122a4:	e768      	b.n	8012178 <_vfiprintf_r+0x78>
 80122a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80122aa:	460c      	mov	r4, r1
 80122ac:	2001      	movs	r0, #1
 80122ae:	e7a6      	b.n	80121fe <_vfiprintf_r+0xfe>
 80122b0:	2300      	movs	r3, #0
 80122b2:	3401      	adds	r4, #1
 80122b4:	9305      	str	r3, [sp, #20]
 80122b6:	4619      	mov	r1, r3
 80122b8:	f04f 0c0a 	mov.w	ip, #10
 80122bc:	4620      	mov	r0, r4
 80122be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122c2:	3a30      	subs	r2, #48	; 0x30
 80122c4:	2a09      	cmp	r2, #9
 80122c6:	d903      	bls.n	80122d0 <_vfiprintf_r+0x1d0>
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d0c6      	beq.n	801225a <_vfiprintf_r+0x15a>
 80122cc:	9105      	str	r1, [sp, #20]
 80122ce:	e7c4      	b.n	801225a <_vfiprintf_r+0x15a>
 80122d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80122d4:	4604      	mov	r4, r0
 80122d6:	2301      	movs	r3, #1
 80122d8:	e7f0      	b.n	80122bc <_vfiprintf_r+0x1bc>
 80122da:	ab03      	add	r3, sp, #12
 80122dc:	9300      	str	r3, [sp, #0]
 80122de:	462a      	mov	r2, r5
 80122e0:	4b12      	ldr	r3, [pc, #72]	; (801232c <_vfiprintf_r+0x22c>)
 80122e2:	a904      	add	r1, sp, #16
 80122e4:	4630      	mov	r0, r6
 80122e6:	f3af 8000 	nop.w
 80122ea:	4607      	mov	r7, r0
 80122ec:	1c78      	adds	r0, r7, #1
 80122ee:	d1d6      	bne.n	801229e <_vfiprintf_r+0x19e>
 80122f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122f2:	07d9      	lsls	r1, r3, #31
 80122f4:	d405      	bmi.n	8012302 <_vfiprintf_r+0x202>
 80122f6:	89ab      	ldrh	r3, [r5, #12]
 80122f8:	059a      	lsls	r2, r3, #22
 80122fa:	d402      	bmi.n	8012302 <_vfiprintf_r+0x202>
 80122fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122fe:	f7ff fe7a 	bl	8011ff6 <__retarget_lock_release_recursive>
 8012302:	89ab      	ldrh	r3, [r5, #12]
 8012304:	065b      	lsls	r3, r3, #25
 8012306:	f53f af1d 	bmi.w	8012144 <_vfiprintf_r+0x44>
 801230a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801230c:	e71c      	b.n	8012148 <_vfiprintf_r+0x48>
 801230e:	ab03      	add	r3, sp, #12
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	462a      	mov	r2, r5
 8012314:	4b05      	ldr	r3, [pc, #20]	; (801232c <_vfiprintf_r+0x22c>)
 8012316:	a904      	add	r1, sp, #16
 8012318:	4630      	mov	r0, r6
 801231a:	f000 f919 	bl	8012550 <_printf_i>
 801231e:	e7e4      	b.n	80122ea <_vfiprintf_r+0x1ea>
 8012320:	08014b68 	.word	0x08014b68
 8012324:	08014b72 	.word	0x08014b72
 8012328:	00000000 	.word	0x00000000
 801232c:	080120db 	.word	0x080120db
 8012330:	08014b6e 	.word	0x08014b6e

08012334 <sbrk_aligned>:
 8012334:	b570      	push	{r4, r5, r6, lr}
 8012336:	4e0e      	ldr	r6, [pc, #56]	; (8012370 <sbrk_aligned+0x3c>)
 8012338:	460c      	mov	r4, r1
 801233a:	6831      	ldr	r1, [r6, #0]
 801233c:	4605      	mov	r5, r0
 801233e:	b911      	cbnz	r1, 8012346 <sbrk_aligned+0x12>
 8012340:	f000 fc72 	bl	8012c28 <_sbrk_r>
 8012344:	6030      	str	r0, [r6, #0]
 8012346:	4621      	mov	r1, r4
 8012348:	4628      	mov	r0, r5
 801234a:	f000 fc6d 	bl	8012c28 <_sbrk_r>
 801234e:	1c43      	adds	r3, r0, #1
 8012350:	d00a      	beq.n	8012368 <sbrk_aligned+0x34>
 8012352:	1cc4      	adds	r4, r0, #3
 8012354:	f024 0403 	bic.w	r4, r4, #3
 8012358:	42a0      	cmp	r0, r4
 801235a:	d007      	beq.n	801236c <sbrk_aligned+0x38>
 801235c:	1a21      	subs	r1, r4, r0
 801235e:	4628      	mov	r0, r5
 8012360:	f000 fc62 	bl	8012c28 <_sbrk_r>
 8012364:	3001      	adds	r0, #1
 8012366:	d101      	bne.n	801236c <sbrk_aligned+0x38>
 8012368:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801236c:	4620      	mov	r0, r4
 801236e:	bd70      	pop	{r4, r5, r6, pc}
 8012370:	20006ba4 	.word	0x20006ba4

08012374 <_malloc_r>:
 8012374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012378:	1ccd      	adds	r5, r1, #3
 801237a:	f025 0503 	bic.w	r5, r5, #3
 801237e:	3508      	adds	r5, #8
 8012380:	2d0c      	cmp	r5, #12
 8012382:	bf38      	it	cc
 8012384:	250c      	movcc	r5, #12
 8012386:	2d00      	cmp	r5, #0
 8012388:	4607      	mov	r7, r0
 801238a:	db01      	blt.n	8012390 <_malloc_r+0x1c>
 801238c:	42a9      	cmp	r1, r5
 801238e:	d905      	bls.n	801239c <_malloc_r+0x28>
 8012390:	230c      	movs	r3, #12
 8012392:	603b      	str	r3, [r7, #0]
 8012394:	2600      	movs	r6, #0
 8012396:	4630      	mov	r0, r6
 8012398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801239c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012470 <_malloc_r+0xfc>
 80123a0:	f000 faa6 	bl	80128f0 <__malloc_lock>
 80123a4:	f8d8 3000 	ldr.w	r3, [r8]
 80123a8:	461c      	mov	r4, r3
 80123aa:	bb5c      	cbnz	r4, 8012404 <_malloc_r+0x90>
 80123ac:	4629      	mov	r1, r5
 80123ae:	4638      	mov	r0, r7
 80123b0:	f7ff ffc0 	bl	8012334 <sbrk_aligned>
 80123b4:	1c43      	adds	r3, r0, #1
 80123b6:	4604      	mov	r4, r0
 80123b8:	d155      	bne.n	8012466 <_malloc_r+0xf2>
 80123ba:	f8d8 4000 	ldr.w	r4, [r8]
 80123be:	4626      	mov	r6, r4
 80123c0:	2e00      	cmp	r6, #0
 80123c2:	d145      	bne.n	8012450 <_malloc_r+0xdc>
 80123c4:	2c00      	cmp	r4, #0
 80123c6:	d048      	beq.n	801245a <_malloc_r+0xe6>
 80123c8:	6823      	ldr	r3, [r4, #0]
 80123ca:	4631      	mov	r1, r6
 80123cc:	4638      	mov	r0, r7
 80123ce:	eb04 0903 	add.w	r9, r4, r3
 80123d2:	f000 fc29 	bl	8012c28 <_sbrk_r>
 80123d6:	4581      	cmp	r9, r0
 80123d8:	d13f      	bne.n	801245a <_malloc_r+0xe6>
 80123da:	6821      	ldr	r1, [r4, #0]
 80123dc:	1a6d      	subs	r5, r5, r1
 80123de:	4629      	mov	r1, r5
 80123e0:	4638      	mov	r0, r7
 80123e2:	f7ff ffa7 	bl	8012334 <sbrk_aligned>
 80123e6:	3001      	adds	r0, #1
 80123e8:	d037      	beq.n	801245a <_malloc_r+0xe6>
 80123ea:	6823      	ldr	r3, [r4, #0]
 80123ec:	442b      	add	r3, r5
 80123ee:	6023      	str	r3, [r4, #0]
 80123f0:	f8d8 3000 	ldr.w	r3, [r8]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d038      	beq.n	801246a <_malloc_r+0xf6>
 80123f8:	685a      	ldr	r2, [r3, #4]
 80123fa:	42a2      	cmp	r2, r4
 80123fc:	d12b      	bne.n	8012456 <_malloc_r+0xe2>
 80123fe:	2200      	movs	r2, #0
 8012400:	605a      	str	r2, [r3, #4]
 8012402:	e00f      	b.n	8012424 <_malloc_r+0xb0>
 8012404:	6822      	ldr	r2, [r4, #0]
 8012406:	1b52      	subs	r2, r2, r5
 8012408:	d41f      	bmi.n	801244a <_malloc_r+0xd6>
 801240a:	2a0b      	cmp	r2, #11
 801240c:	d917      	bls.n	801243e <_malloc_r+0xca>
 801240e:	1961      	adds	r1, r4, r5
 8012410:	42a3      	cmp	r3, r4
 8012412:	6025      	str	r5, [r4, #0]
 8012414:	bf18      	it	ne
 8012416:	6059      	strne	r1, [r3, #4]
 8012418:	6863      	ldr	r3, [r4, #4]
 801241a:	bf08      	it	eq
 801241c:	f8c8 1000 	streq.w	r1, [r8]
 8012420:	5162      	str	r2, [r4, r5]
 8012422:	604b      	str	r3, [r1, #4]
 8012424:	4638      	mov	r0, r7
 8012426:	f104 060b 	add.w	r6, r4, #11
 801242a:	f000 fa67 	bl	80128fc <__malloc_unlock>
 801242e:	f026 0607 	bic.w	r6, r6, #7
 8012432:	1d23      	adds	r3, r4, #4
 8012434:	1af2      	subs	r2, r6, r3
 8012436:	d0ae      	beq.n	8012396 <_malloc_r+0x22>
 8012438:	1b9b      	subs	r3, r3, r6
 801243a:	50a3      	str	r3, [r4, r2]
 801243c:	e7ab      	b.n	8012396 <_malloc_r+0x22>
 801243e:	42a3      	cmp	r3, r4
 8012440:	6862      	ldr	r2, [r4, #4]
 8012442:	d1dd      	bne.n	8012400 <_malloc_r+0x8c>
 8012444:	f8c8 2000 	str.w	r2, [r8]
 8012448:	e7ec      	b.n	8012424 <_malloc_r+0xb0>
 801244a:	4623      	mov	r3, r4
 801244c:	6864      	ldr	r4, [r4, #4]
 801244e:	e7ac      	b.n	80123aa <_malloc_r+0x36>
 8012450:	4634      	mov	r4, r6
 8012452:	6876      	ldr	r6, [r6, #4]
 8012454:	e7b4      	b.n	80123c0 <_malloc_r+0x4c>
 8012456:	4613      	mov	r3, r2
 8012458:	e7cc      	b.n	80123f4 <_malloc_r+0x80>
 801245a:	230c      	movs	r3, #12
 801245c:	603b      	str	r3, [r7, #0]
 801245e:	4638      	mov	r0, r7
 8012460:	f000 fa4c 	bl	80128fc <__malloc_unlock>
 8012464:	e797      	b.n	8012396 <_malloc_r+0x22>
 8012466:	6025      	str	r5, [r4, #0]
 8012468:	e7dc      	b.n	8012424 <_malloc_r+0xb0>
 801246a:	605b      	str	r3, [r3, #4]
 801246c:	deff      	udf	#255	; 0xff
 801246e:	bf00      	nop
 8012470:	20006ba0 	.word	0x20006ba0

08012474 <_printf_common>:
 8012474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012478:	4616      	mov	r6, r2
 801247a:	4699      	mov	r9, r3
 801247c:	688a      	ldr	r2, [r1, #8]
 801247e:	690b      	ldr	r3, [r1, #16]
 8012480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012484:	4293      	cmp	r3, r2
 8012486:	bfb8      	it	lt
 8012488:	4613      	movlt	r3, r2
 801248a:	6033      	str	r3, [r6, #0]
 801248c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012490:	4607      	mov	r7, r0
 8012492:	460c      	mov	r4, r1
 8012494:	b10a      	cbz	r2, 801249a <_printf_common+0x26>
 8012496:	3301      	adds	r3, #1
 8012498:	6033      	str	r3, [r6, #0]
 801249a:	6823      	ldr	r3, [r4, #0]
 801249c:	0699      	lsls	r1, r3, #26
 801249e:	bf42      	ittt	mi
 80124a0:	6833      	ldrmi	r3, [r6, #0]
 80124a2:	3302      	addmi	r3, #2
 80124a4:	6033      	strmi	r3, [r6, #0]
 80124a6:	6825      	ldr	r5, [r4, #0]
 80124a8:	f015 0506 	ands.w	r5, r5, #6
 80124ac:	d106      	bne.n	80124bc <_printf_common+0x48>
 80124ae:	f104 0a19 	add.w	sl, r4, #25
 80124b2:	68e3      	ldr	r3, [r4, #12]
 80124b4:	6832      	ldr	r2, [r6, #0]
 80124b6:	1a9b      	subs	r3, r3, r2
 80124b8:	42ab      	cmp	r3, r5
 80124ba:	dc26      	bgt.n	801250a <_printf_common+0x96>
 80124bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124c0:	1e13      	subs	r3, r2, #0
 80124c2:	6822      	ldr	r2, [r4, #0]
 80124c4:	bf18      	it	ne
 80124c6:	2301      	movne	r3, #1
 80124c8:	0692      	lsls	r2, r2, #26
 80124ca:	d42b      	bmi.n	8012524 <_printf_common+0xb0>
 80124cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124d0:	4649      	mov	r1, r9
 80124d2:	4638      	mov	r0, r7
 80124d4:	47c0      	blx	r8
 80124d6:	3001      	adds	r0, #1
 80124d8:	d01e      	beq.n	8012518 <_printf_common+0xa4>
 80124da:	6823      	ldr	r3, [r4, #0]
 80124dc:	6922      	ldr	r2, [r4, #16]
 80124de:	f003 0306 	and.w	r3, r3, #6
 80124e2:	2b04      	cmp	r3, #4
 80124e4:	bf02      	ittt	eq
 80124e6:	68e5      	ldreq	r5, [r4, #12]
 80124e8:	6833      	ldreq	r3, [r6, #0]
 80124ea:	1aed      	subeq	r5, r5, r3
 80124ec:	68a3      	ldr	r3, [r4, #8]
 80124ee:	bf0c      	ite	eq
 80124f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124f4:	2500      	movne	r5, #0
 80124f6:	4293      	cmp	r3, r2
 80124f8:	bfc4      	itt	gt
 80124fa:	1a9b      	subgt	r3, r3, r2
 80124fc:	18ed      	addgt	r5, r5, r3
 80124fe:	2600      	movs	r6, #0
 8012500:	341a      	adds	r4, #26
 8012502:	42b5      	cmp	r5, r6
 8012504:	d11a      	bne.n	801253c <_printf_common+0xc8>
 8012506:	2000      	movs	r0, #0
 8012508:	e008      	b.n	801251c <_printf_common+0xa8>
 801250a:	2301      	movs	r3, #1
 801250c:	4652      	mov	r2, sl
 801250e:	4649      	mov	r1, r9
 8012510:	4638      	mov	r0, r7
 8012512:	47c0      	blx	r8
 8012514:	3001      	adds	r0, #1
 8012516:	d103      	bne.n	8012520 <_printf_common+0xac>
 8012518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801251c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012520:	3501      	adds	r5, #1
 8012522:	e7c6      	b.n	80124b2 <_printf_common+0x3e>
 8012524:	18e1      	adds	r1, r4, r3
 8012526:	1c5a      	adds	r2, r3, #1
 8012528:	2030      	movs	r0, #48	; 0x30
 801252a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801252e:	4422      	add	r2, r4
 8012530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012538:	3302      	adds	r3, #2
 801253a:	e7c7      	b.n	80124cc <_printf_common+0x58>
 801253c:	2301      	movs	r3, #1
 801253e:	4622      	mov	r2, r4
 8012540:	4649      	mov	r1, r9
 8012542:	4638      	mov	r0, r7
 8012544:	47c0      	blx	r8
 8012546:	3001      	adds	r0, #1
 8012548:	d0e6      	beq.n	8012518 <_printf_common+0xa4>
 801254a:	3601      	adds	r6, #1
 801254c:	e7d9      	b.n	8012502 <_printf_common+0x8e>
	...

08012550 <_printf_i>:
 8012550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012554:	7e0f      	ldrb	r7, [r1, #24]
 8012556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012558:	2f78      	cmp	r7, #120	; 0x78
 801255a:	4691      	mov	r9, r2
 801255c:	4680      	mov	r8, r0
 801255e:	460c      	mov	r4, r1
 8012560:	469a      	mov	sl, r3
 8012562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012566:	d807      	bhi.n	8012578 <_printf_i+0x28>
 8012568:	2f62      	cmp	r7, #98	; 0x62
 801256a:	d80a      	bhi.n	8012582 <_printf_i+0x32>
 801256c:	2f00      	cmp	r7, #0
 801256e:	f000 80d4 	beq.w	801271a <_printf_i+0x1ca>
 8012572:	2f58      	cmp	r7, #88	; 0x58
 8012574:	f000 80c0 	beq.w	80126f8 <_printf_i+0x1a8>
 8012578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801257c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012580:	e03a      	b.n	80125f8 <_printf_i+0xa8>
 8012582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012586:	2b15      	cmp	r3, #21
 8012588:	d8f6      	bhi.n	8012578 <_printf_i+0x28>
 801258a:	a101      	add	r1, pc, #4	; (adr r1, 8012590 <_printf_i+0x40>)
 801258c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012590:	080125e9 	.word	0x080125e9
 8012594:	080125fd 	.word	0x080125fd
 8012598:	08012579 	.word	0x08012579
 801259c:	08012579 	.word	0x08012579
 80125a0:	08012579 	.word	0x08012579
 80125a4:	08012579 	.word	0x08012579
 80125a8:	080125fd 	.word	0x080125fd
 80125ac:	08012579 	.word	0x08012579
 80125b0:	08012579 	.word	0x08012579
 80125b4:	08012579 	.word	0x08012579
 80125b8:	08012579 	.word	0x08012579
 80125bc:	08012701 	.word	0x08012701
 80125c0:	08012629 	.word	0x08012629
 80125c4:	080126bb 	.word	0x080126bb
 80125c8:	08012579 	.word	0x08012579
 80125cc:	08012579 	.word	0x08012579
 80125d0:	08012723 	.word	0x08012723
 80125d4:	08012579 	.word	0x08012579
 80125d8:	08012629 	.word	0x08012629
 80125dc:	08012579 	.word	0x08012579
 80125e0:	08012579 	.word	0x08012579
 80125e4:	080126c3 	.word	0x080126c3
 80125e8:	682b      	ldr	r3, [r5, #0]
 80125ea:	1d1a      	adds	r2, r3, #4
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	602a      	str	r2, [r5, #0]
 80125f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125f8:	2301      	movs	r3, #1
 80125fa:	e09f      	b.n	801273c <_printf_i+0x1ec>
 80125fc:	6820      	ldr	r0, [r4, #0]
 80125fe:	682b      	ldr	r3, [r5, #0]
 8012600:	0607      	lsls	r7, r0, #24
 8012602:	f103 0104 	add.w	r1, r3, #4
 8012606:	6029      	str	r1, [r5, #0]
 8012608:	d501      	bpl.n	801260e <_printf_i+0xbe>
 801260a:	681e      	ldr	r6, [r3, #0]
 801260c:	e003      	b.n	8012616 <_printf_i+0xc6>
 801260e:	0646      	lsls	r6, r0, #25
 8012610:	d5fb      	bpl.n	801260a <_printf_i+0xba>
 8012612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012616:	2e00      	cmp	r6, #0
 8012618:	da03      	bge.n	8012622 <_printf_i+0xd2>
 801261a:	232d      	movs	r3, #45	; 0x2d
 801261c:	4276      	negs	r6, r6
 801261e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012622:	485a      	ldr	r0, [pc, #360]	; (801278c <_printf_i+0x23c>)
 8012624:	230a      	movs	r3, #10
 8012626:	e012      	b.n	801264e <_printf_i+0xfe>
 8012628:	682b      	ldr	r3, [r5, #0]
 801262a:	6820      	ldr	r0, [r4, #0]
 801262c:	1d19      	adds	r1, r3, #4
 801262e:	6029      	str	r1, [r5, #0]
 8012630:	0605      	lsls	r5, r0, #24
 8012632:	d501      	bpl.n	8012638 <_printf_i+0xe8>
 8012634:	681e      	ldr	r6, [r3, #0]
 8012636:	e002      	b.n	801263e <_printf_i+0xee>
 8012638:	0641      	lsls	r1, r0, #25
 801263a:	d5fb      	bpl.n	8012634 <_printf_i+0xe4>
 801263c:	881e      	ldrh	r6, [r3, #0]
 801263e:	4853      	ldr	r0, [pc, #332]	; (801278c <_printf_i+0x23c>)
 8012640:	2f6f      	cmp	r7, #111	; 0x6f
 8012642:	bf0c      	ite	eq
 8012644:	2308      	moveq	r3, #8
 8012646:	230a      	movne	r3, #10
 8012648:	2100      	movs	r1, #0
 801264a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801264e:	6865      	ldr	r5, [r4, #4]
 8012650:	60a5      	str	r5, [r4, #8]
 8012652:	2d00      	cmp	r5, #0
 8012654:	bfa2      	ittt	ge
 8012656:	6821      	ldrge	r1, [r4, #0]
 8012658:	f021 0104 	bicge.w	r1, r1, #4
 801265c:	6021      	strge	r1, [r4, #0]
 801265e:	b90e      	cbnz	r6, 8012664 <_printf_i+0x114>
 8012660:	2d00      	cmp	r5, #0
 8012662:	d04b      	beq.n	80126fc <_printf_i+0x1ac>
 8012664:	4615      	mov	r5, r2
 8012666:	fbb6 f1f3 	udiv	r1, r6, r3
 801266a:	fb03 6711 	mls	r7, r3, r1, r6
 801266e:	5dc7      	ldrb	r7, [r0, r7]
 8012670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012674:	4637      	mov	r7, r6
 8012676:	42bb      	cmp	r3, r7
 8012678:	460e      	mov	r6, r1
 801267a:	d9f4      	bls.n	8012666 <_printf_i+0x116>
 801267c:	2b08      	cmp	r3, #8
 801267e:	d10b      	bne.n	8012698 <_printf_i+0x148>
 8012680:	6823      	ldr	r3, [r4, #0]
 8012682:	07de      	lsls	r6, r3, #31
 8012684:	d508      	bpl.n	8012698 <_printf_i+0x148>
 8012686:	6923      	ldr	r3, [r4, #16]
 8012688:	6861      	ldr	r1, [r4, #4]
 801268a:	4299      	cmp	r1, r3
 801268c:	bfde      	ittt	le
 801268e:	2330      	movle	r3, #48	; 0x30
 8012690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012694:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012698:	1b52      	subs	r2, r2, r5
 801269a:	6122      	str	r2, [r4, #16]
 801269c:	f8cd a000 	str.w	sl, [sp]
 80126a0:	464b      	mov	r3, r9
 80126a2:	aa03      	add	r2, sp, #12
 80126a4:	4621      	mov	r1, r4
 80126a6:	4640      	mov	r0, r8
 80126a8:	f7ff fee4 	bl	8012474 <_printf_common>
 80126ac:	3001      	adds	r0, #1
 80126ae:	d14a      	bne.n	8012746 <_printf_i+0x1f6>
 80126b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126b4:	b004      	add	sp, #16
 80126b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ba:	6823      	ldr	r3, [r4, #0]
 80126bc:	f043 0320 	orr.w	r3, r3, #32
 80126c0:	6023      	str	r3, [r4, #0]
 80126c2:	4833      	ldr	r0, [pc, #204]	; (8012790 <_printf_i+0x240>)
 80126c4:	2778      	movs	r7, #120	; 0x78
 80126c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126ca:	6823      	ldr	r3, [r4, #0]
 80126cc:	6829      	ldr	r1, [r5, #0]
 80126ce:	061f      	lsls	r7, r3, #24
 80126d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80126d4:	d402      	bmi.n	80126dc <_printf_i+0x18c>
 80126d6:	065f      	lsls	r7, r3, #25
 80126d8:	bf48      	it	mi
 80126da:	b2b6      	uxthmi	r6, r6
 80126dc:	07df      	lsls	r7, r3, #31
 80126de:	bf48      	it	mi
 80126e0:	f043 0320 	orrmi.w	r3, r3, #32
 80126e4:	6029      	str	r1, [r5, #0]
 80126e6:	bf48      	it	mi
 80126e8:	6023      	strmi	r3, [r4, #0]
 80126ea:	b91e      	cbnz	r6, 80126f4 <_printf_i+0x1a4>
 80126ec:	6823      	ldr	r3, [r4, #0]
 80126ee:	f023 0320 	bic.w	r3, r3, #32
 80126f2:	6023      	str	r3, [r4, #0]
 80126f4:	2310      	movs	r3, #16
 80126f6:	e7a7      	b.n	8012648 <_printf_i+0xf8>
 80126f8:	4824      	ldr	r0, [pc, #144]	; (801278c <_printf_i+0x23c>)
 80126fa:	e7e4      	b.n	80126c6 <_printf_i+0x176>
 80126fc:	4615      	mov	r5, r2
 80126fe:	e7bd      	b.n	801267c <_printf_i+0x12c>
 8012700:	682b      	ldr	r3, [r5, #0]
 8012702:	6826      	ldr	r6, [r4, #0]
 8012704:	6961      	ldr	r1, [r4, #20]
 8012706:	1d18      	adds	r0, r3, #4
 8012708:	6028      	str	r0, [r5, #0]
 801270a:	0635      	lsls	r5, r6, #24
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	d501      	bpl.n	8012714 <_printf_i+0x1c4>
 8012710:	6019      	str	r1, [r3, #0]
 8012712:	e002      	b.n	801271a <_printf_i+0x1ca>
 8012714:	0670      	lsls	r0, r6, #25
 8012716:	d5fb      	bpl.n	8012710 <_printf_i+0x1c0>
 8012718:	8019      	strh	r1, [r3, #0]
 801271a:	2300      	movs	r3, #0
 801271c:	6123      	str	r3, [r4, #16]
 801271e:	4615      	mov	r5, r2
 8012720:	e7bc      	b.n	801269c <_printf_i+0x14c>
 8012722:	682b      	ldr	r3, [r5, #0]
 8012724:	1d1a      	adds	r2, r3, #4
 8012726:	602a      	str	r2, [r5, #0]
 8012728:	681d      	ldr	r5, [r3, #0]
 801272a:	6862      	ldr	r2, [r4, #4]
 801272c:	2100      	movs	r1, #0
 801272e:	4628      	mov	r0, r5
 8012730:	f7ed fd86 	bl	8000240 <memchr>
 8012734:	b108      	cbz	r0, 801273a <_printf_i+0x1ea>
 8012736:	1b40      	subs	r0, r0, r5
 8012738:	6060      	str	r0, [r4, #4]
 801273a:	6863      	ldr	r3, [r4, #4]
 801273c:	6123      	str	r3, [r4, #16]
 801273e:	2300      	movs	r3, #0
 8012740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012744:	e7aa      	b.n	801269c <_printf_i+0x14c>
 8012746:	6923      	ldr	r3, [r4, #16]
 8012748:	462a      	mov	r2, r5
 801274a:	4649      	mov	r1, r9
 801274c:	4640      	mov	r0, r8
 801274e:	47d0      	blx	sl
 8012750:	3001      	adds	r0, #1
 8012752:	d0ad      	beq.n	80126b0 <_printf_i+0x160>
 8012754:	6823      	ldr	r3, [r4, #0]
 8012756:	079b      	lsls	r3, r3, #30
 8012758:	d413      	bmi.n	8012782 <_printf_i+0x232>
 801275a:	68e0      	ldr	r0, [r4, #12]
 801275c:	9b03      	ldr	r3, [sp, #12]
 801275e:	4298      	cmp	r0, r3
 8012760:	bfb8      	it	lt
 8012762:	4618      	movlt	r0, r3
 8012764:	e7a6      	b.n	80126b4 <_printf_i+0x164>
 8012766:	2301      	movs	r3, #1
 8012768:	4632      	mov	r2, r6
 801276a:	4649      	mov	r1, r9
 801276c:	4640      	mov	r0, r8
 801276e:	47d0      	blx	sl
 8012770:	3001      	adds	r0, #1
 8012772:	d09d      	beq.n	80126b0 <_printf_i+0x160>
 8012774:	3501      	adds	r5, #1
 8012776:	68e3      	ldr	r3, [r4, #12]
 8012778:	9903      	ldr	r1, [sp, #12]
 801277a:	1a5b      	subs	r3, r3, r1
 801277c:	42ab      	cmp	r3, r5
 801277e:	dcf2      	bgt.n	8012766 <_printf_i+0x216>
 8012780:	e7eb      	b.n	801275a <_printf_i+0x20a>
 8012782:	2500      	movs	r5, #0
 8012784:	f104 0619 	add.w	r6, r4, #25
 8012788:	e7f5      	b.n	8012776 <_printf_i+0x226>
 801278a:	bf00      	nop
 801278c:	08014b79 	.word	0x08014b79
 8012790:	08014b8a 	.word	0x08014b8a

08012794 <__sflush_r>:
 8012794:	898a      	ldrh	r2, [r1, #12]
 8012796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801279a:	4605      	mov	r5, r0
 801279c:	0710      	lsls	r0, r2, #28
 801279e:	460c      	mov	r4, r1
 80127a0:	d458      	bmi.n	8012854 <__sflush_r+0xc0>
 80127a2:	684b      	ldr	r3, [r1, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	dc05      	bgt.n	80127b4 <__sflush_r+0x20>
 80127a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	dc02      	bgt.n	80127b4 <__sflush_r+0x20>
 80127ae:	2000      	movs	r0, #0
 80127b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127b6:	2e00      	cmp	r6, #0
 80127b8:	d0f9      	beq.n	80127ae <__sflush_r+0x1a>
 80127ba:	2300      	movs	r3, #0
 80127bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80127c0:	682f      	ldr	r7, [r5, #0]
 80127c2:	6a21      	ldr	r1, [r4, #32]
 80127c4:	602b      	str	r3, [r5, #0]
 80127c6:	d032      	beq.n	801282e <__sflush_r+0x9a>
 80127c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80127ca:	89a3      	ldrh	r3, [r4, #12]
 80127cc:	075a      	lsls	r2, r3, #29
 80127ce:	d505      	bpl.n	80127dc <__sflush_r+0x48>
 80127d0:	6863      	ldr	r3, [r4, #4]
 80127d2:	1ac0      	subs	r0, r0, r3
 80127d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127d6:	b10b      	cbz	r3, 80127dc <__sflush_r+0x48>
 80127d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80127da:	1ac0      	subs	r0, r0, r3
 80127dc:	2300      	movs	r3, #0
 80127de:	4602      	mov	r2, r0
 80127e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127e2:	6a21      	ldr	r1, [r4, #32]
 80127e4:	4628      	mov	r0, r5
 80127e6:	47b0      	blx	r6
 80127e8:	1c43      	adds	r3, r0, #1
 80127ea:	89a3      	ldrh	r3, [r4, #12]
 80127ec:	d106      	bne.n	80127fc <__sflush_r+0x68>
 80127ee:	6829      	ldr	r1, [r5, #0]
 80127f0:	291d      	cmp	r1, #29
 80127f2:	d82b      	bhi.n	801284c <__sflush_r+0xb8>
 80127f4:	4a29      	ldr	r2, [pc, #164]	; (801289c <__sflush_r+0x108>)
 80127f6:	410a      	asrs	r2, r1
 80127f8:	07d6      	lsls	r6, r2, #31
 80127fa:	d427      	bmi.n	801284c <__sflush_r+0xb8>
 80127fc:	2200      	movs	r2, #0
 80127fe:	6062      	str	r2, [r4, #4]
 8012800:	04d9      	lsls	r1, r3, #19
 8012802:	6922      	ldr	r2, [r4, #16]
 8012804:	6022      	str	r2, [r4, #0]
 8012806:	d504      	bpl.n	8012812 <__sflush_r+0x7e>
 8012808:	1c42      	adds	r2, r0, #1
 801280a:	d101      	bne.n	8012810 <__sflush_r+0x7c>
 801280c:	682b      	ldr	r3, [r5, #0]
 801280e:	b903      	cbnz	r3, 8012812 <__sflush_r+0x7e>
 8012810:	6560      	str	r0, [r4, #84]	; 0x54
 8012812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012814:	602f      	str	r7, [r5, #0]
 8012816:	2900      	cmp	r1, #0
 8012818:	d0c9      	beq.n	80127ae <__sflush_r+0x1a>
 801281a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801281e:	4299      	cmp	r1, r3
 8012820:	d002      	beq.n	8012828 <__sflush_r+0x94>
 8012822:	4628      	mov	r0, r5
 8012824:	f7ff fbf6 	bl	8012014 <_free_r>
 8012828:	2000      	movs	r0, #0
 801282a:	6360      	str	r0, [r4, #52]	; 0x34
 801282c:	e7c0      	b.n	80127b0 <__sflush_r+0x1c>
 801282e:	2301      	movs	r3, #1
 8012830:	4628      	mov	r0, r5
 8012832:	47b0      	blx	r6
 8012834:	1c41      	adds	r1, r0, #1
 8012836:	d1c8      	bne.n	80127ca <__sflush_r+0x36>
 8012838:	682b      	ldr	r3, [r5, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d0c5      	beq.n	80127ca <__sflush_r+0x36>
 801283e:	2b1d      	cmp	r3, #29
 8012840:	d001      	beq.n	8012846 <__sflush_r+0xb2>
 8012842:	2b16      	cmp	r3, #22
 8012844:	d101      	bne.n	801284a <__sflush_r+0xb6>
 8012846:	602f      	str	r7, [r5, #0]
 8012848:	e7b1      	b.n	80127ae <__sflush_r+0x1a>
 801284a:	89a3      	ldrh	r3, [r4, #12]
 801284c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012850:	81a3      	strh	r3, [r4, #12]
 8012852:	e7ad      	b.n	80127b0 <__sflush_r+0x1c>
 8012854:	690f      	ldr	r7, [r1, #16]
 8012856:	2f00      	cmp	r7, #0
 8012858:	d0a9      	beq.n	80127ae <__sflush_r+0x1a>
 801285a:	0793      	lsls	r3, r2, #30
 801285c:	680e      	ldr	r6, [r1, #0]
 801285e:	bf08      	it	eq
 8012860:	694b      	ldreq	r3, [r1, #20]
 8012862:	600f      	str	r7, [r1, #0]
 8012864:	bf18      	it	ne
 8012866:	2300      	movne	r3, #0
 8012868:	eba6 0807 	sub.w	r8, r6, r7
 801286c:	608b      	str	r3, [r1, #8]
 801286e:	f1b8 0f00 	cmp.w	r8, #0
 8012872:	dd9c      	ble.n	80127ae <__sflush_r+0x1a>
 8012874:	6a21      	ldr	r1, [r4, #32]
 8012876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012878:	4643      	mov	r3, r8
 801287a:	463a      	mov	r2, r7
 801287c:	4628      	mov	r0, r5
 801287e:	47b0      	blx	r6
 8012880:	2800      	cmp	r0, #0
 8012882:	dc06      	bgt.n	8012892 <__sflush_r+0xfe>
 8012884:	89a3      	ldrh	r3, [r4, #12]
 8012886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801288a:	81a3      	strh	r3, [r4, #12]
 801288c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012890:	e78e      	b.n	80127b0 <__sflush_r+0x1c>
 8012892:	4407      	add	r7, r0
 8012894:	eba8 0800 	sub.w	r8, r8, r0
 8012898:	e7e9      	b.n	801286e <__sflush_r+0xda>
 801289a:	bf00      	nop
 801289c:	dfbffffe 	.word	0xdfbffffe

080128a0 <_fflush_r>:
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	690b      	ldr	r3, [r1, #16]
 80128a4:	4605      	mov	r5, r0
 80128a6:	460c      	mov	r4, r1
 80128a8:	b913      	cbnz	r3, 80128b0 <_fflush_r+0x10>
 80128aa:	2500      	movs	r5, #0
 80128ac:	4628      	mov	r0, r5
 80128ae:	bd38      	pop	{r3, r4, r5, pc}
 80128b0:	b118      	cbz	r0, 80128ba <_fflush_r+0x1a>
 80128b2:	6a03      	ldr	r3, [r0, #32]
 80128b4:	b90b      	cbnz	r3, 80128ba <_fflush_r+0x1a>
 80128b6:	f7ff fa71 	bl	8011d9c <__sinit>
 80128ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d0f3      	beq.n	80128aa <_fflush_r+0xa>
 80128c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128c4:	07d0      	lsls	r0, r2, #31
 80128c6:	d404      	bmi.n	80128d2 <_fflush_r+0x32>
 80128c8:	0599      	lsls	r1, r3, #22
 80128ca:	d402      	bmi.n	80128d2 <_fflush_r+0x32>
 80128cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128ce:	f7ff fb91 	bl	8011ff4 <__retarget_lock_acquire_recursive>
 80128d2:	4628      	mov	r0, r5
 80128d4:	4621      	mov	r1, r4
 80128d6:	f7ff ff5d 	bl	8012794 <__sflush_r>
 80128da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128dc:	07da      	lsls	r2, r3, #31
 80128de:	4605      	mov	r5, r0
 80128e0:	d4e4      	bmi.n	80128ac <_fflush_r+0xc>
 80128e2:	89a3      	ldrh	r3, [r4, #12]
 80128e4:	059b      	lsls	r3, r3, #22
 80128e6:	d4e1      	bmi.n	80128ac <_fflush_r+0xc>
 80128e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128ea:	f7ff fb84 	bl	8011ff6 <__retarget_lock_release_recursive>
 80128ee:	e7dd      	b.n	80128ac <_fflush_r+0xc>

080128f0 <__malloc_lock>:
 80128f0:	4801      	ldr	r0, [pc, #4]	; (80128f8 <__malloc_lock+0x8>)
 80128f2:	f7ff bb7f 	b.w	8011ff4 <__retarget_lock_acquire_recursive>
 80128f6:	bf00      	nop
 80128f8:	20006b9c 	.word	0x20006b9c

080128fc <__malloc_unlock>:
 80128fc:	4801      	ldr	r0, [pc, #4]	; (8012904 <__malloc_unlock+0x8>)
 80128fe:	f7ff bb7a 	b.w	8011ff6 <__retarget_lock_release_recursive>
 8012902:	bf00      	nop
 8012904:	20006b9c 	.word	0x20006b9c

08012908 <__sread>:
 8012908:	b510      	push	{r4, lr}
 801290a:	460c      	mov	r4, r1
 801290c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012910:	f000 f978 	bl	8012c04 <_read_r>
 8012914:	2800      	cmp	r0, #0
 8012916:	bfab      	itete	ge
 8012918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801291a:	89a3      	ldrhlt	r3, [r4, #12]
 801291c:	181b      	addge	r3, r3, r0
 801291e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012922:	bfac      	ite	ge
 8012924:	6563      	strge	r3, [r4, #84]	; 0x54
 8012926:	81a3      	strhlt	r3, [r4, #12]
 8012928:	bd10      	pop	{r4, pc}

0801292a <__swrite>:
 801292a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801292e:	461f      	mov	r7, r3
 8012930:	898b      	ldrh	r3, [r1, #12]
 8012932:	05db      	lsls	r3, r3, #23
 8012934:	4605      	mov	r5, r0
 8012936:	460c      	mov	r4, r1
 8012938:	4616      	mov	r6, r2
 801293a:	d505      	bpl.n	8012948 <__swrite+0x1e>
 801293c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012940:	2302      	movs	r3, #2
 8012942:	2200      	movs	r2, #0
 8012944:	f000 f94c 	bl	8012be0 <_lseek_r>
 8012948:	89a3      	ldrh	r3, [r4, #12]
 801294a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801294e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012952:	81a3      	strh	r3, [r4, #12]
 8012954:	4632      	mov	r2, r6
 8012956:	463b      	mov	r3, r7
 8012958:	4628      	mov	r0, r5
 801295a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801295e:	f000 b973 	b.w	8012c48 <_write_r>

08012962 <__sseek>:
 8012962:	b510      	push	{r4, lr}
 8012964:	460c      	mov	r4, r1
 8012966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801296a:	f000 f939 	bl	8012be0 <_lseek_r>
 801296e:	1c43      	adds	r3, r0, #1
 8012970:	89a3      	ldrh	r3, [r4, #12]
 8012972:	bf15      	itete	ne
 8012974:	6560      	strne	r0, [r4, #84]	; 0x54
 8012976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801297a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801297e:	81a3      	strheq	r3, [r4, #12]
 8012980:	bf18      	it	ne
 8012982:	81a3      	strhne	r3, [r4, #12]
 8012984:	bd10      	pop	{r4, pc}

08012986 <__sclose>:
 8012986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801298a:	f000 b8f7 	b.w	8012b7c <_close_r>

0801298e <__swbuf_r>:
 801298e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012990:	460e      	mov	r6, r1
 8012992:	4614      	mov	r4, r2
 8012994:	4605      	mov	r5, r0
 8012996:	b118      	cbz	r0, 80129a0 <__swbuf_r+0x12>
 8012998:	6a03      	ldr	r3, [r0, #32]
 801299a:	b90b      	cbnz	r3, 80129a0 <__swbuf_r+0x12>
 801299c:	f7ff f9fe 	bl	8011d9c <__sinit>
 80129a0:	69a3      	ldr	r3, [r4, #24]
 80129a2:	60a3      	str	r3, [r4, #8]
 80129a4:	89a3      	ldrh	r3, [r4, #12]
 80129a6:	071a      	lsls	r2, r3, #28
 80129a8:	d525      	bpl.n	80129f6 <__swbuf_r+0x68>
 80129aa:	6923      	ldr	r3, [r4, #16]
 80129ac:	b31b      	cbz	r3, 80129f6 <__swbuf_r+0x68>
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	6922      	ldr	r2, [r4, #16]
 80129b2:	1a98      	subs	r0, r3, r2
 80129b4:	6963      	ldr	r3, [r4, #20]
 80129b6:	b2f6      	uxtb	r6, r6
 80129b8:	4283      	cmp	r3, r0
 80129ba:	4637      	mov	r7, r6
 80129bc:	dc04      	bgt.n	80129c8 <__swbuf_r+0x3a>
 80129be:	4621      	mov	r1, r4
 80129c0:	4628      	mov	r0, r5
 80129c2:	f7ff ff6d 	bl	80128a0 <_fflush_r>
 80129c6:	b9e0      	cbnz	r0, 8012a02 <__swbuf_r+0x74>
 80129c8:	68a3      	ldr	r3, [r4, #8]
 80129ca:	3b01      	subs	r3, #1
 80129cc:	60a3      	str	r3, [r4, #8]
 80129ce:	6823      	ldr	r3, [r4, #0]
 80129d0:	1c5a      	adds	r2, r3, #1
 80129d2:	6022      	str	r2, [r4, #0]
 80129d4:	701e      	strb	r6, [r3, #0]
 80129d6:	6962      	ldr	r2, [r4, #20]
 80129d8:	1c43      	adds	r3, r0, #1
 80129da:	429a      	cmp	r2, r3
 80129dc:	d004      	beq.n	80129e8 <__swbuf_r+0x5a>
 80129de:	89a3      	ldrh	r3, [r4, #12]
 80129e0:	07db      	lsls	r3, r3, #31
 80129e2:	d506      	bpl.n	80129f2 <__swbuf_r+0x64>
 80129e4:	2e0a      	cmp	r6, #10
 80129e6:	d104      	bne.n	80129f2 <__swbuf_r+0x64>
 80129e8:	4621      	mov	r1, r4
 80129ea:	4628      	mov	r0, r5
 80129ec:	f7ff ff58 	bl	80128a0 <_fflush_r>
 80129f0:	b938      	cbnz	r0, 8012a02 <__swbuf_r+0x74>
 80129f2:	4638      	mov	r0, r7
 80129f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129f6:	4621      	mov	r1, r4
 80129f8:	4628      	mov	r0, r5
 80129fa:	f000 f805 	bl	8012a08 <__swsetup_r>
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d0d5      	beq.n	80129ae <__swbuf_r+0x20>
 8012a02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012a06:	e7f4      	b.n	80129f2 <__swbuf_r+0x64>

08012a08 <__swsetup_r>:
 8012a08:	b538      	push	{r3, r4, r5, lr}
 8012a0a:	4b2a      	ldr	r3, [pc, #168]	; (8012ab4 <__swsetup_r+0xac>)
 8012a0c:	4605      	mov	r5, r0
 8012a0e:	6818      	ldr	r0, [r3, #0]
 8012a10:	460c      	mov	r4, r1
 8012a12:	b118      	cbz	r0, 8012a1c <__swsetup_r+0x14>
 8012a14:	6a03      	ldr	r3, [r0, #32]
 8012a16:	b90b      	cbnz	r3, 8012a1c <__swsetup_r+0x14>
 8012a18:	f7ff f9c0 	bl	8011d9c <__sinit>
 8012a1c:	89a3      	ldrh	r3, [r4, #12]
 8012a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a22:	0718      	lsls	r0, r3, #28
 8012a24:	d422      	bmi.n	8012a6c <__swsetup_r+0x64>
 8012a26:	06d9      	lsls	r1, r3, #27
 8012a28:	d407      	bmi.n	8012a3a <__swsetup_r+0x32>
 8012a2a:	2309      	movs	r3, #9
 8012a2c:	602b      	str	r3, [r5, #0]
 8012a2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012a32:	81a3      	strh	r3, [r4, #12]
 8012a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a38:	e034      	b.n	8012aa4 <__swsetup_r+0x9c>
 8012a3a:	0758      	lsls	r0, r3, #29
 8012a3c:	d512      	bpl.n	8012a64 <__swsetup_r+0x5c>
 8012a3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a40:	b141      	cbz	r1, 8012a54 <__swsetup_r+0x4c>
 8012a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a46:	4299      	cmp	r1, r3
 8012a48:	d002      	beq.n	8012a50 <__swsetup_r+0x48>
 8012a4a:	4628      	mov	r0, r5
 8012a4c:	f7ff fae2 	bl	8012014 <_free_r>
 8012a50:	2300      	movs	r3, #0
 8012a52:	6363      	str	r3, [r4, #52]	; 0x34
 8012a54:	89a3      	ldrh	r3, [r4, #12]
 8012a56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012a5a:	81a3      	strh	r3, [r4, #12]
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	6063      	str	r3, [r4, #4]
 8012a60:	6923      	ldr	r3, [r4, #16]
 8012a62:	6023      	str	r3, [r4, #0]
 8012a64:	89a3      	ldrh	r3, [r4, #12]
 8012a66:	f043 0308 	orr.w	r3, r3, #8
 8012a6a:	81a3      	strh	r3, [r4, #12]
 8012a6c:	6923      	ldr	r3, [r4, #16]
 8012a6e:	b94b      	cbnz	r3, 8012a84 <__swsetup_r+0x7c>
 8012a70:	89a3      	ldrh	r3, [r4, #12]
 8012a72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a7a:	d003      	beq.n	8012a84 <__swsetup_r+0x7c>
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	4628      	mov	r0, r5
 8012a80:	f000 f840 	bl	8012b04 <__smakebuf_r>
 8012a84:	89a0      	ldrh	r0, [r4, #12]
 8012a86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a8a:	f010 0301 	ands.w	r3, r0, #1
 8012a8e:	d00a      	beq.n	8012aa6 <__swsetup_r+0x9e>
 8012a90:	2300      	movs	r3, #0
 8012a92:	60a3      	str	r3, [r4, #8]
 8012a94:	6963      	ldr	r3, [r4, #20]
 8012a96:	425b      	negs	r3, r3
 8012a98:	61a3      	str	r3, [r4, #24]
 8012a9a:	6923      	ldr	r3, [r4, #16]
 8012a9c:	b943      	cbnz	r3, 8012ab0 <__swsetup_r+0xa8>
 8012a9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012aa2:	d1c4      	bne.n	8012a2e <__swsetup_r+0x26>
 8012aa4:	bd38      	pop	{r3, r4, r5, pc}
 8012aa6:	0781      	lsls	r1, r0, #30
 8012aa8:	bf58      	it	pl
 8012aaa:	6963      	ldrpl	r3, [r4, #20]
 8012aac:	60a3      	str	r3, [r4, #8]
 8012aae:	e7f4      	b.n	8012a9a <__swsetup_r+0x92>
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	e7f7      	b.n	8012aa4 <__swsetup_r+0x9c>
 8012ab4:	200000fc 	.word	0x200000fc

08012ab8 <__swhatbuf_r>:
 8012ab8:	b570      	push	{r4, r5, r6, lr}
 8012aba:	460c      	mov	r4, r1
 8012abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ac0:	2900      	cmp	r1, #0
 8012ac2:	b096      	sub	sp, #88	; 0x58
 8012ac4:	4615      	mov	r5, r2
 8012ac6:	461e      	mov	r6, r3
 8012ac8:	da0d      	bge.n	8012ae6 <__swhatbuf_r+0x2e>
 8012aca:	89a3      	ldrh	r3, [r4, #12]
 8012acc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012ad0:	f04f 0100 	mov.w	r1, #0
 8012ad4:	bf0c      	ite	eq
 8012ad6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012ada:	2340      	movne	r3, #64	; 0x40
 8012adc:	2000      	movs	r0, #0
 8012ade:	6031      	str	r1, [r6, #0]
 8012ae0:	602b      	str	r3, [r5, #0]
 8012ae2:	b016      	add	sp, #88	; 0x58
 8012ae4:	bd70      	pop	{r4, r5, r6, pc}
 8012ae6:	466a      	mov	r2, sp
 8012ae8:	f000 f858 	bl	8012b9c <_fstat_r>
 8012aec:	2800      	cmp	r0, #0
 8012aee:	dbec      	blt.n	8012aca <__swhatbuf_r+0x12>
 8012af0:	9901      	ldr	r1, [sp, #4]
 8012af2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012af6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012afa:	4259      	negs	r1, r3
 8012afc:	4159      	adcs	r1, r3
 8012afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b02:	e7eb      	b.n	8012adc <__swhatbuf_r+0x24>

08012b04 <__smakebuf_r>:
 8012b04:	898b      	ldrh	r3, [r1, #12]
 8012b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b08:	079d      	lsls	r5, r3, #30
 8012b0a:	4606      	mov	r6, r0
 8012b0c:	460c      	mov	r4, r1
 8012b0e:	d507      	bpl.n	8012b20 <__smakebuf_r+0x1c>
 8012b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b14:	6023      	str	r3, [r4, #0]
 8012b16:	6123      	str	r3, [r4, #16]
 8012b18:	2301      	movs	r3, #1
 8012b1a:	6163      	str	r3, [r4, #20]
 8012b1c:	b002      	add	sp, #8
 8012b1e:	bd70      	pop	{r4, r5, r6, pc}
 8012b20:	ab01      	add	r3, sp, #4
 8012b22:	466a      	mov	r2, sp
 8012b24:	f7ff ffc8 	bl	8012ab8 <__swhatbuf_r>
 8012b28:	9900      	ldr	r1, [sp, #0]
 8012b2a:	4605      	mov	r5, r0
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	f7ff fc21 	bl	8012374 <_malloc_r>
 8012b32:	b948      	cbnz	r0, 8012b48 <__smakebuf_r+0x44>
 8012b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b38:	059a      	lsls	r2, r3, #22
 8012b3a:	d4ef      	bmi.n	8012b1c <__smakebuf_r+0x18>
 8012b3c:	f023 0303 	bic.w	r3, r3, #3
 8012b40:	f043 0302 	orr.w	r3, r3, #2
 8012b44:	81a3      	strh	r3, [r4, #12]
 8012b46:	e7e3      	b.n	8012b10 <__smakebuf_r+0xc>
 8012b48:	89a3      	ldrh	r3, [r4, #12]
 8012b4a:	6020      	str	r0, [r4, #0]
 8012b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b50:	81a3      	strh	r3, [r4, #12]
 8012b52:	9b00      	ldr	r3, [sp, #0]
 8012b54:	6163      	str	r3, [r4, #20]
 8012b56:	9b01      	ldr	r3, [sp, #4]
 8012b58:	6120      	str	r0, [r4, #16]
 8012b5a:	b15b      	cbz	r3, 8012b74 <__smakebuf_r+0x70>
 8012b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b60:	4630      	mov	r0, r6
 8012b62:	f000 f82d 	bl	8012bc0 <_isatty_r>
 8012b66:	b128      	cbz	r0, 8012b74 <__smakebuf_r+0x70>
 8012b68:	89a3      	ldrh	r3, [r4, #12]
 8012b6a:	f023 0303 	bic.w	r3, r3, #3
 8012b6e:	f043 0301 	orr.w	r3, r3, #1
 8012b72:	81a3      	strh	r3, [r4, #12]
 8012b74:	89a3      	ldrh	r3, [r4, #12]
 8012b76:	431d      	orrs	r5, r3
 8012b78:	81a5      	strh	r5, [r4, #12]
 8012b7a:	e7cf      	b.n	8012b1c <__smakebuf_r+0x18>

08012b7c <_close_r>:
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	4d06      	ldr	r5, [pc, #24]	; (8012b98 <_close_r+0x1c>)
 8012b80:	2300      	movs	r3, #0
 8012b82:	4604      	mov	r4, r0
 8012b84:	4608      	mov	r0, r1
 8012b86:	602b      	str	r3, [r5, #0]
 8012b88:	f7ef ffad 	bl	8002ae6 <_close>
 8012b8c:	1c43      	adds	r3, r0, #1
 8012b8e:	d102      	bne.n	8012b96 <_close_r+0x1a>
 8012b90:	682b      	ldr	r3, [r5, #0]
 8012b92:	b103      	cbz	r3, 8012b96 <_close_r+0x1a>
 8012b94:	6023      	str	r3, [r4, #0]
 8012b96:	bd38      	pop	{r3, r4, r5, pc}
 8012b98:	20006b98 	.word	0x20006b98

08012b9c <_fstat_r>:
 8012b9c:	b538      	push	{r3, r4, r5, lr}
 8012b9e:	4d07      	ldr	r5, [pc, #28]	; (8012bbc <_fstat_r+0x20>)
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	4604      	mov	r4, r0
 8012ba4:	4608      	mov	r0, r1
 8012ba6:	4611      	mov	r1, r2
 8012ba8:	602b      	str	r3, [r5, #0]
 8012baa:	f7ef ffa8 	bl	8002afe <_fstat>
 8012bae:	1c43      	adds	r3, r0, #1
 8012bb0:	d102      	bne.n	8012bb8 <_fstat_r+0x1c>
 8012bb2:	682b      	ldr	r3, [r5, #0]
 8012bb4:	b103      	cbz	r3, 8012bb8 <_fstat_r+0x1c>
 8012bb6:	6023      	str	r3, [r4, #0]
 8012bb8:	bd38      	pop	{r3, r4, r5, pc}
 8012bba:	bf00      	nop
 8012bbc:	20006b98 	.word	0x20006b98

08012bc0 <_isatty_r>:
 8012bc0:	b538      	push	{r3, r4, r5, lr}
 8012bc2:	4d06      	ldr	r5, [pc, #24]	; (8012bdc <_isatty_r+0x1c>)
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	4608      	mov	r0, r1
 8012bca:	602b      	str	r3, [r5, #0]
 8012bcc:	f7ef ffa7 	bl	8002b1e <_isatty>
 8012bd0:	1c43      	adds	r3, r0, #1
 8012bd2:	d102      	bne.n	8012bda <_isatty_r+0x1a>
 8012bd4:	682b      	ldr	r3, [r5, #0]
 8012bd6:	b103      	cbz	r3, 8012bda <_isatty_r+0x1a>
 8012bd8:	6023      	str	r3, [r4, #0]
 8012bda:	bd38      	pop	{r3, r4, r5, pc}
 8012bdc:	20006b98 	.word	0x20006b98

08012be0 <_lseek_r>:
 8012be0:	b538      	push	{r3, r4, r5, lr}
 8012be2:	4d07      	ldr	r5, [pc, #28]	; (8012c00 <_lseek_r+0x20>)
 8012be4:	4604      	mov	r4, r0
 8012be6:	4608      	mov	r0, r1
 8012be8:	4611      	mov	r1, r2
 8012bea:	2200      	movs	r2, #0
 8012bec:	602a      	str	r2, [r5, #0]
 8012bee:	461a      	mov	r2, r3
 8012bf0:	f7ef ffa0 	bl	8002b34 <_lseek>
 8012bf4:	1c43      	adds	r3, r0, #1
 8012bf6:	d102      	bne.n	8012bfe <_lseek_r+0x1e>
 8012bf8:	682b      	ldr	r3, [r5, #0]
 8012bfa:	b103      	cbz	r3, 8012bfe <_lseek_r+0x1e>
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	bd38      	pop	{r3, r4, r5, pc}
 8012c00:	20006b98 	.word	0x20006b98

08012c04 <_read_r>:
 8012c04:	b538      	push	{r3, r4, r5, lr}
 8012c06:	4d07      	ldr	r5, [pc, #28]	; (8012c24 <_read_r+0x20>)
 8012c08:	4604      	mov	r4, r0
 8012c0a:	4608      	mov	r0, r1
 8012c0c:	4611      	mov	r1, r2
 8012c0e:	2200      	movs	r2, #0
 8012c10:	602a      	str	r2, [r5, #0]
 8012c12:	461a      	mov	r2, r3
 8012c14:	f7ef ff2e 	bl	8002a74 <_read>
 8012c18:	1c43      	adds	r3, r0, #1
 8012c1a:	d102      	bne.n	8012c22 <_read_r+0x1e>
 8012c1c:	682b      	ldr	r3, [r5, #0]
 8012c1e:	b103      	cbz	r3, 8012c22 <_read_r+0x1e>
 8012c20:	6023      	str	r3, [r4, #0]
 8012c22:	bd38      	pop	{r3, r4, r5, pc}
 8012c24:	20006b98 	.word	0x20006b98

08012c28 <_sbrk_r>:
 8012c28:	b538      	push	{r3, r4, r5, lr}
 8012c2a:	4d06      	ldr	r5, [pc, #24]	; (8012c44 <_sbrk_r+0x1c>)
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	4604      	mov	r4, r0
 8012c30:	4608      	mov	r0, r1
 8012c32:	602b      	str	r3, [r5, #0]
 8012c34:	f7ef ff8c 	bl	8002b50 <_sbrk>
 8012c38:	1c43      	adds	r3, r0, #1
 8012c3a:	d102      	bne.n	8012c42 <_sbrk_r+0x1a>
 8012c3c:	682b      	ldr	r3, [r5, #0]
 8012c3e:	b103      	cbz	r3, 8012c42 <_sbrk_r+0x1a>
 8012c40:	6023      	str	r3, [r4, #0]
 8012c42:	bd38      	pop	{r3, r4, r5, pc}
 8012c44:	20006b98 	.word	0x20006b98

08012c48 <_write_r>:
 8012c48:	b538      	push	{r3, r4, r5, lr}
 8012c4a:	4d07      	ldr	r5, [pc, #28]	; (8012c68 <_write_r+0x20>)
 8012c4c:	4604      	mov	r4, r0
 8012c4e:	4608      	mov	r0, r1
 8012c50:	4611      	mov	r1, r2
 8012c52:	2200      	movs	r2, #0
 8012c54:	602a      	str	r2, [r5, #0]
 8012c56:	461a      	mov	r2, r3
 8012c58:	f7ef ff29 	bl	8002aae <_write>
 8012c5c:	1c43      	adds	r3, r0, #1
 8012c5e:	d102      	bne.n	8012c66 <_write_r+0x1e>
 8012c60:	682b      	ldr	r3, [r5, #0]
 8012c62:	b103      	cbz	r3, 8012c66 <_write_r+0x1e>
 8012c64:	6023      	str	r3, [r4, #0]
 8012c66:	bd38      	pop	{r3, r4, r5, pc}
 8012c68:	20006b98 	.word	0x20006b98

08012c6c <_init>:
 8012c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c6e:	bf00      	nop
 8012c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c72:	bc08      	pop	{r3}
 8012c74:	469e      	mov	lr, r3
 8012c76:	4770      	bx	lr

08012c78 <_fini>:
 8012c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c7a:	bf00      	nop
 8012c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c7e:	bc08      	pop	{r3}
 8012c80:	469e      	mov	lr, r3
 8012c82:	4770      	bx	lr
